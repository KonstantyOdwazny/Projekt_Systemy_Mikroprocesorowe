
Projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007760  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000054  08007960  08007960  00017960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079b4  080079b4  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  080079b4  080079b4  000179b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079bc  080079bc  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079bc  080079bc  000179bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079c0  080079c0  000179c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  080079c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000218  20000094  08007a58  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002ac  08007a58  000202ac  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001acec  00000000  00000000  000200c2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000344e  00000000  00000000  0003adae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001348  00000000  00000000  0003e200  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011d0  00000000  00000000  0003f548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a130  00000000  00000000  00040718  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019fa4  00000000  00000000  0006a848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102ccc  00000000  00000000  000847ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001874b8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000536c  00000000  00000000  0018750c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000094 	.word	0x20000094
 800021c:	00000000 	.word	0x00000000
 8000220:	08007948 	.word	0x08007948

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000098 	.word	0x20000098
 800023c:	08007948 	.word	0x08007948

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ee:	463b      	mov	r3, r7
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005fa:	4b21      	ldr	r3, [pc, #132]	; (8000680 <MX_ADC1_Init+0x98>)
 80005fc:	4a21      	ldr	r2, [pc, #132]	; (8000684 <MX_ADC1_Init+0x9c>)
 80005fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000600:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <MX_ADC1_Init+0x98>)
 8000602:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000606:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000608:	4b1d      	ldr	r3, [pc, #116]	; (8000680 <MX_ADC1_Init+0x98>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800060e:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <MX_ADC1_Init+0x98>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000614:	4b1a      	ldr	r3, [pc, #104]	; (8000680 <MX_ADC1_Init+0x98>)
 8000616:	2200      	movs	r2, #0
 8000618:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061a:	4b19      	ldr	r3, [pc, #100]	; (8000680 <MX_ADC1_Init+0x98>)
 800061c:	2200      	movs	r2, #0
 800061e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000622:	4b17      	ldr	r3, [pc, #92]	; (8000680 <MX_ADC1_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000628:	4b15      	ldr	r3, [pc, #84]	; (8000680 <MX_ADC1_Init+0x98>)
 800062a:	4a17      	ldr	r2, [pc, #92]	; (8000688 <MX_ADC1_Init+0xa0>)
 800062c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800062e:	4b14      	ldr	r3, [pc, #80]	; (8000680 <MX_ADC1_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000634:	4b12      	ldr	r3, [pc, #72]	; (8000680 <MX_ADC1_Init+0x98>)
 8000636:	2201      	movs	r2, #1
 8000638:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800063a:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_ADC1_Init+0x98>)
 800063c:	2200      	movs	r2, #0
 800063e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000642:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MX_ADC1_Init+0x98>)
 8000644:	2201      	movs	r2, #1
 8000646:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000648:	480d      	ldr	r0, [pc, #52]	; (8000680 <MX_ADC1_Init+0x98>)
 800064a:	f000 ff47 	bl	80014dc <HAL_ADC_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000654:	f000 fbf6 	bl	8000e44 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000658:	2303      	movs	r3, #3
 800065a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800065c:	2301      	movs	r3, #1
 800065e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000660:	2307      	movs	r3, #7
 8000662:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000664:	463b      	mov	r3, r7
 8000666:	4619      	mov	r1, r3
 8000668:	4805      	ldr	r0, [pc, #20]	; (8000680 <MX_ADC1_Init+0x98>)
 800066a:	f001 f8a9 	bl	80017c0 <HAL_ADC_ConfigChannel>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000674:	f000 fbe6 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000678:	bf00      	nop
 800067a:	3710      	adds	r7, #16
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	200000d4 	.word	0x200000d4
 8000684:	40012000 	.word	0x40012000
 8000688:	0f000001 	.word	0x0f000001

0800068c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08a      	sub	sp, #40	; 0x28
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000694:	f107 0314 	add.w	r3, r7, #20
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a19      	ldr	r2, [pc, #100]	; (8000710 <HAL_ADC_MspInit+0x84>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d12b      	bne.n	8000706 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006ae:	4b19      	ldr	r3, [pc, #100]	; (8000714 <HAL_ADC_MspInit+0x88>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b2:	4a18      	ldr	r2, [pc, #96]	; (8000714 <HAL_ADC_MspInit+0x88>)
 80006b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006b8:	6453      	str	r3, [r2, #68]	; 0x44
 80006ba:	4b16      	ldr	r3, [pc, #88]	; (8000714 <HAL_ADC_MspInit+0x88>)
 80006bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006c2:	613b      	str	r3, [r7, #16]
 80006c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c6:	4b13      	ldr	r3, [pc, #76]	; (8000714 <HAL_ADC_MspInit+0x88>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a12      	ldr	r2, [pc, #72]	; (8000714 <HAL_ADC_MspInit+0x88>)
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <HAL_ADC_MspInit+0x88>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006de:	2308      	movs	r3, #8
 80006e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006e2:	2303      	movs	r3, #3
 80006e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	4619      	mov	r1, r3
 80006f0:	4809      	ldr	r0, [pc, #36]	; (8000718 <HAL_ADC_MspInit+0x8c>)
 80006f2:	f001 fc71 	bl	8001fd8 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2100      	movs	r1, #0
 80006fa:	2012      	movs	r0, #18
 80006fc:	f001 fb95 	bl	8001e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000700:	2012      	movs	r0, #18
 8000702:	f001 fbae 	bl	8001e62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000706:	bf00      	nop
 8000708:	3728      	adds	r7, #40	; 0x28
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40012000 	.word	0x40012000
 8000714:	40023800 	.word	0x40023800
 8000718:	40020000 	.word	0x40020000

0800071c <BH1750_Init>:
 *  Created on: Nov 13, 2021
 *      Author: konst
 */
#include "bh1750.h"

void BH1750_Init(BH1750_HandleTypeDef* hbh1750, uint8_t command){
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af02      	add	r7, sp, #8
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	460b      	mov	r3, r1
 8000726:	70fb      	strb	r3, [r7, #3]
uint8_t start = BH1750_POWER_ON;
 8000728:	2301      	movs	r3, #1
 800072a:	73fb      	strb	r3, [r7, #15]
HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &start, 1, hbh1750->Timeout);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	6818      	ldr	r0, [r3, #0]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	791b      	ldrb	r3, [r3, #4]
 8000734:	b299      	uxth	r1, r3
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	689b      	ldr	r3, [r3, #8]
 800073a:	f107 020f 	add.w	r2, r7, #15
 800073e:	9300      	str	r3, [sp, #0]
 8000740:	2301      	movs	r3, #1
 8000742:	f001 fe9f 	bl	8002484 <HAL_I2C_Master_Transmit>
HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, 1,hbh1750->Timeout);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6818      	ldr	r0, [r3, #0]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	791b      	ldrb	r3, [r3, #4]
 800074e:	b299      	uxth	r1, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	689b      	ldr	r3, [r3, #8]
 8000754:	1cfa      	adds	r2, r7, #3
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	2301      	movs	r3, #1
 800075a:	f001 fe93 	bl	8002484 <HAL_I2C_Master_Transmit>
}
 800075e:	bf00      	nop
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
	...

08000768 <BH1750_ReadLux>:

// Funkcja ktora zwraca wynik w luxach dla trybu H_res_mode
float BH1750_ReadLux(BH1750_HandleTypeDef* hbh1750){
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af02      	add	r7, sp, #8
 800076e:	6078      	str	r0, [r7, #4]
float light = 0;
 8000770:	f04f 0300 	mov.w	r3, #0
 8000774:	60fb      	str	r3, [r7, #12]
uint8_t buff[2];
HAL_I2C_Master_Receive(hbh1750->I2C, hbh1750->Address, buff, 2, hbh1750->Timeout);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	6818      	ldr	r0, [r3, #0]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	791b      	ldrb	r3, [r3, #4]
 800077e:	b299      	uxth	r1, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	689b      	ldr	r3, [r3, #8]
 8000784:	f107 0208 	add.w	r2, r7, #8
 8000788:	9300      	str	r3, [sp, #0]
 800078a:	2302      	movs	r3, #2
 800078c:	f001 ff6e 	bl	800266c <HAL_I2C_Master_Receive>
light = ((buff[0] << 8) | buff[1]) / 1.2;
 8000790:	7a3b      	ldrb	r3, [r7, #8]
 8000792:	021b      	lsls	r3, r3, #8
 8000794:	7a7a      	ldrb	r2, [r7, #9]
 8000796:	4313      	orrs	r3, r2
 8000798:	ee07 3a90 	vmov	s15, r3
 800079c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80007a0:	ed9f 5b07 	vldr	d5, [pc, #28]	; 80007c0 <BH1750_ReadLux+0x58>
 80007a4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80007a8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007ac:	edc7 7a03 	vstr	s15, [r7, #12]
return light;
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	ee07 3a90 	vmov	s15, r3
}
 80007b6:	eeb0 0a67 	vmov.f32	s0, s15
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	33333333 	.word	0x33333333
 80007c4:	3ff33333 	.word	0x3ff33333

080007c8 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08c      	sub	sp, #48	; 0x30
 80007cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007de:	4b77      	ldr	r3, [pc, #476]	; (80009bc <MX_GPIO_Init+0x1f4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a76      	ldr	r2, [pc, #472]	; (80009bc <MX_GPIO_Init+0x1f4>)
 80007e4:	f043 0304 	orr.w	r3, r3, #4
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b74      	ldr	r3, [pc, #464]	; (80009bc <MX_GPIO_Init+0x1f4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0304 	and.w	r3, r3, #4
 80007f2:	61bb      	str	r3, [r7, #24]
 80007f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f6:	4b71      	ldr	r3, [pc, #452]	; (80009bc <MX_GPIO_Init+0x1f4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a70      	ldr	r2, [pc, #448]	; (80009bc <MX_GPIO_Init+0x1f4>)
 80007fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b6e      	ldr	r3, [pc, #440]	; (80009bc <MX_GPIO_Init+0x1f4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080a:	617b      	str	r3, [r7, #20]
 800080c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	4b6b      	ldr	r3, [pc, #428]	; (80009bc <MX_GPIO_Init+0x1f4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a6a      	ldr	r2, [pc, #424]	; (80009bc <MX_GPIO_Init+0x1f4>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b68      	ldr	r3, [pc, #416]	; (80009bc <MX_GPIO_Init+0x1f4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	4b65      	ldr	r3, [pc, #404]	; (80009bc <MX_GPIO_Init+0x1f4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a64      	ldr	r2, [pc, #400]	; (80009bc <MX_GPIO_Init+0x1f4>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b62      	ldr	r3, [pc, #392]	; (80009bc <MX_GPIO_Init+0x1f4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0302 	and.w	r3, r3, #2
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800083e:	4b5f      	ldr	r3, [pc, #380]	; (80009bc <MX_GPIO_Init+0x1f4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a5e      	ldr	r2, [pc, #376]	; (80009bc <MX_GPIO_Init+0x1f4>)
 8000844:	f043 0308 	orr.w	r3, r3, #8
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b5c      	ldr	r3, [pc, #368]	; (80009bc <MX_GPIO_Init+0x1f4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0308 	and.w	r3, r3, #8
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000856:	4b59      	ldr	r3, [pc, #356]	; (80009bc <MX_GPIO_Init+0x1f4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a58      	ldr	r2, [pc, #352]	; (80009bc <MX_GPIO_Init+0x1f4>)
 800085c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b56      	ldr	r3, [pc, #344]	; (80009bc <MX_GPIO_Init+0x1f4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	f244 0181 	movw	r1, #16513	; 0x4081
 8000874:	4852      	ldr	r0, [pc, #328]	; (80009c0 <MX_GPIO_Init+0x1f8>)
 8000876:	f001 fd5b 	bl	8002330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	2140      	movs	r1, #64	; 0x40
 800087e:	4851      	ldr	r0, [pc, #324]	; (80009c4 <MX_GPIO_Init+0x1fc>)
 8000880:	f001 fd56 	bl	8002330 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000884:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800088a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800088e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	4619      	mov	r1, r3
 800089a:	484b      	ldr	r0, [pc, #300]	; (80009c8 <MX_GPIO_Init+0x200>)
 800089c:	f001 fb9c 	bl	8001fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80008a0:	2332      	movs	r3, #50	; 0x32
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ac:	2303      	movs	r3, #3
 80008ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008b0:	230b      	movs	r3, #11
 80008b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	4843      	ldr	r0, [pc, #268]	; (80009c8 <MX_GPIO_Init+0x200>)
 80008bc:	f001 fb8c 	bl	8001fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80008c0:	2386      	movs	r3, #134	; 0x86
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008cc:	2303      	movs	r3, #3
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008d0:	230b      	movs	r3, #11
 80008d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	483c      	ldr	r0, [pc, #240]	; (80009cc <MX_GPIO_Init+0x204>)
 80008dc:	f001 fb7c 	bl	8001fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008e0:	f244 0381 	movw	r3, #16513	; 0x4081
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e6:	2301      	movs	r3, #1
 80008e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	4831      	ldr	r0, [pc, #196]	; (80009c0 <MX_GPIO_Init+0x1f8>)
 80008fa:	f001 fb6d 	bl	8001fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80008fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000904:	2302      	movs	r3, #2
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090c:	2303      	movs	r3, #3
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000910:	230b      	movs	r3, #11
 8000912:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	4829      	ldr	r0, [pc, #164]	; (80009c0 <MX_GPIO_Init+0x1f8>)
 800091c:	f001 fb5c 	bl	8001fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000920:	2340      	movs	r3, #64	; 0x40
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	4823      	ldr	r0, [pc, #140]	; (80009c4 <MX_GPIO_Init+0x1fc>)
 8000938:	f001 fb4e 	bl	8001fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800093c:	2380      	movs	r3, #128	; 0x80
 800093e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000940:	2300      	movs	r3, #0
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	481d      	ldr	r0, [pc, #116]	; (80009c4 <MX_GPIO_Init+0x1fc>)
 8000950:	f001 fb42 	bl	8001fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000954:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000962:	2303      	movs	r3, #3
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000966:	230a      	movs	r3, #10
 8000968:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4816      	ldr	r0, [pc, #88]	; (80009cc <MX_GPIO_Init+0x204>)
 8000972:	f001 fb31 	bl	8001fd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000976:	f44f 7300 	mov.w	r3, #512	; 0x200
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	4810      	ldr	r0, [pc, #64]	; (80009cc <MX_GPIO_Init+0x204>)
 800098c:	f001 fb24 	bl	8001fd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000990:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099e:	2303      	movs	r3, #3
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009a2:	230b      	movs	r3, #11
 80009a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_GPIO_Init+0x1fc>)
 80009ae:	f001 fb13 	bl	8001fd8 <HAL_GPIO_Init>

}
 80009b2:	bf00      	nop
 80009b4:	3730      	adds	r7, #48	; 0x30
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40020400 	.word	0x40020400
 80009c4:	40021800 	.word	0x40021800
 80009c8:	40020800 	.word	0x40020800
 80009cc:	40020000 	.word	0x40020000

080009d0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009d4:	4b1b      	ldr	r3, [pc, #108]	; (8000a44 <MX_I2C1_Init+0x74>)
 80009d6:	4a1c      	ldr	r2, [pc, #112]	; (8000a48 <MX_I2C1_Init+0x78>)
 80009d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80009da:	4b1a      	ldr	r3, [pc, #104]	; (8000a44 <MX_I2C1_Init+0x74>)
 80009dc:	4a1b      	ldr	r2, [pc, #108]	; (8000a4c <MX_I2C1_Init+0x7c>)
 80009de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009e0:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <MX_I2C1_Init+0x74>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009e6:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <MX_I2C1_Init+0x74>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009ec:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <MX_I2C1_Init+0x74>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009f2:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_I2C1_Init+0x74>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <MX_I2C1_Init+0x74>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_I2C1_Init+0x74>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_I2C1_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a0a:	480e      	ldr	r0, [pc, #56]	; (8000a44 <MX_I2C1_Init+0x74>)
 8000a0c:	f001 fcaa 	bl	8002364 <HAL_I2C_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a16:	f000 fa15 	bl	8000e44 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4809      	ldr	r0, [pc, #36]	; (8000a44 <MX_I2C1_Init+0x74>)
 8000a1e:	f002 ff07 	bl	8003830 <HAL_I2CEx_ConfigAnalogFilter>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a28:	f000 fa0c 	bl	8000e44 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_I2C1_Init+0x74>)
 8000a30:	f002 ff49 	bl	80038c6 <HAL_I2CEx_ConfigDigitalFilter>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a3a:	f000 fa03 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	2000011c 	.word	0x2000011c
 8000a48:	40005400 	.word	0x40005400
 8000a4c:	20404768 	.word	0x20404768

08000a50 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	; 0x28
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a1f      	ldr	r2, [pc, #124]	; (8000aec <HAL_I2C_MspInit+0x9c>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d138      	bne.n	8000ae4 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a72:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <HAL_I2C_MspInit+0xa0>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a1e      	ldr	r2, [pc, #120]	; (8000af0 <HAL_I2C_MspInit+0xa0>)
 8000a78:	f043 0302 	orr.w	r3, r3, #2
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b1c      	ldr	r3, [pc, #112]	; (8000af0 <HAL_I2C_MspInit+0xa0>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0302 	and.w	r3, r3, #2
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a90:	2312      	movs	r3, #18
 8000a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a9c:	2304      	movs	r3, #4
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4813      	ldr	r0, [pc, #76]	; (8000af4 <HAL_I2C_MspInit+0xa4>)
 8000aa8:	f001 fa96 	bl	8001fd8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aac:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <HAL_I2C_MspInit+0xa0>)
 8000aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab0:	4a0f      	ldr	r2, [pc, #60]	; (8000af0 <HAL_I2C_MspInit+0xa0>)
 8000ab2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ab6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab8:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <HAL_I2C_MspInit+0xa0>)
 8000aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	201f      	movs	r0, #31
 8000aca:	f001 f9ae 	bl	8001e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000ace:	201f      	movs	r0, #31
 8000ad0:	f001 f9c7 	bl	8001e62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	2020      	movs	r0, #32
 8000ada:	f001 f9a6 	bl	8001e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000ade:	2020      	movs	r0, #32
 8000ae0:	f001 f9bf 	bl	8001e62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ae4:	bf00      	nop
 8000ae6:	3728      	adds	r7, #40	; 0x28
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40005400 	.word	0x40005400
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40020400 	.word	0x40020400

08000af8 <HAL_TIM_PeriodElapsedCallback>:
      float LightIntensity = -0.1;
      int light = -1;
      char komunikat[20];

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8000b00:	687b      	ldr	r3, [r7, #4]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b08:	f040 80b5 	bne.w	8000c76 <HAL_TIM_PeriodElapsedCallback+0x17e>
//		{
//			pulse=0;
//			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,pulse);
//		}

		LightIntensity = BH1750_ReadLux(&hbh1750_1);
 8000b0c:	485c      	ldr	r0, [pc, #368]	; (8000c80 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8000b0e:	f7ff fe2b 	bl	8000768 <BH1750_ReadLux>
 8000b12:	eef0 7a40 	vmov.f32	s15, s0
 8000b16:	4b5b      	ldr	r3, [pc, #364]	; (8000c84 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000b18:	edc3 7a00 	vstr	s15, [r3]
		light = LightIntensity*10;
 8000b1c:	4b59      	ldr	r3, [pc, #356]	; (8000c84 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000b1e:	edd3 7a00 	vldr	s15, [r3]
 8000b22:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000b26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000b2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b2e:	ee17 2a90 	vmov	r2, s15
 8000b32:	4b55      	ldr	r3, [pc, #340]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000b34:	601a      	str	r2, [r3, #0]
		sprintf(komunikat,"%d.%d\r\n",light/10,light%10);
 8000b36:	4b54      	ldr	r3, [pc, #336]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	4a54      	ldr	r2, [pc, #336]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000b3c:	fb82 1203 	smull	r1, r2, r2, r3
 8000b40:	1092      	asrs	r2, r2, #2
 8000b42:	17db      	asrs	r3, r3, #31
 8000b44:	1ad0      	subs	r0, r2, r3
 8000b46:	4b50      	ldr	r3, [pc, #320]	; (8000c88 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8000b48:	681a      	ldr	r2, [r3, #0]
 8000b4a:	4b50      	ldr	r3, [pc, #320]	; (8000c8c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8000b4c:	fb83 1302 	smull	r1, r3, r3, r2
 8000b50:	1099      	asrs	r1, r3, #2
 8000b52:	17d3      	asrs	r3, r2, #31
 8000b54:	1ac9      	subs	r1, r1, r3
 8000b56:	460b      	mov	r3, r1
 8000b58:	009b      	lsls	r3, r3, #2
 8000b5a:	440b      	add	r3, r1
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	1ad1      	subs	r1, r2, r3
 8000b60:	460b      	mov	r3, r1
 8000b62:	4602      	mov	r2, r0
 8000b64:	494a      	ldr	r1, [pc, #296]	; (8000c90 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8000b66:	484b      	ldr	r0, [pc, #300]	; (8000c94 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000b68:	f006 fac0 	bl	80070ec <siprintf>
		HAL_UART_Transmit(&huart3, komunikat, strlen(komunikat), 1000);
 8000b6c:	4849      	ldr	r0, [pc, #292]	; (8000c94 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000b6e:	f7ff fb67 	bl	8000240 <strlen>
 8000b72:	4603      	mov	r3, r0
 8000b74:	b29a      	uxth	r2, r3
 8000b76:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b7a:	4946      	ldr	r1, [pc, #280]	; (8000c94 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8000b7c:	4846      	ldr	r0, [pc, #280]	; (8000c98 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8000b7e:	f005 fa31 	bl	8005fe4 <HAL_UART_Transmit>

		e = y_ref - LightIntensity;
 8000b82:	4b46      	ldr	r3, [pc, #280]	; (8000c9c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000b84:	ed93 7a00 	vldr	s14, [r3]
 8000b88:	4b3e      	ldr	r3, [pc, #248]	; (8000c84 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8000b8a:	edd3 7a00 	vldr	s15, [r3]
 8000b8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000b92:	4b43      	ldr	r3, [pc, #268]	; (8000ca0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000b94:	edc3 7a00 	vstr	s15, [r3]
		e_int += Ki*Ts*e;
 8000b98:	4b42      	ldr	r3, [pc, #264]	; (8000ca4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000b9a:	ed93 7a00 	vldr	s14, [r3]
 8000b9e:	4b42      	ldr	r3, [pc, #264]	; (8000ca8 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000ba0:	edd3 7a00 	vldr	s15, [r3]
 8000ba4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ba8:	4b3d      	ldr	r3, [pc, #244]	; (8000ca0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000baa:	edd3 7a00 	vldr	s15, [r3]
 8000bae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000bb2:	4b3e      	ldr	r3, [pc, #248]	; (8000cac <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000bb4:	edd3 7a00 	vldr	s15, [r3]
 8000bb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000bbc:	4b3b      	ldr	r3, [pc, #236]	; (8000cac <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000bbe:	edc3 7a00 	vstr	s15, [r3]
		u = e_int;
 8000bc2:	4b3a      	ldr	r3, [pc, #232]	; (8000cac <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	4a3a      	ldr	r2, [pc, #232]	; (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000bc8:	6013      	str	r3, [r2, #0]

		if(u > limitup)
 8000bca:	4b39      	ldr	r3, [pc, #228]	; (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000bcc:	ed93 7a00 	vldr	s14, [r3]
 8000bd0:	4b38      	ldr	r3, [pc, #224]	; (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000bd2:	edd3 7a00 	vldr	s15, [r3]
 8000bd6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bde:	dd04      	ble.n	8000bea <HAL_TIM_PeriodElapsedCallback+0xf2>
		{
		  u_sat = limitup;
 8000be0:	4b34      	ldr	r3, [pc, #208]	; (8000cb4 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	4a34      	ldr	r2, [pc, #208]	; (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000be6:	6013      	str	r3, [r2, #0]
 8000be8:	e013      	b.n	8000c12 <HAL_TIM_PeriodElapsedCallback+0x11a>
		}
		else if(u < limitdown)
 8000bea:	4b31      	ldr	r3, [pc, #196]	; (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000bec:	ed93 7a00 	vldr	s14, [r3]
 8000bf0:	4b32      	ldr	r3, [pc, #200]	; (8000cbc <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000bf2:	edd3 7a00 	vldr	s15, [r3]
 8000bf6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000bfa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bfe:	d504      	bpl.n	8000c0a <HAL_TIM_PeriodElapsedCallback+0x112>
		{
		  u_sat = limitdown;
 8000c00:	4b2e      	ldr	r3, [pc, #184]	; (8000cbc <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a2c      	ldr	r2, [pc, #176]	; (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000c06:	6013      	str	r3, [r2, #0]
 8000c08:	e003      	b.n	8000c12 <HAL_TIM_PeriodElapsedCallback+0x11a>
		}
		else
		{
		  u_sat = u;
 8000c0a:	4b29      	ldr	r3, [pc, #164]	; (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4a2a      	ldr	r2, [pc, #168]	; (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000c10:	6013      	str	r3, [r2, #0]
		}

		if(u!=u_sat)
 8000c12:	4b27      	ldr	r3, [pc, #156]	; (8000cb0 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000c14:	ed93 7a00 	vldr	s14, [r3]
 8000c18:	4b27      	ldr	r3, [pc, #156]	; (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000c1a:	edd3 7a00 	vldr	s15, [r3]
 8000c1e:	eeb4 7a67 	vcmp.f32	s14, s15
 8000c22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c26:	d014      	beq.n	8000c52 <HAL_TIM_PeriodElapsedCallback+0x15a>
		{
		  e_int -=Ki*Ts*e;
 8000c28:	4b20      	ldr	r3, [pc, #128]	; (8000cac <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000c2a:	ed93 7a00 	vldr	s14, [r3]
 8000c2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000c30:	edd3 6a00 	vldr	s13, [r3]
 8000c34:	4b1c      	ldr	r3, [pc, #112]	; (8000ca8 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000c36:	edd3 7a00 	vldr	s15, [r3]
 8000c3a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000c3e:	4b18      	ldr	r3, [pc, #96]	; (8000ca0 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000c40:	edd3 7a00 	vldr	s15, [r3]
 8000c44:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c4c:	4b17      	ldr	r3, [pc, #92]	; (8000cac <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000c4e:	edc3 7a00 	vstr	s15, [r3]
		}

		duty = u_sat;
 8000c52:	4b19      	ldr	r3, [pc, #100]	; (8000cb8 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	4a1a      	ldr	r2, [pc, #104]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000c58:	6013      	str	r3, [r2, #0]
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,(uint32_t)(duty*10));
 8000c5a:	4b19      	ldr	r3, [pc, #100]	; (8000cc0 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000c5c:	edd3 7a00 	vldr	s15, [r3]
 8000c60:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000c64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c68:	4b16      	ldr	r3, [pc, #88]	; (8000cc4 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000c70:	ee17 2a90 	vmov	r2, s15
 8000c74:	639a      	str	r2, [r3, #56]	; 0x38
	}

}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000010 	.word	0x20000010
 8000c84:	2000001c 	.word	0x2000001c
 8000c88:	20000020 	.word	0x20000020
 8000c8c:	66666667 	.word	0x66666667
 8000c90:	08007960 	.word	0x08007960
 8000c94:	20000168 	.word	0x20000168
 8000c98:	20000214 	.word	0x20000214
 8000c9c:	20000000 	.word	0x20000000
 8000ca0:	200000b0 	.word	0x200000b0
 8000ca4:	20000004 	.word	0x20000004
 8000ca8:	20000008 	.word	0x20000008
 8000cac:	200000b4 	.word	0x200000b4
 8000cb0:	200000b8 	.word	0x200000b8
 8000cb4:	2000000c 	.word	0x2000000c
 8000cb8:	200000bc 	.word	0x200000bc
 8000cbc:	200000c0 	.word	0x200000c0
 8000cc0:	200000c4 	.word	0x200000c4
 8000cc4:	2000017c 	.word	0x2000017c

08000cc8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b082      	sub	sp, #8
 8000ccc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cce:	f000 fba8 	bl	8001422 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cd2:	f000 f821 	bl	8000d18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cd6:	f7ff fd77 	bl	80007c8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000cda:	f000 fafd 	bl	80012d8 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000cde:	f7ff fc83 	bl	80005e8 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000ce2:	f000 f9d5 	bl	8001090 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000ce6:	f000 f985 	bl	8000ff4 <MX_TIM2_Init>
  MX_I2C1_Init();
 8000cea:	f7ff fe71 	bl	80009d0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  //Inicjalizacja czujnika z wybranym trybem pracy
  uint8_t TrybPracy = BH1750_CONTINOUS_L_RES_MODE;
 8000cee:	2313      	movs	r3, #19
 8000cf0:	71fb      	strb	r3, [r7, #7]
  BH1750_Init(&hbh1750_1, TrybPracy);
 8000cf2:	79fb      	ldrb	r3, [r7, #7]
 8000cf4:	4619      	mov	r1, r3
 8000cf6:	4805      	ldr	r0, [pc, #20]	; (8000d0c <main+0x44>)
 8000cf8:	f7ff fd10 	bl	800071c <BH1750_Init>
//  float LightIntensity = -0.1;




      HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8000cfc:	2104      	movs	r1, #4
 8000cfe:	4804      	ldr	r0, [pc, #16]	; (8000d10 <main+0x48>)
 8000d00:	f004 f898 	bl	8004e34 <HAL_TIM_PWM_Start>
      HAL_TIM_Base_Start_IT(&htim2);
 8000d04:	4803      	ldr	r0, [pc, #12]	; (8000d14 <main+0x4c>)
 8000d06:	f003 ffbb 	bl	8004c80 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d0a:	e7fe      	b.n	8000d0a <main+0x42>
 8000d0c:	20000010 	.word	0x20000010
 8000d10:	2000017c 	.word	0x2000017c
 8000d14:	200001c8 	.word	0x200001c8

08000d18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b0b8      	sub	sp, #224	; 0xe0
 8000d1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d1e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000d22:	2234      	movs	r2, #52	; 0x34
 8000d24:	2100      	movs	r1, #0
 8000d26:	4618      	mov	r0, r3
 8000d28:	f006 f9d8 	bl	80070dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d2c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
 8000d34:	605a      	str	r2, [r3, #4]
 8000d36:	609a      	str	r2, [r3, #8]
 8000d38:	60da      	str	r2, [r3, #12]
 8000d3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d3c:	f107 0308 	add.w	r3, r7, #8
 8000d40:	2290      	movs	r2, #144	; 0x90
 8000d42:	2100      	movs	r1, #0
 8000d44:	4618      	mov	r0, r3
 8000d46:	f006 f9c9 	bl	80070dc <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000d4a:	f002 fe09 	bl	8003960 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d4e:	4b3b      	ldr	r3, [pc, #236]	; (8000e3c <SystemClock_Config+0x124>)
 8000d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d52:	4a3a      	ldr	r2, [pc, #232]	; (8000e3c <SystemClock_Config+0x124>)
 8000d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d58:	6413      	str	r3, [r2, #64]	; 0x40
 8000d5a:	4b38      	ldr	r3, [pc, #224]	; (8000e3c <SystemClock_Config+0x124>)
 8000d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d62:	607b      	str	r3, [r7, #4]
 8000d64:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d66:	4b36      	ldr	r3, [pc, #216]	; (8000e40 <SystemClock_Config+0x128>)
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	4a35      	ldr	r2, [pc, #212]	; (8000e40 <SystemClock_Config+0x128>)
 8000d6c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000d70:	6013      	str	r3, [r2, #0]
 8000d72:	4b33      	ldr	r3, [pc, #204]	; (8000e40 <SystemClock_Config+0x128>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d7a:	603b      	str	r3, [r7, #0]
 8000d7c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d84:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d88:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d92:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d96:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d9a:	2304      	movs	r3, #4
 8000d9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000da0:	23d8      	movs	r3, #216	; 0xd8
 8000da2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000da6:	2302      	movs	r3, #2
 8000da8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000dac:	2304      	movs	r3, #4
 8000dae:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000db2:	2302      	movs	r3, #2
 8000db4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000db8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f002 fe2f 	bl	8003a20 <HAL_RCC_OscConfig>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000dc8:	f000 f83c 	bl	8000e44 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000dcc:	f002 fdd8 	bl	8003980 <HAL_PWREx_EnableOverDrive>
 8000dd0:	4603      	mov	r3, r0
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	d001      	beq.n	8000dda <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000dd6:	f000 f835 	bl	8000e44 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dda:	230f      	movs	r3, #15
 8000ddc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000de0:	2302      	movs	r3, #2
 8000de2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000de6:	2300      	movs	r3, #0
 8000de8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000dec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000df0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000df4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000df8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000dfc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000e00:	2107      	movs	r1, #7
 8000e02:	4618      	mov	r0, r3
 8000e04:	f003 f8ba 	bl	8003f7c <HAL_RCC_ClockConfig>
 8000e08:	4603      	mov	r3, r0
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d001      	beq.n	8000e12 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8000e0e:	f000 f819 	bl	8000e44 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
 8000e12:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 8000e16:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000e20:	f107 0308 	add.w	r3, r7, #8
 8000e24:	4618      	mov	r0, r3
 8000e26:	f003 faab 	bl	8004380 <HAL_RCCEx_PeriphCLKConfig>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8000e30:	f000 f808 	bl	8000e44 <Error_Handler>
  }
}
 8000e34:	bf00      	nop
 8000e36:	37e0      	adds	r7, #224	; 0xe0
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	40023800 	.word	0x40023800
 8000e40:	40007000 	.word	0x40007000

08000e44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e48:	b672      	cpsid	i
}
 8000e4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e4c:	e7fe      	b.n	8000e4c <Error_Handler+0x8>
	...

08000e50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000e56:	4b0f      	ldr	r3, [pc, #60]	; (8000e94 <HAL_MspInit+0x44>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	4a0e      	ldr	r2, [pc, #56]	; (8000e94 <HAL_MspInit+0x44>)
 8000e5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e60:	6413      	str	r3, [r2, #64]	; 0x40
 8000e62:	4b0c      	ldr	r3, [pc, #48]	; (8000e94 <HAL_MspInit+0x44>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e6a:	607b      	str	r3, [r7, #4]
 8000e6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e6e:	4b09      	ldr	r3, [pc, #36]	; (8000e94 <HAL_MspInit+0x44>)
 8000e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e72:	4a08      	ldr	r2, [pc, #32]	; (8000e94 <HAL_MspInit+0x44>)
 8000e74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e78:	6453      	str	r3, [r2, #68]	; 0x44
 8000e7a:	4b06      	ldr	r3, [pc, #24]	; (8000e94 <HAL_MspInit+0x44>)
 8000e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e82:	603b      	str	r3, [r7, #0]
 8000e84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e86:	bf00      	nop
 8000e88:	370c      	adds	r7, #12
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	40023800 	.word	0x40023800

08000e98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e98:	b480      	push	{r7}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <NMI_Handler+0x4>

08000e9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ea2:	e7fe      	b.n	8000ea2 <HardFault_Handler+0x4>

08000ea4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea8:	e7fe      	b.n	8000ea8 <MemManage_Handler+0x4>

08000eaa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eaa:	b480      	push	{r7}
 8000eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eae:	e7fe      	b.n	8000eae <BusFault_Handler+0x4>

08000eb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <UsageFault_Handler+0x4>

08000eb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb6:	b480      	push	{r7}
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eba:	bf00      	nop
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec2:	4770      	bx	lr

08000ec4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec4:	b480      	push	{r7}
 8000ec6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec8:	bf00      	nop
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed6:	bf00      	nop
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ee4:	f000 fada 	bl	800149c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	bd80      	pop	{r7, pc}

08000eec <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000ef0:	4802      	ldr	r0, [pc, #8]	; (8000efc <ADC_IRQHandler+0x10>)
 8000ef2:	f000 fb37 	bl	8001564 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	200000d4 	.word	0x200000d4

08000f00 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000f04:	4802      	ldr	r0, [pc, #8]	; (8000f10 <TIM2_IRQHandler+0x10>)
 8000f06:	f004 f88f 	bl	8005028 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	200001c8 	.word	0x200001c8

08000f14 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000f18:	4802      	ldr	r0, [pc, #8]	; (8000f24 <TIM3_IRQHandler+0x10>)
 8000f1a:	f004 f885 	bl	8005028 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000f1e:	bf00      	nop
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	2000017c 	.word	0x2000017c

08000f28 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8000f2c:	4802      	ldr	r0, [pc, #8]	; (8000f38 <I2C1_EV_IRQHandler+0x10>)
 8000f2e:	f001 fc93 	bl	8002858 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	2000011c 	.word	0x2000011c

08000f3c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8000f40:	4802      	ldr	r0, [pc, #8]	; (8000f4c <I2C1_ER_IRQHandler+0x10>)
 8000f42:	f001 fca3 	bl	800288c <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	2000011c 	.word	0x2000011c

08000f50 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000f54:	4802      	ldr	r0, [pc, #8]	; (8000f60 <USART3_IRQHandler+0x10>)
 8000f56:	f005 f8d9 	bl	800610c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20000214 	.word	0x20000214

08000f64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f6c:	4a14      	ldr	r2, [pc, #80]	; (8000fc0 <_sbrk+0x5c>)
 8000f6e:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <_sbrk+0x60>)
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f78:	4b13      	ldr	r3, [pc, #76]	; (8000fc8 <_sbrk+0x64>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d102      	bne.n	8000f86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f80:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <_sbrk+0x64>)
 8000f82:	4a12      	ldr	r2, [pc, #72]	; (8000fcc <_sbrk+0x68>)
 8000f84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f86:	4b10      	ldr	r3, [pc, #64]	; (8000fc8 <_sbrk+0x64>)
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	693a      	ldr	r2, [r7, #16]
 8000f90:	429a      	cmp	r2, r3
 8000f92:	d207      	bcs.n	8000fa4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f94:	f006 f878 	bl	8007088 <__errno>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	220c      	movs	r2, #12
 8000f9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa2:	e009      	b.n	8000fb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000fa4:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <_sbrk+0x64>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000faa:	4b07      	ldr	r3, [pc, #28]	; (8000fc8 <_sbrk+0x64>)
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4413      	add	r3, r2
 8000fb2:	4a05      	ldr	r2, [pc, #20]	; (8000fc8 <_sbrk+0x64>)
 8000fb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3718      	adds	r7, #24
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20080000 	.word	0x20080000
 8000fc4:	00000400 	.word	0x00000400
 8000fc8:	200000c8 	.word	0x200000c8
 8000fcc:	200002b0 	.word	0x200002b0

08000fd0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <SystemInit+0x20>)
 8000fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fda:	4a05      	ldr	r2, [pc, #20]	; (8000ff0 <SystemInit+0x20>)
 8000fdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fe0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fe4:	bf00      	nop
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	e000ed00 	.word	0xe000ed00

08000ff4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b088      	sub	sp, #32
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ffa:	f107 0310 	add.w	r3, r7, #16
 8000ffe:	2200      	movs	r2, #0
 8001000:	601a      	str	r2, [r3, #0]
 8001002:	605a      	str	r2, [r3, #4]
 8001004:	609a      	str	r2, [r3, #8]
 8001006:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001008:	1d3b      	adds	r3, r7, #4
 800100a:	2200      	movs	r2, #0
 800100c:	601a      	str	r2, [r3, #0]
 800100e:	605a      	str	r2, [r3, #4]
 8001010:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001012:	4b1d      	ldr	r3, [pc, #116]	; (8001088 <MX_TIM2_Init+0x94>)
 8001014:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001018:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 215;
 800101a:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <MX_TIM2_Init+0x94>)
 800101c:	22d7      	movs	r2, #215	; 0xd7
 800101e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001020:	4b19      	ldr	r3, [pc, #100]	; (8001088 <MX_TIM2_Init+0x94>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 99999;
 8001026:	4b18      	ldr	r3, [pc, #96]	; (8001088 <MX_TIM2_Init+0x94>)
 8001028:	4a18      	ldr	r2, [pc, #96]	; (800108c <MX_TIM2_Init+0x98>)
 800102a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800102c:	4b16      	ldr	r3, [pc, #88]	; (8001088 <MX_TIM2_Init+0x94>)
 800102e:	2200      	movs	r2, #0
 8001030:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001032:	4b15      	ldr	r3, [pc, #84]	; (8001088 <MX_TIM2_Init+0x94>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001038:	4813      	ldr	r0, [pc, #76]	; (8001088 <MX_TIM2_Init+0x94>)
 800103a:	f003 fdc9 	bl	8004bd0 <HAL_TIM_Base_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001044:	f7ff fefe 	bl	8000e44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001048:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800104c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800104e:	f107 0310 	add.w	r3, r7, #16
 8001052:	4619      	mov	r1, r3
 8001054:	480c      	ldr	r0, [pc, #48]	; (8001088 <MX_TIM2_Init+0x94>)
 8001056:	f004 fa1b 	bl	8005490 <HAL_TIM_ConfigClockSource>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001060:	f7ff fef0 	bl	8000e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001064:	2300      	movs	r3, #0
 8001066:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001068:	2300      	movs	r3, #0
 800106a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800106c:	1d3b      	adds	r3, r7, #4
 800106e:	4619      	mov	r1, r3
 8001070:	4805      	ldr	r0, [pc, #20]	; (8001088 <MX_TIM2_Init+0x94>)
 8001072:	f004 febd 	bl	8005df0 <HAL_TIMEx_MasterConfigSynchronization>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d001      	beq.n	8001080 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800107c:	f7ff fee2 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001080:	bf00      	nop
 8001082:	3720      	adds	r7, #32
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	200001c8 	.word	0x200001c8
 800108c:	0001869f 	.word	0x0001869f

08001090 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08e      	sub	sp, #56	; 0x38
 8001094:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001096:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010a4:	f107 031c 	add.w	r3, r7, #28
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010b0:	463b      	mov	r3, r7
 80010b2:	2200      	movs	r2, #0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	605a      	str	r2, [r3, #4]
 80010b8:	609a      	str	r2, [r3, #8]
 80010ba:	60da      	str	r2, [r3, #12]
 80010bc:	611a      	str	r2, [r3, #16]
 80010be:	615a      	str	r2, [r3, #20]
 80010c0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010c2:	4b38      	ldr	r3, [pc, #224]	; (80011a4 <MX_TIM3_Init+0x114>)
 80010c4:	4a38      	ldr	r2, [pc, #224]	; (80011a8 <MX_TIM3_Init+0x118>)
 80010c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 107;
 80010c8:	4b36      	ldr	r3, [pc, #216]	; (80011a4 <MX_TIM3_Init+0x114>)
 80010ca:	226b      	movs	r2, #107	; 0x6b
 80010cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ce:	4b35      	ldr	r3, [pc, #212]	; (80011a4 <MX_TIM3_Init+0x114>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 80010d4:	4b33      	ldr	r3, [pc, #204]	; (80011a4 <MX_TIM3_Init+0x114>)
 80010d6:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010da:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010dc:	4b31      	ldr	r3, [pc, #196]	; (80011a4 <MX_TIM3_Init+0x114>)
 80010de:	2200      	movs	r2, #0
 80010e0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010e2:	4b30      	ldr	r3, [pc, #192]	; (80011a4 <MX_TIM3_Init+0x114>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010e8:	482e      	ldr	r0, [pc, #184]	; (80011a4 <MX_TIM3_Init+0x114>)
 80010ea:	f003 fd71 	bl	8004bd0 <HAL_TIM_Base_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80010f4:	f7ff fea6 	bl	8000e44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010fc:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010fe:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001102:	4619      	mov	r1, r3
 8001104:	4827      	ldr	r0, [pc, #156]	; (80011a4 <MX_TIM3_Init+0x114>)
 8001106:	f004 f9c3 	bl	8005490 <HAL_TIM_ConfigClockSource>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001110:	f7ff fe98 	bl	8000e44 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001114:	4823      	ldr	r0, [pc, #140]	; (80011a4 <MX_TIM3_Init+0x114>)
 8001116:	f003 fe2b 	bl	8004d70 <HAL_TIM_PWM_Init>
 800111a:	4603      	mov	r3, r0
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001120:	f7ff fe90 	bl	8000e44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001124:	2300      	movs	r3, #0
 8001126:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001128:	2300      	movs	r3, #0
 800112a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800112c:	f107 031c 	add.w	r3, r7, #28
 8001130:	4619      	mov	r1, r3
 8001132:	481c      	ldr	r0, [pc, #112]	; (80011a4 <MX_TIM3_Init+0x114>)
 8001134:	f004 fe5c 	bl	8005df0 <HAL_TIMEx_MasterConfigSynchronization>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800113e:	f7ff fe81 	bl	8000e44 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001142:	2360      	movs	r3, #96	; 0x60
 8001144:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001146:	2300      	movs	r3, #0
 8001148:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800114a:	2300      	movs	r3, #0
 800114c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800114e:	2300      	movs	r3, #0
 8001150:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001152:	463b      	mov	r3, r7
 8001154:	2200      	movs	r2, #0
 8001156:	4619      	mov	r1, r3
 8001158:	4812      	ldr	r0, [pc, #72]	; (80011a4 <MX_TIM3_Init+0x114>)
 800115a:	f004 f885 	bl	8005268 <HAL_TIM_PWM_ConfigChannel>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001164:	f7ff fe6e 	bl	8000e44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001168:	463b      	mov	r3, r7
 800116a:	2204      	movs	r2, #4
 800116c:	4619      	mov	r1, r3
 800116e:	480d      	ldr	r0, [pc, #52]	; (80011a4 <MX_TIM3_Init+0x114>)
 8001170:	f004 f87a 	bl	8005268 <HAL_TIM_PWM_ConfigChannel>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 800117a:	f7ff fe63 	bl	8000e44 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800117e:	463b      	mov	r3, r7
 8001180:	2208      	movs	r2, #8
 8001182:	4619      	mov	r1, r3
 8001184:	4807      	ldr	r0, [pc, #28]	; (80011a4 <MX_TIM3_Init+0x114>)
 8001186:	f004 f86f 	bl	8005268 <HAL_TIM_PWM_ConfigChannel>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001190:	f7ff fe58 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001194:	4803      	ldr	r0, [pc, #12]	; (80011a4 <MX_TIM3_Init+0x114>)
 8001196:	f000 f849 	bl	800122c <HAL_TIM_MspPostInit>

}
 800119a:	bf00      	nop
 800119c:	3738      	adds	r7, #56	; 0x38
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	2000017c 	.word	0x2000017c
 80011a8:	40000400 	.word	0x40000400

080011ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b084      	sub	sp, #16
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011bc:	d114      	bne.n	80011e8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80011be:	4b19      	ldr	r3, [pc, #100]	; (8001224 <HAL_TIM_Base_MspInit+0x78>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	4a18      	ldr	r2, [pc, #96]	; (8001224 <HAL_TIM_Base_MspInit+0x78>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ca:	4b16      	ldr	r3, [pc, #88]	; (8001224 <HAL_TIM_Base_MspInit+0x78>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2100      	movs	r1, #0
 80011da:	201c      	movs	r0, #28
 80011dc:	f000 fe25 	bl	8001e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80011e0:	201c      	movs	r0, #28
 80011e2:	f000 fe3e 	bl	8001e62 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80011e6:	e018      	b.n	800121a <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a0e      	ldr	r2, [pc, #56]	; (8001228 <HAL_TIM_Base_MspInit+0x7c>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d113      	bne.n	800121a <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80011f2:	4b0c      	ldr	r3, [pc, #48]	; (8001224 <HAL_TIM_Base_MspInit+0x78>)
 80011f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011f6:	4a0b      	ldr	r2, [pc, #44]	; (8001224 <HAL_TIM_Base_MspInit+0x78>)
 80011f8:	f043 0302 	orr.w	r3, r3, #2
 80011fc:	6413      	str	r3, [r2, #64]	; 0x40
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <HAL_TIM_Base_MspInit+0x78>)
 8001200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001202:	f003 0302 	and.w	r3, r3, #2
 8001206:	60bb      	str	r3, [r7, #8]
 8001208:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800120a:	2200      	movs	r2, #0
 800120c:	2100      	movs	r1, #0
 800120e:	201d      	movs	r0, #29
 8001210:	f000 fe0b 	bl	8001e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001214:	201d      	movs	r0, #29
 8001216:	f000 fe24 	bl	8001e62 <HAL_NVIC_EnableIRQ>
}
 800121a:	bf00      	nop
 800121c:	3710      	adds	r7, #16
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40023800 	.word	0x40023800
 8001228:	40000400 	.word	0x40000400

0800122c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b08a      	sub	sp, #40	; 0x28
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001234:	f107 0314 	add.w	r3, r7, #20
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
 800123c:	605a      	str	r2, [r3, #4]
 800123e:	609a      	str	r2, [r3, #8]
 8001240:	60da      	str	r2, [r3, #12]
 8001242:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a1f      	ldr	r2, [pc, #124]	; (80012c8 <HAL_TIM_MspPostInit+0x9c>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d138      	bne.n	80012c0 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800124e:	4b1f      	ldr	r3, [pc, #124]	; (80012cc <HAL_TIM_MspPostInit+0xa0>)
 8001250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001252:	4a1e      	ldr	r2, [pc, #120]	; (80012cc <HAL_TIM_MspPostInit+0xa0>)
 8001254:	f043 0301 	orr.w	r3, r3, #1
 8001258:	6313      	str	r3, [r2, #48]	; 0x30
 800125a:	4b1c      	ldr	r3, [pc, #112]	; (80012cc <HAL_TIM_MspPostInit+0xa0>)
 800125c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125e:	f003 0301 	and.w	r3, r3, #1
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001266:	4b19      	ldr	r3, [pc, #100]	; (80012cc <HAL_TIM_MspPostInit+0xa0>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a18      	ldr	r2, [pc, #96]	; (80012cc <HAL_TIM_MspPostInit+0xa0>)
 800126c:	f043 0304 	orr.w	r3, r3, #4
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b16      	ldr	r3, [pc, #88]	; (80012cc <HAL_TIM_MspPostInit+0xa0>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0304 	and.w	r3, r3, #4
 800127a:	60fb      	str	r3, [r7, #12]
 800127c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800127e:	2340      	movs	r3, #64	; 0x40
 8001280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001282:	2302      	movs	r3, #2
 8001284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2300      	movs	r3, #0
 800128c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800128e:	2302      	movs	r3, #2
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	4619      	mov	r1, r3
 8001298:	480d      	ldr	r0, [pc, #52]	; (80012d0 <HAL_TIM_MspPostInit+0xa4>)
 800129a:	f000 fe9d 	bl	8001fd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 800129e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80012a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a4:	2302      	movs	r3, #2
 80012a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ac:	2300      	movs	r3, #0
 80012ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80012b0:	2302      	movs	r3, #2
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	4619      	mov	r1, r3
 80012ba:	4806      	ldr	r0, [pc, #24]	; (80012d4 <HAL_TIM_MspPostInit+0xa8>)
 80012bc:	f000 fe8c 	bl	8001fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80012c0:	bf00      	nop
 80012c2:	3728      	adds	r7, #40	; 0x28
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40000400 	.word	0x40000400
 80012cc:	40023800 	.word	0x40023800
 80012d0:	40020000 	.word	0x40020000
 80012d4:	40020800 	.word	0x40020800

080012d8 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80012dc:	4b14      	ldr	r3, [pc, #80]	; (8001330 <MX_USART3_UART_Init+0x58>)
 80012de:	4a15      	ldr	r2, [pc, #84]	; (8001334 <MX_USART3_UART_Init+0x5c>)
 80012e0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80012e2:	4b13      	ldr	r3, [pc, #76]	; (8001330 <MX_USART3_UART_Init+0x58>)
 80012e4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80012e8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80012ea:	4b11      	ldr	r3, [pc, #68]	; (8001330 <MX_USART3_UART_Init+0x58>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80012f0:	4b0f      	ldr	r3, [pc, #60]	; (8001330 <MX_USART3_UART_Init+0x58>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80012f6:	4b0e      	ldr	r3, [pc, #56]	; (8001330 <MX_USART3_UART_Init+0x58>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80012fc:	4b0c      	ldr	r3, [pc, #48]	; (8001330 <MX_USART3_UART_Init+0x58>)
 80012fe:	220c      	movs	r2, #12
 8001300:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001302:	4b0b      	ldr	r3, [pc, #44]	; (8001330 <MX_USART3_UART_Init+0x58>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001308:	4b09      	ldr	r3, [pc, #36]	; (8001330 <MX_USART3_UART_Init+0x58>)
 800130a:	2200      	movs	r2, #0
 800130c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800130e:	4b08      	ldr	r3, [pc, #32]	; (8001330 <MX_USART3_UART_Init+0x58>)
 8001310:	2200      	movs	r2, #0
 8001312:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001314:	4b06      	ldr	r3, [pc, #24]	; (8001330 <MX_USART3_UART_Init+0x58>)
 8001316:	2200      	movs	r2, #0
 8001318:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800131a:	4805      	ldr	r0, [pc, #20]	; (8001330 <MX_USART3_UART_Init+0x58>)
 800131c:	f004 fe14 	bl	8005f48 <HAL_UART_Init>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	d001      	beq.n	800132a <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001326:	f7ff fd8d 	bl	8000e44 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800132a:	bf00      	nop
 800132c:	bd80      	pop	{r7, pc}
 800132e:	bf00      	nop
 8001330:	20000214 	.word	0x20000214
 8001334:	40004800 	.word	0x40004800

08001338 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b08a      	sub	sp, #40	; 0x28
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001340:	f107 0314 	add.w	r3, r7, #20
 8001344:	2200      	movs	r2, #0
 8001346:	601a      	str	r2, [r3, #0]
 8001348:	605a      	str	r2, [r3, #4]
 800134a:	609a      	str	r2, [r3, #8]
 800134c:	60da      	str	r2, [r3, #12]
 800134e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a1b      	ldr	r2, [pc, #108]	; (80013c4 <HAL_UART_MspInit+0x8c>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d130      	bne.n	80013bc <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800135a:	4b1b      	ldr	r3, [pc, #108]	; (80013c8 <HAL_UART_MspInit+0x90>)
 800135c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135e:	4a1a      	ldr	r2, [pc, #104]	; (80013c8 <HAL_UART_MspInit+0x90>)
 8001360:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001364:	6413      	str	r3, [r2, #64]	; 0x40
 8001366:	4b18      	ldr	r3, [pc, #96]	; (80013c8 <HAL_UART_MspInit+0x90>)
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800136e:	613b      	str	r3, [r7, #16]
 8001370:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001372:	4b15      	ldr	r3, [pc, #84]	; (80013c8 <HAL_UART_MspInit+0x90>)
 8001374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001376:	4a14      	ldr	r2, [pc, #80]	; (80013c8 <HAL_UART_MspInit+0x90>)
 8001378:	f043 0308 	orr.w	r3, r3, #8
 800137c:	6313      	str	r3, [r2, #48]	; 0x30
 800137e:	4b12      	ldr	r3, [pc, #72]	; (80013c8 <HAL_UART_MspInit+0x90>)
 8001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001382:	f003 0308 	and.w	r3, r3, #8
 8001386:	60fb      	str	r3, [r7, #12]
 8001388:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800138a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800138e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001390:	2302      	movs	r3, #2
 8001392:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001398:	2303      	movs	r3, #3
 800139a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800139c:	2307      	movs	r3, #7
 800139e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013a0:	f107 0314 	add.w	r3, r7, #20
 80013a4:	4619      	mov	r1, r3
 80013a6:	4809      	ldr	r0, [pc, #36]	; (80013cc <HAL_UART_MspInit+0x94>)
 80013a8:	f000 fe16 	bl	8001fd8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80013ac:	2200      	movs	r2, #0
 80013ae:	2100      	movs	r1, #0
 80013b0:	2027      	movs	r0, #39	; 0x27
 80013b2:	f000 fd3a 	bl	8001e2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80013b6:	2027      	movs	r0, #39	; 0x27
 80013b8:	f000 fd53 	bl	8001e62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80013bc:	bf00      	nop
 80013be:	3728      	adds	r7, #40	; 0x28
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	40004800 	.word	0x40004800
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40020c00 	.word	0x40020c00

080013d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80013d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001408 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80013d4:	480d      	ldr	r0, [pc, #52]	; (800140c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80013d6:	490e      	ldr	r1, [pc, #56]	; (8001410 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80013d8:	4a0e      	ldr	r2, [pc, #56]	; (8001414 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80013da:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80013dc:	e002      	b.n	80013e4 <LoopCopyDataInit>

080013de <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80013de:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80013e0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80013e2:	3304      	adds	r3, #4

080013e4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80013e4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80013e6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80013e8:	d3f9      	bcc.n	80013de <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80013ea:	4a0b      	ldr	r2, [pc, #44]	; (8001418 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80013ec:	4c0b      	ldr	r4, [pc, #44]	; (800141c <LoopFillZerobss+0x26>)
  movs r3, #0
 80013ee:	2300      	movs	r3, #0
  b LoopFillZerobss
 80013f0:	e001      	b.n	80013f6 <LoopFillZerobss>

080013f2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80013f2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80013f4:	3204      	adds	r2, #4

080013f6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80013f6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80013f8:	d3fb      	bcc.n	80013f2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80013fa:	f7ff fde9 	bl	8000fd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80013fe:	f005 fe49 	bl	8007094 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001402:	f7ff fc61 	bl	8000cc8 <main>
  bx  lr    
 8001406:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001408:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 800140c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001410:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8001414:	080079c4 	.word	0x080079c4
  ldr r2, =_sbss
 8001418:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 800141c:	200002ac 	.word	0x200002ac

08001420 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001420:	e7fe      	b.n	8001420 <CAN1_RX0_IRQHandler>

08001422 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001422:	b580      	push	{r7, lr}
 8001424:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001426:	2003      	movs	r0, #3
 8001428:	f000 fcf4 	bl	8001e14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800142c:	2000      	movs	r0, #0
 800142e:	f000 f805 	bl	800143c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001432:	f7ff fd0d 	bl	8000e50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001436:	2300      	movs	r3, #0
}
 8001438:	4618      	mov	r0, r3
 800143a:	bd80      	pop	{r7, pc}

0800143c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001444:	4b12      	ldr	r3, [pc, #72]	; (8001490 <HAL_InitTick+0x54>)
 8001446:	681a      	ldr	r2, [r3, #0]
 8001448:	4b12      	ldr	r3, [pc, #72]	; (8001494 <HAL_InitTick+0x58>)
 800144a:	781b      	ldrb	r3, [r3, #0]
 800144c:	4619      	mov	r1, r3
 800144e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001452:	fbb3 f3f1 	udiv	r3, r3, r1
 8001456:	fbb2 f3f3 	udiv	r3, r2, r3
 800145a:	4618      	mov	r0, r3
 800145c:	f000 fd0f 	bl	8001e7e <HAL_SYSTICK_Config>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e00e      	b.n	8001488 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	2b0f      	cmp	r3, #15
 800146e:	d80a      	bhi.n	8001486 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001470:	2200      	movs	r2, #0
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	f04f 30ff 	mov.w	r0, #4294967295
 8001478:	f000 fcd7 	bl	8001e2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800147c:	4a06      	ldr	r2, [pc, #24]	; (8001498 <HAL_InitTick+0x5c>)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001482:	2300      	movs	r3, #0
 8001484:	e000      	b.n	8001488 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
}
 8001488:	4618      	mov	r0, r3
 800148a:	3708      	adds	r7, #8
 800148c:	46bd      	mov	sp, r7
 800148e:	bd80      	pop	{r7, pc}
 8001490:	20000024 	.word	0x20000024
 8001494:	2000002c 	.word	0x2000002c
 8001498:	20000028 	.word	0x20000028

0800149c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800149c:	b480      	push	{r7}
 800149e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80014a0:	4b06      	ldr	r3, [pc, #24]	; (80014bc <HAL_IncTick+0x20>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	461a      	mov	r2, r3
 80014a6:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <HAL_IncTick+0x24>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	4413      	add	r3, r2
 80014ac:	4a04      	ldr	r2, [pc, #16]	; (80014c0 <HAL_IncTick+0x24>)
 80014ae:	6013      	str	r3, [r2, #0]
}
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b8:	4770      	bx	lr
 80014ba:	bf00      	nop
 80014bc:	2000002c 	.word	0x2000002c
 80014c0:	20000298 	.word	0x20000298

080014c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	af00      	add	r7, sp, #0
  return uwTick;
 80014c8:	4b03      	ldr	r3, [pc, #12]	; (80014d8 <HAL_GetTick+0x14>)
 80014ca:	681b      	ldr	r3, [r3, #0]
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	20000298 	.word	0x20000298

080014dc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80014e4:	2300      	movs	r3, #0
 80014e6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e031      	b.n	8001556 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d109      	bne.n	800150e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014fa:	6878      	ldr	r0, [r7, #4]
 80014fc:	f7ff f8c6 	bl	800068c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	2200      	movs	r2, #0
 800150a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	f003 0310 	and.w	r3, r3, #16
 8001516:	2b00      	cmp	r3, #0
 8001518:	d116      	bne.n	8001548 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800151e:	4b10      	ldr	r3, [pc, #64]	; (8001560 <HAL_ADC_Init+0x84>)
 8001520:	4013      	ands	r3, r2
 8001522:	f043 0202 	orr.w	r2, r3, #2
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800152a:	6878      	ldr	r0, [r7, #4]
 800152c:	f000 fa9e 	bl	8001a6c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	2200      	movs	r2, #0
 8001534:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	f023 0303 	bic.w	r3, r3, #3
 800153e:	f043 0201 	orr.w	r2, r3, #1
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	641a      	str	r2, [r3, #64]	; 0x40
 8001546:	e001      	b.n	800154c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2200      	movs	r2, #0
 8001550:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001554:	7bfb      	ldrb	r3, [r7, #15]
}
 8001556:	4618      	mov	r0, r3
 8001558:	3710      	adds	r7, #16
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	ffffeefd 	.word	0xffffeefd

08001564 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	b086      	sub	sp, #24
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	617b      	str	r3, [r7, #20]
 8001570:	2300      	movs	r3, #0
 8001572:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f003 0302 	and.w	r3, r3, #2
 800158a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	f003 0320 	and.w	r3, r3, #32
 8001592:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d049      	beq.n	800162e <HAL_ADC_IRQHandler+0xca>
 800159a:	693b      	ldr	r3, [r7, #16]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d046      	beq.n	800162e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a4:	f003 0310 	and.w	r3, r3, #16
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d105      	bne.n	80015b8 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d12b      	bne.n	800161e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d127      	bne.n	800161e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015d4:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d006      	beq.n	80015ea <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d119      	bne.n	800161e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	685a      	ldr	r2, [r3, #4]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f022 0220 	bic.w	r2, r2, #32
 80015f8:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d105      	bne.n	800161e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001616:	f043 0201 	orr.w	r2, r3, #1
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800161e:	6878      	ldr	r0, [r7, #4]
 8001620:	f000 f8b0 	bl	8001784 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f06f 0212 	mvn.w	r2, #18
 800162c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	f003 0304 	and.w	r3, r3, #4
 8001634:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800163c:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800163e:	697b      	ldr	r3, [r7, #20]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d057      	beq.n	80016f4 <HAL_ADC_IRQHandler+0x190>
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d054      	beq.n	80016f4 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	f003 0310 	and.w	r3, r3, #16
 8001652:	2b00      	cmp	r3, #0
 8001654:	d105      	bne.n	8001662 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	689b      	ldr	r3, [r3, #8]
 8001668:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800166c:	2b00      	cmp	r3, #0
 800166e:	d139      	bne.n	80016e4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001676:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800167a:	2b00      	cmp	r3, #0
 800167c:	d006      	beq.n	800168c <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	689b      	ldr	r3, [r3, #8]
 8001684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001688:	2b00      	cmp	r3, #0
 800168a:	d12b      	bne.n	80016e4 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001696:	2b00      	cmp	r3, #0
 8001698:	d124      	bne.n	80016e4 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d11d      	bne.n	80016e4 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d119      	bne.n	80016e4 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	685a      	ldr	r2, [r3, #4]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016be:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d105      	bne.n	80016e4 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016dc:	f043 0201 	orr.w	r2, r3, #1
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80016e4:	6878      	ldr	r0, [r7, #4]
 80016e6:	f000 fabb 	bl	8001c60 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f06f 020c 	mvn.w	r2, #12
 80016f2:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f003 0301 	and.w	r3, r3, #1
 80016fa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001702:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d017      	beq.n	800173a <HAL_ADC_IRQHandler+0x1d6>
 800170a:	693b      	ldr	r3, [r7, #16]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d014      	beq.n	800173a <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	2b01      	cmp	r3, #1
 800171c:	d10d      	bne.n	800173a <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001722:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800172a:	6878      	ldr	r0, [r7, #4]
 800172c:	f000 f834 	bl	8001798 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f06f 0201 	mvn.w	r2, #1
 8001738:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	f003 0320 	and.w	r3, r3, #32
 8001740:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001742:	68bb      	ldr	r3, [r7, #8]
 8001744:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001748:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800174a:	697b      	ldr	r3, [r7, #20]
 800174c:	2b00      	cmp	r3, #0
 800174e:	d015      	beq.n	800177c <HAL_ADC_IRQHandler+0x218>
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d012      	beq.n	800177c <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	f043 0202 	orr.w	r2, r3, #2
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f06f 0220 	mvn.w	r2, #32
 800176a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f000 f81d 	bl	80017ac <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f06f 0220 	mvn.w	r2, #32
 800177a:	601a      	str	r2, [r3, #0]
  }
}
 800177c:	bf00      	nop
 800177e:	3718      	adds	r7, #24
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}

08001784 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 800178c:	bf00      	nop
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001798:	b480      	push	{r7}
 800179a:	b083      	sub	sp, #12
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 80017a0:	bf00      	nop
 80017a2:	370c      	adds	r7, #12
 80017a4:	46bd      	mov	sp, r7
 80017a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017aa:	4770      	bx	lr

080017ac <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80017b4:	bf00      	nop
 80017b6:	370c      	adds	r7, #12
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr

080017c0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
 80017c8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80017d4:	2b01      	cmp	r3, #1
 80017d6:	d101      	bne.n	80017dc <HAL_ADC_ConfigChannel+0x1c>
 80017d8:	2302      	movs	r3, #2
 80017da:	e136      	b.n	8001a4a <HAL_ADC_ConfigChannel+0x28a>
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	2201      	movs	r2, #1
 80017e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b09      	cmp	r3, #9
 80017ea:	d93a      	bls.n	8001862 <HAL_ADC_ConfigChannel+0xa2>
 80017ec:	683b      	ldr	r3, [r7, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80017f4:	d035      	beq.n	8001862 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	68d9      	ldr	r1, [r3, #12]
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	b29b      	uxth	r3, r3
 8001802:	461a      	mov	r2, r3
 8001804:	4613      	mov	r3, r2
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	4413      	add	r3, r2
 800180a:	3b1e      	subs	r3, #30
 800180c:	2207      	movs	r2, #7
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43da      	mvns	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	400a      	ands	r2, r1
 800181a:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a8d      	ldr	r2, [pc, #564]	; (8001a58 <HAL_ADC_ConfigChannel+0x298>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d10a      	bne.n	800183c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	68d9      	ldr	r1, [r3, #12]
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	061a      	lsls	r2, r3, #24
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	430a      	orrs	r2, r1
 8001838:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800183a:	e035      	b.n	80018a8 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	68d9      	ldr	r1, [r3, #12]
 8001842:	683b      	ldr	r3, [r7, #0]
 8001844:	689a      	ldr	r2, [r3, #8]
 8001846:	683b      	ldr	r3, [r7, #0]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	b29b      	uxth	r3, r3
 800184c:	4618      	mov	r0, r3
 800184e:	4603      	mov	r3, r0
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	4403      	add	r3, r0
 8001854:	3b1e      	subs	r3, #30
 8001856:	409a      	lsls	r2, r3
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	430a      	orrs	r2, r1
 800185e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001860:	e022      	b.n	80018a8 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	6919      	ldr	r1, [r3, #16]
 8001868:	683b      	ldr	r3, [r7, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	b29b      	uxth	r3, r3
 800186e:	461a      	mov	r2, r3
 8001870:	4613      	mov	r3, r2
 8001872:	005b      	lsls	r3, r3, #1
 8001874:	4413      	add	r3, r2
 8001876:	2207      	movs	r2, #7
 8001878:	fa02 f303 	lsl.w	r3, r2, r3
 800187c:	43da      	mvns	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	400a      	ands	r2, r1
 8001884:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	6919      	ldr	r1, [r3, #16]
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	689a      	ldr	r2, [r3, #8]
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	b29b      	uxth	r3, r3
 8001896:	4618      	mov	r0, r3
 8001898:	4603      	mov	r3, r0
 800189a:	005b      	lsls	r3, r3, #1
 800189c:	4403      	add	r3, r0
 800189e:	409a      	lsls	r2, r3
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	430a      	orrs	r2, r1
 80018a6:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	685b      	ldr	r3, [r3, #4]
 80018ac:	2b06      	cmp	r3, #6
 80018ae:	d824      	bhi.n	80018fa <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	685a      	ldr	r2, [r3, #4]
 80018ba:	4613      	mov	r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	4413      	add	r3, r2
 80018c0:	3b05      	subs	r3, #5
 80018c2:	221f      	movs	r2, #31
 80018c4:	fa02 f303 	lsl.w	r3, r2, r3
 80018c8:	43da      	mvns	r2, r3
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	400a      	ands	r2, r1
 80018d0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	b29b      	uxth	r3, r3
 80018de:	4618      	mov	r0, r3
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	685a      	ldr	r2, [r3, #4]
 80018e4:	4613      	mov	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	3b05      	subs	r3, #5
 80018ec:	fa00 f203 	lsl.w	r2, r0, r3
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	430a      	orrs	r2, r1
 80018f6:	635a      	str	r2, [r3, #52]	; 0x34
 80018f8:	e04c      	b.n	8001994 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	2b0c      	cmp	r3, #12
 8001900:	d824      	bhi.n	800194c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	685a      	ldr	r2, [r3, #4]
 800190c:	4613      	mov	r3, r2
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	4413      	add	r3, r2
 8001912:	3b23      	subs	r3, #35	; 0x23
 8001914:	221f      	movs	r2, #31
 8001916:	fa02 f303 	lsl.w	r3, r2, r3
 800191a:	43da      	mvns	r2, r3
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	400a      	ands	r2, r1
 8001922:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	b29b      	uxth	r3, r3
 8001930:	4618      	mov	r0, r3
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	4613      	mov	r3, r2
 8001938:	009b      	lsls	r3, r3, #2
 800193a:	4413      	add	r3, r2
 800193c:	3b23      	subs	r3, #35	; 0x23
 800193e:	fa00 f203 	lsl.w	r2, r0, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	430a      	orrs	r2, r1
 8001948:	631a      	str	r2, [r3, #48]	; 0x30
 800194a:	e023      	b.n	8001994 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685a      	ldr	r2, [r3, #4]
 8001956:	4613      	mov	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	4413      	add	r3, r2
 800195c:	3b41      	subs	r3, #65	; 0x41
 800195e:	221f      	movs	r2, #31
 8001960:	fa02 f303 	lsl.w	r3, r2, r3
 8001964:	43da      	mvns	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	400a      	ands	r2, r1
 800196c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	b29b      	uxth	r3, r3
 800197a:	4618      	mov	r0, r3
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685a      	ldr	r2, [r3, #4]
 8001980:	4613      	mov	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	3b41      	subs	r3, #65	; 0x41
 8001988:	fa00 f203 	lsl.w	r2, r0, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	430a      	orrs	r2, r1
 8001992:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a30      	ldr	r2, [pc, #192]	; (8001a5c <HAL_ADC_ConfigChannel+0x29c>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d10a      	bne.n	80019b4 <HAL_ADC_ConfigChannel+0x1f4>
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80019a6:	d105      	bne.n	80019b4 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80019a8:	4b2d      	ldr	r3, [pc, #180]	; (8001a60 <HAL_ADC_ConfigChannel+0x2a0>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	4a2c      	ldr	r2, [pc, #176]	; (8001a60 <HAL_ADC_ConfigChannel+0x2a0>)
 80019ae:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80019b2:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a28      	ldr	r2, [pc, #160]	; (8001a5c <HAL_ADC_ConfigChannel+0x29c>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d10f      	bne.n	80019de <HAL_ADC_ConfigChannel+0x21e>
 80019be:	683b      	ldr	r3, [r7, #0]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	2b12      	cmp	r3, #18
 80019c4:	d10b      	bne.n	80019de <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80019c6:	4b26      	ldr	r3, [pc, #152]	; (8001a60 <HAL_ADC_ConfigChannel+0x2a0>)
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	4a25      	ldr	r2, [pc, #148]	; (8001a60 <HAL_ADC_ConfigChannel+0x2a0>)
 80019cc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80019d0:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80019d2:	4b23      	ldr	r3, [pc, #140]	; (8001a60 <HAL_ADC_ConfigChannel+0x2a0>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	4a22      	ldr	r2, [pc, #136]	; (8001a60 <HAL_ADC_ConfigChannel+0x2a0>)
 80019d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80019dc:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a1e      	ldr	r2, [pc, #120]	; (8001a5c <HAL_ADC_ConfigChannel+0x29c>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d12b      	bne.n	8001a40 <HAL_ADC_ConfigChannel+0x280>
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	4a1a      	ldr	r2, [pc, #104]	; (8001a58 <HAL_ADC_ConfigChannel+0x298>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d003      	beq.n	80019fa <HAL_ADC_ConfigChannel+0x23a>
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	2b11      	cmp	r3, #17
 80019f8:	d122      	bne.n	8001a40 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80019fa:	4b19      	ldr	r3, [pc, #100]	; (8001a60 <HAL_ADC_ConfigChannel+0x2a0>)
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	4a18      	ldr	r2, [pc, #96]	; (8001a60 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a00:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001a04:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001a06:	4b16      	ldr	r3, [pc, #88]	; (8001a60 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	4a15      	ldr	r2, [pc, #84]	; (8001a60 <HAL_ADC_ConfigChannel+0x2a0>)
 8001a0c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001a10:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a10      	ldr	r2, [pc, #64]	; (8001a58 <HAL_ADC_ConfigChannel+0x298>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d111      	bne.n	8001a40 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001a1c:	4b11      	ldr	r3, [pc, #68]	; (8001a64 <HAL_ADC_ConfigChannel+0x2a4>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	4a11      	ldr	r2, [pc, #68]	; (8001a68 <HAL_ADC_ConfigChannel+0x2a8>)
 8001a22:	fba2 2303 	umull	r2, r3, r2, r3
 8001a26:	0c9a      	lsrs	r2, r3, #18
 8001a28:	4613      	mov	r3, r2
 8001a2a:	009b      	lsls	r3, r3, #2
 8001a2c:	4413      	add	r3, r2
 8001a2e:	005b      	lsls	r3, r3, #1
 8001a30:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001a32:	e002      	b.n	8001a3a <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1f9      	bne.n	8001a34 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2200      	movs	r2, #0
 8001a44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3714      	adds	r7, #20
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr
 8001a56:	bf00      	nop
 8001a58:	10000012 	.word	0x10000012
 8001a5c:	40012000 	.word	0x40012000
 8001a60:	40012300 	.word	0x40012300
 8001a64:	20000024 	.word	0x20000024
 8001a68:	431bde83 	.word	0x431bde83

08001a6c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b083      	sub	sp, #12
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001a74:	4b78      	ldr	r3, [pc, #480]	; (8001c58 <ADC_Init+0x1ec>)
 8001a76:	685b      	ldr	r3, [r3, #4]
 8001a78:	4a77      	ldr	r2, [pc, #476]	; (8001c58 <ADC_Init+0x1ec>)
 8001a7a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001a7e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001a80:	4b75      	ldr	r3, [pc, #468]	; (8001c58 <ADC_Init+0x1ec>)
 8001a82:	685a      	ldr	r2, [r3, #4]
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	4973      	ldr	r1, [pc, #460]	; (8001c58 <ADC_Init+0x1ec>)
 8001a8a:	4313      	orrs	r3, r2
 8001a8c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001a9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	6859      	ldr	r1, [r3, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	691b      	ldr	r3, [r3, #16]
 8001aa8:	021a      	lsls	r2, r3, #8
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	685a      	ldr	r2, [r3, #4]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001ac0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6859      	ldr	r1, [r3, #4]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689a      	ldr	r2, [r3, #8]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	430a      	orrs	r2, r1
 8001ad2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	689a      	ldr	r2, [r3, #8]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001ae2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	6899      	ldr	r1, [r3, #8]
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	68da      	ldr	r2, [r3, #12]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	430a      	orrs	r2, r1
 8001af4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001afa:	4a58      	ldr	r2, [pc, #352]	; (8001c5c <ADC_Init+0x1f0>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d022      	beq.n	8001b46 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	689a      	ldr	r2, [r3, #8]
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b0e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	6899      	ldr	r1, [r3, #8]
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	430a      	orrs	r2, r1
 8001b20:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	689a      	ldr	r2, [r3, #8]
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	6899      	ldr	r1, [r3, #8]
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	430a      	orrs	r2, r1
 8001b42:	609a      	str	r2, [r3, #8]
 8001b44:	e00f      	b.n	8001b66 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	689a      	ldr	r2, [r3, #8]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001b54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001b64:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f022 0202 	bic.w	r2, r2, #2
 8001b74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	6899      	ldr	r1, [r3, #8]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	005a      	lsls	r2, r3, #1
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	430a      	orrs	r2, r1
 8001b88:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d01b      	beq.n	8001bcc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001ba2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	685a      	ldr	r2, [r3, #4]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001bb2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	6859      	ldr	r1, [r3, #4]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbe:	3b01      	subs	r3, #1
 8001bc0:	035a      	lsls	r2, r3, #13
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	605a      	str	r2, [r3, #4]
 8001bca:	e007      	b.n	8001bdc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	685a      	ldr	r2, [r3, #4]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001bda:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001bea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69db      	ldr	r3, [r3, #28]
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	051a      	lsls	r2, r3, #20
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001c10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	6899      	ldr	r1, [r3, #8]
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001c1e:	025a      	lsls	r2, r3, #9
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	430a      	orrs	r2, r1
 8001c26:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	689a      	ldr	r2, [r3, #8]
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001c36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	6899      	ldr	r1, [r3, #8]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	695b      	ldr	r3, [r3, #20]
 8001c42:	029a      	lsls	r2, r3, #10
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	430a      	orrs	r2, r1
 8001c4a:	609a      	str	r2, [r3, #8]
}
 8001c4c:	bf00      	nop
 8001c4e:	370c      	adds	r7, #12
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	40012300 	.word	0x40012300
 8001c5c:	0f000001 	.word	0x0f000001

08001c60 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001c68:	bf00      	nop
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b085      	sub	sp, #20
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f003 0307 	and.w	r3, r3, #7
 8001c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c84:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <__NVIC_SetPriorityGrouping+0x40>)
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c8a:	68ba      	ldr	r2, [r7, #8]
 8001c8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c90:	4013      	ands	r3, r2
 8001c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001c9c:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ca2:	4a04      	ldr	r2, [pc, #16]	; (8001cb4 <__NVIC_SetPriorityGrouping+0x40>)
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	60d3      	str	r3, [r2, #12]
}
 8001ca8:	bf00      	nop
 8001caa:	3714      	adds	r7, #20
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr
 8001cb4:	e000ed00 	.word	0xe000ed00
 8001cb8:	05fa0000 	.word	0x05fa0000

08001cbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001cc0:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8001cc2:	68db      	ldr	r3, [r3, #12]
 8001cc4:	0a1b      	lsrs	r3, r3, #8
 8001cc6:	f003 0307 	and.w	r3, r3, #7
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr
 8001cd4:	e000ed00 	.word	0xe000ed00

08001cd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b083      	sub	sp, #12
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	db0b      	blt.n	8001d02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cea:	79fb      	ldrb	r3, [r7, #7]
 8001cec:	f003 021f 	and.w	r2, r3, #31
 8001cf0:	4907      	ldr	r1, [pc, #28]	; (8001d10 <__NVIC_EnableIRQ+0x38>)
 8001cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf6:	095b      	lsrs	r3, r3, #5
 8001cf8:	2001      	movs	r0, #1
 8001cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8001cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d02:	bf00      	nop
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	e000e100 	.word	0xe000e100

08001d14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d14:	b480      	push	{r7}
 8001d16:	b083      	sub	sp, #12
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	6039      	str	r1, [r7, #0]
 8001d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	db0a      	blt.n	8001d3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	490c      	ldr	r1, [pc, #48]	; (8001d60 <__NVIC_SetPriority+0x4c>)
 8001d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d32:	0112      	lsls	r2, r2, #4
 8001d34:	b2d2      	uxtb	r2, r2
 8001d36:	440b      	add	r3, r1
 8001d38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d3c:	e00a      	b.n	8001d54 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	b2da      	uxtb	r2, r3
 8001d42:	4908      	ldr	r1, [pc, #32]	; (8001d64 <__NVIC_SetPriority+0x50>)
 8001d44:	79fb      	ldrb	r3, [r7, #7]
 8001d46:	f003 030f 	and.w	r3, r3, #15
 8001d4a:	3b04      	subs	r3, #4
 8001d4c:	0112      	lsls	r2, r2, #4
 8001d4e:	b2d2      	uxtb	r2, r2
 8001d50:	440b      	add	r3, r1
 8001d52:	761a      	strb	r2, [r3, #24]
}
 8001d54:	bf00      	nop
 8001d56:	370c      	adds	r7, #12
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr
 8001d60:	e000e100 	.word	0xe000e100
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b089      	sub	sp, #36	; 0x24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	f003 0307 	and.w	r3, r3, #7
 8001d7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d7c:	69fb      	ldr	r3, [r7, #28]
 8001d7e:	f1c3 0307 	rsb	r3, r3, #7
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	bf28      	it	cs
 8001d86:	2304      	movcs	r3, #4
 8001d88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d8a:	69fb      	ldr	r3, [r7, #28]
 8001d8c:	3304      	adds	r3, #4
 8001d8e:	2b06      	cmp	r3, #6
 8001d90:	d902      	bls.n	8001d98 <NVIC_EncodePriority+0x30>
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3b03      	subs	r3, #3
 8001d96:	e000      	b.n	8001d9a <NVIC_EncodePriority+0x32>
 8001d98:	2300      	movs	r3, #0
 8001d9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d9c:	f04f 32ff 	mov.w	r2, #4294967295
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	fa02 f303 	lsl.w	r3, r2, r3
 8001da6:	43da      	mvns	r2, r3
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	401a      	ands	r2, r3
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db0:	f04f 31ff 	mov.w	r1, #4294967295
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	fa01 f303 	lsl.w	r3, r1, r3
 8001dba:	43d9      	mvns	r1, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc0:	4313      	orrs	r3, r2
         );
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3724      	adds	r7, #36	; 0x24
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
	...

08001dd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	3b01      	subs	r3, #1
 8001ddc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001de0:	d301      	bcc.n	8001de6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001de2:	2301      	movs	r3, #1
 8001de4:	e00f      	b.n	8001e06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001de6:	4a0a      	ldr	r2, [pc, #40]	; (8001e10 <SysTick_Config+0x40>)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	3b01      	subs	r3, #1
 8001dec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001dee:	210f      	movs	r1, #15
 8001df0:	f04f 30ff 	mov.w	r0, #4294967295
 8001df4:	f7ff ff8e 	bl	8001d14 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001df8:	4b05      	ldr	r3, [pc, #20]	; (8001e10 <SysTick_Config+0x40>)
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001dfe:	4b04      	ldr	r3, [pc, #16]	; (8001e10 <SysTick_Config+0x40>)
 8001e00:	2207      	movs	r2, #7
 8001e02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3708      	adds	r7, #8
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	e000e010 	.word	0xe000e010

08001e14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7ff ff29 	bl	8001c74 <__NVIC_SetPriorityGrouping>
}
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b086      	sub	sp, #24
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	4603      	mov	r3, r0
 8001e32:	60b9      	str	r1, [r7, #8]
 8001e34:	607a      	str	r2, [r7, #4]
 8001e36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001e38:	2300      	movs	r3, #0
 8001e3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e3c:	f7ff ff3e 	bl	8001cbc <__NVIC_GetPriorityGrouping>
 8001e40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	68b9      	ldr	r1, [r7, #8]
 8001e46:	6978      	ldr	r0, [r7, #20]
 8001e48:	f7ff ff8e 	bl	8001d68 <NVIC_EncodePriority>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e52:	4611      	mov	r1, r2
 8001e54:	4618      	mov	r0, r3
 8001e56:	f7ff ff5d 	bl	8001d14 <__NVIC_SetPriority>
}
 8001e5a:	bf00      	nop
 8001e5c:	3718      	adds	r7, #24
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e62:	b580      	push	{r7, lr}
 8001e64:	b082      	sub	sp, #8
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	4603      	mov	r3, r0
 8001e6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e70:	4618      	mov	r0, r3
 8001e72:	f7ff ff31 	bl	8001cd8 <__NVIC_EnableIRQ>
}
 8001e76:	bf00      	nop
 8001e78:	3708      	adds	r7, #8
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}

08001e7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e7e:	b580      	push	{r7, lr}
 8001e80:	b082      	sub	sp, #8
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e86:	6878      	ldr	r0, [r7, #4]
 8001e88:	f7ff ffa2 	bl	8001dd0 <SysTick_Config>
 8001e8c:	4603      	mov	r3, r0
}
 8001e8e:	4618      	mov	r0, r3
 8001e90:	3708      	adds	r7, #8
 8001e92:	46bd      	mov	sp, r7
 8001e94:	bd80      	pop	{r7, pc}

08001e96 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e96:	b580      	push	{r7, lr}
 8001e98:	b084      	sub	sp, #16
 8001e9a:	af00      	add	r7, sp, #0
 8001e9c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ea2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ea4:	f7ff fb0e 	bl	80014c4 <HAL_GetTick>
 8001ea8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d008      	beq.n	8001ec8 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2280      	movs	r2, #128	; 0x80
 8001eba:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e052      	b.n	8001f6e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f022 0216 	bic.w	r2, r2, #22
 8001ed6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	695a      	ldr	r2, [r3, #20]
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ee6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d103      	bne.n	8001ef8 <HAL_DMA_Abort+0x62>
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d007      	beq.n	8001f08 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f022 0208 	bic.w	r2, r2, #8
 8001f06:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	681a      	ldr	r2, [r3, #0]
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f022 0201 	bic.w	r2, r2, #1
 8001f16:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f18:	e013      	b.n	8001f42 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f1a:	f7ff fad3 	bl	80014c4 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	1ad3      	subs	r3, r2, r3
 8001f24:	2b05      	cmp	r3, #5
 8001f26:	d90c      	bls.n	8001f42 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2220      	movs	r2, #32
 8001f2c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2203      	movs	r2, #3
 8001f32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	2200      	movs	r2, #0
 8001f3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e015      	b.n	8001f6e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0301 	and.w	r3, r3, #1
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d1e4      	bne.n	8001f1a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f54:	223f      	movs	r2, #63	; 0x3f
 8001f56:	409a      	lsls	r2, r3
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2201      	movs	r2, #1
 8001f60:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8001f6c:	2300      	movs	r3, #0
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	3710      	adds	r7, #16
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd80      	pop	{r7, pc}

08001f76 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001f76:	b480      	push	{r7}
 8001f78:	b083      	sub	sp, #12
 8001f7a:	af00      	add	r7, sp, #0
 8001f7c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f84:	b2db      	uxtb	r3, r3
 8001f86:	2b02      	cmp	r3, #2
 8001f88:	d004      	beq.n	8001f94 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2280      	movs	r2, #128	; 0x80
 8001f8e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e00c      	b.n	8001fae <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2205      	movs	r2, #5
 8001f98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 0201 	bic.w	r2, r2, #1
 8001faa:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fac:	2300      	movs	r3, #0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	370c      	adds	r7, #12
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr

08001fba <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8001fba:	b480      	push	{r7}
 8001fbc:	b083      	sub	sp, #12
 8001fbe:	af00      	add	r7, sp, #0
 8001fc0:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fc8:	b2db      	uxtb	r3, r3
}
 8001fca:	4618      	mov	r0, r3
 8001fcc:	370c      	adds	r7, #12
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
	...

08001fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b089      	sub	sp, #36	; 0x24
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001fea:	2300      	movs	r3, #0
 8001fec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61fb      	str	r3, [r7, #28]
 8001ff6:	e175      	b.n	80022e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	4013      	ands	r3, r2
 800200a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	429a      	cmp	r2, r3
 8002012:	f040 8164 	bne.w	80022de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	f003 0303 	and.w	r3, r3, #3
 800201e:	2b01      	cmp	r3, #1
 8002020:	d005      	beq.n	800202e <HAL_GPIO_Init+0x56>
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f003 0303 	and.w	r3, r3, #3
 800202a:	2b02      	cmp	r3, #2
 800202c:	d130      	bne.n	8002090 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	689b      	ldr	r3, [r3, #8]
 8002032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002034:	69fb      	ldr	r3, [r7, #28]
 8002036:	005b      	lsls	r3, r3, #1
 8002038:	2203      	movs	r2, #3
 800203a:	fa02 f303 	lsl.w	r3, r2, r3
 800203e:	43db      	mvns	r3, r3
 8002040:	69ba      	ldr	r2, [r7, #24]
 8002042:	4013      	ands	r3, r2
 8002044:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	68da      	ldr	r2, [r3, #12]
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	005b      	lsls	r3, r3, #1
 800204e:	fa02 f303 	lsl.w	r3, r2, r3
 8002052:	69ba      	ldr	r2, [r7, #24]
 8002054:	4313      	orrs	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	69ba      	ldr	r2, [r7, #24]
 800205c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002064:	2201      	movs	r2, #1
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	fa02 f303 	lsl.w	r3, r2, r3
 800206c:	43db      	mvns	r3, r3
 800206e:	69ba      	ldr	r2, [r7, #24]
 8002070:	4013      	ands	r3, r2
 8002072:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	091b      	lsrs	r3, r3, #4
 800207a:	f003 0201 	and.w	r2, r3, #1
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	fa02 f303 	lsl.w	r3, r2, r3
 8002084:	69ba      	ldr	r2, [r7, #24]
 8002086:	4313      	orrs	r3, r2
 8002088:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69ba      	ldr	r2, [r7, #24]
 800208e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	f003 0303 	and.w	r3, r3, #3
 8002098:	2b03      	cmp	r3, #3
 800209a:	d017      	beq.n	80020cc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	2203      	movs	r2, #3
 80020a8:	fa02 f303 	lsl.w	r3, r2, r3
 80020ac:	43db      	mvns	r3, r3
 80020ae:	69ba      	ldr	r2, [r7, #24]
 80020b0:	4013      	ands	r3, r2
 80020b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	689a      	ldr	r2, [r3, #8]
 80020b8:	69fb      	ldr	r3, [r7, #28]
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	fa02 f303 	lsl.w	r3, r2, r3
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4313      	orrs	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	69ba      	ldr	r2, [r7, #24]
 80020ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	685b      	ldr	r3, [r3, #4]
 80020d0:	f003 0303 	and.w	r3, r3, #3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d123      	bne.n	8002120 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80020d8:	69fb      	ldr	r3, [r7, #28]
 80020da:	08da      	lsrs	r2, r3, #3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3208      	adds	r2, #8
 80020e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80020e6:	69fb      	ldr	r3, [r7, #28]
 80020e8:	f003 0307 	and.w	r3, r3, #7
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	220f      	movs	r2, #15
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	43db      	mvns	r3, r3
 80020f6:	69ba      	ldr	r2, [r7, #24]
 80020f8:	4013      	ands	r3, r2
 80020fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	691a      	ldr	r2, [r3, #16]
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	f003 0307 	and.w	r3, r3, #7
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	fa02 f303 	lsl.w	r3, r2, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4313      	orrs	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002112:	69fb      	ldr	r3, [r7, #28]
 8002114:	08da      	lsrs	r2, r3, #3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	3208      	adds	r2, #8
 800211a:	69b9      	ldr	r1, [r7, #24]
 800211c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	2203      	movs	r2, #3
 800212c:	fa02 f303 	lsl.w	r3, r2, r3
 8002130:	43db      	mvns	r3, r3
 8002132:	69ba      	ldr	r2, [r7, #24]
 8002134:	4013      	ands	r3, r2
 8002136:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f003 0203 	and.w	r2, r3, #3
 8002140:	69fb      	ldr	r3, [r7, #28]
 8002142:	005b      	lsls	r3, r3, #1
 8002144:	fa02 f303 	lsl.w	r3, r2, r3
 8002148:	69ba      	ldr	r2, [r7, #24]
 800214a:	4313      	orrs	r3, r2
 800214c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800215c:	2b00      	cmp	r3, #0
 800215e:	f000 80be 	beq.w	80022de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002162:	4b66      	ldr	r3, [pc, #408]	; (80022fc <HAL_GPIO_Init+0x324>)
 8002164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002166:	4a65      	ldr	r2, [pc, #404]	; (80022fc <HAL_GPIO_Init+0x324>)
 8002168:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800216c:	6453      	str	r3, [r2, #68]	; 0x44
 800216e:	4b63      	ldr	r3, [pc, #396]	; (80022fc <HAL_GPIO_Init+0x324>)
 8002170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002176:	60fb      	str	r3, [r7, #12]
 8002178:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800217a:	4a61      	ldr	r2, [pc, #388]	; (8002300 <HAL_GPIO_Init+0x328>)
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	089b      	lsrs	r3, r3, #2
 8002180:	3302      	adds	r3, #2
 8002182:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002186:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002188:	69fb      	ldr	r3, [r7, #28]
 800218a:	f003 0303 	and.w	r3, r3, #3
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	220f      	movs	r2, #15
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	43db      	mvns	r3, r3
 8002198:	69ba      	ldr	r2, [r7, #24]
 800219a:	4013      	ands	r3, r2
 800219c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	4a58      	ldr	r2, [pc, #352]	; (8002304 <HAL_GPIO_Init+0x32c>)
 80021a2:	4293      	cmp	r3, r2
 80021a4:	d037      	beq.n	8002216 <HAL_GPIO_Init+0x23e>
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a57      	ldr	r2, [pc, #348]	; (8002308 <HAL_GPIO_Init+0x330>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d031      	beq.n	8002212 <HAL_GPIO_Init+0x23a>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4a56      	ldr	r2, [pc, #344]	; (800230c <HAL_GPIO_Init+0x334>)
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d02b      	beq.n	800220e <HAL_GPIO_Init+0x236>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a55      	ldr	r2, [pc, #340]	; (8002310 <HAL_GPIO_Init+0x338>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d025      	beq.n	800220a <HAL_GPIO_Init+0x232>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a54      	ldr	r2, [pc, #336]	; (8002314 <HAL_GPIO_Init+0x33c>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d01f      	beq.n	8002206 <HAL_GPIO_Init+0x22e>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a53      	ldr	r2, [pc, #332]	; (8002318 <HAL_GPIO_Init+0x340>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d019      	beq.n	8002202 <HAL_GPIO_Init+0x22a>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a52      	ldr	r2, [pc, #328]	; (800231c <HAL_GPIO_Init+0x344>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d013      	beq.n	80021fe <HAL_GPIO_Init+0x226>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a51      	ldr	r2, [pc, #324]	; (8002320 <HAL_GPIO_Init+0x348>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d00d      	beq.n	80021fa <HAL_GPIO_Init+0x222>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a50      	ldr	r2, [pc, #320]	; (8002324 <HAL_GPIO_Init+0x34c>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d007      	beq.n	80021f6 <HAL_GPIO_Init+0x21e>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a4f      	ldr	r2, [pc, #316]	; (8002328 <HAL_GPIO_Init+0x350>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d101      	bne.n	80021f2 <HAL_GPIO_Init+0x21a>
 80021ee:	2309      	movs	r3, #9
 80021f0:	e012      	b.n	8002218 <HAL_GPIO_Init+0x240>
 80021f2:	230a      	movs	r3, #10
 80021f4:	e010      	b.n	8002218 <HAL_GPIO_Init+0x240>
 80021f6:	2308      	movs	r3, #8
 80021f8:	e00e      	b.n	8002218 <HAL_GPIO_Init+0x240>
 80021fa:	2307      	movs	r3, #7
 80021fc:	e00c      	b.n	8002218 <HAL_GPIO_Init+0x240>
 80021fe:	2306      	movs	r3, #6
 8002200:	e00a      	b.n	8002218 <HAL_GPIO_Init+0x240>
 8002202:	2305      	movs	r3, #5
 8002204:	e008      	b.n	8002218 <HAL_GPIO_Init+0x240>
 8002206:	2304      	movs	r3, #4
 8002208:	e006      	b.n	8002218 <HAL_GPIO_Init+0x240>
 800220a:	2303      	movs	r3, #3
 800220c:	e004      	b.n	8002218 <HAL_GPIO_Init+0x240>
 800220e:	2302      	movs	r3, #2
 8002210:	e002      	b.n	8002218 <HAL_GPIO_Init+0x240>
 8002212:	2301      	movs	r3, #1
 8002214:	e000      	b.n	8002218 <HAL_GPIO_Init+0x240>
 8002216:	2300      	movs	r3, #0
 8002218:	69fa      	ldr	r2, [r7, #28]
 800221a:	f002 0203 	and.w	r2, r2, #3
 800221e:	0092      	lsls	r2, r2, #2
 8002220:	4093      	lsls	r3, r2
 8002222:	69ba      	ldr	r2, [r7, #24]
 8002224:	4313      	orrs	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002228:	4935      	ldr	r1, [pc, #212]	; (8002300 <HAL_GPIO_Init+0x328>)
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	089b      	lsrs	r3, r3, #2
 800222e:	3302      	adds	r3, #2
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002236:	4b3d      	ldr	r3, [pc, #244]	; (800232c <HAL_GPIO_Init+0x354>)
 8002238:	689b      	ldr	r3, [r3, #8]
 800223a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800223c:	693b      	ldr	r3, [r7, #16]
 800223e:	43db      	mvns	r3, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4013      	ands	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685b      	ldr	r3, [r3, #4]
 800224a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	4313      	orrs	r3, r2
 8002258:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800225a:	4a34      	ldr	r2, [pc, #208]	; (800232c <HAL_GPIO_Init+0x354>)
 800225c:	69bb      	ldr	r3, [r7, #24]
 800225e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002260:	4b32      	ldr	r3, [pc, #200]	; (800232c <HAL_GPIO_Init+0x354>)
 8002262:	68db      	ldr	r3, [r3, #12]
 8002264:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002266:	693b      	ldr	r3, [r7, #16]
 8002268:	43db      	mvns	r3, r3
 800226a:	69ba      	ldr	r2, [r7, #24]
 800226c:	4013      	ands	r3, r2
 800226e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d003      	beq.n	8002284 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	693b      	ldr	r3, [r7, #16]
 8002280:	4313      	orrs	r3, r2
 8002282:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002284:	4a29      	ldr	r2, [pc, #164]	; (800232c <HAL_GPIO_Init+0x354>)
 8002286:	69bb      	ldr	r3, [r7, #24]
 8002288:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800228a:	4b28      	ldr	r3, [pc, #160]	; (800232c <HAL_GPIO_Init+0x354>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002290:	693b      	ldr	r3, [r7, #16]
 8002292:	43db      	mvns	r3, r3
 8002294:	69ba      	ldr	r2, [r7, #24]
 8002296:	4013      	ands	r3, r2
 8002298:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d003      	beq.n	80022ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80022a6:	69ba      	ldr	r2, [r7, #24]
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80022ae:	4a1f      	ldr	r2, [pc, #124]	; (800232c <HAL_GPIO_Init+0x354>)
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80022b4:	4b1d      	ldr	r3, [pc, #116]	; (800232c <HAL_GPIO_Init+0x354>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	43db      	mvns	r3, r3
 80022be:	69ba      	ldr	r2, [r7, #24]
 80022c0:	4013      	ands	r3, r2
 80022c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d003      	beq.n	80022d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80022d8:	4a14      	ldr	r2, [pc, #80]	; (800232c <HAL_GPIO_Init+0x354>)
 80022da:	69bb      	ldr	r3, [r7, #24]
 80022dc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80022de:	69fb      	ldr	r3, [r7, #28]
 80022e0:	3301      	adds	r3, #1
 80022e2:	61fb      	str	r3, [r7, #28]
 80022e4:	69fb      	ldr	r3, [r7, #28]
 80022e6:	2b0f      	cmp	r3, #15
 80022e8:	f67f ae86 	bls.w	8001ff8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80022ec:	bf00      	nop
 80022ee:	bf00      	nop
 80022f0:	3724      	adds	r7, #36	; 0x24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
 80022fa:	bf00      	nop
 80022fc:	40023800 	.word	0x40023800
 8002300:	40013800 	.word	0x40013800
 8002304:	40020000 	.word	0x40020000
 8002308:	40020400 	.word	0x40020400
 800230c:	40020800 	.word	0x40020800
 8002310:	40020c00 	.word	0x40020c00
 8002314:	40021000 	.word	0x40021000
 8002318:	40021400 	.word	0x40021400
 800231c:	40021800 	.word	0x40021800
 8002320:	40021c00 	.word	0x40021c00
 8002324:	40022000 	.word	0x40022000
 8002328:	40022400 	.word	0x40022400
 800232c:	40013c00 	.word	0x40013c00

08002330 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	460b      	mov	r3, r1
 800233a:	807b      	strh	r3, [r7, #2]
 800233c:	4613      	mov	r3, r2
 800233e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002340:	787b      	ldrb	r3, [r7, #1]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002346:	887a      	ldrh	r2, [r7, #2]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800234c:	e003      	b.n	8002356 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800234e:	887b      	ldrh	r3, [r7, #2]
 8002350:	041a      	lsls	r2, r3, #16
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	619a      	str	r2, [r3, #24]
}
 8002356:	bf00      	nop
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
	...

08002364 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e07f      	b.n	8002476 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d106      	bne.n	8002390 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800238a:	6878      	ldr	r0, [r7, #4]
 800238c:	f7fe fb60 	bl	8000a50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2224      	movs	r2, #36	; 0x24
 8002394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f022 0201 	bic.w	r2, r2, #1
 80023a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685a      	ldr	r2, [r3, #4]
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80023c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	68db      	ldr	r3, [r3, #12]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d107      	bne.n	80023de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	e006      	b.n	80023ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	689a      	ldr	r2, [r3, #8]
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80023ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	2b02      	cmp	r3, #2
 80023f2:	d104      	bne.n	80023fe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80023fc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	6859      	ldr	r1, [r3, #4]
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	4b1d      	ldr	r3, [pc, #116]	; (8002480 <HAL_I2C_Init+0x11c>)
 800240a:	430b      	orrs	r3, r1
 800240c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	68da      	ldr	r2, [r3, #12]
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800241c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	691a      	ldr	r2, [r3, #16]
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	695b      	ldr	r3, [r3, #20]
 8002426:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	699b      	ldr	r3, [r3, #24]
 800242e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	430a      	orrs	r2, r1
 8002436:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	69d9      	ldr	r1, [r3, #28]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a1a      	ldr	r2, [r3, #32]
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	430a      	orrs	r2, r1
 8002446:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f042 0201 	orr.w	r2, r2, #1
 8002456:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2200      	movs	r2, #0
 800245c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	2220      	movs	r2, #32
 8002462:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2200      	movs	r2, #0
 800246a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2200      	movs	r2, #0
 8002470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3708      	adds	r7, #8
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	02008000 	.word	0x02008000

08002484 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b088      	sub	sp, #32
 8002488:	af02      	add	r7, sp, #8
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	607a      	str	r2, [r7, #4]
 800248e:	461a      	mov	r2, r3
 8002490:	460b      	mov	r3, r1
 8002492:	817b      	strh	r3, [r7, #10]
 8002494:	4613      	mov	r3, r2
 8002496:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	2b20      	cmp	r3, #32
 80024a2:	f040 80da 	bne.w	800265a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80024ac:	2b01      	cmp	r3, #1
 80024ae:	d101      	bne.n	80024b4 <HAL_I2C_Master_Transmit+0x30>
 80024b0:	2302      	movs	r3, #2
 80024b2:	e0d3      	b.n	800265c <HAL_I2C_Master_Transmit+0x1d8>
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2201      	movs	r2, #1
 80024b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80024bc:	f7ff f802 	bl	80014c4 <HAL_GetTick>
 80024c0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80024c2:	697b      	ldr	r3, [r7, #20]
 80024c4:	9300      	str	r3, [sp, #0]
 80024c6:	2319      	movs	r3, #25
 80024c8:	2201      	movs	r2, #1
 80024ca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	f000 fefb 	bl	80032ca <I2C_WaitOnFlagUntilTimeout>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e0be      	b.n	800265c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2221      	movs	r2, #33	; 0x21
 80024e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2210      	movs	r2, #16
 80024ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	687a      	ldr	r2, [r7, #4]
 80024f8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	893a      	ldrh	r2, [r7, #8]
 80024fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2200      	movs	r2, #0
 8002504:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800250a:	b29b      	uxth	r3, r3
 800250c:	2bff      	cmp	r3, #255	; 0xff
 800250e:	d90e      	bls.n	800252e <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	22ff      	movs	r2, #255	; 0xff
 8002514:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800251a:	b2da      	uxtb	r2, r3
 800251c:	8979      	ldrh	r1, [r7, #10]
 800251e:	4b51      	ldr	r3, [pc, #324]	; (8002664 <HAL_I2C_Master_Transmit+0x1e0>)
 8002520:	9300      	str	r3, [sp, #0]
 8002522:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002526:	68f8      	ldr	r0, [r7, #12]
 8002528:	f001 f8f2 	bl	8003710 <I2C_TransferConfig>
 800252c:	e06c      	b.n	8002608 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002532:	b29a      	uxth	r2, r3
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800253c:	b2da      	uxtb	r2, r3
 800253e:	8979      	ldrh	r1, [r7, #10]
 8002540:	4b48      	ldr	r3, [pc, #288]	; (8002664 <HAL_I2C_Master_Transmit+0x1e0>)
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002548:	68f8      	ldr	r0, [r7, #12]
 800254a:	f001 f8e1 	bl	8003710 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800254e:	e05b      	b.n	8002608 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002550:	697a      	ldr	r2, [r7, #20]
 8002552:	6a39      	ldr	r1, [r7, #32]
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f000 fef8 	bl	800334a <I2C_WaitOnTXISFlagUntilTimeout>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d001      	beq.n	8002564 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e07b      	b.n	800265c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002568:	781a      	ldrb	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002574:	1c5a      	adds	r2, r3, #1
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800257e:	b29b      	uxth	r3, r3
 8002580:	3b01      	subs	r3, #1
 8002582:	b29a      	uxth	r2, r3
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800258c:	3b01      	subs	r3, #1
 800258e:	b29a      	uxth	r2, r3
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002598:	b29b      	uxth	r3, r3
 800259a:	2b00      	cmp	r3, #0
 800259c:	d034      	beq.n	8002608 <HAL_I2C_Master_Transmit+0x184>
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d130      	bne.n	8002608 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80025a6:	697b      	ldr	r3, [r7, #20]
 80025a8:	9300      	str	r3, [sp, #0]
 80025aa:	6a3b      	ldr	r3, [r7, #32]
 80025ac:	2200      	movs	r2, #0
 80025ae:	2180      	movs	r1, #128	; 0x80
 80025b0:	68f8      	ldr	r0, [r7, #12]
 80025b2:	f000 fe8a 	bl	80032ca <I2C_WaitOnFlagUntilTimeout>
 80025b6:	4603      	mov	r3, r0
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d001      	beq.n	80025c0 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80025bc:	2301      	movs	r3, #1
 80025be:	e04d      	b.n	800265c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	2bff      	cmp	r3, #255	; 0xff
 80025c8:	d90e      	bls.n	80025e8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	22ff      	movs	r2, #255	; 0xff
 80025ce:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	8979      	ldrh	r1, [r7, #10]
 80025d8:	2300      	movs	r3, #0
 80025da:	9300      	str	r3, [sp, #0]
 80025dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80025e0:	68f8      	ldr	r0, [r7, #12]
 80025e2:	f001 f895 	bl	8003710 <I2C_TransferConfig>
 80025e6:	e00f      	b.n	8002608 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80025f6:	b2da      	uxtb	r2, r3
 80025f8:	8979      	ldrh	r1, [r7, #10]
 80025fa:	2300      	movs	r3, #0
 80025fc:	9300      	str	r3, [sp, #0]
 80025fe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002602:	68f8      	ldr	r0, [r7, #12]
 8002604:	f001 f884 	bl	8003710 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800260c:	b29b      	uxth	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d19e      	bne.n	8002550 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002612:	697a      	ldr	r2, [r7, #20]
 8002614:	6a39      	ldr	r1, [r7, #32]
 8002616:	68f8      	ldr	r0, [r7, #12]
 8002618:	f000 fed7 	bl	80033ca <I2C_WaitOnSTOPFlagUntilTimeout>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e01a      	b.n	800265c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2220      	movs	r2, #32
 800262c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6859      	ldr	r1, [r3, #4]
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681a      	ldr	r2, [r3, #0]
 8002638:	4b0b      	ldr	r3, [pc, #44]	; (8002668 <HAL_I2C_Master_Transmit+0x1e4>)
 800263a:	400b      	ands	r3, r1
 800263c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	2220      	movs	r2, #32
 8002642:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2200      	movs	r2, #0
 800264a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002656:	2300      	movs	r3, #0
 8002658:	e000      	b.n	800265c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800265a:	2302      	movs	r3, #2
  }
}
 800265c:	4618      	mov	r0, r3
 800265e:	3718      	adds	r7, #24
 8002660:	46bd      	mov	sp, r7
 8002662:	bd80      	pop	{r7, pc}
 8002664:	80002000 	.word	0x80002000
 8002668:	fe00e800 	.word	0xfe00e800

0800266c <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b088      	sub	sp, #32
 8002670:	af02      	add	r7, sp, #8
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	607a      	str	r2, [r7, #4]
 8002676:	461a      	mov	r2, r3
 8002678:	460b      	mov	r3, r1
 800267a:	817b      	strh	r3, [r7, #10]
 800267c:	4613      	mov	r3, r2
 800267e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2b20      	cmp	r3, #32
 800268a:	f040 80db 	bne.w	8002844 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002694:	2b01      	cmp	r3, #1
 8002696:	d101      	bne.n	800269c <HAL_I2C_Master_Receive+0x30>
 8002698:	2302      	movs	r3, #2
 800269a:	e0d4      	b.n	8002846 <HAL_I2C_Master_Receive+0x1da>
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80026a4:	f7fe ff0e 	bl	80014c4 <HAL_GetTick>
 80026a8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80026aa:	697b      	ldr	r3, [r7, #20]
 80026ac:	9300      	str	r3, [sp, #0]
 80026ae:	2319      	movs	r3, #25
 80026b0:	2201      	movs	r2, #1
 80026b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80026b6:	68f8      	ldr	r0, [r7, #12]
 80026b8:	f000 fe07 	bl	80032ca <I2C_WaitOnFlagUntilTimeout>
 80026bc:	4603      	mov	r3, r0
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d001      	beq.n	80026c6 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e0bf      	b.n	8002846 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2222      	movs	r2, #34	; 0x22
 80026ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	2210      	movs	r2, #16
 80026d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2200      	movs	r2, #0
 80026da:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	893a      	ldrh	r2, [r7, #8]
 80026e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2200      	movs	r2, #0
 80026ec:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80026f2:	b29b      	uxth	r3, r3
 80026f4:	2bff      	cmp	r3, #255	; 0xff
 80026f6:	d90e      	bls.n	8002716 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	22ff      	movs	r2, #255	; 0xff
 80026fc:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002702:	b2da      	uxtb	r2, r3
 8002704:	8979      	ldrh	r1, [r7, #10]
 8002706:	4b52      	ldr	r3, [pc, #328]	; (8002850 <HAL_I2C_Master_Receive+0x1e4>)
 8002708:	9300      	str	r3, [sp, #0]
 800270a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f000 fffe 	bl	8003710 <I2C_TransferConfig>
 8002714:	e06d      	b.n	80027f2 <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800271a:	b29a      	uxth	r2, r3
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002724:	b2da      	uxtb	r2, r3
 8002726:	8979      	ldrh	r1, [r7, #10]
 8002728:	4b49      	ldr	r3, [pc, #292]	; (8002850 <HAL_I2C_Master_Receive+0x1e4>)
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f000 ffed 	bl	8003710 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002736:	e05c      	b.n	80027f2 <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002738:	697a      	ldr	r2, [r7, #20]
 800273a:	6a39      	ldr	r1, [r7, #32]
 800273c:	68f8      	ldr	r0, [r7, #12]
 800273e:	f000 fe81 	bl	8003444 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002742:	4603      	mov	r3, r0
 8002744:	2b00      	cmp	r3, #0
 8002746:	d001      	beq.n	800274c <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e07c      	b.n	8002846 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002756:	b2d2      	uxtb	r2, r2
 8002758:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002768:	3b01      	subs	r3, #1
 800276a:	b29a      	uxth	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002774:	b29b      	uxth	r3, r3
 8002776:	3b01      	subs	r3, #1
 8002778:	b29a      	uxth	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002782:	b29b      	uxth	r3, r3
 8002784:	2b00      	cmp	r3, #0
 8002786:	d034      	beq.n	80027f2 <HAL_I2C_Master_Receive+0x186>
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800278c:	2b00      	cmp	r3, #0
 800278e:	d130      	bne.n	80027f2 <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	9300      	str	r3, [sp, #0]
 8002794:	6a3b      	ldr	r3, [r7, #32]
 8002796:	2200      	movs	r2, #0
 8002798:	2180      	movs	r1, #128	; 0x80
 800279a:	68f8      	ldr	r0, [r7, #12]
 800279c:	f000 fd95 	bl	80032ca <I2C_WaitOnFlagUntilTimeout>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d001      	beq.n	80027aa <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e04d      	b.n	8002846 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027ae:	b29b      	uxth	r3, r3
 80027b0:	2bff      	cmp	r3, #255	; 0xff
 80027b2:	d90e      	bls.n	80027d2 <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	22ff      	movs	r2, #255	; 0xff
 80027b8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027be:	b2da      	uxtb	r2, r3
 80027c0:	8979      	ldrh	r1, [r7, #10]
 80027c2:	2300      	movs	r3, #0
 80027c4:	9300      	str	r3, [sp, #0]
 80027c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f000 ffa0 	bl	8003710 <I2C_TransferConfig>
 80027d0:	e00f      	b.n	80027f2 <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027d6:	b29a      	uxth	r2, r3
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	8979      	ldrh	r1, [r7, #10]
 80027e4:	2300      	movs	r3, #0
 80027e6:	9300      	str	r3, [sp, #0]
 80027e8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80027ec:	68f8      	ldr	r0, [r7, #12]
 80027ee:	f000 ff8f 	bl	8003710 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80027f6:	b29b      	uxth	r3, r3
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d19d      	bne.n	8002738 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027fc:	697a      	ldr	r2, [r7, #20]
 80027fe:	6a39      	ldr	r1, [r7, #32]
 8002800:	68f8      	ldr	r0, [r7, #12]
 8002802:	f000 fde2 	bl	80033ca <I2C_WaitOnSTOPFlagUntilTimeout>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d001      	beq.n	8002810 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 800280c:	2301      	movs	r3, #1
 800280e:	e01a      	b.n	8002846 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	2220      	movs	r2, #32
 8002816:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6859      	ldr	r1, [r3, #4]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	4b0c      	ldr	r3, [pc, #48]	; (8002854 <HAL_I2C_Master_Receive+0x1e8>)
 8002824:	400b      	ands	r3, r1
 8002826:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2220      	movs	r2, #32
 800282c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2200      	movs	r2, #0
 800283c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002840:	2300      	movs	r3, #0
 8002842:	e000      	b.n	8002846 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002844:	2302      	movs	r3, #2
  }
}
 8002846:	4618      	mov	r0, r3
 8002848:	3718      	adds	r7, #24
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	80002400 	.word	0x80002400
 8002854:	fe00e800 	.word	0xfe00e800

08002858 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002858:	b580      	push	{r7, lr}
 800285a:	b084      	sub	sp, #16
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	699b      	ldr	r3, [r3, #24]
 8002866:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002874:	2b00      	cmp	r3, #0
 8002876:	d005      	beq.n	8002884 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800287c:	68ba      	ldr	r2, [r7, #8]
 800287e:	68f9      	ldr	r1, [r7, #12]
 8002880:	6878      	ldr	r0, [r7, #4]
 8002882:	4798      	blx	r3
  }
}
 8002884:	bf00      	nop
 8002886:	3710      	adds	r7, #16
 8002888:	46bd      	mov	sp, r7
 800288a:	bd80      	pop	{r7, pc}

0800288c <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	0a1b      	lsrs	r3, r3, #8
 80028a8:	f003 0301 	and.w	r3, r3, #1
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d010      	beq.n	80028d2 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	09db      	lsrs	r3, r3, #7
 80028b4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d00a      	beq.n	80028d2 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028c0:	f043 0201 	orr.w	r2, r3, #1
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028d0:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80028d2:	697b      	ldr	r3, [r7, #20]
 80028d4:	0a9b      	lsrs	r3, r3, #10
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d010      	beq.n	8002900 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	09db      	lsrs	r3, r3, #7
 80028e2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00a      	beq.n	8002900 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ee:	f043 0208 	orr.w	r2, r3, #8
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028fe:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002900:	697b      	ldr	r3, [r7, #20]
 8002902:	0a5b      	lsrs	r3, r3, #9
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	2b00      	cmp	r3, #0
 800290a:	d010      	beq.n	800292e <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	09db      	lsrs	r3, r3, #7
 8002910:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002914:	2b00      	cmp	r3, #0
 8002916:	d00a      	beq.n	800292e <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291c:	f043 0202 	orr.w	r2, r3, #2
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f44f 7200 	mov.w	r2, #512	; 0x200
 800292c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002932:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	f003 030b 	and.w	r3, r3, #11
 800293a:	2b00      	cmp	r3, #0
 800293c:	d003      	beq.n	8002946 <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 800293e:	68f9      	ldr	r1, [r7, #12]
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 fb89 	bl	8003058 <I2C_ITError>
  }
}
 8002946:	bf00      	nop
 8002948:	3718      	adds	r7, #24
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800294e:	b480      	push	{r7}
 8002950:	b083      	sub	sp, #12
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002956:	bf00      	nop
 8002958:	370c      	adds	r7, #12
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr

08002962 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002962:	b480      	push	{r7}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800296a:	bf00      	nop
 800296c:	370c      	adds	r7, #12
 800296e:	46bd      	mov	sp, r7
 8002970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002974:	4770      	bx	lr

08002976 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002976:	b480      	push	{r7}
 8002978:	b083      	sub	sp, #12
 800297a:	af00      	add	r7, sp, #0
 800297c:	6078      	str	r0, [r7, #4]
 800297e:	460b      	mov	r3, r1
 8002980:	70fb      	strb	r3, [r7, #3]
 8002982:	4613      	mov	r3, r2
 8002984:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr

08002992 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b083      	sub	sp, #12
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr

080029ba <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80029c2:	bf00      	nop
 80029c4:	370c      	adds	r7, #12
 80029c6:	46bd      	mov	sp, r7
 80029c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029cc:	4770      	bx	lr

080029ce <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80029ce:	b580      	push	{r7, lr}
 80029d0:	b086      	sub	sp, #24
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	60f8      	str	r0, [r7, #12]
 80029d6:	60b9      	str	r1, [r7, #8]
 80029d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029de:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d101      	bne.n	80029f2 <I2C_Slave_ISR_IT+0x24>
 80029ee:	2302      	movs	r3, #2
 80029f0:	e0ec      	b.n	8002bcc <I2C_Slave_ISR_IT+0x1fe>
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	2201      	movs	r2, #1
 80029f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	095b      	lsrs	r3, r3, #5
 80029fe:	f003 0301 	and.w	r3, r3, #1
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d009      	beq.n	8002a1a <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	095b      	lsrs	r3, r3, #5
 8002a0a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d003      	beq.n	8002a1a <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002a12:	6939      	ldr	r1, [r7, #16]
 8002a14:	68f8      	ldr	r0, [r7, #12]
 8002a16:	f000 f9bf 	bl	8002d98 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002a1a:	693b      	ldr	r3, [r7, #16]
 8002a1c:	091b      	lsrs	r3, r3, #4
 8002a1e:	f003 0301 	and.w	r3, r3, #1
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d04d      	beq.n	8002ac2 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	091b      	lsrs	r3, r3, #4
 8002a2a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d047      	beq.n	8002ac2 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d128      	bne.n	8002a8e <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b28      	cmp	r3, #40	; 0x28
 8002a46:	d108      	bne.n	8002a5a <I2C_Slave_ISR_IT+0x8c>
 8002a48:	697b      	ldr	r3, [r7, #20]
 8002a4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a4e:	d104      	bne.n	8002a5a <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002a50:	6939      	ldr	r1, [r7, #16]
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f000 faaa 	bl	8002fac <I2C_ITListenCplt>
 8002a58:	e032      	b.n	8002ac0 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b29      	cmp	r3, #41	; 0x29
 8002a64:	d10e      	bne.n	8002a84 <I2C_Slave_ISR_IT+0xb6>
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002a6c:	d00a      	beq.n	8002a84 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	2210      	movs	r2, #16
 8002a74:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 fbe5 	bl	8003246 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002a7c:	68f8      	ldr	r0, [r7, #12]
 8002a7e:	f000 f92d 	bl	8002cdc <I2C_ITSlaveSeqCplt>
 8002a82:	e01d      	b.n	8002ac0 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2210      	movs	r2, #16
 8002a8a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002a8c:	e096      	b.n	8002bbc <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2210      	movs	r2, #16
 8002a94:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a9a:	f043 0204 	orr.w	r2, r3, #4
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d004      	beq.n	8002ab2 <I2C_Slave_ISR_IT+0xe4>
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002aae:	f040 8085 	bne.w	8002bbc <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	68f8      	ldr	r0, [r7, #12]
 8002aba:	f000 facd 	bl	8003058 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002abe:	e07d      	b.n	8002bbc <I2C_Slave_ISR_IT+0x1ee>
 8002ac0:	e07c      	b.n	8002bbc <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	089b      	lsrs	r3, r3, #2
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d030      	beq.n	8002b30 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	089b      	lsrs	r3, r3, #2
 8002ad2:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d02a      	beq.n	8002b30 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ade:	b29b      	uxth	r3, r3
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d018      	beq.n	8002b16 <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af6:	1c5a      	adds	r2, r3, #1
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b00:	3b01      	subs	r3, #1
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b0c:	b29b      	uxth	r3, r3
 8002b0e:	3b01      	subs	r3, #1
 8002b10:	b29a      	uxth	r2, r3
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d14f      	bne.n	8002bc0 <I2C_Slave_ISR_IT+0x1f2>
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002b26:	d04b      	beq.n	8002bc0 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f000 f8d7 	bl	8002cdc <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002b2e:	e047      	b.n	8002bc0 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002b30:	693b      	ldr	r3, [r7, #16]
 8002b32:	08db      	lsrs	r3, r3, #3
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d00a      	beq.n	8002b52 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	08db      	lsrs	r3, r3, #3
 8002b40:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d004      	beq.n	8002b52 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002b48:	6939      	ldr	r1, [r7, #16]
 8002b4a:	68f8      	ldr	r0, [r7, #12]
 8002b4c:	f000 f842 	bl	8002bd4 <I2C_ITAddrCplt>
 8002b50:	e037      	b.n	8002bc2 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002b52:	693b      	ldr	r3, [r7, #16]
 8002b54:	085b      	lsrs	r3, r3, #1
 8002b56:	f003 0301 	and.w	r3, r3, #1
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d031      	beq.n	8002bc2 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	085b      	lsrs	r3, r3, #1
 8002b62:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d02b      	beq.n	8002bc2 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d018      	beq.n	8002ba6 <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b78:	781a      	ldrb	r2, [r3, #0]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b84:	1c5a      	adds	r2, r3, #1
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	3b01      	subs	r3, #1
 8002b92:	b29a      	uxth	r2, r3
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b9c:	3b01      	subs	r3, #1
 8002b9e:	b29a      	uxth	r2, r3
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	851a      	strh	r2, [r3, #40]	; 0x28
 8002ba4:	e00d      	b.n	8002bc2 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002bac:	d002      	beq.n	8002bb4 <I2C_Slave_ISR_IT+0x1e6>
 8002bae:	697b      	ldr	r3, [r7, #20]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d106      	bne.n	8002bc2 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002bb4:	68f8      	ldr	r0, [r7, #12]
 8002bb6:	f000 f891 	bl	8002cdc <I2C_ITSlaveSeqCplt>
 8002bba:	e002      	b.n	8002bc2 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8002bbc:	bf00      	nop
 8002bbe:	e000      	b.n	8002bc2 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8002bc0:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3718      	adds	r7, #24
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}

08002bd4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b084      	sub	sp, #16
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
 8002bdc:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002bea:	2b28      	cmp	r3, #40	; 0x28
 8002bec:	d16a      	bne.n	8002cc4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	699b      	ldr	r3, [r3, #24]
 8002bf4:	0c1b      	lsrs	r3, r3, #16
 8002bf6:	b2db      	uxtb	r3, r3
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	699b      	ldr	r3, [r3, #24]
 8002c04:	0c1b      	lsrs	r3, r3, #16
 8002c06:	b29b      	uxth	r3, r3
 8002c08:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002c0c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689b      	ldr	r3, [r3, #8]
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002c1a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	68db      	ldr	r3, [r3, #12]
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002c28:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d138      	bne.n	8002ca4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002c32:	897b      	ldrh	r3, [r7, #10]
 8002c34:	09db      	lsrs	r3, r3, #7
 8002c36:	b29a      	uxth	r2, r3
 8002c38:	89bb      	ldrh	r3, [r7, #12]
 8002c3a:	4053      	eors	r3, r2
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	f003 0306 	and.w	r3, r3, #6
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d11c      	bne.n	8002c80 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002c46:	897b      	ldrh	r3, [r7, #10]
 8002c48:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c4e:	1c5a      	adds	r2, r3, #1
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c58:	2b02      	cmp	r3, #2
 8002c5a:	d13b      	bne.n	8002cd4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	2208      	movs	r2, #8
 8002c68:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002c72:	89ba      	ldrh	r2, [r7, #12]
 8002c74:	7bfb      	ldrb	r3, [r7, #15]
 8002c76:	4619      	mov	r1, r3
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f7ff fe7c 	bl	8002976 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002c7e:	e029      	b.n	8002cd4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002c80:	893b      	ldrh	r3, [r7, #8]
 8002c82:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002c84:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002c88:	6878      	ldr	r0, [r7, #4]
 8002c8a:	f000 fd73 	bl	8003774 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	2200      	movs	r2, #0
 8002c92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002c96:	89ba      	ldrh	r2, [r7, #12]
 8002c98:	7bfb      	ldrb	r3, [r7, #15]
 8002c9a:	4619      	mov	r1, r3
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f7ff fe6a 	bl	8002976 <HAL_I2C_AddrCallback>
}
 8002ca2:	e017      	b.n	8002cd4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002ca4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f000 fd63 	bl	8003774 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002cb6:	89ba      	ldrh	r2, [r7, #12]
 8002cb8:	7bfb      	ldrb	r3, [r7, #15]
 8002cba:	4619      	mov	r1, r3
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f7ff fe5a 	bl	8002976 <HAL_I2C_AddrCallback>
}
 8002cc2:	e007      	b.n	8002cd4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	2208      	movs	r2, #8
 8002cca:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8002cd4:	bf00      	nop
 8002cd6:	3710      	adds	r7, #16
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bd80      	pop	{r7, pc}

08002cdc <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b084      	sub	sp, #16
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002cf4:	68fb      	ldr	r3, [r7, #12]
 8002cf6:	0b9b      	lsrs	r3, r3, #14
 8002cf8:	f003 0301 	and.w	r3, r3, #1
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d008      	beq.n	8002d12 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002d0e:	601a      	str	r2, [r3, #0]
 8002d10:	e00d      	b.n	8002d2e <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	0bdb      	lsrs	r3, r3, #15
 8002d16:	f003 0301 	and.w	r3, r3, #1
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d007      	beq.n	8002d2e <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d2c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d34:	b2db      	uxtb	r3, r3
 8002d36:	2b29      	cmp	r3, #41	; 0x29
 8002d38:	d112      	bne.n	8002d60 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	2228      	movs	r2, #40	; 0x28
 8002d3e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2221      	movs	r2, #33	; 0x21
 8002d46:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8002d48:	2101      	movs	r1, #1
 8002d4a:	6878      	ldr	r0, [r7, #4]
 8002d4c:	f000 fd12 	bl	8003774 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f7ff fdf8 	bl	800294e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8002d5e:	e017      	b.n	8002d90 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d66:	b2db      	uxtb	r3, r3
 8002d68:	2b2a      	cmp	r3, #42	; 0x2a
 8002d6a:	d111      	bne.n	8002d90 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2228      	movs	r2, #40	; 0x28
 8002d70:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2222      	movs	r2, #34	; 0x22
 8002d78:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8002d7a:	2102      	movs	r1, #2
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f000 fcf9 	bl	8003774 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2200      	movs	r2, #0
 8002d86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7ff fde9 	bl	8002962 <HAL_I2C_SlaveRxCpltCallback>
}
 8002d90:	bf00      	nop
 8002d92:	3710      	adds	r7, #16
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bd80      	pop	{r7, pc}

08002d98 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b086      	sub	sp, #24
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002db4:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2220      	movs	r2, #32
 8002dbc:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8002dbe:	7bfb      	ldrb	r3, [r7, #15]
 8002dc0:	2b21      	cmp	r3, #33	; 0x21
 8002dc2:	d002      	beq.n	8002dca <I2C_ITSlaveCplt+0x32>
 8002dc4:	7bfb      	ldrb	r3, [r7, #15]
 8002dc6:	2b29      	cmp	r3, #41	; 0x29
 8002dc8:	d108      	bne.n	8002ddc <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8002dca:	f248 0101 	movw	r1, #32769	; 0x8001
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 fcd0 	bl	8003774 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2221      	movs	r2, #33	; 0x21
 8002dd8:	631a      	str	r2, [r3, #48]	; 0x30
 8002dda:	e00d      	b.n	8002df8 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8002ddc:	7bfb      	ldrb	r3, [r7, #15]
 8002dde:	2b22      	cmp	r3, #34	; 0x22
 8002de0:	d002      	beq.n	8002de8 <I2C_ITSlaveCplt+0x50>
 8002de2:	7bfb      	ldrb	r3, [r7, #15]
 8002de4:	2b2a      	cmp	r3, #42	; 0x2a
 8002de6:	d107      	bne.n	8002df8 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8002de8:	f248 0102 	movw	r1, #32770	; 0x8002
 8002dec:	6878      	ldr	r0, [r7, #4]
 8002dee:	f000 fcc1 	bl	8003774 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2222      	movs	r2, #34	; 0x22
 8002df6:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e06:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6859      	ldr	r1, [r3, #4]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681a      	ldr	r2, [r3, #0]
 8002e12:	4b64      	ldr	r3, [pc, #400]	; (8002fa4 <I2C_ITSlaveCplt+0x20c>)
 8002e14:	400b      	ands	r3, r1
 8002e16:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f000 fa14 	bl	8003246 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8002e1e:	693b      	ldr	r3, [r7, #16]
 8002e20:	0b9b      	lsrs	r3, r3, #14
 8002e22:	f003 0301 	and.w	r3, r3, #1
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d013      	beq.n	8002e52 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	681a      	ldr	r2, [r3, #0]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8002e38:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d020      	beq.n	8002e84 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002e50:	e018      	b.n	8002e84 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	0bdb      	lsrs	r3, r3, #15
 8002e56:	f003 0301 	and.w	r3, r3, #1
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d012      	beq.n	8002e84 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e6c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d006      	beq.n	8002e84 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	b29a      	uxth	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	089b      	lsrs	r3, r3, #2
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d020      	beq.n	8002ed2 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	f023 0304 	bic.w	r3, r3, #4
 8002e96:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea2:	b2d2      	uxtb	r2, r2
 8002ea4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eaa:	1c5a      	adds	r2, r3, #1
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d00c      	beq.n	8002ed2 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ebc:	3b01      	subs	r3, #1
 8002ebe:	b29a      	uxth	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	b29a      	uxth	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ed6:	b29b      	uxth	r3, r3
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d005      	beq.n	8002ee8 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee0:	f043 0204 	orr.w	r2, r3, #4
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d010      	beq.n	8002f20 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f02:	4619      	mov	r1, r3
 8002f04:	6878      	ldr	r0, [r7, #4]
 8002f06:	f000 f8a7 	bl	8003058 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f10:	b2db      	uxtb	r3, r3
 8002f12:	2b28      	cmp	r3, #40	; 0x28
 8002f14:	d141      	bne.n	8002f9a <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8002f16:	6979      	ldr	r1, [r7, #20]
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f000 f847 	bl	8002fac <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8002f1e:	e03c      	b.n	8002f9a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002f28:	d014      	beq.n	8002f54 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8002f2a:	6878      	ldr	r0, [r7, #4]
 8002f2c:	f7ff fed6 	bl	8002cdc <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a1d      	ldr	r2, [pc, #116]	; (8002fa8 <I2C_ITSlaveCplt+0x210>)
 8002f34:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2220      	movs	r2, #32
 8002f3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2200      	movs	r2, #0
 8002f42:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f7ff fd20 	bl	8002992 <HAL_I2C_ListenCpltCallback>
}
 8002f52:	e022      	b.n	8002f9a <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	2b22      	cmp	r3, #34	; 0x22
 8002f5e:	d10e      	bne.n	8002f7e <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2220      	movs	r2, #32
 8002f64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2200      	movs	r2, #0
 8002f72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8002f76:	6878      	ldr	r0, [r7, #4]
 8002f78:	f7ff fcf3 	bl	8002962 <HAL_I2C_SlaveRxCpltCallback>
}
 8002f7c:	e00d      	b.n	8002f9a <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2220      	movs	r2, #32
 8002f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f7ff fcda 	bl	800294e <HAL_I2C_SlaveTxCpltCallback>
}
 8002f9a:	bf00      	nop
 8002f9c:	3718      	adds	r7, #24
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	fe00e800 	.word	0xfe00e800
 8002fa8:	ffff0000 	.word	0xffff0000

08002fac <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a26      	ldr	r2, [pc, #152]	; (8003054 <I2C_ITListenCplt+0xa8>)
 8002fba:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2220      	movs	r2, #32
 8002fc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	089b      	lsrs	r3, r3, #2
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d022      	beq.n	800302a <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fee:	b2d2      	uxtb	r2, r2
 8002ff0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	1c5a      	adds	r2, r3, #1
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003000:	2b00      	cmp	r3, #0
 8003002:	d012      	beq.n	800302a <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003008:	3b01      	subs	r3, #1
 800300a:	b29a      	uxth	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003014:	b29b      	uxth	r3, r3
 8003016:	3b01      	subs	r3, #1
 8003018:	b29a      	uxth	r2, r3
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003022:	f043 0204 	orr.w	r2, r3, #4
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800302a:	f248 0103 	movw	r1, #32771	; 0x8003
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	f000 fba0 	bl	8003774 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	2210      	movs	r2, #16
 800303a:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f7ff fca4 	bl	8002992 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800304a:	bf00      	nop
 800304c:	3708      	adds	r7, #8
 800304e:	46bd      	mov	sp, r7
 8003050:	bd80      	pop	{r7, pc}
 8003052:	bf00      	nop
 8003054:	ffff0000 	.word	0xffff0000

08003058 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
 8003060:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003068:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	4a5d      	ldr	r2, [pc, #372]	; (80031ec <I2C_ITError+0x194>)
 8003076:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2200      	movs	r2, #0
 800307c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003082:	683b      	ldr	r3, [r7, #0]
 8003084:	431a      	orrs	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800308a:	7bfb      	ldrb	r3, [r7, #15]
 800308c:	2b28      	cmp	r3, #40	; 0x28
 800308e:	d005      	beq.n	800309c <I2C_ITError+0x44>
 8003090:	7bfb      	ldrb	r3, [r7, #15]
 8003092:	2b29      	cmp	r3, #41	; 0x29
 8003094:	d002      	beq.n	800309c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003096:	7bfb      	ldrb	r3, [r7, #15]
 8003098:	2b2a      	cmp	r3, #42	; 0x2a
 800309a:	d10b      	bne.n	80030b4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800309c:	2103      	movs	r1, #3
 800309e:	6878      	ldr	r0, [r7, #4]
 80030a0:	f000 fb68 	bl	8003774 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2228      	movs	r2, #40	; 0x28
 80030a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	4a50      	ldr	r2, [pc, #320]	; (80031f0 <I2C_ITError+0x198>)
 80030b0:	635a      	str	r2, [r3, #52]	; 0x34
 80030b2:	e011      	b.n	80030d8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80030b4:	f248 0103 	movw	r1, #32771	; 0x8003
 80030b8:	6878      	ldr	r0, [r7, #4]
 80030ba:	f000 fb5b 	bl	8003774 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	2b60      	cmp	r3, #96	; 0x60
 80030c8:	d003      	beq.n	80030d2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2220      	movs	r2, #32
 80030ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2200      	movs	r2, #0
 80030d6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030dc:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d039      	beq.n	800315a <I2C_ITError+0x102>
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	2b11      	cmp	r3, #17
 80030ea:	d002      	beq.n	80030f2 <I2C_ITError+0x9a>
 80030ec:	68bb      	ldr	r3, [r7, #8]
 80030ee:	2b21      	cmp	r3, #33	; 0x21
 80030f0:	d133      	bne.n	800315a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003100:	d107      	bne.n	8003112 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003110:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003116:	4618      	mov	r0, r3
 8003118:	f7fe ff4f 	bl	8001fba <HAL_DMA_GetState>
 800311c:	4603      	mov	r3, r0
 800311e:	2b01      	cmp	r3, #1
 8003120:	d017      	beq.n	8003152 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003126:	4a33      	ldr	r2, [pc, #204]	; (80031f4 <I2C_ITError+0x19c>)
 8003128:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003136:	4618      	mov	r0, r3
 8003138:	f7fe ff1d 	bl	8001f76 <HAL_DMA_Abort_IT>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d04d      	beq.n	80031de <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003146:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003148:	687a      	ldr	r2, [r7, #4]
 800314a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800314c:	4610      	mov	r0, r2
 800314e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003150:	e045      	b.n	80031de <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f000 f850 	bl	80031f8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003158:	e041      	b.n	80031de <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315e:	2b00      	cmp	r3, #0
 8003160:	d039      	beq.n	80031d6 <I2C_ITError+0x17e>
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	2b12      	cmp	r3, #18
 8003166:	d002      	beq.n	800316e <I2C_ITError+0x116>
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	2b22      	cmp	r3, #34	; 0x22
 800316c:	d133      	bne.n	80031d6 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003178:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800317c:	d107      	bne.n	800318e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800318c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003192:	4618      	mov	r0, r3
 8003194:	f7fe ff11 	bl	8001fba <HAL_DMA_GetState>
 8003198:	4603      	mov	r3, r0
 800319a:	2b01      	cmp	r3, #1
 800319c:	d017      	beq.n	80031ce <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a2:	4a14      	ldr	r2, [pc, #80]	; (80031f4 <I2C_ITError+0x19c>)
 80031a4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2200      	movs	r2, #0
 80031aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7fe fedf 	bl	8001f76 <HAL_DMA_Abort_IT>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d011      	beq.n	80031e2 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80031c8:	4610      	mov	r0, r2
 80031ca:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80031cc:	e009      	b.n	80031e2 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80031ce:	6878      	ldr	r0, [r7, #4]
 80031d0:	f000 f812 	bl	80031f8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80031d4:	e005      	b.n	80031e2 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80031d6:	6878      	ldr	r0, [r7, #4]
 80031d8:	f000 f80e 	bl	80031f8 <I2C_TreatErrorCallback>
  }
}
 80031dc:	e002      	b.n	80031e4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80031de:	bf00      	nop
 80031e0:	e000      	b.n	80031e4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80031e2:	bf00      	nop
}
 80031e4:	bf00      	nop
 80031e6:	3710      	adds	r7, #16
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	ffff0000 	.word	0xffff0000
 80031f0:	080029cf 	.word	0x080029cf
 80031f4:	0800328f 	.word	0x0800328f

080031f8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b60      	cmp	r3, #96	; 0x60
 800320a:	d10e      	bne.n	800322a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2220      	movs	r2, #32
 8003210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7ff fbc9 	bl	80029ba <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003228:	e009      	b.n	800323e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f7ff fbb4 	bl	80029a6 <HAL_I2C_ErrorCallback>
}
 800323e:	bf00      	nop
 8003240:	3708      	adds	r7, #8
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003246:	b480      	push	{r7}
 8003248:	b083      	sub	sp, #12
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	699b      	ldr	r3, [r3, #24]
 8003254:	f003 0302 	and.w	r3, r3, #2
 8003258:	2b02      	cmp	r3, #2
 800325a:	d103      	bne.n	8003264 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	2200      	movs	r2, #0
 8003262:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	699b      	ldr	r3, [r3, #24]
 800326a:	f003 0301 	and.w	r3, r3, #1
 800326e:	2b01      	cmp	r3, #1
 8003270:	d007      	beq.n	8003282 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	699a      	ldr	r2, [r3, #24]
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	f042 0201 	orr.w	r2, r2, #1
 8003280:	619a      	str	r2, [r3, #24]
  }
}
 8003282:	bf00      	nop
 8003284:	370c      	adds	r7, #12
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr

0800328e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800328e:	b580      	push	{r7, lr}
 8003290:	b084      	sub	sp, #16
 8003292:	af00      	add	r7, sp, #0
 8003294:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d003      	beq.n	80032ac <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032a8:	2200      	movs	r2, #0
 80032aa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032b8:	2200      	movs	r2, #0
 80032ba:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80032bc:	68f8      	ldr	r0, [r7, #12]
 80032be:	f7ff ff9b 	bl	80031f8 <I2C_TreatErrorCallback>
}
 80032c2:	bf00      	nop
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b084      	sub	sp, #16
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	60f8      	str	r0, [r7, #12]
 80032d2:	60b9      	str	r1, [r7, #8]
 80032d4:	603b      	str	r3, [r7, #0]
 80032d6:	4613      	mov	r3, r2
 80032d8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80032da:	e022      	b.n	8003322 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032e2:	d01e      	beq.n	8003322 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032e4:	f7fe f8ee 	bl	80014c4 <HAL_GetTick>
 80032e8:	4602      	mov	r2, r0
 80032ea:	69bb      	ldr	r3, [r7, #24]
 80032ec:	1ad3      	subs	r3, r2, r3
 80032ee:	683a      	ldr	r2, [r7, #0]
 80032f0:	429a      	cmp	r2, r3
 80032f2:	d302      	bcc.n	80032fa <I2C_WaitOnFlagUntilTimeout+0x30>
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d113      	bne.n	8003322 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032fe:	f043 0220 	orr.w	r2, r3, #32
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2220      	movs	r2, #32
 800330a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e00f      	b.n	8003342 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	699a      	ldr	r2, [r3, #24]
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	4013      	ands	r3, r2
 800332c:	68ba      	ldr	r2, [r7, #8]
 800332e:	429a      	cmp	r2, r3
 8003330:	bf0c      	ite	eq
 8003332:	2301      	moveq	r3, #1
 8003334:	2300      	movne	r3, #0
 8003336:	b2db      	uxtb	r3, r3
 8003338:	461a      	mov	r2, r3
 800333a:	79fb      	ldrb	r3, [r7, #7]
 800333c:	429a      	cmp	r2, r3
 800333e:	d0cd      	beq.n	80032dc <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003340:	2300      	movs	r3, #0
}
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b084      	sub	sp, #16
 800334e:	af00      	add	r7, sp, #0
 8003350:	60f8      	str	r0, [r7, #12]
 8003352:	60b9      	str	r1, [r7, #8]
 8003354:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003356:	e02c      	b.n	80033b2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	68b9      	ldr	r1, [r7, #8]
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f000 f8eb 	bl	8003538 <I2C_IsErrorOccurred>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d001      	beq.n	800336c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	e02a      	b.n	80033c2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003372:	d01e      	beq.n	80033b2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003374:	f7fe f8a6 	bl	80014c4 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	68ba      	ldr	r2, [r7, #8]
 8003380:	429a      	cmp	r2, r3
 8003382:	d302      	bcc.n	800338a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d113      	bne.n	80033b2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338e:	f043 0220 	orr.w	r2, r3, #32
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2220      	movs	r2, #32
 800339a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	2200      	movs	r2, #0
 80033a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	2200      	movs	r2, #0
 80033aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e007      	b.n	80033c2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	699b      	ldr	r3, [r3, #24]
 80033b8:	f003 0302 	and.w	r3, r3, #2
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d1cb      	bne.n	8003358 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3710      	adds	r7, #16
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b084      	sub	sp, #16
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	60f8      	str	r0, [r7, #12]
 80033d2:	60b9      	str	r1, [r7, #8]
 80033d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80033d6:	e028      	b.n	800342a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80033d8:	687a      	ldr	r2, [r7, #4]
 80033da:	68b9      	ldr	r1, [r7, #8]
 80033dc:	68f8      	ldr	r0, [r7, #12]
 80033de:	f000 f8ab 	bl	8003538 <I2C_IsErrorOccurred>
 80033e2:	4603      	mov	r3, r0
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d001      	beq.n	80033ec <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e026      	b.n	800343a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033ec:	f7fe f86a 	bl	80014c4 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	68ba      	ldr	r2, [r7, #8]
 80033f8:	429a      	cmp	r2, r3
 80033fa:	d302      	bcc.n	8003402 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80033fc:	68bb      	ldr	r3, [r7, #8]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d113      	bne.n	800342a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003406:	f043 0220 	orr.w	r2, r3, #32
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2220      	movs	r2, #32
 8003412:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2200      	movs	r2, #0
 800341a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003426:	2301      	movs	r3, #1
 8003428:	e007      	b.n	800343a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	699b      	ldr	r3, [r3, #24]
 8003430:	f003 0320 	and.w	r3, r3, #32
 8003434:	2b20      	cmp	r3, #32
 8003436:	d1cf      	bne.n	80033d8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3710      	adds	r7, #16
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
	...

08003444 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b084      	sub	sp, #16
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003450:	e064      	b.n	800351c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003452:	687a      	ldr	r2, [r7, #4]
 8003454:	68b9      	ldr	r1, [r7, #8]
 8003456:	68f8      	ldr	r0, [r7, #12]
 8003458:	f000 f86e 	bl	8003538 <I2C_IsErrorOccurred>
 800345c:	4603      	mov	r3, r0
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003462:	2301      	movs	r3, #1
 8003464:	e062      	b.n	800352c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	699b      	ldr	r3, [r3, #24]
 800346c:	f003 0320 	and.w	r3, r3, #32
 8003470:	2b20      	cmp	r3, #32
 8003472:	d138      	bne.n	80034e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	f003 0304 	and.w	r3, r3, #4
 800347e:	2b04      	cmp	r3, #4
 8003480:	d105      	bne.n	800348e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800348a:	2300      	movs	r3, #0
 800348c:	e04e      	b.n	800352c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	699b      	ldr	r3, [r3, #24]
 8003494:	f003 0310 	and.w	r3, r3, #16
 8003498:	2b10      	cmp	r3, #16
 800349a:	d107      	bne.n	80034ac <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2210      	movs	r2, #16
 80034a2:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2204      	movs	r2, #4
 80034a8:	645a      	str	r2, [r3, #68]	; 0x44
 80034aa:	e002      	b.n	80034b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	2200      	movs	r2, #0
 80034b0:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	2220      	movs	r2, #32
 80034b8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	6859      	ldr	r1, [r3, #4]
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681a      	ldr	r2, [r3, #0]
 80034c4:	4b1b      	ldr	r3, [pc, #108]	; (8003534 <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 80034c6:	400b      	ands	r3, r1
 80034c8:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	2220      	movs	r2, #32
 80034ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	2200      	movs	r2, #0
 80034d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2200      	movs	r2, #0
 80034de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e022      	b.n	800352c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034e6:	f7fd ffed 	bl	80014c4 <HAL_GetTick>
 80034ea:	4602      	mov	r2, r0
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	68ba      	ldr	r2, [r7, #8]
 80034f2:	429a      	cmp	r2, r3
 80034f4:	d302      	bcc.n	80034fc <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d10f      	bne.n	800351c <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003500:	f043 0220 	orr.w	r2, r3, #32
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2220      	movs	r2, #32
 800350c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e007      	b.n	800352c <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	f003 0304 	and.w	r3, r3, #4
 8003526:	2b04      	cmp	r3, #4
 8003528:	d193      	bne.n	8003452 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3710      	adds	r7, #16
 8003530:	46bd      	mov	sp, r7
 8003532:	bd80      	pop	{r7, pc}
 8003534:	fe00e800 	.word	0xfe00e800

08003538 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b08a      	sub	sp, #40	; 0x28
 800353c:	af00      	add	r7, sp, #0
 800353e:	60f8      	str	r0, [r7, #12]
 8003540:	60b9      	str	r1, [r7, #8]
 8003542:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003544:	2300      	movs	r3, #0
 8003546:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003552:	2300      	movs	r3, #0
 8003554:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800355a:	69bb      	ldr	r3, [r7, #24]
 800355c:	f003 0310 	and.w	r3, r3, #16
 8003560:	2b00      	cmp	r3, #0
 8003562:	d075      	beq.n	8003650 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2210      	movs	r2, #16
 800356a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800356c:	e056      	b.n	800361c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800356e:	68bb      	ldr	r3, [r7, #8]
 8003570:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003574:	d052      	beq.n	800361c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003576:	f7fd ffa5 	bl	80014c4 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	68ba      	ldr	r2, [r7, #8]
 8003582:	429a      	cmp	r2, r3
 8003584:	d302      	bcc.n	800358c <I2C_IsErrorOccurred+0x54>
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d147      	bne.n	800361c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003596:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800359e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	699b      	ldr	r3, [r3, #24]
 80035a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80035ae:	d12e      	bne.n	800360e <I2C_IsErrorOccurred+0xd6>
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80035b6:	d02a      	beq.n	800360e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80035b8:	7cfb      	ldrb	r3, [r7, #19]
 80035ba:	2b20      	cmp	r3, #32
 80035bc:	d027      	beq.n	800360e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685a      	ldr	r2, [r3, #4]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035cc:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80035ce:	f7fd ff79 	bl	80014c4 <HAL_GetTick>
 80035d2:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80035d4:	e01b      	b.n	800360e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80035d6:	f7fd ff75 	bl	80014c4 <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	69fb      	ldr	r3, [r7, #28]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	2b19      	cmp	r3, #25
 80035e2:	d914      	bls.n	800360e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035e8:	f043 0220 	orr.w	r2, r3, #32
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	2220      	movs	r2, #32
 80035f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	2200      	movs	r2, #0
 80035fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2200      	movs	r2, #0
 8003604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003608:	2301      	movs	r3, #1
 800360a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	699b      	ldr	r3, [r3, #24]
 8003614:	f003 0320 	and.w	r3, r3, #32
 8003618:	2b20      	cmp	r3, #32
 800361a:	d1dc      	bne.n	80035d6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	f003 0320 	and.w	r3, r3, #32
 8003626:	2b20      	cmp	r3, #32
 8003628:	d003      	beq.n	8003632 <I2C_IsErrorOccurred+0xfa>
 800362a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800362e:	2b00      	cmp	r3, #0
 8003630:	d09d      	beq.n	800356e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003632:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003636:	2b00      	cmp	r3, #0
 8003638:	d103      	bne.n	8003642 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	2220      	movs	r2, #32
 8003640:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003642:	6a3b      	ldr	r3, [r7, #32]
 8003644:	f043 0304 	orr.w	r3, r3, #4
 8003648:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	699b      	ldr	r3, [r3, #24]
 8003656:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365e:	2b00      	cmp	r3, #0
 8003660:	d00b      	beq.n	800367a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003662:	6a3b      	ldr	r3, [r7, #32]
 8003664:	f043 0301 	orr.w	r3, r3, #1
 8003668:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003672:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003680:	2b00      	cmp	r3, #0
 8003682:	d00b      	beq.n	800369c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003684:	6a3b      	ldr	r3, [r7, #32]
 8003686:	f043 0308 	orr.w	r3, r3, #8
 800368a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003694:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800369c:	69bb      	ldr	r3, [r7, #24]
 800369e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00b      	beq.n	80036be <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80036a6:	6a3b      	ldr	r3, [r7, #32]
 80036a8:	f043 0302 	orr.w	r3, r3, #2
 80036ac:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036b6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80036be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d01c      	beq.n	8003700 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f7ff fdbd 	bl	8003246 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6859      	ldr	r1, [r3, #4]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	4b0d      	ldr	r3, [pc, #52]	; (800370c <I2C_IsErrorOccurred+0x1d4>)
 80036d8:	400b      	ands	r3, r1
 80036da:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80036e0:	6a3b      	ldr	r3, [r7, #32]
 80036e2:	431a      	orrs	r2, r3
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	2220      	movs	r2, #32
 80036ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2200      	movs	r2, #0
 80036fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003700:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003704:	4618      	mov	r0, r3
 8003706:	3728      	adds	r7, #40	; 0x28
 8003708:	46bd      	mov	sp, r7
 800370a:	bd80      	pop	{r7, pc}
 800370c:	fe00e800 	.word	0xfe00e800

08003710 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003710:	b480      	push	{r7}
 8003712:	b087      	sub	sp, #28
 8003714:	af00      	add	r7, sp, #0
 8003716:	60f8      	str	r0, [r7, #12]
 8003718:	607b      	str	r3, [r7, #4]
 800371a:	460b      	mov	r3, r1
 800371c:	817b      	strh	r3, [r7, #10]
 800371e:	4613      	mov	r3, r2
 8003720:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003722:	897b      	ldrh	r3, [r7, #10]
 8003724:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003728:	7a7b      	ldrb	r3, [r7, #9]
 800372a:	041b      	lsls	r3, r3, #16
 800372c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003730:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003736:	6a3b      	ldr	r3, [r7, #32]
 8003738:	4313      	orrs	r3, r2
 800373a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800373e:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	685a      	ldr	r2, [r3, #4]
 8003746:	6a3b      	ldr	r3, [r7, #32]
 8003748:	0d5b      	lsrs	r3, r3, #21
 800374a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800374e:	4b08      	ldr	r3, [pc, #32]	; (8003770 <I2C_TransferConfig+0x60>)
 8003750:	430b      	orrs	r3, r1
 8003752:	43db      	mvns	r3, r3
 8003754:	ea02 0103 	and.w	r1, r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	697a      	ldr	r2, [r7, #20]
 800375e:	430a      	orrs	r2, r1
 8003760:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003762:	bf00      	nop
 8003764:	371c      	adds	r7, #28
 8003766:	46bd      	mov	sp, r7
 8003768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800376c:	4770      	bx	lr
 800376e:	bf00      	nop
 8003770:	03ff63ff 	.word	0x03ff63ff

08003774 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	460b      	mov	r3, r1
 800377e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003780:	2300      	movs	r3, #0
 8003782:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003784:	887b      	ldrh	r3, [r7, #2]
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00f      	beq.n	80037ae <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003794:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800379c:	b2db      	uxtb	r3, r3
 800379e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80037a2:	2b28      	cmp	r3, #40	; 0x28
 80037a4:	d003      	beq.n	80037ae <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80037ac:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80037ae:	887b      	ldrh	r3, [r7, #2]
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d00f      	beq.n	80037d8 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80037be:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037c6:	b2db      	uxtb	r3, r3
 80037c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80037cc:	2b28      	cmp	r3, #40	; 0x28
 80037ce:	d003      	beq.n	80037d8 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80037d6:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80037d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80037dc:	2b00      	cmp	r3, #0
 80037de:	da03      	bge.n	80037e8 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80037e6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80037e8:	887b      	ldrh	r3, [r7, #2]
 80037ea:	2b10      	cmp	r3, #16
 80037ec:	d103      	bne.n	80037f6 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80037f4:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80037f6:	887b      	ldrh	r3, [r7, #2]
 80037f8:	2b20      	cmp	r3, #32
 80037fa:	d103      	bne.n	8003804 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f043 0320 	orr.w	r3, r3, #32
 8003802:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003804:	887b      	ldrh	r3, [r7, #2]
 8003806:	2b40      	cmp	r3, #64	; 0x40
 8003808:	d103      	bne.n	8003812 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003810:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6819      	ldr	r1, [r3, #0]
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	43da      	mvns	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	400a      	ands	r2, r1
 8003822:	601a      	str	r2, [r3, #0]
}
 8003824:	bf00      	nop
 8003826:	3714      	adds	r7, #20
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b20      	cmp	r3, #32
 8003844:	d138      	bne.n	80038b8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800384c:	2b01      	cmp	r3, #1
 800384e:	d101      	bne.n	8003854 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003850:	2302      	movs	r3, #2
 8003852:	e032      	b.n	80038ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2224      	movs	r2, #36	; 0x24
 8003860:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0201 	bic.w	r2, r2, #1
 8003872:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681a      	ldr	r2, [r3, #0]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003882:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	6819      	ldr	r1, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	683a      	ldr	r2, [r7, #0]
 8003890:	430a      	orrs	r2, r1
 8003892:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	681a      	ldr	r2, [r3, #0]
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f042 0201 	orr.w	r2, r2, #1
 80038a2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2220      	movs	r2, #32
 80038a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80038b4:	2300      	movs	r3, #0
 80038b6:	e000      	b.n	80038ba <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80038b8:	2302      	movs	r3, #2
  }
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr

080038c6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80038c6:	b480      	push	{r7}
 80038c8:	b085      	sub	sp, #20
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
 80038ce:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038d6:	b2db      	uxtb	r3, r3
 80038d8:	2b20      	cmp	r3, #32
 80038da:	d139      	bne.n	8003950 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d101      	bne.n	80038ea <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80038e6:	2302      	movs	r3, #2
 80038e8:	e033      	b.n	8003952 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2224      	movs	r2, #36	; 0x24
 80038f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681a      	ldr	r2, [r3, #0]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 0201 	bic.w	r2, r2, #1
 8003908:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003918:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	021b      	lsls	r3, r3, #8
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	4313      	orrs	r3, r2
 8003922:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	68fa      	ldr	r2, [r7, #12]
 800392a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f042 0201 	orr.w	r2, r2, #1
 800393a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2220      	movs	r2, #32
 8003940:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2200      	movs	r2, #0
 8003948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800394c:	2300      	movs	r3, #0
 800394e:	e000      	b.n	8003952 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003950:	2302      	movs	r3, #2
  }
}
 8003952:	4618      	mov	r0, r3
 8003954:	3714      	adds	r7, #20
 8003956:	46bd      	mov	sp, r7
 8003958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395c:	4770      	bx	lr
	...

08003960 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003964:	4b05      	ldr	r3, [pc, #20]	; (800397c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a04      	ldr	r2, [pc, #16]	; (800397c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800396a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800396e:	6013      	str	r3, [r2, #0]
}
 8003970:	bf00      	nop
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	40007000 	.word	0x40007000

08003980 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b082      	sub	sp, #8
 8003984:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003986:	2300      	movs	r3, #0
 8003988:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800398a:	4b23      	ldr	r3, [pc, #140]	; (8003a18 <HAL_PWREx_EnableOverDrive+0x98>)
 800398c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800398e:	4a22      	ldr	r2, [pc, #136]	; (8003a18 <HAL_PWREx_EnableOverDrive+0x98>)
 8003990:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003994:	6413      	str	r3, [r2, #64]	; 0x40
 8003996:	4b20      	ldr	r3, [pc, #128]	; (8003a18 <HAL_PWREx_EnableOverDrive+0x98>)
 8003998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800399a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800399e:	603b      	str	r3, [r7, #0]
 80039a0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80039a2:	4b1e      	ldr	r3, [pc, #120]	; (8003a1c <HAL_PWREx_EnableOverDrive+0x9c>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	4a1d      	ldr	r2, [pc, #116]	; (8003a1c <HAL_PWREx_EnableOverDrive+0x9c>)
 80039a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039ac:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039ae:	f7fd fd89 	bl	80014c4 <HAL_GetTick>
 80039b2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039b4:	e009      	b.n	80039ca <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039b6:	f7fd fd85 	bl	80014c4 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039c4:	d901      	bls.n	80039ca <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e022      	b.n	8003a10 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80039ca:	4b14      	ldr	r3, [pc, #80]	; (8003a1c <HAL_PWREx_EnableOverDrive+0x9c>)
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039d6:	d1ee      	bne.n	80039b6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80039d8:	4b10      	ldr	r3, [pc, #64]	; (8003a1c <HAL_PWREx_EnableOverDrive+0x9c>)
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a0f      	ldr	r2, [pc, #60]	; (8003a1c <HAL_PWREx_EnableOverDrive+0x9c>)
 80039de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80039e4:	f7fd fd6e 	bl	80014c4 <HAL_GetTick>
 80039e8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80039ea:	e009      	b.n	8003a00 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80039ec:	f7fd fd6a 	bl	80014c4 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80039fa:	d901      	bls.n	8003a00 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80039fc:	2303      	movs	r3, #3
 80039fe:	e007      	b.n	8003a10 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003a00:	4b06      	ldr	r3, [pc, #24]	; (8003a1c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003a0c:	d1ee      	bne.n	80039ec <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3708      	adds	r7, #8
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}
 8003a18:	40023800 	.word	0x40023800
 8003a1c:	40007000 	.word	0x40007000

08003a20 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b086      	sub	sp, #24
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003a28:	2300      	movs	r3, #0
 8003a2a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d101      	bne.n	8003a36 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003a32:	2301      	movs	r3, #1
 8003a34:	e29b      	b.n	8003f6e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 8087 	beq.w	8003b52 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a44:	4b96      	ldr	r3, [pc, #600]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f003 030c 	and.w	r3, r3, #12
 8003a4c:	2b04      	cmp	r3, #4
 8003a4e:	d00c      	beq.n	8003a6a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a50:	4b93      	ldr	r3, [pc, #588]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	f003 030c 	and.w	r3, r3, #12
 8003a58:	2b08      	cmp	r3, #8
 8003a5a:	d112      	bne.n	8003a82 <HAL_RCC_OscConfig+0x62>
 8003a5c:	4b90      	ldr	r3, [pc, #576]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a68:	d10b      	bne.n	8003a82 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a6a:	4b8d      	ldr	r3, [pc, #564]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d06c      	beq.n	8003b50 <HAL_RCC_OscConfig+0x130>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d168      	bne.n	8003b50 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e275      	b.n	8003f6e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a8a:	d106      	bne.n	8003a9a <HAL_RCC_OscConfig+0x7a>
 8003a8c:	4b84      	ldr	r3, [pc, #528]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a83      	ldr	r2, [pc, #524]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003a92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a96:	6013      	str	r3, [r2, #0]
 8003a98:	e02e      	b.n	8003af8 <HAL_RCC_OscConfig+0xd8>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10c      	bne.n	8003abc <HAL_RCC_OscConfig+0x9c>
 8003aa2:	4b7f      	ldr	r3, [pc, #508]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	4a7e      	ldr	r2, [pc, #504]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003aa8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aac:	6013      	str	r3, [r2, #0]
 8003aae:	4b7c      	ldr	r3, [pc, #496]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a7b      	ldr	r2, [pc, #492]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003ab4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ab8:	6013      	str	r3, [r2, #0]
 8003aba:	e01d      	b.n	8003af8 <HAL_RCC_OscConfig+0xd8>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ac4:	d10c      	bne.n	8003ae0 <HAL_RCC_OscConfig+0xc0>
 8003ac6:	4b76      	ldr	r3, [pc, #472]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a75      	ldr	r2, [pc, #468]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003acc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ad0:	6013      	str	r3, [r2, #0]
 8003ad2:	4b73      	ldr	r3, [pc, #460]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a72      	ldr	r2, [pc, #456]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003ad8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003adc:	6013      	str	r3, [r2, #0]
 8003ade:	e00b      	b.n	8003af8 <HAL_RCC_OscConfig+0xd8>
 8003ae0:	4b6f      	ldr	r3, [pc, #444]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	4a6e      	ldr	r2, [pc, #440]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003ae6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003aea:	6013      	str	r3, [r2, #0]
 8003aec:	4b6c      	ldr	r3, [pc, #432]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	4a6b      	ldr	r2, [pc, #428]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003af2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003af6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	685b      	ldr	r3, [r3, #4]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d013      	beq.n	8003b28 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b00:	f7fd fce0 	bl	80014c4 <HAL_GetTick>
 8003b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b06:	e008      	b.n	8003b1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b08:	f7fd fcdc 	bl	80014c4 <HAL_GetTick>
 8003b0c:	4602      	mov	r2, r0
 8003b0e:	693b      	ldr	r3, [r7, #16]
 8003b10:	1ad3      	subs	r3, r2, r3
 8003b12:	2b64      	cmp	r3, #100	; 0x64
 8003b14:	d901      	bls.n	8003b1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e229      	b.n	8003f6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b1a:	4b61      	ldr	r3, [pc, #388]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d0f0      	beq.n	8003b08 <HAL_RCC_OscConfig+0xe8>
 8003b26:	e014      	b.n	8003b52 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b28:	f7fd fccc 	bl	80014c4 <HAL_GetTick>
 8003b2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b2e:	e008      	b.n	8003b42 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003b30:	f7fd fcc8 	bl	80014c4 <HAL_GetTick>
 8003b34:	4602      	mov	r2, r0
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	1ad3      	subs	r3, r2, r3
 8003b3a:	2b64      	cmp	r3, #100	; 0x64
 8003b3c:	d901      	bls.n	8003b42 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003b3e:	2303      	movs	r3, #3
 8003b40:	e215      	b.n	8003f6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003b42:	4b57      	ldr	r3, [pc, #348]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d1f0      	bne.n	8003b30 <HAL_RCC_OscConfig+0x110>
 8003b4e:	e000      	b.n	8003b52 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b50:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0302 	and.w	r3, r3, #2
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d069      	beq.n	8003c32 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003b5e:	4b50      	ldr	r3, [pc, #320]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f003 030c 	and.w	r3, r3, #12
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d00b      	beq.n	8003b82 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b6a:	4b4d      	ldr	r3, [pc, #308]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	f003 030c 	and.w	r3, r3, #12
 8003b72:	2b08      	cmp	r3, #8
 8003b74:	d11c      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x190>
 8003b76:	4b4a      	ldr	r3, [pc, #296]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d116      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b82:	4b47      	ldr	r3, [pc, #284]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 0302 	and.w	r3, r3, #2
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d005      	beq.n	8003b9a <HAL_RCC_OscConfig+0x17a>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	68db      	ldr	r3, [r3, #12]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d001      	beq.n	8003b9a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e1e9      	b.n	8003f6e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b9a:	4b41      	ldr	r3, [pc, #260]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	691b      	ldr	r3, [r3, #16]
 8003ba6:	00db      	lsls	r3, r3, #3
 8003ba8:	493d      	ldr	r1, [pc, #244]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003bae:	e040      	b.n	8003c32 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d023      	beq.n	8003c00 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003bb8:	4b39      	ldr	r3, [pc, #228]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a38      	ldr	r2, [pc, #224]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003bbe:	f043 0301 	orr.w	r3, r3, #1
 8003bc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003bc4:	f7fd fc7e 	bl	80014c4 <HAL_GetTick>
 8003bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bca:	e008      	b.n	8003bde <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003bcc:	f7fd fc7a 	bl	80014c4 <HAL_GetTick>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	693b      	ldr	r3, [r7, #16]
 8003bd4:	1ad3      	subs	r3, r2, r3
 8003bd6:	2b02      	cmp	r3, #2
 8003bd8:	d901      	bls.n	8003bde <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003bda:	2303      	movs	r3, #3
 8003bdc:	e1c7      	b.n	8003f6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003bde:	4b30      	ldr	r3, [pc, #192]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f003 0302 	and.w	r3, r3, #2
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d0f0      	beq.n	8003bcc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003bea:	4b2d      	ldr	r3, [pc, #180]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	691b      	ldr	r3, [r3, #16]
 8003bf6:	00db      	lsls	r3, r3, #3
 8003bf8:	4929      	ldr	r1, [pc, #164]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003bfa:	4313      	orrs	r3, r2
 8003bfc:	600b      	str	r3, [r1, #0]
 8003bfe:	e018      	b.n	8003c32 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003c00:	4b27      	ldr	r3, [pc, #156]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a26      	ldr	r2, [pc, #152]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003c06:	f023 0301 	bic.w	r3, r3, #1
 8003c0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c0c:	f7fd fc5a 	bl	80014c4 <HAL_GetTick>
 8003c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c12:	e008      	b.n	8003c26 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003c14:	f7fd fc56 	bl	80014c4 <HAL_GetTick>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	1ad3      	subs	r3, r2, r3
 8003c1e:	2b02      	cmp	r3, #2
 8003c20:	d901      	bls.n	8003c26 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003c22:	2303      	movs	r3, #3
 8003c24:	e1a3      	b.n	8003f6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003c26:	4b1e      	ldr	r3, [pc, #120]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0302 	and.w	r3, r3, #2
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1f0      	bne.n	8003c14 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 0308 	and.w	r3, r3, #8
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d038      	beq.n	8003cb0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d019      	beq.n	8003c7a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003c46:	4b16      	ldr	r3, [pc, #88]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003c48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c4a:	4a15      	ldr	r2, [pc, #84]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003c4c:	f043 0301 	orr.w	r3, r3, #1
 8003c50:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c52:	f7fd fc37 	bl	80014c4 <HAL_GetTick>
 8003c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c58:	e008      	b.n	8003c6c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c5a:	f7fd fc33 	bl	80014c4 <HAL_GetTick>
 8003c5e:	4602      	mov	r2, r0
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	1ad3      	subs	r3, r2, r3
 8003c64:	2b02      	cmp	r3, #2
 8003c66:	d901      	bls.n	8003c6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	e180      	b.n	8003f6e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003c6c:	4b0c      	ldr	r3, [pc, #48]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003c6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c70:	f003 0302 	and.w	r3, r3, #2
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d0f0      	beq.n	8003c5a <HAL_RCC_OscConfig+0x23a>
 8003c78:	e01a      	b.n	8003cb0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c7a:	4b09      	ldr	r3, [pc, #36]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c7e:	4a08      	ldr	r2, [pc, #32]	; (8003ca0 <HAL_RCC_OscConfig+0x280>)
 8003c80:	f023 0301 	bic.w	r3, r3, #1
 8003c84:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003c86:	f7fd fc1d 	bl	80014c4 <HAL_GetTick>
 8003c8a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c8c:	e00a      	b.n	8003ca4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003c8e:	f7fd fc19 	bl	80014c4 <HAL_GetTick>
 8003c92:	4602      	mov	r2, r0
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	1ad3      	subs	r3, r2, r3
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d903      	bls.n	8003ca4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003c9c:	2303      	movs	r3, #3
 8003c9e:	e166      	b.n	8003f6e <HAL_RCC_OscConfig+0x54e>
 8003ca0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ca4:	4b92      	ldr	r3, [pc, #584]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ca8:	f003 0302 	and.w	r3, r3, #2
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d1ee      	bne.n	8003c8e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0304 	and.w	r3, r3, #4
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	f000 80a4 	beq.w	8003e06 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003cbe:	4b8c      	ldr	r3, [pc, #560]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d10d      	bne.n	8003ce6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003cca:	4b89      	ldr	r3, [pc, #548]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cce:	4a88      	ldr	r2, [pc, #544]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8003cd6:	4b86      	ldr	r3, [pc, #536]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cde:	60bb      	str	r3, [r7, #8]
 8003ce0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ce6:	4b83      	ldr	r3, [pc, #524]	; (8003ef4 <HAL_RCC_OscConfig+0x4d4>)
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d118      	bne.n	8003d24 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003cf2:	4b80      	ldr	r3, [pc, #512]	; (8003ef4 <HAL_RCC_OscConfig+0x4d4>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	4a7f      	ldr	r2, [pc, #508]	; (8003ef4 <HAL_RCC_OscConfig+0x4d4>)
 8003cf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003cfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003cfe:	f7fd fbe1 	bl	80014c4 <HAL_GetTick>
 8003d02:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d04:	e008      	b.n	8003d18 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003d06:	f7fd fbdd 	bl	80014c4 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	693b      	ldr	r3, [r7, #16]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	2b64      	cmp	r3, #100	; 0x64
 8003d12:	d901      	bls.n	8003d18 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003d14:	2303      	movs	r3, #3
 8003d16:	e12a      	b.n	8003f6e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003d18:	4b76      	ldr	r3, [pc, #472]	; (8003ef4 <HAL_RCC_OscConfig+0x4d4>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d0f0      	beq.n	8003d06 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	689b      	ldr	r3, [r3, #8]
 8003d28:	2b01      	cmp	r3, #1
 8003d2a:	d106      	bne.n	8003d3a <HAL_RCC_OscConfig+0x31a>
 8003d2c:	4b70      	ldr	r3, [pc, #448]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d30:	4a6f      	ldr	r2, [pc, #444]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003d32:	f043 0301 	orr.w	r3, r3, #1
 8003d36:	6713      	str	r3, [r2, #112]	; 0x70
 8003d38:	e02d      	b.n	8003d96 <HAL_RCC_OscConfig+0x376>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10c      	bne.n	8003d5c <HAL_RCC_OscConfig+0x33c>
 8003d42:	4b6b      	ldr	r3, [pc, #428]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003d44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d46:	4a6a      	ldr	r2, [pc, #424]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003d48:	f023 0301 	bic.w	r3, r3, #1
 8003d4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003d4e:	4b68      	ldr	r3, [pc, #416]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003d50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d52:	4a67      	ldr	r2, [pc, #412]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003d54:	f023 0304 	bic.w	r3, r3, #4
 8003d58:	6713      	str	r3, [r2, #112]	; 0x70
 8003d5a:	e01c      	b.n	8003d96 <HAL_RCC_OscConfig+0x376>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	689b      	ldr	r3, [r3, #8]
 8003d60:	2b05      	cmp	r3, #5
 8003d62:	d10c      	bne.n	8003d7e <HAL_RCC_OscConfig+0x35e>
 8003d64:	4b62      	ldr	r3, [pc, #392]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003d66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d68:	4a61      	ldr	r2, [pc, #388]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003d6a:	f043 0304 	orr.w	r3, r3, #4
 8003d6e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d70:	4b5f      	ldr	r3, [pc, #380]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d74:	4a5e      	ldr	r2, [pc, #376]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003d76:	f043 0301 	orr.w	r3, r3, #1
 8003d7a:	6713      	str	r3, [r2, #112]	; 0x70
 8003d7c:	e00b      	b.n	8003d96 <HAL_RCC_OscConfig+0x376>
 8003d7e:	4b5c      	ldr	r3, [pc, #368]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d82:	4a5b      	ldr	r2, [pc, #364]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003d84:	f023 0301 	bic.w	r3, r3, #1
 8003d88:	6713      	str	r3, [r2, #112]	; 0x70
 8003d8a:	4b59      	ldr	r3, [pc, #356]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d8e:	4a58      	ldr	r2, [pc, #352]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003d90:	f023 0304 	bic.w	r3, r3, #4
 8003d94:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d015      	beq.n	8003dca <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d9e:	f7fd fb91 	bl	80014c4 <HAL_GetTick>
 8003da2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003da4:	e00a      	b.n	8003dbc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003da6:	f7fd fb8d 	bl	80014c4 <HAL_GetTick>
 8003daa:	4602      	mov	r2, r0
 8003dac:	693b      	ldr	r3, [r7, #16]
 8003dae:	1ad3      	subs	r3, r2, r3
 8003db0:	f241 3288 	movw	r2, #5000	; 0x1388
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d901      	bls.n	8003dbc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e0d8      	b.n	8003f6e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003dbc:	4b4c      	ldr	r3, [pc, #304]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003dbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d0ee      	beq.n	8003da6 <HAL_RCC_OscConfig+0x386>
 8003dc8:	e014      	b.n	8003df4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dca:	f7fd fb7b 	bl	80014c4 <HAL_GetTick>
 8003dce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003dd0:	e00a      	b.n	8003de8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003dd2:	f7fd fb77 	bl	80014c4 <HAL_GetTick>
 8003dd6:	4602      	mov	r2, r0
 8003dd8:	693b      	ldr	r3, [r7, #16]
 8003dda:	1ad3      	subs	r3, r2, r3
 8003ddc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003de0:	4293      	cmp	r3, r2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e0c2      	b.n	8003f6e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003de8:	4b41      	ldr	r3, [pc, #260]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003dea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dec:	f003 0302 	and.w	r3, r3, #2
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1ee      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003df4:	7dfb      	ldrb	r3, [r7, #23]
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d105      	bne.n	8003e06 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003dfa:	4b3d      	ldr	r3, [pc, #244]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dfe:	4a3c      	ldr	r2, [pc, #240]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003e00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003e04:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 80ae 	beq.w	8003f6c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003e10:	4b37      	ldr	r3, [pc, #220]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003e12:	689b      	ldr	r3, [r3, #8]
 8003e14:	f003 030c 	and.w	r3, r3, #12
 8003e18:	2b08      	cmp	r3, #8
 8003e1a:	d06d      	beq.n	8003ef8 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	699b      	ldr	r3, [r3, #24]
 8003e20:	2b02      	cmp	r3, #2
 8003e22:	d14b      	bne.n	8003ebc <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e24:	4b32      	ldr	r3, [pc, #200]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a31      	ldr	r2, [pc, #196]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003e2a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003e2e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e30:	f7fd fb48 	bl	80014c4 <HAL_GetTick>
 8003e34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e36:	e008      	b.n	8003e4a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e38:	f7fd fb44 	bl	80014c4 <HAL_GetTick>
 8003e3c:	4602      	mov	r2, r0
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	1ad3      	subs	r3, r2, r3
 8003e42:	2b02      	cmp	r3, #2
 8003e44:	d901      	bls.n	8003e4a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	e091      	b.n	8003f6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e4a:	4b29      	ldr	r3, [pc, #164]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d1f0      	bne.n	8003e38 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	69da      	ldr	r2, [r3, #28]
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6a1b      	ldr	r3, [r3, #32]
 8003e5e:	431a      	orrs	r2, r3
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e64:	019b      	lsls	r3, r3, #6
 8003e66:	431a      	orrs	r2, r3
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6c:	085b      	lsrs	r3, r3, #1
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	041b      	lsls	r3, r3, #16
 8003e72:	431a      	orrs	r2, r3
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e78:	061b      	lsls	r3, r3, #24
 8003e7a:	431a      	orrs	r2, r3
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e80:	071b      	lsls	r3, r3, #28
 8003e82:	491b      	ldr	r1, [pc, #108]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003e84:	4313      	orrs	r3, r2
 8003e86:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003e88:	4b19      	ldr	r3, [pc, #100]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a18      	ldr	r2, [pc, #96]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003e8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e92:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e94:	f7fd fb16 	bl	80014c4 <HAL_GetTick>
 8003e98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e9a:	e008      	b.n	8003eae <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e9c:	f7fd fb12 	bl	80014c4 <HAL_GetTick>
 8003ea0:	4602      	mov	r2, r0
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	1ad3      	subs	r3, r2, r3
 8003ea6:	2b02      	cmp	r3, #2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e05f      	b.n	8003f6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003eae:	4b10      	ldr	r3, [pc, #64]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d0f0      	beq.n	8003e9c <HAL_RCC_OscConfig+0x47c>
 8003eba:	e057      	b.n	8003f6c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ebc:	4b0c      	ldr	r3, [pc, #48]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	4a0b      	ldr	r2, [pc, #44]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003ec2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ec8:	f7fd fafc 	bl	80014c4 <HAL_GetTick>
 8003ecc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ece:	e008      	b.n	8003ee2 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ed0:	f7fd faf8 	bl	80014c4 <HAL_GetTick>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	1ad3      	subs	r3, r2, r3
 8003eda:	2b02      	cmp	r3, #2
 8003edc:	d901      	bls.n	8003ee2 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8003ede:	2303      	movs	r3, #3
 8003ee0:	e045      	b.n	8003f6e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ee2:	4b03      	ldr	r3, [pc, #12]	; (8003ef0 <HAL_RCC_OscConfig+0x4d0>)
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d1f0      	bne.n	8003ed0 <HAL_RCC_OscConfig+0x4b0>
 8003eee:	e03d      	b.n	8003f6c <HAL_RCC_OscConfig+0x54c>
 8003ef0:	40023800 	.word	0x40023800
 8003ef4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003ef8:	4b1f      	ldr	r3, [pc, #124]	; (8003f78 <HAL_RCC_OscConfig+0x558>)
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	699b      	ldr	r3, [r3, #24]
 8003f02:	2b01      	cmp	r3, #1
 8003f04:	d030      	beq.n	8003f68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003f10:	429a      	cmp	r2, r3
 8003f12:	d129      	bne.n	8003f68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003f1e:	429a      	cmp	r2, r3
 8003f20:	d122      	bne.n	8003f68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f22:	68fa      	ldr	r2, [r7, #12]
 8003f24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003f28:	4013      	ands	r3, r2
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003f2e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003f30:	4293      	cmp	r3, r2
 8003f32:	d119      	bne.n	8003f68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f3e:	085b      	lsrs	r3, r3, #1
 8003f40:	3b01      	subs	r3, #1
 8003f42:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003f44:	429a      	cmp	r2, r3
 8003f46:	d10f      	bne.n	8003f68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f52:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003f54:	429a      	cmp	r2, r3
 8003f56:	d107      	bne.n	8003f68 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f62:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d001      	beq.n	8003f6c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003f68:	2301      	movs	r3, #1
 8003f6a:	e000      	b.n	8003f6e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	3718      	adds	r7, #24
 8003f72:	46bd      	mov	sp, r7
 8003f74:	bd80      	pop	{r7, pc}
 8003f76:	bf00      	nop
 8003f78:	40023800 	.word	0x40023800

08003f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
 8003f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003f86:	2300      	movs	r3, #0
 8003f88:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d101      	bne.n	8003f94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e0d0      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003f94:	4b6a      	ldr	r3, [pc, #424]	; (8004140 <HAL_RCC_ClockConfig+0x1c4>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 030f 	and.w	r3, r3, #15
 8003f9c:	683a      	ldr	r2, [r7, #0]
 8003f9e:	429a      	cmp	r2, r3
 8003fa0:	d910      	bls.n	8003fc4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003fa2:	4b67      	ldr	r3, [pc, #412]	; (8004140 <HAL_RCC_ClockConfig+0x1c4>)
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	f023 020f 	bic.w	r2, r3, #15
 8003faa:	4965      	ldr	r1, [pc, #404]	; (8004140 <HAL_RCC_ClockConfig+0x1c4>)
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	4313      	orrs	r3, r2
 8003fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003fb2:	4b63      	ldr	r3, [pc, #396]	; (8004140 <HAL_RCC_ClockConfig+0x1c4>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f003 030f 	and.w	r3, r3, #15
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	429a      	cmp	r2, r3
 8003fbe:	d001      	beq.n	8003fc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e0b8      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d020      	beq.n	8004012 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f003 0304 	and.w	r3, r3, #4
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d005      	beq.n	8003fe8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003fdc:	4b59      	ldr	r3, [pc, #356]	; (8004144 <HAL_RCC_ClockConfig+0x1c8>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	4a58      	ldr	r2, [pc, #352]	; (8004144 <HAL_RCC_ClockConfig+0x1c8>)
 8003fe2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003fe6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0308 	and.w	r3, r3, #8
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d005      	beq.n	8004000 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003ff4:	4b53      	ldr	r3, [pc, #332]	; (8004144 <HAL_RCC_ClockConfig+0x1c8>)
 8003ff6:	689b      	ldr	r3, [r3, #8]
 8003ff8:	4a52      	ldr	r2, [pc, #328]	; (8004144 <HAL_RCC_ClockConfig+0x1c8>)
 8003ffa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003ffe:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004000:	4b50      	ldr	r3, [pc, #320]	; (8004144 <HAL_RCC_ClockConfig+0x1c8>)
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	689b      	ldr	r3, [r3, #8]
 800400c:	494d      	ldr	r1, [pc, #308]	; (8004144 <HAL_RCC_ClockConfig+0x1c8>)
 800400e:	4313      	orrs	r3, r2
 8004010:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d040      	beq.n	80040a0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	685b      	ldr	r3, [r3, #4]
 8004022:	2b01      	cmp	r3, #1
 8004024:	d107      	bne.n	8004036 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004026:	4b47      	ldr	r3, [pc, #284]	; (8004144 <HAL_RCC_ClockConfig+0x1c8>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402e:	2b00      	cmp	r3, #0
 8004030:	d115      	bne.n	800405e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e07f      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	2b02      	cmp	r3, #2
 800403c:	d107      	bne.n	800404e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800403e:	4b41      	ldr	r3, [pc, #260]	; (8004144 <HAL_RCC_ClockConfig+0x1c8>)
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004046:	2b00      	cmp	r3, #0
 8004048:	d109      	bne.n	800405e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800404a:	2301      	movs	r3, #1
 800404c:	e073      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800404e:	4b3d      	ldr	r3, [pc, #244]	; (8004144 <HAL_RCC_ClockConfig+0x1c8>)
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	f003 0302 	and.w	r3, r3, #2
 8004056:	2b00      	cmp	r3, #0
 8004058:	d101      	bne.n	800405e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800405a:	2301      	movs	r3, #1
 800405c:	e06b      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800405e:	4b39      	ldr	r3, [pc, #228]	; (8004144 <HAL_RCC_ClockConfig+0x1c8>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f023 0203 	bic.w	r2, r3, #3
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	4936      	ldr	r1, [pc, #216]	; (8004144 <HAL_RCC_ClockConfig+0x1c8>)
 800406c:	4313      	orrs	r3, r2
 800406e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004070:	f7fd fa28 	bl	80014c4 <HAL_GetTick>
 8004074:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004076:	e00a      	b.n	800408e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004078:	f7fd fa24 	bl	80014c4 <HAL_GetTick>
 800407c:	4602      	mov	r2, r0
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	1ad3      	subs	r3, r2, r3
 8004082:	f241 3288 	movw	r2, #5000	; 0x1388
 8004086:	4293      	cmp	r3, r2
 8004088:	d901      	bls.n	800408e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800408a:	2303      	movs	r3, #3
 800408c:	e053      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800408e:	4b2d      	ldr	r3, [pc, #180]	; (8004144 <HAL_RCC_ClockConfig+0x1c8>)
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f003 020c 	and.w	r2, r3, #12
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	429a      	cmp	r2, r3
 800409e:	d1eb      	bne.n	8004078 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80040a0:	4b27      	ldr	r3, [pc, #156]	; (8004140 <HAL_RCC_ClockConfig+0x1c4>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 030f 	and.w	r3, r3, #15
 80040a8:	683a      	ldr	r2, [r7, #0]
 80040aa:	429a      	cmp	r2, r3
 80040ac:	d210      	bcs.n	80040d0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040ae:	4b24      	ldr	r3, [pc, #144]	; (8004140 <HAL_RCC_ClockConfig+0x1c4>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f023 020f 	bic.w	r2, r3, #15
 80040b6:	4922      	ldr	r1, [pc, #136]	; (8004140 <HAL_RCC_ClockConfig+0x1c4>)
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	4313      	orrs	r3, r2
 80040bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80040be:	4b20      	ldr	r3, [pc, #128]	; (8004140 <HAL_RCC_ClockConfig+0x1c4>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 030f 	and.w	r3, r3, #15
 80040c6:	683a      	ldr	r2, [r7, #0]
 80040c8:	429a      	cmp	r2, r3
 80040ca:	d001      	beq.n	80040d0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e032      	b.n	8004136 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f003 0304 	and.w	r3, r3, #4
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d008      	beq.n	80040ee <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040dc:	4b19      	ldr	r3, [pc, #100]	; (8004144 <HAL_RCC_ClockConfig+0x1c8>)
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	68db      	ldr	r3, [r3, #12]
 80040e8:	4916      	ldr	r1, [pc, #88]	; (8004144 <HAL_RCC_ClockConfig+0x1c8>)
 80040ea:	4313      	orrs	r3, r2
 80040ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0308 	and.w	r3, r3, #8
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d009      	beq.n	800410e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80040fa:	4b12      	ldr	r3, [pc, #72]	; (8004144 <HAL_RCC_ClockConfig+0x1c8>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	490e      	ldr	r1, [pc, #56]	; (8004144 <HAL_RCC_ClockConfig+0x1c8>)
 800410a:	4313      	orrs	r3, r2
 800410c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800410e:	f000 f821 	bl	8004154 <HAL_RCC_GetSysClockFreq>
 8004112:	4602      	mov	r2, r0
 8004114:	4b0b      	ldr	r3, [pc, #44]	; (8004144 <HAL_RCC_ClockConfig+0x1c8>)
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	091b      	lsrs	r3, r3, #4
 800411a:	f003 030f 	and.w	r3, r3, #15
 800411e:	490a      	ldr	r1, [pc, #40]	; (8004148 <HAL_RCC_ClockConfig+0x1cc>)
 8004120:	5ccb      	ldrb	r3, [r1, r3]
 8004122:	fa22 f303 	lsr.w	r3, r2, r3
 8004126:	4a09      	ldr	r2, [pc, #36]	; (800414c <HAL_RCC_ClockConfig+0x1d0>)
 8004128:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800412a:	4b09      	ldr	r3, [pc, #36]	; (8004150 <HAL_RCC_ClockConfig+0x1d4>)
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	4618      	mov	r0, r3
 8004130:	f7fd f984 	bl	800143c <HAL_InitTick>

  return HAL_OK;
 8004134:	2300      	movs	r3, #0
}
 8004136:	4618      	mov	r0, r3
 8004138:	3710      	adds	r7, #16
 800413a:	46bd      	mov	sp, r7
 800413c:	bd80      	pop	{r7, pc}
 800413e:	bf00      	nop
 8004140:	40023c00 	.word	0x40023c00
 8004144:	40023800 	.word	0x40023800
 8004148:	08007968 	.word	0x08007968
 800414c:	20000024 	.word	0x20000024
 8004150:	20000028 	.word	0x20000028

08004154 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004154:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004158:	b084      	sub	sp, #16
 800415a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800415c:	2300      	movs	r3, #0
 800415e:	607b      	str	r3, [r7, #4]
 8004160:	2300      	movs	r3, #0
 8004162:	60fb      	str	r3, [r7, #12]
 8004164:	2300      	movs	r3, #0
 8004166:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004168:	2300      	movs	r3, #0
 800416a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800416c:	4b67      	ldr	r3, [pc, #412]	; (800430c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800416e:	689b      	ldr	r3, [r3, #8]
 8004170:	f003 030c 	and.w	r3, r3, #12
 8004174:	2b08      	cmp	r3, #8
 8004176:	d00d      	beq.n	8004194 <HAL_RCC_GetSysClockFreq+0x40>
 8004178:	2b08      	cmp	r3, #8
 800417a:	f200 80bd 	bhi.w	80042f8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800417e:	2b00      	cmp	r3, #0
 8004180:	d002      	beq.n	8004188 <HAL_RCC_GetSysClockFreq+0x34>
 8004182:	2b04      	cmp	r3, #4
 8004184:	d003      	beq.n	800418e <HAL_RCC_GetSysClockFreq+0x3a>
 8004186:	e0b7      	b.n	80042f8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004188:	4b61      	ldr	r3, [pc, #388]	; (8004310 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800418a:	60bb      	str	r3, [r7, #8]
      break;
 800418c:	e0b7      	b.n	80042fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800418e:	4b61      	ldr	r3, [pc, #388]	; (8004314 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004190:	60bb      	str	r3, [r7, #8]
      break;
 8004192:	e0b4      	b.n	80042fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004194:	4b5d      	ldr	r3, [pc, #372]	; (800430c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800419c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800419e:	4b5b      	ldr	r3, [pc, #364]	; (800430c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d04d      	beq.n	8004246 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80041aa:	4b58      	ldr	r3, [pc, #352]	; (800430c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	099b      	lsrs	r3, r3, #6
 80041b0:	461a      	mov	r2, r3
 80041b2:	f04f 0300 	mov.w	r3, #0
 80041b6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80041ba:	f04f 0100 	mov.w	r1, #0
 80041be:	ea02 0800 	and.w	r8, r2, r0
 80041c2:	ea03 0901 	and.w	r9, r3, r1
 80041c6:	4640      	mov	r0, r8
 80041c8:	4649      	mov	r1, r9
 80041ca:	f04f 0200 	mov.w	r2, #0
 80041ce:	f04f 0300 	mov.w	r3, #0
 80041d2:	014b      	lsls	r3, r1, #5
 80041d4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80041d8:	0142      	lsls	r2, r0, #5
 80041da:	4610      	mov	r0, r2
 80041dc:	4619      	mov	r1, r3
 80041de:	ebb0 0008 	subs.w	r0, r0, r8
 80041e2:	eb61 0109 	sbc.w	r1, r1, r9
 80041e6:	f04f 0200 	mov.w	r2, #0
 80041ea:	f04f 0300 	mov.w	r3, #0
 80041ee:	018b      	lsls	r3, r1, #6
 80041f0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80041f4:	0182      	lsls	r2, r0, #6
 80041f6:	1a12      	subs	r2, r2, r0
 80041f8:	eb63 0301 	sbc.w	r3, r3, r1
 80041fc:	f04f 0000 	mov.w	r0, #0
 8004200:	f04f 0100 	mov.w	r1, #0
 8004204:	00d9      	lsls	r1, r3, #3
 8004206:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800420a:	00d0      	lsls	r0, r2, #3
 800420c:	4602      	mov	r2, r0
 800420e:	460b      	mov	r3, r1
 8004210:	eb12 0208 	adds.w	r2, r2, r8
 8004214:	eb43 0309 	adc.w	r3, r3, r9
 8004218:	f04f 0000 	mov.w	r0, #0
 800421c:	f04f 0100 	mov.w	r1, #0
 8004220:	0259      	lsls	r1, r3, #9
 8004222:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004226:	0250      	lsls	r0, r2, #9
 8004228:	4602      	mov	r2, r0
 800422a:	460b      	mov	r3, r1
 800422c:	4610      	mov	r0, r2
 800422e:	4619      	mov	r1, r3
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	461a      	mov	r2, r3
 8004234:	f04f 0300 	mov.w	r3, #0
 8004238:	f7fc f85a 	bl	80002f0 <__aeabi_uldivmod>
 800423c:	4602      	mov	r2, r0
 800423e:	460b      	mov	r3, r1
 8004240:	4613      	mov	r3, r2
 8004242:	60fb      	str	r3, [r7, #12]
 8004244:	e04a      	b.n	80042dc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004246:	4b31      	ldr	r3, [pc, #196]	; (800430c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	099b      	lsrs	r3, r3, #6
 800424c:	461a      	mov	r2, r3
 800424e:	f04f 0300 	mov.w	r3, #0
 8004252:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004256:	f04f 0100 	mov.w	r1, #0
 800425a:	ea02 0400 	and.w	r4, r2, r0
 800425e:	ea03 0501 	and.w	r5, r3, r1
 8004262:	4620      	mov	r0, r4
 8004264:	4629      	mov	r1, r5
 8004266:	f04f 0200 	mov.w	r2, #0
 800426a:	f04f 0300 	mov.w	r3, #0
 800426e:	014b      	lsls	r3, r1, #5
 8004270:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004274:	0142      	lsls	r2, r0, #5
 8004276:	4610      	mov	r0, r2
 8004278:	4619      	mov	r1, r3
 800427a:	1b00      	subs	r0, r0, r4
 800427c:	eb61 0105 	sbc.w	r1, r1, r5
 8004280:	f04f 0200 	mov.w	r2, #0
 8004284:	f04f 0300 	mov.w	r3, #0
 8004288:	018b      	lsls	r3, r1, #6
 800428a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800428e:	0182      	lsls	r2, r0, #6
 8004290:	1a12      	subs	r2, r2, r0
 8004292:	eb63 0301 	sbc.w	r3, r3, r1
 8004296:	f04f 0000 	mov.w	r0, #0
 800429a:	f04f 0100 	mov.w	r1, #0
 800429e:	00d9      	lsls	r1, r3, #3
 80042a0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042a4:	00d0      	lsls	r0, r2, #3
 80042a6:	4602      	mov	r2, r0
 80042a8:	460b      	mov	r3, r1
 80042aa:	1912      	adds	r2, r2, r4
 80042ac:	eb45 0303 	adc.w	r3, r5, r3
 80042b0:	f04f 0000 	mov.w	r0, #0
 80042b4:	f04f 0100 	mov.w	r1, #0
 80042b8:	0299      	lsls	r1, r3, #10
 80042ba:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80042be:	0290      	lsls	r0, r2, #10
 80042c0:	4602      	mov	r2, r0
 80042c2:	460b      	mov	r3, r1
 80042c4:	4610      	mov	r0, r2
 80042c6:	4619      	mov	r1, r3
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	461a      	mov	r2, r3
 80042cc:	f04f 0300 	mov.w	r3, #0
 80042d0:	f7fc f80e 	bl	80002f0 <__aeabi_uldivmod>
 80042d4:	4602      	mov	r2, r0
 80042d6:	460b      	mov	r3, r1
 80042d8:	4613      	mov	r3, r2
 80042da:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80042dc:	4b0b      	ldr	r3, [pc, #44]	; (800430c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	0c1b      	lsrs	r3, r3, #16
 80042e2:	f003 0303 	and.w	r3, r3, #3
 80042e6:	3301      	adds	r3, #1
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80042f4:	60bb      	str	r3, [r7, #8]
      break;
 80042f6:	e002      	b.n	80042fe <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80042f8:	4b05      	ldr	r3, [pc, #20]	; (8004310 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80042fa:	60bb      	str	r3, [r7, #8]
      break;
 80042fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80042fe:	68bb      	ldr	r3, [r7, #8]
}
 8004300:	4618      	mov	r0, r3
 8004302:	3710      	adds	r7, #16
 8004304:	46bd      	mov	sp, r7
 8004306:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800430a:	bf00      	nop
 800430c:	40023800 	.word	0x40023800
 8004310:	00f42400 	.word	0x00f42400
 8004314:	007a1200 	.word	0x007a1200

08004318 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004318:	b480      	push	{r7}
 800431a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800431c:	4b03      	ldr	r3, [pc, #12]	; (800432c <HAL_RCC_GetHCLKFreq+0x14>)
 800431e:	681b      	ldr	r3, [r3, #0]
}
 8004320:	4618      	mov	r0, r3
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
 800432a:	bf00      	nop
 800432c:	20000024 	.word	0x20000024

08004330 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004330:	b580      	push	{r7, lr}
 8004332:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004334:	f7ff fff0 	bl	8004318 <HAL_RCC_GetHCLKFreq>
 8004338:	4602      	mov	r2, r0
 800433a:	4b05      	ldr	r3, [pc, #20]	; (8004350 <HAL_RCC_GetPCLK1Freq+0x20>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	0a9b      	lsrs	r3, r3, #10
 8004340:	f003 0307 	and.w	r3, r3, #7
 8004344:	4903      	ldr	r1, [pc, #12]	; (8004354 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004346:	5ccb      	ldrb	r3, [r1, r3]
 8004348:	fa22 f303 	lsr.w	r3, r2, r3
}
 800434c:	4618      	mov	r0, r3
 800434e:	bd80      	pop	{r7, pc}
 8004350:	40023800 	.word	0x40023800
 8004354:	08007978 	.word	0x08007978

08004358 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800435c:	f7ff ffdc 	bl	8004318 <HAL_RCC_GetHCLKFreq>
 8004360:	4602      	mov	r2, r0
 8004362:	4b05      	ldr	r3, [pc, #20]	; (8004378 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004364:	689b      	ldr	r3, [r3, #8]
 8004366:	0b5b      	lsrs	r3, r3, #13
 8004368:	f003 0307 	and.w	r3, r3, #7
 800436c:	4903      	ldr	r1, [pc, #12]	; (800437c <HAL_RCC_GetPCLK2Freq+0x24>)
 800436e:	5ccb      	ldrb	r3, [r1, r3]
 8004370:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004374:	4618      	mov	r0, r3
 8004376:	bd80      	pop	{r7, pc}
 8004378:	40023800 	.word	0x40023800
 800437c:	08007978 	.word	0x08007978

08004380 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b088      	sub	sp, #32
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004388:	2300      	movs	r3, #0
 800438a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800438c:	2300      	movs	r3, #0
 800438e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004390:	2300      	movs	r3, #0
 8004392:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004394:	2300      	movs	r3, #0
 8004396:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004398:	2300      	movs	r3, #0
 800439a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 0301 	and.w	r3, r3, #1
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d012      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80043a8:	4b69      	ldr	r3, [pc, #420]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043aa:	689b      	ldr	r3, [r3, #8]
 80043ac:	4a68      	ldr	r2, [pc, #416]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80043b2:	6093      	str	r3, [r2, #8]
 80043b4:	4b66      	ldr	r3, [pc, #408]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043b6:	689a      	ldr	r2, [r3, #8]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043bc:	4964      	ldr	r1, [pc, #400]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043be:	4313      	orrs	r3, r2
 80043c0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d101      	bne.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80043ca:	2301      	movs	r3, #1
 80043cc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d017      	beq.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80043da:	4b5d      	ldr	r3, [pc, #372]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043e8:	4959      	ldr	r1, [pc, #356]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80043ea:	4313      	orrs	r3, r2
 80043ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043f8:	d101      	bne.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80043fa:	2301      	movs	r3, #1
 80043fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004402:	2b00      	cmp	r3, #0
 8004404:	d101      	bne.n	800440a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004406:	2301      	movs	r3, #1
 8004408:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d017      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004416:	4b4e      	ldr	r3, [pc, #312]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004418:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800441c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004424:	494a      	ldr	r1, [pc, #296]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004426:	4313      	orrs	r3, r2
 8004428:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004430:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004434:	d101      	bne.n	800443a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004436:	2301      	movs	r3, #1
 8004438:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004442:	2301      	movs	r3, #1
 8004444:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004452:	2301      	movs	r3, #1
 8004454:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f003 0320 	and.w	r3, r3, #32
 800445e:	2b00      	cmp	r3, #0
 8004460:	f000 808b 	beq.w	800457a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004464:	4b3a      	ldr	r3, [pc, #232]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004468:	4a39      	ldr	r2, [pc, #228]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800446a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800446e:	6413      	str	r3, [r2, #64]	; 0x40
 8004470:	4b37      	ldr	r3, [pc, #220]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004478:	60bb      	str	r3, [r7, #8]
 800447a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800447c:	4b35      	ldr	r3, [pc, #212]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	4a34      	ldr	r2, [pc, #208]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004482:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004486:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004488:	f7fd f81c 	bl	80014c4 <HAL_GetTick>
 800448c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800448e:	e008      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004490:	f7fd f818 	bl	80014c4 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b64      	cmp	r3, #100	; 0x64
 800449c:	d901      	bls.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800449e:	2303      	movs	r3, #3
 80044a0:	e38f      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80044a2:	4b2c      	ldr	r3, [pc, #176]	; (8004554 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d0f0      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044ae:	4b28      	ldr	r3, [pc, #160]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044b6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044b8:	693b      	ldr	r3, [r7, #16]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d035      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80044c6:	693a      	ldr	r2, [r7, #16]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d02e      	beq.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80044cc:	4b20      	ldr	r3, [pc, #128]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044d4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80044d6:	4b1e      	ldr	r3, [pc, #120]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044da:	4a1d      	ldr	r2, [pc, #116]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80044e0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80044e2:	4b1b      	ldr	r3, [pc, #108]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e6:	4a1a      	ldr	r2, [pc, #104]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80044ec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80044ee:	4a18      	ldr	r2, [pc, #96]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80044f4:	4b16      	ldr	r3, [pc, #88]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80044f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044f8:	f003 0301 	and.w	r3, r3, #1
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d114      	bne.n	800452a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004500:	f7fc ffe0 	bl	80014c4 <HAL_GetTick>
 8004504:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004506:	e00a      	b.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004508:	f7fc ffdc 	bl	80014c4 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	697b      	ldr	r3, [r7, #20]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	f241 3288 	movw	r2, #5000	; 0x1388
 8004516:	4293      	cmp	r3, r2
 8004518:	d901      	bls.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e351      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800451e:	4b0c      	ldr	r3, [pc, #48]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d0ee      	beq.n	8004508 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004532:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004536:	d111      	bne.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004538:	4b05      	ldr	r3, [pc, #20]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800453a:	689b      	ldr	r3, [r3, #8]
 800453c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004544:	4b04      	ldr	r3, [pc, #16]	; (8004558 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004546:	400b      	ands	r3, r1
 8004548:	4901      	ldr	r1, [pc, #4]	; (8004550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800454a:	4313      	orrs	r3, r2
 800454c:	608b      	str	r3, [r1, #8]
 800454e:	e00b      	b.n	8004568 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004550:	40023800 	.word	0x40023800
 8004554:	40007000 	.word	0x40007000
 8004558:	0ffffcff 	.word	0x0ffffcff
 800455c:	4bb3      	ldr	r3, [pc, #716]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	4ab2      	ldr	r2, [pc, #712]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004562:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004566:	6093      	str	r3, [r2, #8]
 8004568:	4bb0      	ldr	r3, [pc, #704]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800456a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004574:	49ad      	ldr	r1, [pc, #692]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004576:	4313      	orrs	r3, r2
 8004578:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f003 0310 	and.w	r3, r3, #16
 8004582:	2b00      	cmp	r3, #0
 8004584:	d010      	beq.n	80045a8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004586:	4ba9      	ldr	r3, [pc, #676]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004588:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800458c:	4aa7      	ldr	r2, [pc, #668]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800458e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004592:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004596:	4ba5      	ldr	r3, [pc, #660]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004598:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a0:	49a2      	ldr	r1, [pc, #648]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d00a      	beq.n	80045ca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045b4:	4b9d      	ldr	r3, [pc, #628]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045c2:	499a      	ldr	r1, [pc, #616]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045c4:	4313      	orrs	r3, r2
 80045c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d00a      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80045d6:	4b95      	ldr	r3, [pc, #596]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80045e4:	4991      	ldr	r1, [pc, #580]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00a      	beq.n	800460e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80045f8:	4b8c      	ldr	r3, [pc, #560]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80045fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004606:	4989      	ldr	r1, [pc, #548]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004608:	4313      	orrs	r3, r2
 800460a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004616:	2b00      	cmp	r3, #0
 8004618:	d00a      	beq.n	8004630 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800461a:	4b84      	ldr	r3, [pc, #528]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800461c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004620:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004628:	4980      	ldr	r1, [pc, #512]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800462a:	4313      	orrs	r3, r2
 800462c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004638:	2b00      	cmp	r3, #0
 800463a:	d00a      	beq.n	8004652 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800463c:	4b7b      	ldr	r3, [pc, #492]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800463e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004642:	f023 0203 	bic.w	r2, r3, #3
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800464a:	4978      	ldr	r1, [pc, #480]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800464c:	4313      	orrs	r3, r2
 800464e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800465a:	2b00      	cmp	r3, #0
 800465c:	d00a      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800465e:	4b73      	ldr	r3, [pc, #460]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004664:	f023 020c 	bic.w	r2, r3, #12
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800466c:	496f      	ldr	r1, [pc, #444]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800466e:	4313      	orrs	r3, r2
 8004670:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800467c:	2b00      	cmp	r3, #0
 800467e:	d00a      	beq.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004680:	4b6a      	ldr	r3, [pc, #424]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004686:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800468e:	4967      	ldr	r1, [pc, #412]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004690:	4313      	orrs	r3, r2
 8004692:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d00a      	beq.n	80046b8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80046a2:	4b62      	ldr	r3, [pc, #392]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046a8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046b0:	495e      	ldr	r1, [pc, #376]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d00a      	beq.n	80046da <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046c4:	4b59      	ldr	r3, [pc, #356]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d2:	4956      	ldr	r1, [pc, #344]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046d4:	4313      	orrs	r3, r2
 80046d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d00a      	beq.n	80046fc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80046e6:	4b51      	ldr	r3, [pc, #324]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046ec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f4:	494d      	ldr	r1, [pc, #308]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d00a      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004708:	4b48      	ldr	r3, [pc, #288]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800470a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800470e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004716:	4945      	ldr	r1, [pc, #276]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004718:	4313      	orrs	r3, r2
 800471a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004726:	2b00      	cmp	r3, #0
 8004728:	d00a      	beq.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800472a:	4b40      	ldr	r3, [pc, #256]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800472c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004730:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004738:	493c      	ldr	r1, [pc, #240]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800473a:	4313      	orrs	r3, r2
 800473c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004748:	2b00      	cmp	r3, #0
 800474a:	d00a      	beq.n	8004762 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800474c:	4b37      	ldr	r3, [pc, #220]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800474e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004752:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800475a:	4934      	ldr	r1, [pc, #208]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800475c:	4313      	orrs	r3, r2
 800475e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800476a:	2b00      	cmp	r3, #0
 800476c:	d011      	beq.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800476e:	4b2f      	ldr	r3, [pc, #188]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004774:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800477c:	492b      	ldr	r1, [pc, #172]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800477e:	4313      	orrs	r3, r2
 8004780:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004788:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800478c:	d101      	bne.n	8004792 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800478e:	2301      	movs	r3, #1
 8004790:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0308 	and.w	r3, r3, #8
 800479a:	2b00      	cmp	r3, #0
 800479c:	d001      	beq.n	80047a2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800479e:	2301      	movs	r3, #1
 80047a0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00a      	beq.n	80047c4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80047ae:	4b1f      	ldr	r3, [pc, #124]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047b4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80047bc:	491b      	ldr	r1, [pc, #108]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047be:	4313      	orrs	r3, r2
 80047c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d00b      	beq.n	80047e8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80047d0:	4b16      	ldr	r3, [pc, #88]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80047e0:	4912      	ldr	r1, [pc, #72]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047e2:	4313      	orrs	r3, r2
 80047e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00b      	beq.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80047f4:	4b0d      	ldr	r3, [pc, #52]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80047f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047fa:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004804:	4909      	ldr	r1, [pc, #36]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004806:	4313      	orrs	r3, r2
 8004808:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004814:	2b00      	cmp	r3, #0
 8004816:	d00f      	beq.n	8004838 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004818:	4b04      	ldr	r3, [pc, #16]	; (800482c <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800481a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800481e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004828:	e002      	b.n	8004830 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 800482a:	bf00      	nop
 800482c:	40023800 	.word	0x40023800
 8004830:	4986      	ldr	r1, [pc, #536]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004832:	4313      	orrs	r3, r2
 8004834:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004840:	2b00      	cmp	r3, #0
 8004842:	d00b      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004844:	4b81      	ldr	r3, [pc, #516]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004846:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800484a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004854:	497d      	ldr	r1, [pc, #500]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004856:	4313      	orrs	r3, r2
 8004858:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800485c:	69fb      	ldr	r3, [r7, #28]
 800485e:	2b01      	cmp	r3, #1
 8004860:	d006      	beq.n	8004870 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800486a:	2b00      	cmp	r3, #0
 800486c:	f000 80d6 	beq.w	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004870:	4b76      	ldr	r3, [pc, #472]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	4a75      	ldr	r2, [pc, #468]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004876:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800487a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800487c:	f7fc fe22 	bl	80014c4 <HAL_GetTick>
 8004880:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004882:	e008      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004884:	f7fc fe1e 	bl	80014c4 <HAL_GetTick>
 8004888:	4602      	mov	r2, r0
 800488a:	697b      	ldr	r3, [r7, #20]
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	2b64      	cmp	r3, #100	; 0x64
 8004890:	d901      	bls.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e195      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004896:	4b6d      	ldr	r3, [pc, #436]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d1f0      	bne.n	8004884 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	f003 0301 	and.w	r3, r3, #1
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d021      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d11d      	bne.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80048b6:	4b65      	ldr	r3, [pc, #404]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048bc:	0c1b      	lsrs	r3, r3, #16
 80048be:	f003 0303 	and.w	r3, r3, #3
 80048c2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80048c4:	4b61      	ldr	r3, [pc, #388]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048ca:	0e1b      	lsrs	r3, r3, #24
 80048cc:	f003 030f 	and.w	r3, r3, #15
 80048d0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	019a      	lsls	r2, r3, #6
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	041b      	lsls	r3, r3, #16
 80048dc:	431a      	orrs	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	061b      	lsls	r3, r3, #24
 80048e2:	431a      	orrs	r2, r3
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	071b      	lsls	r3, r3, #28
 80048ea:	4958      	ldr	r1, [pc, #352]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d004      	beq.n	8004908 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004902:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004906:	d00a      	beq.n	800491e <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004910:	2b00      	cmp	r3, #0
 8004912:	d02e      	beq.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004918:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800491c:	d129      	bne.n	8004972 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800491e:	4b4b      	ldr	r3, [pc, #300]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004920:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004924:	0c1b      	lsrs	r3, r3, #16
 8004926:	f003 0303 	and.w	r3, r3, #3
 800492a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800492c:	4b47      	ldr	r3, [pc, #284]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800492e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004932:	0f1b      	lsrs	r3, r3, #28
 8004934:	f003 0307 	and.w	r3, r3, #7
 8004938:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	019a      	lsls	r2, r3, #6
 8004940:	693b      	ldr	r3, [r7, #16]
 8004942:	041b      	lsls	r3, r3, #16
 8004944:	431a      	orrs	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	68db      	ldr	r3, [r3, #12]
 800494a:	061b      	lsls	r3, r3, #24
 800494c:	431a      	orrs	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	071b      	lsls	r3, r3, #28
 8004952:	493e      	ldr	r1, [pc, #248]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004954:	4313      	orrs	r3, r2
 8004956:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800495a:	4b3c      	ldr	r3, [pc, #240]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800495c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004960:	f023 021f 	bic.w	r2, r3, #31
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004968:	3b01      	subs	r3, #1
 800496a:	4938      	ldr	r1, [pc, #224]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800496c:	4313      	orrs	r3, r2
 800496e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800497a:	2b00      	cmp	r3, #0
 800497c:	d01d      	beq.n	80049ba <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800497e:	4b33      	ldr	r3, [pc, #204]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004980:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004984:	0e1b      	lsrs	r3, r3, #24
 8004986:	f003 030f 	and.w	r3, r3, #15
 800498a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800498c:	4b2f      	ldr	r3, [pc, #188]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800498e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004992:	0f1b      	lsrs	r3, r3, #28
 8004994:	f003 0307 	and.w	r3, r3, #7
 8004998:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	019a      	lsls	r2, r3, #6
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	691b      	ldr	r3, [r3, #16]
 80049a4:	041b      	lsls	r3, r3, #16
 80049a6:	431a      	orrs	r2, r3
 80049a8:	693b      	ldr	r3, [r7, #16]
 80049aa:	061b      	lsls	r3, r3, #24
 80049ac:	431a      	orrs	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	071b      	lsls	r3, r3, #28
 80049b2:	4926      	ldr	r1, [pc, #152]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049b4:	4313      	orrs	r3, r2
 80049b6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d011      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	019a      	lsls	r2, r3, #6
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	041b      	lsls	r3, r3, #16
 80049d2:	431a      	orrs	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	061b      	lsls	r3, r3, #24
 80049da:	431a      	orrs	r2, r3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	689b      	ldr	r3, [r3, #8]
 80049e0:	071b      	lsls	r3, r3, #28
 80049e2:	491a      	ldr	r1, [pc, #104]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049e4:	4313      	orrs	r3, r2
 80049e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80049ea:	4b18      	ldr	r3, [pc, #96]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a17      	ldr	r2, [pc, #92]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80049f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80049f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049f6:	f7fc fd65 	bl	80014c4 <HAL_GetTick>
 80049fa:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80049fc:	e008      	b.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80049fe:	f7fc fd61 	bl	80014c4 <HAL_GetTick>
 8004a02:	4602      	mov	r2, r0
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	1ad3      	subs	r3, r2, r3
 8004a08:	2b64      	cmp	r3, #100	; 0x64
 8004a0a:	d901      	bls.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a0c:	2303      	movs	r3, #3
 8004a0e:	e0d8      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004a10:	4b0e      	ldr	r3, [pc, #56]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d0f0      	beq.n	80049fe <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004a1c:	69bb      	ldr	r3, [r7, #24]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	f040 80ce 	bne.w	8004bc0 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004a24:	4b09      	ldr	r3, [pc, #36]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a08      	ldr	r2, [pc, #32]	; (8004a4c <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a2a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004a2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a30:	f7fc fd48 	bl	80014c4 <HAL_GetTick>
 8004a34:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a36:	e00b      	b.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004a38:	f7fc fd44 	bl	80014c4 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	697b      	ldr	r3, [r7, #20]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b64      	cmp	r3, #100	; 0x64
 8004a44:	d904      	bls.n	8004a50 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e0bb      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004a4a:	bf00      	nop
 8004a4c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004a50:	4b5e      	ldr	r3, [pc, #376]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004a58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004a5c:	d0ec      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d003      	beq.n	8004a72 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d009      	beq.n	8004a86 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d02e      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d12a      	bne.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004a86:	4b51      	ldr	r3, [pc, #324]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a8c:	0c1b      	lsrs	r3, r3, #16
 8004a8e:	f003 0303 	and.w	r3, r3, #3
 8004a92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004a94:	4b4d      	ldr	r3, [pc, #308]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a9a:	0f1b      	lsrs	r3, r3, #28
 8004a9c:	f003 0307 	and.w	r3, r3, #7
 8004aa0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	695b      	ldr	r3, [r3, #20]
 8004aa6:	019a      	lsls	r2, r3, #6
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	041b      	lsls	r3, r3, #16
 8004aac:	431a      	orrs	r2, r3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	699b      	ldr	r3, [r3, #24]
 8004ab2:	061b      	lsls	r3, r3, #24
 8004ab4:	431a      	orrs	r2, r3
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	071b      	lsls	r3, r3, #28
 8004aba:	4944      	ldr	r1, [pc, #272]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004abc:	4313      	orrs	r3, r2
 8004abe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004ac2:	4b42      	ldr	r3, [pc, #264]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ac4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ac8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ad0:	3b01      	subs	r3, #1
 8004ad2:	021b      	lsls	r3, r3, #8
 8004ad4:	493d      	ldr	r1, [pc, #244]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d022      	beq.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004aec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004af0:	d11d      	bne.n	8004b2e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004af2:	4b36      	ldr	r3, [pc, #216]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004af4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004af8:	0e1b      	lsrs	r3, r3, #24
 8004afa:	f003 030f 	and.w	r3, r3, #15
 8004afe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004b00:	4b32      	ldr	r3, [pc, #200]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b06:	0f1b      	lsrs	r3, r3, #28
 8004b08:	f003 0307 	and.w	r3, r3, #7
 8004b0c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	019a      	lsls	r2, r3, #6
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a1b      	ldr	r3, [r3, #32]
 8004b18:	041b      	lsls	r3, r3, #16
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	693b      	ldr	r3, [r7, #16]
 8004b1e:	061b      	lsls	r3, r3, #24
 8004b20:	431a      	orrs	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	071b      	lsls	r3, r3, #28
 8004b26:	4929      	ldr	r1, [pc, #164]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f003 0308 	and.w	r3, r3, #8
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d028      	beq.n	8004b8c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004b3a:	4b24      	ldr	r3, [pc, #144]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b40:	0e1b      	lsrs	r3, r3, #24
 8004b42:	f003 030f 	and.w	r3, r3, #15
 8004b46:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004b48:	4b20      	ldr	r3, [pc, #128]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b4e:	0c1b      	lsrs	r3, r3, #16
 8004b50:	f003 0303 	and.w	r3, r3, #3
 8004b54:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	695b      	ldr	r3, [r3, #20]
 8004b5a:	019a      	lsls	r2, r3, #6
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	041b      	lsls	r3, r3, #16
 8004b60:	431a      	orrs	r2, r3
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	061b      	lsls	r3, r3, #24
 8004b66:	431a      	orrs	r2, r3
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	69db      	ldr	r3, [r3, #28]
 8004b6c:	071b      	lsls	r3, r3, #28
 8004b6e:	4917      	ldr	r1, [pc, #92]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b70:	4313      	orrs	r3, r2
 8004b72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004b76:	4b15      	ldr	r3, [pc, #84]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b7c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b84:	4911      	ldr	r1, [pc, #68]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004b8c:	4b0f      	ldr	r3, [pc, #60]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	4a0e      	ldr	r2, [pc, #56]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004b92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b98:	f7fc fc94 	bl	80014c4 <HAL_GetTick>
 8004b9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004b9e:	e008      	b.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004ba0:	f7fc fc90 	bl	80014c4 <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	697b      	ldr	r3, [r7, #20]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b64      	cmp	r3, #100	; 0x64
 8004bac:	d901      	bls.n	8004bb2 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bae:	2303      	movs	r3, #3
 8004bb0:	e007      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004bb2:	4b06      	ldr	r3, [pc, #24]	; (8004bcc <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004bbe:	d1ef      	bne.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004bc0:	2300      	movs	r3, #0
}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3720      	adds	r7, #32
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	40023800 	.word	0x40023800

08004bd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	b082      	sub	sp, #8
 8004bd4:	af00      	add	r7, sp, #0
 8004bd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d101      	bne.n	8004be2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e049      	b.n	8004c76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d106      	bne.n	8004bfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f7fc fad8 	bl	80011ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	3304      	adds	r3, #4
 8004c0c:	4619      	mov	r1, r3
 8004c0e:	4610      	mov	r0, r2
 8004c10:	f000 fd30 	bl	8005674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2201      	movs	r2, #1
 8004c18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2201      	movs	r2, #1
 8004c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2201      	movs	r2, #1
 8004c28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2201      	movs	r2, #1
 8004c38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2201      	movs	r2, #1
 8004c40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2201      	movs	r2, #1
 8004c48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	2201      	movs	r2, #1
 8004c58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	2201      	movs	r2, #1
 8004c60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c74:	2300      	movs	r3, #0
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3708      	adds	r7, #8
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
	...

08004c80 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004c80:	b480      	push	{r7}
 8004c82:	b085      	sub	sp, #20
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d001      	beq.n	8004c98 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	e054      	b.n	8004d42 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2202      	movs	r2, #2
 8004c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	68da      	ldr	r2, [r3, #12]
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f042 0201 	orr.w	r2, r2, #1
 8004cae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a26      	ldr	r2, [pc, #152]	; (8004d50 <HAL_TIM_Base_Start_IT+0xd0>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d022      	beq.n	8004d00 <HAL_TIM_Base_Start_IT+0x80>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cc2:	d01d      	beq.n	8004d00 <HAL_TIM_Base_Start_IT+0x80>
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4a22      	ldr	r2, [pc, #136]	; (8004d54 <HAL_TIM_Base_Start_IT+0xd4>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d018      	beq.n	8004d00 <HAL_TIM_Base_Start_IT+0x80>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	4a21      	ldr	r2, [pc, #132]	; (8004d58 <HAL_TIM_Base_Start_IT+0xd8>)
 8004cd4:	4293      	cmp	r3, r2
 8004cd6:	d013      	beq.n	8004d00 <HAL_TIM_Base_Start_IT+0x80>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	4a1f      	ldr	r2, [pc, #124]	; (8004d5c <HAL_TIM_Base_Start_IT+0xdc>)
 8004cde:	4293      	cmp	r3, r2
 8004ce0:	d00e      	beq.n	8004d00 <HAL_TIM_Base_Start_IT+0x80>
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	4a1e      	ldr	r2, [pc, #120]	; (8004d60 <HAL_TIM_Base_Start_IT+0xe0>)
 8004ce8:	4293      	cmp	r3, r2
 8004cea:	d009      	beq.n	8004d00 <HAL_TIM_Base_Start_IT+0x80>
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a1c      	ldr	r2, [pc, #112]	; (8004d64 <HAL_TIM_Base_Start_IT+0xe4>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d004      	beq.n	8004d00 <HAL_TIM_Base_Start_IT+0x80>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a1b      	ldr	r2, [pc, #108]	; (8004d68 <HAL_TIM_Base_Start_IT+0xe8>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d115      	bne.n	8004d2c <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	689a      	ldr	r2, [r3, #8]
 8004d06:	4b19      	ldr	r3, [pc, #100]	; (8004d6c <HAL_TIM_Base_Start_IT+0xec>)
 8004d08:	4013      	ands	r3, r2
 8004d0a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2b06      	cmp	r3, #6
 8004d10:	d015      	beq.n	8004d3e <HAL_TIM_Base_Start_IT+0xbe>
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d18:	d011      	beq.n	8004d3e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f042 0201 	orr.w	r2, r2, #1
 8004d28:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d2a:	e008      	b.n	8004d3e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f042 0201 	orr.w	r2, r2, #1
 8004d3a:	601a      	str	r2, [r3, #0]
 8004d3c:	e000      	b.n	8004d40 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d3e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d40:	2300      	movs	r3, #0
}
 8004d42:	4618      	mov	r0, r3
 8004d44:	3714      	adds	r7, #20
 8004d46:	46bd      	mov	sp, r7
 8004d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4c:	4770      	bx	lr
 8004d4e:	bf00      	nop
 8004d50:	40010000 	.word	0x40010000
 8004d54:	40000400 	.word	0x40000400
 8004d58:	40000800 	.word	0x40000800
 8004d5c:	40000c00 	.word	0x40000c00
 8004d60:	40010400 	.word	0x40010400
 8004d64:	40014000 	.word	0x40014000
 8004d68:	40001800 	.word	0x40001800
 8004d6c:	00010007 	.word	0x00010007

08004d70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e049      	b.n	8004e16 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d106      	bne.n	8004d9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 f841 	bl	8004e1e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	3304      	adds	r3, #4
 8004dac:	4619      	mov	r1, r3
 8004dae:	4610      	mov	r0, r2
 8004db0:	f000 fc60 	bl	8005674 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2201      	movs	r2, #1
 8004e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e14:	2300      	movs	r3, #0
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3708      	adds	r7, #8
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}

08004e1e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e1e:	b480      	push	{r7}
 8004e20:	b083      	sub	sp, #12
 8004e22:	af00      	add	r7, sp, #0
 8004e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e26:	bf00      	nop
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr
	...

08004e34 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b084      	sub	sp, #16
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
 8004e3c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d109      	bne.n	8004e58 <HAL_TIM_PWM_Start+0x24>
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	bf14      	ite	ne
 8004e50:	2301      	movne	r3, #1
 8004e52:	2300      	moveq	r3, #0
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	e03c      	b.n	8004ed2 <HAL_TIM_PWM_Start+0x9e>
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	2b04      	cmp	r3, #4
 8004e5c:	d109      	bne.n	8004e72 <HAL_TIM_PWM_Start+0x3e>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e64:	b2db      	uxtb	r3, r3
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	bf14      	ite	ne
 8004e6a:	2301      	movne	r3, #1
 8004e6c:	2300      	moveq	r3, #0
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	e02f      	b.n	8004ed2 <HAL_TIM_PWM_Start+0x9e>
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	2b08      	cmp	r3, #8
 8004e76:	d109      	bne.n	8004e8c <HAL_TIM_PWM_Start+0x58>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	bf14      	ite	ne
 8004e84:	2301      	movne	r3, #1
 8004e86:	2300      	moveq	r3, #0
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	e022      	b.n	8004ed2 <HAL_TIM_PWM_Start+0x9e>
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	2b0c      	cmp	r3, #12
 8004e90:	d109      	bne.n	8004ea6 <HAL_TIM_PWM_Start+0x72>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	bf14      	ite	ne
 8004e9e:	2301      	movne	r3, #1
 8004ea0:	2300      	moveq	r3, #0
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	e015      	b.n	8004ed2 <HAL_TIM_PWM_Start+0x9e>
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	2b10      	cmp	r3, #16
 8004eaa:	d109      	bne.n	8004ec0 <HAL_TIM_PWM_Start+0x8c>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	bf14      	ite	ne
 8004eb8:	2301      	movne	r3, #1
 8004eba:	2300      	moveq	r3, #0
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	e008      	b.n	8004ed2 <HAL_TIM_PWM_Start+0x9e>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004ec6:	b2db      	uxtb	r3, r3
 8004ec8:	2b01      	cmp	r3, #1
 8004eca:	bf14      	ite	ne
 8004ecc:	2301      	movne	r3, #1
 8004ece:	2300      	moveq	r3, #0
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d001      	beq.n	8004eda <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	e092      	b.n	8005000 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d104      	bne.n	8004eea <HAL_TIM_PWM_Start+0xb6>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2202      	movs	r2, #2
 8004ee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ee8:	e023      	b.n	8004f32 <HAL_TIM_PWM_Start+0xfe>
 8004eea:	683b      	ldr	r3, [r7, #0]
 8004eec:	2b04      	cmp	r3, #4
 8004eee:	d104      	bne.n	8004efa <HAL_TIM_PWM_Start+0xc6>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2202      	movs	r2, #2
 8004ef4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ef8:	e01b      	b.n	8004f32 <HAL_TIM_PWM_Start+0xfe>
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	2b08      	cmp	r3, #8
 8004efe:	d104      	bne.n	8004f0a <HAL_TIM_PWM_Start+0xd6>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2202      	movs	r2, #2
 8004f04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f08:	e013      	b.n	8004f32 <HAL_TIM_PWM_Start+0xfe>
 8004f0a:	683b      	ldr	r3, [r7, #0]
 8004f0c:	2b0c      	cmp	r3, #12
 8004f0e:	d104      	bne.n	8004f1a <HAL_TIM_PWM_Start+0xe6>
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2202      	movs	r2, #2
 8004f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004f18:	e00b      	b.n	8004f32 <HAL_TIM_PWM_Start+0xfe>
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	2b10      	cmp	r3, #16
 8004f1e:	d104      	bne.n	8004f2a <HAL_TIM_PWM_Start+0xf6>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2202      	movs	r2, #2
 8004f24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f28:	e003      	b.n	8004f32 <HAL_TIM_PWM_Start+0xfe>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	2202      	movs	r2, #2
 8004f2e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	2201      	movs	r2, #1
 8004f38:	6839      	ldr	r1, [r7, #0]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	f000 ff32 	bl	8005da4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a30      	ldr	r2, [pc, #192]	; (8005008 <HAL_TIM_PWM_Start+0x1d4>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d004      	beq.n	8004f54 <HAL_TIM_PWM_Start+0x120>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a2f      	ldr	r2, [pc, #188]	; (800500c <HAL_TIM_PWM_Start+0x1d8>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d101      	bne.n	8004f58 <HAL_TIM_PWM_Start+0x124>
 8004f54:	2301      	movs	r3, #1
 8004f56:	e000      	b.n	8004f5a <HAL_TIM_PWM_Start+0x126>
 8004f58:	2300      	movs	r3, #0
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d007      	beq.n	8004f6e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f6c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a25      	ldr	r2, [pc, #148]	; (8005008 <HAL_TIM_PWM_Start+0x1d4>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d022      	beq.n	8004fbe <HAL_TIM_PWM_Start+0x18a>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f80:	d01d      	beq.n	8004fbe <HAL_TIM_PWM_Start+0x18a>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a22      	ldr	r2, [pc, #136]	; (8005010 <HAL_TIM_PWM_Start+0x1dc>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d018      	beq.n	8004fbe <HAL_TIM_PWM_Start+0x18a>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a20      	ldr	r2, [pc, #128]	; (8005014 <HAL_TIM_PWM_Start+0x1e0>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d013      	beq.n	8004fbe <HAL_TIM_PWM_Start+0x18a>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a1f      	ldr	r2, [pc, #124]	; (8005018 <HAL_TIM_PWM_Start+0x1e4>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d00e      	beq.n	8004fbe <HAL_TIM_PWM_Start+0x18a>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a19      	ldr	r2, [pc, #100]	; (800500c <HAL_TIM_PWM_Start+0x1d8>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d009      	beq.n	8004fbe <HAL_TIM_PWM_Start+0x18a>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a1b      	ldr	r2, [pc, #108]	; (800501c <HAL_TIM_PWM_Start+0x1e8>)
 8004fb0:	4293      	cmp	r3, r2
 8004fb2:	d004      	beq.n	8004fbe <HAL_TIM_PWM_Start+0x18a>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	4a19      	ldr	r2, [pc, #100]	; (8005020 <HAL_TIM_PWM_Start+0x1ec>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d115      	bne.n	8004fea <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	689a      	ldr	r2, [r3, #8]
 8004fc4:	4b17      	ldr	r3, [pc, #92]	; (8005024 <HAL_TIM_PWM_Start+0x1f0>)
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2b06      	cmp	r3, #6
 8004fce:	d015      	beq.n	8004ffc <HAL_TIM_PWM_Start+0x1c8>
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fd6:	d011      	beq.n	8004ffc <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	681a      	ldr	r2, [r3, #0]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f042 0201 	orr.w	r2, r2, #1
 8004fe6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fe8:	e008      	b.n	8004ffc <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	681a      	ldr	r2, [r3, #0]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f042 0201 	orr.w	r2, r2, #1
 8004ff8:	601a      	str	r2, [r3, #0]
 8004ffa:	e000      	b.n	8004ffe <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ffc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3710      	adds	r7, #16
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	40010000 	.word	0x40010000
 800500c:	40010400 	.word	0x40010400
 8005010:	40000400 	.word	0x40000400
 8005014:	40000800 	.word	0x40000800
 8005018:	40000c00 	.word	0x40000c00
 800501c:	40014000 	.word	0x40014000
 8005020:	40001800 	.word	0x40001800
 8005024:	00010007 	.word	0x00010007

08005028 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005028:	b580      	push	{r7, lr}
 800502a:	b082      	sub	sp, #8
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b02      	cmp	r3, #2
 800503c:	d122      	bne.n	8005084 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	f003 0302 	and.w	r3, r3, #2
 8005048:	2b02      	cmp	r3, #2
 800504a:	d11b      	bne.n	8005084 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f06f 0202 	mvn.w	r2, #2
 8005054:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2201      	movs	r2, #1
 800505a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	f003 0303 	and.w	r3, r3, #3
 8005066:	2b00      	cmp	r3, #0
 8005068:	d003      	beq.n	8005072 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 fae4 	bl	8005638 <HAL_TIM_IC_CaptureCallback>
 8005070:	e005      	b.n	800507e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 fad6 	bl	8005624 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 fae7 	bl	800564c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	f003 0304 	and.w	r3, r3, #4
 800508e:	2b04      	cmp	r3, #4
 8005090:	d122      	bne.n	80050d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	f003 0304 	and.w	r3, r3, #4
 800509c:	2b04      	cmp	r3, #4
 800509e:	d11b      	bne.n	80050d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f06f 0204 	mvn.w	r2, #4
 80050a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2202      	movs	r2, #2
 80050ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	699b      	ldr	r3, [r3, #24]
 80050b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d003      	beq.n	80050c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 faba 	bl	8005638 <HAL_TIM_IC_CaptureCallback>
 80050c4:	e005      	b.n	80050d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 faac 	bl	8005624 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 fabd 	bl	800564c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	f003 0308 	and.w	r3, r3, #8
 80050e2:	2b08      	cmp	r3, #8
 80050e4:	d122      	bne.n	800512c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	f003 0308 	and.w	r3, r3, #8
 80050f0:	2b08      	cmp	r3, #8
 80050f2:	d11b      	bne.n	800512c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f06f 0208 	mvn.w	r2, #8
 80050fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2204      	movs	r2, #4
 8005102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	69db      	ldr	r3, [r3, #28]
 800510a:	f003 0303 	and.w	r3, r3, #3
 800510e:	2b00      	cmp	r3, #0
 8005110:	d003      	beq.n	800511a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 fa90 	bl	8005638 <HAL_TIM_IC_CaptureCallback>
 8005118:	e005      	b.n	8005126 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 fa82 	bl	8005624 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 fa93 	bl	800564c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	f003 0310 	and.w	r3, r3, #16
 8005136:	2b10      	cmp	r3, #16
 8005138:	d122      	bne.n	8005180 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	f003 0310 	and.w	r3, r3, #16
 8005144:	2b10      	cmp	r3, #16
 8005146:	d11b      	bne.n	8005180 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f06f 0210 	mvn.w	r2, #16
 8005150:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2208      	movs	r2, #8
 8005156:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	69db      	ldr	r3, [r3, #28]
 800515e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005162:	2b00      	cmp	r3, #0
 8005164:	d003      	beq.n	800516e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 fa66 	bl	8005638 <HAL_TIM_IC_CaptureCallback>
 800516c:	e005      	b.n	800517a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800516e:	6878      	ldr	r0, [r7, #4]
 8005170:	f000 fa58 	bl	8005624 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f000 fa69 	bl	800564c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	f003 0301 	and.w	r3, r3, #1
 800518a:	2b01      	cmp	r3, #1
 800518c:	d10e      	bne.n	80051ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	f003 0301 	and.w	r3, r3, #1
 8005198:	2b01      	cmp	r3, #1
 800519a:	d107      	bne.n	80051ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f06f 0201 	mvn.w	r2, #1
 80051a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f7fb fca6 	bl	8000af8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	691b      	ldr	r3, [r3, #16]
 80051b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b6:	2b80      	cmp	r3, #128	; 0x80
 80051b8:	d10e      	bne.n	80051d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	68db      	ldr	r3, [r3, #12]
 80051c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c4:	2b80      	cmp	r3, #128	; 0x80
 80051c6:	d107      	bne.n	80051d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051d2:	6878      	ldr	r0, [r7, #4]
 80051d4:	f000 fea4 	bl	8005f20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051e6:	d10e      	bne.n	8005206 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051f2:	2b80      	cmp	r3, #128	; 0x80
 80051f4:	d107      	bne.n	8005206 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80051fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005200:	6878      	ldr	r0, [r7, #4]
 8005202:	f000 fe97 	bl	8005f34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	691b      	ldr	r3, [r3, #16]
 800520c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005210:	2b40      	cmp	r3, #64	; 0x40
 8005212:	d10e      	bne.n	8005232 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	68db      	ldr	r3, [r3, #12]
 800521a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800521e:	2b40      	cmp	r3, #64	; 0x40
 8005220:	d107      	bne.n	8005232 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800522a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800522c:	6878      	ldr	r0, [r7, #4]
 800522e:	f000 fa17 	bl	8005660 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	691b      	ldr	r3, [r3, #16]
 8005238:	f003 0320 	and.w	r3, r3, #32
 800523c:	2b20      	cmp	r3, #32
 800523e:	d10e      	bne.n	800525e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	68db      	ldr	r3, [r3, #12]
 8005246:	f003 0320 	and.w	r3, r3, #32
 800524a:	2b20      	cmp	r3, #32
 800524c:	d107      	bne.n	800525e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f06f 0220 	mvn.w	r2, #32
 8005256:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005258:	6878      	ldr	r0, [r7, #4]
 800525a:	f000 fe57 	bl	8005f0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800525e:	bf00      	nop
 8005260:	3708      	adds	r7, #8
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}
	...

08005268 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b086      	sub	sp, #24
 800526c:	af00      	add	r7, sp, #0
 800526e:	60f8      	str	r0, [r7, #12]
 8005270:	60b9      	str	r1, [r7, #8]
 8005272:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005274:	2300      	movs	r3, #0
 8005276:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800527e:	2b01      	cmp	r3, #1
 8005280:	d101      	bne.n	8005286 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005282:	2302      	movs	r3, #2
 8005284:	e0ff      	b.n	8005486 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2201      	movs	r2, #1
 800528a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2b14      	cmp	r3, #20
 8005292:	f200 80f0 	bhi.w	8005476 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005296:	a201      	add	r2, pc, #4	; (adr r2, 800529c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005298:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800529c:	080052f1 	.word	0x080052f1
 80052a0:	08005477 	.word	0x08005477
 80052a4:	08005477 	.word	0x08005477
 80052a8:	08005477 	.word	0x08005477
 80052ac:	08005331 	.word	0x08005331
 80052b0:	08005477 	.word	0x08005477
 80052b4:	08005477 	.word	0x08005477
 80052b8:	08005477 	.word	0x08005477
 80052bc:	08005373 	.word	0x08005373
 80052c0:	08005477 	.word	0x08005477
 80052c4:	08005477 	.word	0x08005477
 80052c8:	08005477 	.word	0x08005477
 80052cc:	080053b3 	.word	0x080053b3
 80052d0:	08005477 	.word	0x08005477
 80052d4:	08005477 	.word	0x08005477
 80052d8:	08005477 	.word	0x08005477
 80052dc:	080053f5 	.word	0x080053f5
 80052e0:	08005477 	.word	0x08005477
 80052e4:	08005477 	.word	0x08005477
 80052e8:	08005477 	.word	0x08005477
 80052ec:	08005435 	.word	0x08005435
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	68b9      	ldr	r1, [r7, #8]
 80052f6:	4618      	mov	r0, r3
 80052f8:	f000 fa5c 	bl	80057b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	699a      	ldr	r2, [r3, #24]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f042 0208 	orr.w	r2, r2, #8
 800530a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	699a      	ldr	r2, [r3, #24]
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f022 0204 	bic.w	r2, r2, #4
 800531a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6999      	ldr	r1, [r3, #24]
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	691a      	ldr	r2, [r3, #16]
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	430a      	orrs	r2, r1
 800532c:	619a      	str	r2, [r3, #24]
      break;
 800532e:	e0a5      	b.n	800547c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68b9      	ldr	r1, [r7, #8]
 8005336:	4618      	mov	r0, r3
 8005338:	f000 faae 	bl	8005898 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	699a      	ldr	r2, [r3, #24]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800534a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	699a      	ldr	r2, [r3, #24]
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800535a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	6999      	ldr	r1, [r3, #24]
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	691b      	ldr	r3, [r3, #16]
 8005366:	021a      	lsls	r2, r3, #8
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	430a      	orrs	r2, r1
 800536e:	619a      	str	r2, [r3, #24]
      break;
 8005370:	e084      	b.n	800547c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68b9      	ldr	r1, [r7, #8]
 8005378:	4618      	mov	r0, r3
 800537a:	f000 fb05 	bl	8005988 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	69da      	ldr	r2, [r3, #28]
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f042 0208 	orr.w	r2, r2, #8
 800538c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	69da      	ldr	r2, [r3, #28]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	f022 0204 	bic.w	r2, r2, #4
 800539c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	69d9      	ldr	r1, [r3, #28]
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	691a      	ldr	r2, [r3, #16]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	430a      	orrs	r2, r1
 80053ae:	61da      	str	r2, [r3, #28]
      break;
 80053b0:	e064      	b.n	800547c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68b9      	ldr	r1, [r7, #8]
 80053b8:	4618      	mov	r0, r3
 80053ba:	f000 fb5b 	bl	8005a74 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	69da      	ldr	r2, [r3, #28]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	69da      	ldr	r2, [r3, #28]
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	69d9      	ldr	r1, [r3, #28]
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	021a      	lsls	r2, r3, #8
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	430a      	orrs	r2, r1
 80053f0:	61da      	str	r2, [r3, #28]
      break;
 80053f2:	e043      	b.n	800547c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68b9      	ldr	r1, [r7, #8]
 80053fa:	4618      	mov	r0, r3
 80053fc:	f000 fb92 	bl	8005b24 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f042 0208 	orr.w	r2, r2, #8
 800540e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f022 0204 	bic.w	r2, r2, #4
 800541e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005426:	68bb      	ldr	r3, [r7, #8]
 8005428:	691a      	ldr	r2, [r3, #16]
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	430a      	orrs	r2, r1
 8005430:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005432:	e023      	b.n	800547c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68b9      	ldr	r1, [r7, #8]
 800543a:	4618      	mov	r0, r3
 800543c:	f000 fbc4 	bl	8005bc8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800544e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800545e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	021a      	lsls	r2, r3, #8
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	430a      	orrs	r2, r1
 8005472:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005474:	e002      	b.n	800547c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005476:	2301      	movs	r3, #1
 8005478:	75fb      	strb	r3, [r7, #23]
      break;
 800547a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	2200      	movs	r2, #0
 8005480:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005484:	7dfb      	ldrb	r3, [r7, #23]
}
 8005486:	4618      	mov	r0, r3
 8005488:	3718      	adds	r7, #24
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop

08005490 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800549a:	2300      	movs	r3, #0
 800549c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054a4:	2b01      	cmp	r3, #1
 80054a6:	d101      	bne.n	80054ac <HAL_TIM_ConfigClockSource+0x1c>
 80054a8:	2302      	movs	r3, #2
 80054aa:	e0b4      	b.n	8005616 <HAL_TIM_ConfigClockSource+0x186>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2201      	movs	r2, #1
 80054b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	2202      	movs	r2, #2
 80054b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	689b      	ldr	r3, [r3, #8]
 80054c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054c4:	68ba      	ldr	r2, [r7, #8]
 80054c6:	4b56      	ldr	r3, [pc, #344]	; (8005620 <HAL_TIM_ConfigClockSource+0x190>)
 80054c8:	4013      	ands	r3, r2
 80054ca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054d2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68ba      	ldr	r2, [r7, #8]
 80054da:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054e4:	d03e      	beq.n	8005564 <HAL_TIM_ConfigClockSource+0xd4>
 80054e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054ea:	f200 8087 	bhi.w	80055fc <HAL_TIM_ConfigClockSource+0x16c>
 80054ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054f2:	f000 8086 	beq.w	8005602 <HAL_TIM_ConfigClockSource+0x172>
 80054f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054fa:	d87f      	bhi.n	80055fc <HAL_TIM_ConfigClockSource+0x16c>
 80054fc:	2b70      	cmp	r3, #112	; 0x70
 80054fe:	d01a      	beq.n	8005536 <HAL_TIM_ConfigClockSource+0xa6>
 8005500:	2b70      	cmp	r3, #112	; 0x70
 8005502:	d87b      	bhi.n	80055fc <HAL_TIM_ConfigClockSource+0x16c>
 8005504:	2b60      	cmp	r3, #96	; 0x60
 8005506:	d050      	beq.n	80055aa <HAL_TIM_ConfigClockSource+0x11a>
 8005508:	2b60      	cmp	r3, #96	; 0x60
 800550a:	d877      	bhi.n	80055fc <HAL_TIM_ConfigClockSource+0x16c>
 800550c:	2b50      	cmp	r3, #80	; 0x50
 800550e:	d03c      	beq.n	800558a <HAL_TIM_ConfigClockSource+0xfa>
 8005510:	2b50      	cmp	r3, #80	; 0x50
 8005512:	d873      	bhi.n	80055fc <HAL_TIM_ConfigClockSource+0x16c>
 8005514:	2b40      	cmp	r3, #64	; 0x40
 8005516:	d058      	beq.n	80055ca <HAL_TIM_ConfigClockSource+0x13a>
 8005518:	2b40      	cmp	r3, #64	; 0x40
 800551a:	d86f      	bhi.n	80055fc <HAL_TIM_ConfigClockSource+0x16c>
 800551c:	2b30      	cmp	r3, #48	; 0x30
 800551e:	d064      	beq.n	80055ea <HAL_TIM_ConfigClockSource+0x15a>
 8005520:	2b30      	cmp	r3, #48	; 0x30
 8005522:	d86b      	bhi.n	80055fc <HAL_TIM_ConfigClockSource+0x16c>
 8005524:	2b20      	cmp	r3, #32
 8005526:	d060      	beq.n	80055ea <HAL_TIM_ConfigClockSource+0x15a>
 8005528:	2b20      	cmp	r3, #32
 800552a:	d867      	bhi.n	80055fc <HAL_TIM_ConfigClockSource+0x16c>
 800552c:	2b00      	cmp	r3, #0
 800552e:	d05c      	beq.n	80055ea <HAL_TIM_ConfigClockSource+0x15a>
 8005530:	2b10      	cmp	r3, #16
 8005532:	d05a      	beq.n	80055ea <HAL_TIM_ConfigClockSource+0x15a>
 8005534:	e062      	b.n	80055fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6818      	ldr	r0, [r3, #0]
 800553a:	683b      	ldr	r3, [r7, #0]
 800553c:	6899      	ldr	r1, [r3, #8]
 800553e:	683b      	ldr	r3, [r7, #0]
 8005540:	685a      	ldr	r2, [r3, #4]
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	68db      	ldr	r3, [r3, #12]
 8005546:	f000 fc0d 	bl	8005d64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005552:	68bb      	ldr	r3, [r7, #8]
 8005554:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005558:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68ba      	ldr	r2, [r7, #8]
 8005560:	609a      	str	r2, [r3, #8]
      break;
 8005562:	e04f      	b.n	8005604 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6818      	ldr	r0, [r3, #0]
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	6899      	ldr	r1, [r3, #8]
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	685a      	ldr	r2, [r3, #4]
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	f000 fbf6 	bl	8005d64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	689a      	ldr	r2, [r3, #8]
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005586:	609a      	str	r2, [r3, #8]
      break;
 8005588:	e03c      	b.n	8005604 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6818      	ldr	r0, [r3, #0]
 800558e:	683b      	ldr	r3, [r7, #0]
 8005590:	6859      	ldr	r1, [r3, #4]
 8005592:	683b      	ldr	r3, [r7, #0]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	461a      	mov	r2, r3
 8005598:	f000 fb6a 	bl	8005c70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	2150      	movs	r1, #80	; 0x50
 80055a2:	4618      	mov	r0, r3
 80055a4:	f000 fbc3 	bl	8005d2e <TIM_ITRx_SetConfig>
      break;
 80055a8:	e02c      	b.n	8005604 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6818      	ldr	r0, [r3, #0]
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	6859      	ldr	r1, [r3, #4]
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	68db      	ldr	r3, [r3, #12]
 80055b6:	461a      	mov	r2, r3
 80055b8:	f000 fb89 	bl	8005cce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	2160      	movs	r1, #96	; 0x60
 80055c2:	4618      	mov	r0, r3
 80055c4:	f000 fbb3 	bl	8005d2e <TIM_ITRx_SetConfig>
      break;
 80055c8:	e01c      	b.n	8005604 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6818      	ldr	r0, [r3, #0]
 80055ce:	683b      	ldr	r3, [r7, #0]
 80055d0:	6859      	ldr	r1, [r3, #4]
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	68db      	ldr	r3, [r3, #12]
 80055d6:	461a      	mov	r2, r3
 80055d8:	f000 fb4a 	bl	8005c70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	2140      	movs	r1, #64	; 0x40
 80055e2:	4618      	mov	r0, r3
 80055e4:	f000 fba3 	bl	8005d2e <TIM_ITRx_SetConfig>
      break;
 80055e8:	e00c      	b.n	8005604 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681a      	ldr	r2, [r3, #0]
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4619      	mov	r1, r3
 80055f4:	4610      	mov	r0, r2
 80055f6:	f000 fb9a 	bl	8005d2e <TIM_ITRx_SetConfig>
      break;
 80055fa:	e003      	b.n	8005604 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80055fc:	2301      	movs	r3, #1
 80055fe:	73fb      	strb	r3, [r7, #15]
      break;
 8005600:	e000      	b.n	8005604 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005602:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2200      	movs	r2, #0
 8005610:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005614:	7bfb      	ldrb	r3, [r7, #15]
}
 8005616:	4618      	mov	r0, r3
 8005618:	3710      	adds	r7, #16
 800561a:	46bd      	mov	sp, r7
 800561c:	bd80      	pop	{r7, pc}
 800561e:	bf00      	nop
 8005620:	fffeff88 	.word	0xfffeff88

08005624 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005624:	b480      	push	{r7}
 8005626:	b083      	sub	sp, #12
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800562c:	bf00      	nop
 800562e:	370c      	adds	r7, #12
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr

08005638 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005638:	b480      	push	{r7}
 800563a:	b083      	sub	sp, #12
 800563c:	af00      	add	r7, sp, #0
 800563e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005640:	bf00      	nop
 8005642:	370c      	adds	r7, #12
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800564c:	b480      	push	{r7}
 800564e:	b083      	sub	sp, #12
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005654:	bf00      	nop
 8005656:	370c      	adds	r7, #12
 8005658:	46bd      	mov	sp, r7
 800565a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565e:	4770      	bx	lr

08005660 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005660:	b480      	push	{r7}
 8005662:	b083      	sub	sp, #12
 8005664:	af00      	add	r7, sp, #0
 8005666:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005668:	bf00      	nop
 800566a:	370c      	adds	r7, #12
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005674:	b480      	push	{r7}
 8005676:	b085      	sub	sp, #20
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4a40      	ldr	r2, [pc, #256]	; (8005788 <TIM_Base_SetConfig+0x114>)
 8005688:	4293      	cmp	r3, r2
 800568a:	d013      	beq.n	80056b4 <TIM_Base_SetConfig+0x40>
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005692:	d00f      	beq.n	80056b4 <TIM_Base_SetConfig+0x40>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4a3d      	ldr	r2, [pc, #244]	; (800578c <TIM_Base_SetConfig+0x118>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d00b      	beq.n	80056b4 <TIM_Base_SetConfig+0x40>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	4a3c      	ldr	r2, [pc, #240]	; (8005790 <TIM_Base_SetConfig+0x11c>)
 80056a0:	4293      	cmp	r3, r2
 80056a2:	d007      	beq.n	80056b4 <TIM_Base_SetConfig+0x40>
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	4a3b      	ldr	r2, [pc, #236]	; (8005794 <TIM_Base_SetConfig+0x120>)
 80056a8:	4293      	cmp	r3, r2
 80056aa:	d003      	beq.n	80056b4 <TIM_Base_SetConfig+0x40>
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	4a3a      	ldr	r2, [pc, #232]	; (8005798 <TIM_Base_SetConfig+0x124>)
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d108      	bne.n	80056c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	68fa      	ldr	r2, [r7, #12]
 80056c2:	4313      	orrs	r3, r2
 80056c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	4a2f      	ldr	r2, [pc, #188]	; (8005788 <TIM_Base_SetConfig+0x114>)
 80056ca:	4293      	cmp	r3, r2
 80056cc:	d02b      	beq.n	8005726 <TIM_Base_SetConfig+0xb2>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056d4:	d027      	beq.n	8005726 <TIM_Base_SetConfig+0xb2>
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	4a2c      	ldr	r2, [pc, #176]	; (800578c <TIM_Base_SetConfig+0x118>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d023      	beq.n	8005726 <TIM_Base_SetConfig+0xb2>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	4a2b      	ldr	r2, [pc, #172]	; (8005790 <TIM_Base_SetConfig+0x11c>)
 80056e2:	4293      	cmp	r3, r2
 80056e4:	d01f      	beq.n	8005726 <TIM_Base_SetConfig+0xb2>
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	4a2a      	ldr	r2, [pc, #168]	; (8005794 <TIM_Base_SetConfig+0x120>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d01b      	beq.n	8005726 <TIM_Base_SetConfig+0xb2>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a29      	ldr	r2, [pc, #164]	; (8005798 <TIM_Base_SetConfig+0x124>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d017      	beq.n	8005726 <TIM_Base_SetConfig+0xb2>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a28      	ldr	r2, [pc, #160]	; (800579c <TIM_Base_SetConfig+0x128>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d013      	beq.n	8005726 <TIM_Base_SetConfig+0xb2>
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	4a27      	ldr	r2, [pc, #156]	; (80057a0 <TIM_Base_SetConfig+0x12c>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d00f      	beq.n	8005726 <TIM_Base_SetConfig+0xb2>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	4a26      	ldr	r2, [pc, #152]	; (80057a4 <TIM_Base_SetConfig+0x130>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d00b      	beq.n	8005726 <TIM_Base_SetConfig+0xb2>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	4a25      	ldr	r2, [pc, #148]	; (80057a8 <TIM_Base_SetConfig+0x134>)
 8005712:	4293      	cmp	r3, r2
 8005714:	d007      	beq.n	8005726 <TIM_Base_SetConfig+0xb2>
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	4a24      	ldr	r2, [pc, #144]	; (80057ac <TIM_Base_SetConfig+0x138>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d003      	beq.n	8005726 <TIM_Base_SetConfig+0xb2>
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	4a23      	ldr	r2, [pc, #140]	; (80057b0 <TIM_Base_SetConfig+0x13c>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d108      	bne.n	8005738 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800572c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800572e:	683b      	ldr	r3, [r7, #0]
 8005730:	68db      	ldr	r3, [r3, #12]
 8005732:	68fa      	ldr	r2, [r7, #12]
 8005734:	4313      	orrs	r3, r2
 8005736:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	695b      	ldr	r3, [r3, #20]
 8005742:	4313      	orrs	r3, r2
 8005744:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	689a      	ldr	r2, [r3, #8]
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a0a      	ldr	r2, [pc, #40]	; (8005788 <TIM_Base_SetConfig+0x114>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d003      	beq.n	800576c <TIM_Base_SetConfig+0xf8>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a0c      	ldr	r2, [pc, #48]	; (8005798 <TIM_Base_SetConfig+0x124>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d103      	bne.n	8005774 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	691a      	ldr	r2, [r3, #16]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2201      	movs	r2, #1
 8005778:	615a      	str	r2, [r3, #20]
}
 800577a:	bf00      	nop
 800577c:	3714      	adds	r7, #20
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	40010000 	.word	0x40010000
 800578c:	40000400 	.word	0x40000400
 8005790:	40000800 	.word	0x40000800
 8005794:	40000c00 	.word	0x40000c00
 8005798:	40010400 	.word	0x40010400
 800579c:	40014000 	.word	0x40014000
 80057a0:	40014400 	.word	0x40014400
 80057a4:	40014800 	.word	0x40014800
 80057a8:	40001800 	.word	0x40001800
 80057ac:	40001c00 	.word	0x40001c00
 80057b0:	40002000 	.word	0x40002000

080057b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80057b4:	b480      	push	{r7}
 80057b6:	b087      	sub	sp, #28
 80057b8:	af00      	add	r7, sp, #0
 80057ba:	6078      	str	r0, [r7, #4]
 80057bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6a1b      	ldr	r3, [r3, #32]
 80057c2:	f023 0201 	bic.w	r2, r3, #1
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	6a1b      	ldr	r3, [r3, #32]
 80057ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	699b      	ldr	r3, [r3, #24]
 80057da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	4b2b      	ldr	r3, [pc, #172]	; (800588c <TIM_OC1_SetConfig+0xd8>)
 80057e0:	4013      	ands	r3, r2
 80057e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f023 0303 	bic.w	r3, r3, #3
 80057ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	68fa      	ldr	r2, [r7, #12]
 80057f2:	4313      	orrs	r3, r2
 80057f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	f023 0302 	bic.w	r3, r3, #2
 80057fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	697a      	ldr	r2, [r7, #20]
 8005804:	4313      	orrs	r3, r2
 8005806:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	4a21      	ldr	r2, [pc, #132]	; (8005890 <TIM_OC1_SetConfig+0xdc>)
 800580c:	4293      	cmp	r3, r2
 800580e:	d003      	beq.n	8005818 <TIM_OC1_SetConfig+0x64>
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	4a20      	ldr	r2, [pc, #128]	; (8005894 <TIM_OC1_SetConfig+0xe0>)
 8005814:	4293      	cmp	r3, r2
 8005816:	d10c      	bne.n	8005832 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	f023 0308 	bic.w	r3, r3, #8
 800581e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005820:	683b      	ldr	r3, [r7, #0]
 8005822:	68db      	ldr	r3, [r3, #12]
 8005824:	697a      	ldr	r2, [r7, #20]
 8005826:	4313      	orrs	r3, r2
 8005828:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f023 0304 	bic.w	r3, r3, #4
 8005830:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	4a16      	ldr	r2, [pc, #88]	; (8005890 <TIM_OC1_SetConfig+0xdc>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d003      	beq.n	8005842 <TIM_OC1_SetConfig+0x8e>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	4a15      	ldr	r2, [pc, #84]	; (8005894 <TIM_OC1_SetConfig+0xe0>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d111      	bne.n	8005866 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005842:	693b      	ldr	r3, [r7, #16]
 8005844:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005848:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005850:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	695b      	ldr	r3, [r3, #20]
 8005856:	693a      	ldr	r2, [r7, #16]
 8005858:	4313      	orrs	r3, r2
 800585a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	699b      	ldr	r3, [r3, #24]
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	4313      	orrs	r3, r2
 8005864:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	693a      	ldr	r2, [r7, #16]
 800586a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	685a      	ldr	r2, [r3, #4]
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	697a      	ldr	r2, [r7, #20]
 800587e:	621a      	str	r2, [r3, #32]
}
 8005880:	bf00      	nop
 8005882:	371c      	adds	r7, #28
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr
 800588c:	fffeff8f 	.word	0xfffeff8f
 8005890:	40010000 	.word	0x40010000
 8005894:	40010400 	.word	0x40010400

08005898 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005898:	b480      	push	{r7}
 800589a:	b087      	sub	sp, #28
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
 80058a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6a1b      	ldr	r3, [r3, #32]
 80058a6:	f023 0210 	bic.w	r2, r3, #16
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6a1b      	ldr	r3, [r3, #32]
 80058b2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	685b      	ldr	r3, [r3, #4]
 80058b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	4b2e      	ldr	r3, [pc, #184]	; (800597c <TIM_OC2_SetConfig+0xe4>)
 80058c4:	4013      	ands	r3, r2
 80058c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	021b      	lsls	r3, r3, #8
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	4313      	orrs	r3, r2
 80058da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058dc:	697b      	ldr	r3, [r7, #20]
 80058de:	f023 0320 	bic.w	r3, r3, #32
 80058e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	011b      	lsls	r3, r3, #4
 80058ea:	697a      	ldr	r2, [r7, #20]
 80058ec:	4313      	orrs	r3, r2
 80058ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a23      	ldr	r2, [pc, #140]	; (8005980 <TIM_OC2_SetConfig+0xe8>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d003      	beq.n	8005900 <TIM_OC2_SetConfig+0x68>
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	4a22      	ldr	r2, [pc, #136]	; (8005984 <TIM_OC2_SetConfig+0xec>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d10d      	bne.n	800591c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005900:	697b      	ldr	r3, [r7, #20]
 8005902:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005906:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	011b      	lsls	r3, r3, #4
 800590e:	697a      	ldr	r2, [r7, #20]
 8005910:	4313      	orrs	r3, r2
 8005912:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800591a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a18      	ldr	r2, [pc, #96]	; (8005980 <TIM_OC2_SetConfig+0xe8>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d003      	beq.n	800592c <TIM_OC2_SetConfig+0x94>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a17      	ldr	r2, [pc, #92]	; (8005984 <TIM_OC2_SetConfig+0xec>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d113      	bne.n	8005954 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005932:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005934:	693b      	ldr	r3, [r7, #16]
 8005936:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800593a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	695b      	ldr	r3, [r3, #20]
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	4313      	orrs	r3, r2
 8005946:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	4313      	orrs	r3, r2
 8005952:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	693a      	ldr	r2, [r7, #16]
 8005958:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	685a      	ldr	r2, [r3, #4]
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	697a      	ldr	r2, [r7, #20]
 800596c:	621a      	str	r2, [r3, #32]
}
 800596e:	bf00      	nop
 8005970:	371c      	adds	r7, #28
 8005972:	46bd      	mov	sp, r7
 8005974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005978:	4770      	bx	lr
 800597a:	bf00      	nop
 800597c:	feff8fff 	.word	0xfeff8fff
 8005980:	40010000 	.word	0x40010000
 8005984:	40010400 	.word	0x40010400

08005988 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005988:	b480      	push	{r7}
 800598a:	b087      	sub	sp, #28
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
 8005990:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	6a1b      	ldr	r3, [r3, #32]
 8005996:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	6a1b      	ldr	r3, [r3, #32]
 80059a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	685b      	ldr	r3, [r3, #4]
 80059a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	69db      	ldr	r3, [r3, #28]
 80059ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059b0:	68fa      	ldr	r2, [r7, #12]
 80059b2:	4b2d      	ldr	r3, [pc, #180]	; (8005a68 <TIM_OC3_SetConfig+0xe0>)
 80059b4:	4013      	ands	r3, r2
 80059b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	f023 0303 	bic.w	r3, r3, #3
 80059be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059c0:	683b      	ldr	r3, [r7, #0]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68fa      	ldr	r2, [r7, #12]
 80059c6:	4313      	orrs	r3, r2
 80059c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059ca:	697b      	ldr	r3, [r7, #20]
 80059cc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059d2:	683b      	ldr	r3, [r7, #0]
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	021b      	lsls	r3, r3, #8
 80059d8:	697a      	ldr	r2, [r7, #20]
 80059da:	4313      	orrs	r3, r2
 80059dc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a22      	ldr	r2, [pc, #136]	; (8005a6c <TIM_OC3_SetConfig+0xe4>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d003      	beq.n	80059ee <TIM_OC3_SetConfig+0x66>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	4a21      	ldr	r2, [pc, #132]	; (8005a70 <TIM_OC3_SetConfig+0xe8>)
 80059ea:	4293      	cmp	r3, r2
 80059ec:	d10d      	bne.n	8005a0a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059ee:	697b      	ldr	r3, [r7, #20]
 80059f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	021b      	lsls	r3, r3, #8
 80059fc:	697a      	ldr	r2, [r7, #20]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005a02:	697b      	ldr	r3, [r7, #20]
 8005a04:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005a08:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a17      	ldr	r2, [pc, #92]	; (8005a6c <TIM_OC3_SetConfig+0xe4>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d003      	beq.n	8005a1a <TIM_OC3_SetConfig+0x92>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a16      	ldr	r2, [pc, #88]	; (8005a70 <TIM_OC3_SetConfig+0xe8>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d113      	bne.n	8005a42 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a22:	693b      	ldr	r3, [r7, #16]
 8005a24:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	695b      	ldr	r3, [r3, #20]
 8005a2e:	011b      	lsls	r3, r3, #4
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	699b      	ldr	r3, [r3, #24]
 8005a3a:	011b      	lsls	r3, r3, #4
 8005a3c:	693a      	ldr	r2, [r7, #16]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	693a      	ldr	r2, [r7, #16]
 8005a46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	68fa      	ldr	r2, [r7, #12]
 8005a4c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	685a      	ldr	r2, [r3, #4]
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	621a      	str	r2, [r3, #32]
}
 8005a5c:	bf00      	nop
 8005a5e:	371c      	adds	r7, #28
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr
 8005a68:	fffeff8f 	.word	0xfffeff8f
 8005a6c:	40010000 	.word	0x40010000
 8005a70:	40010400 	.word	0x40010400

08005a74 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b087      	sub	sp, #28
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6a1b      	ldr	r3, [r3, #32]
 8005a82:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a1b      	ldr	r3, [r3, #32]
 8005a8e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	69db      	ldr	r3, [r3, #28]
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a9c:	68fa      	ldr	r2, [r7, #12]
 8005a9e:	4b1e      	ldr	r3, [pc, #120]	; (8005b18 <TIM_OC4_SetConfig+0xa4>)
 8005aa0:	4013      	ands	r3, r2
 8005aa2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aaa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005aac:	683b      	ldr	r3, [r7, #0]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	021b      	lsls	r3, r3, #8
 8005ab2:	68fa      	ldr	r2, [r7, #12]
 8005ab4:	4313      	orrs	r3, r2
 8005ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ab8:	693b      	ldr	r3, [r7, #16]
 8005aba:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005abe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	689b      	ldr	r3, [r3, #8]
 8005ac4:	031b      	lsls	r3, r3, #12
 8005ac6:	693a      	ldr	r2, [r7, #16]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	4a13      	ldr	r2, [pc, #76]	; (8005b1c <TIM_OC4_SetConfig+0xa8>)
 8005ad0:	4293      	cmp	r3, r2
 8005ad2:	d003      	beq.n	8005adc <TIM_OC4_SetConfig+0x68>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a12      	ldr	r2, [pc, #72]	; (8005b20 <TIM_OC4_SetConfig+0xac>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d109      	bne.n	8005af0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ae2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	695b      	ldr	r3, [r3, #20]
 8005ae8:	019b      	lsls	r3, r3, #6
 8005aea:	697a      	ldr	r2, [r7, #20]
 8005aec:	4313      	orrs	r3, r2
 8005aee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	697a      	ldr	r2, [r7, #20]
 8005af4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	68fa      	ldr	r2, [r7, #12]
 8005afa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	685a      	ldr	r2, [r3, #4]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	621a      	str	r2, [r3, #32]
}
 8005b0a:	bf00      	nop
 8005b0c:	371c      	adds	r7, #28
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b14:	4770      	bx	lr
 8005b16:	bf00      	nop
 8005b18:	feff8fff 	.word	0xfeff8fff
 8005b1c:	40010000 	.word	0x40010000
 8005b20:	40010400 	.word	0x40010400

08005b24 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005b24:	b480      	push	{r7}
 8005b26:	b087      	sub	sp, #28
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6a1b      	ldr	r3, [r3, #32]
 8005b32:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a1b      	ldr	r3, [r3, #32]
 8005b3e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005b4c:	68fa      	ldr	r2, [r7, #12]
 8005b4e:	4b1b      	ldr	r3, [pc, #108]	; (8005bbc <TIM_OC5_SetConfig+0x98>)
 8005b50:	4013      	ands	r3, r2
 8005b52:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	68fa      	ldr	r2, [r7, #12]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005b5e:	693b      	ldr	r3, [r7, #16]
 8005b60:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005b64:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	041b      	lsls	r3, r3, #16
 8005b6c:	693a      	ldr	r2, [r7, #16]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	4a12      	ldr	r2, [pc, #72]	; (8005bc0 <TIM_OC5_SetConfig+0x9c>)
 8005b76:	4293      	cmp	r3, r2
 8005b78:	d003      	beq.n	8005b82 <TIM_OC5_SetConfig+0x5e>
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	4a11      	ldr	r2, [pc, #68]	; (8005bc4 <TIM_OC5_SetConfig+0xa0>)
 8005b7e:	4293      	cmp	r3, r2
 8005b80:	d109      	bne.n	8005b96 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b88:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	695b      	ldr	r3, [r3, #20]
 8005b8e:	021b      	lsls	r3, r3, #8
 8005b90:	697a      	ldr	r2, [r7, #20]
 8005b92:	4313      	orrs	r3, r2
 8005b94:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	697a      	ldr	r2, [r7, #20]
 8005b9a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	68fa      	ldr	r2, [r7, #12]
 8005ba0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	685a      	ldr	r2, [r3, #4]
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	693a      	ldr	r2, [r7, #16]
 8005bae:	621a      	str	r2, [r3, #32]
}
 8005bb0:	bf00      	nop
 8005bb2:	371c      	adds	r7, #28
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr
 8005bbc:	fffeff8f 	.word	0xfffeff8f
 8005bc0:	40010000 	.word	0x40010000
 8005bc4:	40010400 	.word	0x40010400

08005bc8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b087      	sub	sp, #28
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6a1b      	ldr	r3, [r3, #32]
 8005bd6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	6a1b      	ldr	r3, [r3, #32]
 8005be2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	4b1c      	ldr	r3, [pc, #112]	; (8005c64 <TIM_OC6_SetConfig+0x9c>)
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	021b      	lsls	r3, r3, #8
 8005bfe:	68fa      	ldr	r2, [r7, #12]
 8005c00:	4313      	orrs	r3, r2
 8005c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005c04:	693b      	ldr	r3, [r7, #16]
 8005c06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005c0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	689b      	ldr	r3, [r3, #8]
 8005c10:	051b      	lsls	r3, r3, #20
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a13      	ldr	r2, [pc, #76]	; (8005c68 <TIM_OC6_SetConfig+0xa0>)
 8005c1c:	4293      	cmp	r3, r2
 8005c1e:	d003      	beq.n	8005c28 <TIM_OC6_SetConfig+0x60>
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	4a12      	ldr	r2, [pc, #72]	; (8005c6c <TIM_OC6_SetConfig+0xa4>)
 8005c24:	4293      	cmp	r3, r2
 8005c26:	d109      	bne.n	8005c3c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c2e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	695b      	ldr	r3, [r3, #20]
 8005c34:	029b      	lsls	r3, r3, #10
 8005c36:	697a      	ldr	r2, [r7, #20]
 8005c38:	4313      	orrs	r3, r2
 8005c3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	697a      	ldr	r2, [r7, #20]
 8005c40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	68fa      	ldr	r2, [r7, #12]
 8005c46:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	685a      	ldr	r2, [r3, #4]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	693a      	ldr	r2, [r7, #16]
 8005c54:	621a      	str	r2, [r3, #32]
}
 8005c56:	bf00      	nop
 8005c58:	371c      	adds	r7, #28
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr
 8005c62:	bf00      	nop
 8005c64:	feff8fff 	.word	0xfeff8fff
 8005c68:	40010000 	.word	0x40010000
 8005c6c:	40010400 	.word	0x40010400

08005c70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c70:	b480      	push	{r7}
 8005c72:	b087      	sub	sp, #28
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	60f8      	str	r0, [r7, #12]
 8005c78:	60b9      	str	r1, [r7, #8]
 8005c7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6a1b      	ldr	r3, [r3, #32]
 8005c80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	f023 0201 	bic.w	r2, r3, #1
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	699b      	ldr	r3, [r3, #24]
 8005c92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c94:	693b      	ldr	r3, [r7, #16]
 8005c96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	011b      	lsls	r3, r3, #4
 8005ca0:	693a      	ldr	r2, [r7, #16]
 8005ca2:	4313      	orrs	r3, r2
 8005ca4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	f023 030a 	bic.w	r3, r3, #10
 8005cac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005cae:	697a      	ldr	r2, [r7, #20]
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	693a      	ldr	r2, [r7, #16]
 8005cba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	697a      	ldr	r2, [r7, #20]
 8005cc0:	621a      	str	r2, [r3, #32]
}
 8005cc2:	bf00      	nop
 8005cc4:	371c      	adds	r7, #28
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ccc:	4770      	bx	lr

08005cce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005cce:	b480      	push	{r7}
 8005cd0:	b087      	sub	sp, #28
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	60f8      	str	r0, [r7, #12]
 8005cd6:	60b9      	str	r1, [r7, #8]
 8005cd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	6a1b      	ldr	r3, [r3, #32]
 8005cde:	f023 0210 	bic.w	r2, r3, #16
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	6a1b      	ldr	r3, [r3, #32]
 8005cf0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005cf8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	031b      	lsls	r3, r3, #12
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005d0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	011b      	lsls	r3, r3, #4
 8005d10:	693a      	ldr	r2, [r7, #16]
 8005d12:	4313      	orrs	r3, r2
 8005d14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	697a      	ldr	r2, [r7, #20]
 8005d1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	693a      	ldr	r2, [r7, #16]
 8005d20:	621a      	str	r2, [r3, #32]
}
 8005d22:	bf00      	nop
 8005d24:	371c      	adds	r7, #28
 8005d26:	46bd      	mov	sp, r7
 8005d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2c:	4770      	bx	lr

08005d2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005d2e:	b480      	push	{r7}
 8005d30:	b085      	sub	sp, #20
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
 8005d36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	689b      	ldr	r3, [r3, #8]
 8005d3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005d46:	683a      	ldr	r2, [r7, #0]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	f043 0307 	orr.w	r3, r3, #7
 8005d50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	609a      	str	r2, [r3, #8]
}
 8005d58:	bf00      	nop
 8005d5a:	3714      	adds	r7, #20
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d62:	4770      	bx	lr

08005d64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d64:	b480      	push	{r7}
 8005d66:	b087      	sub	sp, #28
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	60f8      	str	r0, [r7, #12]
 8005d6c:	60b9      	str	r1, [r7, #8]
 8005d6e:	607a      	str	r2, [r7, #4]
 8005d70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	021a      	lsls	r2, r3, #8
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	431a      	orrs	r2, r3
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	4313      	orrs	r3, r2
 8005d8c:	697a      	ldr	r2, [r7, #20]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	609a      	str	r2, [r3, #8]
}
 8005d98:	bf00      	nop
 8005d9a:	371c      	adds	r7, #28
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr

08005da4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005da4:	b480      	push	{r7}
 8005da6:	b087      	sub	sp, #28
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005db0:	68bb      	ldr	r3, [r7, #8]
 8005db2:	f003 031f 	and.w	r3, r3, #31
 8005db6:	2201      	movs	r2, #1
 8005db8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dbc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	6a1a      	ldr	r2, [r3, #32]
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	43db      	mvns	r3, r3
 8005dc6:	401a      	ands	r2, r3
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	6a1a      	ldr	r2, [r3, #32]
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	f003 031f 	and.w	r3, r3, #31
 8005dd6:	6879      	ldr	r1, [r7, #4]
 8005dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8005ddc:	431a      	orrs	r2, r3
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	621a      	str	r2, [r3, #32]
}
 8005de2:	bf00      	nop
 8005de4:	371c      	adds	r7, #28
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
	...

08005df0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d101      	bne.n	8005e08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005e04:	2302      	movs	r3, #2
 8005e06:	e06d      	b.n	8005ee4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2202      	movs	r2, #2
 8005e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	685b      	ldr	r3, [r3, #4]
 8005e1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	689b      	ldr	r3, [r3, #8]
 8005e26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4a30      	ldr	r2, [pc, #192]	; (8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e2e:	4293      	cmp	r3, r2
 8005e30:	d004      	beq.n	8005e3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	4a2f      	ldr	r2, [pc, #188]	; (8005ef4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005e38:	4293      	cmp	r3, r2
 8005e3a:	d108      	bne.n	8005e4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005e42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	68fa      	ldr	r2, [r7, #12]
 8005e4a:	4313      	orrs	r3, r2
 8005e4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005e56:	683b      	ldr	r3, [r7, #0]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	68fa      	ldr	r2, [r7, #12]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a20      	ldr	r2, [pc, #128]	; (8005ef0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d022      	beq.n	8005eb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e7a:	d01d      	beq.n	8005eb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	4a1d      	ldr	r2, [pc, #116]	; (8005ef8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005e82:	4293      	cmp	r3, r2
 8005e84:	d018      	beq.n	8005eb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	4a1c      	ldr	r2, [pc, #112]	; (8005efc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005e8c:	4293      	cmp	r3, r2
 8005e8e:	d013      	beq.n	8005eb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	4a1a      	ldr	r2, [pc, #104]	; (8005f00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d00e      	beq.n	8005eb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	4a15      	ldr	r2, [pc, #84]	; (8005ef4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005ea0:	4293      	cmp	r3, r2
 8005ea2:	d009      	beq.n	8005eb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4a16      	ldr	r2, [pc, #88]	; (8005f04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	d004      	beq.n	8005eb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4a15      	ldr	r2, [pc, #84]	; (8005f08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	d10c      	bne.n	8005ed2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005eb8:	68bb      	ldr	r3, [r7, #8]
 8005eba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ebe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	68ba      	ldr	r2, [r7, #8]
 8005ec6:	4313      	orrs	r3, r2
 8005ec8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	68ba      	ldr	r2, [r7, #8]
 8005ed0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2201      	movs	r2, #1
 8005ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2200      	movs	r2, #0
 8005ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005ee2:	2300      	movs	r3, #0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3714      	adds	r7, #20
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eee:	4770      	bx	lr
 8005ef0:	40010000 	.word	0x40010000
 8005ef4:	40010400 	.word	0x40010400
 8005ef8:	40000400 	.word	0x40000400
 8005efc:	40000800 	.word	0x40000800
 8005f00:	40000c00 	.word	0x40000c00
 8005f04:	40014000 	.word	0x40014000
 8005f08:	40001800 	.word	0x40001800

08005f0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f14:	bf00      	nop
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f28:	bf00      	nop
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d101      	bne.n	8005f5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e040      	b.n	8005fdc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	d106      	bne.n	8005f70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f7fb f9e4 	bl	8001338 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2224      	movs	r2, #36	; 0x24
 8005f74:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	681a      	ldr	r2, [r3, #0]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f022 0201 	bic.w	r2, r2, #1
 8005f84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 fbca 	bl	8006720 <UART_SetConfig>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d101      	bne.n	8005f96 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005f92:	2301      	movs	r3, #1
 8005f94:	e022      	b.n	8005fdc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d002      	beq.n	8005fa4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f000 fe20 	bl	8006be4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	685a      	ldr	r2, [r3, #4]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005fb2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	689a      	ldr	r2, [r3, #8]
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005fc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f042 0201 	orr.w	r2, r2, #1
 8005fd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 fea7 	bl	8006d28 <UART_CheckIdleState>
 8005fda:	4603      	mov	r3, r0
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3708      	adds	r7, #8
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b08a      	sub	sp, #40	; 0x28
 8005fe8:	af02      	add	r7, sp, #8
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	603b      	str	r3, [r7, #0]
 8005ff0:	4613      	mov	r3, r2
 8005ff2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005ff8:	2b20      	cmp	r3, #32
 8005ffa:	f040 8081 	bne.w	8006100 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d002      	beq.n	800600a <HAL_UART_Transmit+0x26>
 8006004:	88fb      	ldrh	r3, [r7, #6]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d101      	bne.n	800600e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800600a:	2301      	movs	r3, #1
 800600c:	e079      	b.n	8006102 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006014:	2b01      	cmp	r3, #1
 8006016:	d101      	bne.n	800601c <HAL_UART_Transmit+0x38>
 8006018:	2302      	movs	r3, #2
 800601a:	e072      	b.n	8006102 <HAL_UART_Transmit+0x11e>
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	2200      	movs	r2, #0
 8006028:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	2221      	movs	r2, #33	; 0x21
 8006030:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006032:	f7fb fa47 	bl	80014c4 <HAL_GetTick>
 8006036:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	88fa      	ldrh	r2, [r7, #6]
 800603c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	88fa      	ldrh	r2, [r7, #6]
 8006044:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	689b      	ldr	r3, [r3, #8]
 800604c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006050:	d108      	bne.n	8006064 <HAL_UART_Transmit+0x80>
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	691b      	ldr	r3, [r3, #16]
 8006056:	2b00      	cmp	r3, #0
 8006058:	d104      	bne.n	8006064 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800605a:	2300      	movs	r3, #0
 800605c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	61bb      	str	r3, [r7, #24]
 8006062:	e003      	b.n	800606c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006068:	2300      	movs	r3, #0
 800606a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8006074:	e02c      	b.n	80060d0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	9300      	str	r3, [sp, #0]
 800607a:	697b      	ldr	r3, [r7, #20]
 800607c:	2200      	movs	r2, #0
 800607e:	2180      	movs	r1, #128	; 0x80
 8006080:	68f8      	ldr	r0, [r7, #12]
 8006082:	f000 fe9a 	bl	8006dba <UART_WaitOnFlagUntilTimeout>
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d001      	beq.n	8006090 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e038      	b.n	8006102 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006090:	69fb      	ldr	r3, [r7, #28]
 8006092:	2b00      	cmp	r3, #0
 8006094:	d10b      	bne.n	80060ae <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006096:	69bb      	ldr	r3, [r7, #24]
 8006098:	881b      	ldrh	r3, [r3, #0]
 800609a:	461a      	mov	r2, r3
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80060a4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80060a6:	69bb      	ldr	r3, [r7, #24]
 80060a8:	3302      	adds	r3, #2
 80060aa:	61bb      	str	r3, [r7, #24]
 80060ac:	e007      	b.n	80060be <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80060ae:	69fb      	ldr	r3, [r7, #28]
 80060b0:	781a      	ldrb	r2, [r3, #0]
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80060b8:	69fb      	ldr	r3, [r7, #28]
 80060ba:	3301      	adds	r3, #1
 80060bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80060c4:	b29b      	uxth	r3, r3
 80060c6:	3b01      	subs	r3, #1
 80060c8:	b29a      	uxth	r2, r3
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80060d6:	b29b      	uxth	r3, r3
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d1cc      	bne.n	8006076 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	9300      	str	r3, [sp, #0]
 80060e0:	697b      	ldr	r3, [r7, #20]
 80060e2:	2200      	movs	r2, #0
 80060e4:	2140      	movs	r1, #64	; 0x40
 80060e6:	68f8      	ldr	r0, [r7, #12]
 80060e8:	f000 fe67 	bl	8006dba <UART_WaitOnFlagUntilTimeout>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d001      	beq.n	80060f6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80060f2:	2303      	movs	r3, #3
 80060f4:	e005      	b.n	8006102 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	2220      	movs	r2, #32
 80060fa:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80060fc:	2300      	movs	r3, #0
 80060fe:	e000      	b.n	8006102 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006100:	2302      	movs	r3, #2
  }
}
 8006102:	4618      	mov	r0, r3
 8006104:	3720      	adds	r7, #32
 8006106:	46bd      	mov	sp, r7
 8006108:	bd80      	pop	{r7, pc}
	...

0800610c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800610c:	b580      	push	{r7, lr}
 800610e:	b0ba      	sub	sp, #232	; 0xe8
 8006110:	af00      	add	r7, sp, #0
 8006112:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	69db      	ldr	r3, [r3, #28]
 800611a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	689b      	ldr	r3, [r3, #8]
 800612e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006132:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006136:	f640 030f 	movw	r3, #2063	; 0x80f
 800613a:	4013      	ands	r3, r2
 800613c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006140:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006144:	2b00      	cmp	r3, #0
 8006146:	d115      	bne.n	8006174 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006148:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800614c:	f003 0320 	and.w	r3, r3, #32
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00f      	beq.n	8006174 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006158:	f003 0320 	and.w	r3, r3, #32
 800615c:	2b00      	cmp	r3, #0
 800615e:	d009      	beq.n	8006174 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006164:	2b00      	cmp	r3, #0
 8006166:	f000 82a4 	beq.w	80066b2 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	4798      	blx	r3
      }
      return;
 8006172:	e29e      	b.n	80066b2 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006174:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006178:	2b00      	cmp	r3, #0
 800617a:	f000 8117 	beq.w	80063ac <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800617e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006182:	f003 0301 	and.w	r3, r3, #1
 8006186:	2b00      	cmp	r3, #0
 8006188:	d106      	bne.n	8006198 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800618a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800618e:	4b85      	ldr	r3, [pc, #532]	; (80063a4 <HAL_UART_IRQHandler+0x298>)
 8006190:	4013      	ands	r3, r2
 8006192:	2b00      	cmp	r3, #0
 8006194:	f000 810a 	beq.w	80063ac <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006198:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800619c:	f003 0301 	and.w	r3, r3, #1
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d011      	beq.n	80061c8 <HAL_UART_IRQHandler+0xbc>
 80061a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80061a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d00b      	beq.n	80061c8 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2201      	movs	r2, #1
 80061b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061be:	f043 0201 	orr.w	r2, r3, #1
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061cc:	f003 0302 	and.w	r3, r3, #2
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d011      	beq.n	80061f8 <HAL_UART_IRQHandler+0xec>
 80061d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061d8:	f003 0301 	and.w	r3, r3, #1
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d00b      	beq.n	80061f8 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	2202      	movs	r2, #2
 80061e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80061ee:	f043 0204 	orr.w	r2, r3, #4
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80061f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80061fc:	f003 0304 	and.w	r3, r3, #4
 8006200:	2b00      	cmp	r3, #0
 8006202:	d011      	beq.n	8006228 <HAL_UART_IRQHandler+0x11c>
 8006204:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006208:	f003 0301 	and.w	r3, r3, #1
 800620c:	2b00      	cmp	r3, #0
 800620e:	d00b      	beq.n	8006228 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2204      	movs	r2, #4
 8006216:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800621e:	f043 0202 	orr.w	r2, r3, #2
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006228:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800622c:	f003 0308 	and.w	r3, r3, #8
 8006230:	2b00      	cmp	r3, #0
 8006232:	d017      	beq.n	8006264 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006234:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006238:	f003 0320 	and.w	r3, r3, #32
 800623c:	2b00      	cmp	r3, #0
 800623e:	d105      	bne.n	800624c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006240:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006244:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00b      	beq.n	8006264 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2208      	movs	r2, #8
 8006252:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800625a:	f043 0208 	orr.w	r2, r3, #8
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006264:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006268:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800626c:	2b00      	cmp	r3, #0
 800626e:	d012      	beq.n	8006296 <HAL_UART_IRQHandler+0x18a>
 8006270:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006274:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00c      	beq.n	8006296 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006284:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800628c:	f043 0220 	orr.w	r2, r3, #32
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800629c:	2b00      	cmp	r3, #0
 800629e:	f000 820a 	beq.w	80066b6 <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80062a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062a6:	f003 0320 	and.w	r3, r3, #32
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d00d      	beq.n	80062ca <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80062ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80062b2:	f003 0320 	and.w	r3, r3, #32
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d007      	beq.n	80062ca <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d003      	beq.n	80062ca <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80062d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	689b      	ldr	r3, [r3, #8]
 80062da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062de:	2b40      	cmp	r3, #64	; 0x40
 80062e0:	d005      	beq.n	80062ee <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80062e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80062e6:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d04f      	beq.n	800638e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 fe27 	bl	8006f42 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	689b      	ldr	r3, [r3, #8]
 80062fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062fe:	2b40      	cmp	r3, #64	; 0x40
 8006300:	d141      	bne.n	8006386 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	3308      	adds	r3, #8
 8006308:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800630c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006310:	e853 3f00 	ldrex	r3, [r3]
 8006314:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006318:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800631c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006320:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	3308      	adds	r3, #8
 800632a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800632e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006332:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006336:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800633a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800633e:	e841 2300 	strex	r3, r2, [r1]
 8006342:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006346:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800634a:	2b00      	cmp	r3, #0
 800634c:	d1d9      	bne.n	8006302 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006352:	2b00      	cmp	r3, #0
 8006354:	d013      	beq.n	800637e <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800635a:	4a13      	ldr	r2, [pc, #76]	; (80063a8 <HAL_UART_IRQHandler+0x29c>)
 800635c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006362:	4618      	mov	r0, r3
 8006364:	f7fb fe07 	bl	8001f76 <HAL_DMA_Abort_IT>
 8006368:	4603      	mov	r3, r0
 800636a:	2b00      	cmp	r3, #0
 800636c:	d017      	beq.n	800639e <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006374:	687a      	ldr	r2, [r7, #4]
 8006376:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006378:	4610      	mov	r0, r2
 800637a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800637c:	e00f      	b.n	800639e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f000 f9ae 	bl	80066e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006384:	e00b      	b.n	800639e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006386:	6878      	ldr	r0, [r7, #4]
 8006388:	f000 f9aa 	bl	80066e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800638c:	e007      	b.n	800639e <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f000 f9a6 	bl	80066e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 800639c:	e18b      	b.n	80066b6 <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800639e:	bf00      	nop
    return;
 80063a0:	e189      	b.n	80066b6 <HAL_UART_IRQHandler+0x5aa>
 80063a2:	bf00      	nop
 80063a4:	04000120 	.word	0x04000120
 80063a8:	08007009 	.word	0x08007009

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	f040 8144 	bne.w	800663e <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80063b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063ba:	f003 0310 	and.w	r3, r3, #16
 80063be:	2b00      	cmp	r3, #0
 80063c0:	f000 813d 	beq.w	800663e <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80063c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80063c8:	f003 0310 	and.w	r3, r3, #16
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	f000 8136 	beq.w	800663e <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	2210      	movs	r2, #16
 80063d8:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e4:	2b40      	cmp	r3, #64	; 0x40
 80063e6:	f040 80b2 	bne.w	800654e <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80063f6:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	f000 815d 	beq.w	80066ba <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006406:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800640a:	429a      	cmp	r2, r3
 800640c:	f080 8155 	bcs.w	80066ba <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006416:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800641e:	69db      	ldr	r3, [r3, #28]
 8006420:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006424:	f000 8085 	beq.w	8006532 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006430:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006434:	e853 3f00 	ldrex	r3, [r3]
 8006438:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800643c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006440:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006444:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	461a      	mov	r2, r3
 800644e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006452:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006456:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800645a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800645e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006462:	e841 2300 	strex	r3, r2, [r1]
 8006466:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800646a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800646e:	2b00      	cmp	r3, #0
 8006470:	d1da      	bne.n	8006428 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	3308      	adds	r3, #8
 8006478:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800647a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800647c:	e853 3f00 	ldrex	r3, [r3]
 8006480:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006482:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006484:	f023 0301 	bic.w	r3, r3, #1
 8006488:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	3308      	adds	r3, #8
 8006492:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006496:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800649a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800649c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800649e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80064a2:	e841 2300 	strex	r3, r2, [r1]
 80064a6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80064a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1e1      	bne.n	8006472 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	3308      	adds	r3, #8
 80064b4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80064b8:	e853 3f00 	ldrex	r3, [r3]
 80064bc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80064be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80064c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	3308      	adds	r3, #8
 80064ce:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80064d2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80064d4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064d6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80064d8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80064da:	e841 2300 	strex	r3, r2, [r1]
 80064de:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80064e0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d1e3      	bne.n	80064ae <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	2220      	movs	r2, #32
 80064ea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	2200      	movs	r2, #0
 80064f0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	681b      	ldr	r3, [r3, #0]
 80064f6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064f8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80064fa:	e853 3f00 	ldrex	r3, [r3]
 80064fe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006500:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006502:	f023 0310 	bic.w	r3, r3, #16
 8006506:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	461a      	mov	r2, r3
 8006510:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006514:	65bb      	str	r3, [r7, #88]	; 0x58
 8006516:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006518:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800651a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800651c:	e841 2300 	strex	r3, r2, [r1]
 8006520:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006522:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006524:	2b00      	cmp	r3, #0
 8006526:	d1e4      	bne.n	80064f2 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800652c:	4618      	mov	r0, r3
 800652e:	f7fb fcb2 	bl	8001e96 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800653e:	b29b      	uxth	r3, r3
 8006540:	1ad3      	subs	r3, r2, r3
 8006542:	b29b      	uxth	r3, r3
 8006544:	4619      	mov	r1, r3
 8006546:	6878      	ldr	r0, [r7, #4]
 8006548:	f000 f8d4 	bl	80066f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800654c:	e0b5      	b.n	80066ba <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800655a:	b29b      	uxth	r3, r3
 800655c:	1ad3      	subs	r3, r2, r3
 800655e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006568:	b29b      	uxth	r3, r3
 800656a:	2b00      	cmp	r3, #0
 800656c:	f000 80a7 	beq.w	80066be <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8006570:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006574:	2b00      	cmp	r3, #0
 8006576:	f000 80a2 	beq.w	80066be <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006580:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006582:	e853 3f00 	ldrex	r3, [r3]
 8006586:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800658a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800658e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	461a      	mov	r2, r3
 8006598:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800659c:	647b      	str	r3, [r7, #68]	; 0x44
 800659e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065a0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80065a2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80065a4:	e841 2300 	strex	r3, r2, [r1]
 80065a8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80065aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1e4      	bne.n	800657a <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	3308      	adds	r3, #8
 80065b6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ba:	e853 3f00 	ldrex	r3, [r3]
 80065be:	623b      	str	r3, [r7, #32]
   return(result);
 80065c0:	6a3b      	ldr	r3, [r7, #32]
 80065c2:	f023 0301 	bic.w	r3, r3, #1
 80065c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	3308      	adds	r3, #8
 80065d0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80065d4:	633a      	str	r2, [r7, #48]	; 0x30
 80065d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065d8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80065da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065dc:	e841 2300 	strex	r3, r2, [r1]
 80065e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80065e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d1e3      	bne.n	80065b0 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	2220      	movs	r2, #32
 80065ec:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2200      	movs	r2, #0
 80065f2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2200      	movs	r2, #0
 80065f8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	e853 3f00 	ldrex	r3, [r3]
 8006606:	60fb      	str	r3, [r7, #12]
   return(result);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f023 0310 	bic.w	r3, r3, #16
 800660e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	461a      	mov	r2, r3
 8006618:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800661c:	61fb      	str	r3, [r7, #28]
 800661e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006620:	69b9      	ldr	r1, [r7, #24]
 8006622:	69fa      	ldr	r2, [r7, #28]
 8006624:	e841 2300 	strex	r3, r2, [r1]
 8006628:	617b      	str	r3, [r7, #20]
   return(result);
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d1e4      	bne.n	80065fa <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006630:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006634:	4619      	mov	r1, r3
 8006636:	6878      	ldr	r0, [r7, #4]
 8006638:	f000 f85c 	bl	80066f4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800663c:	e03f      	b.n	80066be <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800663e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006642:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006646:	2b00      	cmp	r3, #0
 8006648:	d00e      	beq.n	8006668 <HAL_UART_IRQHandler+0x55c>
 800664a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800664e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006652:	2b00      	cmp	r3, #0
 8006654:	d008      	beq.n	8006668 <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800665e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f000 f853 	bl	800670c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006666:	e02d      	b.n	80066c4 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006668:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800666c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006670:	2b00      	cmp	r3, #0
 8006672:	d00e      	beq.n	8006692 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006674:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006678:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800667c:	2b00      	cmp	r3, #0
 800667e:	d008      	beq.n	8006692 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006684:	2b00      	cmp	r3, #0
 8006686:	d01c      	beq.n	80066c2 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800668c:	6878      	ldr	r0, [r7, #4]
 800668e:	4798      	blx	r3
    }
    return;
 8006690:	e017      	b.n	80066c2 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006696:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800669a:	2b00      	cmp	r3, #0
 800669c:	d012      	beq.n	80066c4 <HAL_UART_IRQHandler+0x5b8>
 800669e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d00c      	beq.n	80066c4 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 80066aa:	6878      	ldr	r0, [r7, #4]
 80066ac:	f000 fcc2 	bl	8007034 <UART_EndTransmit_IT>
    return;
 80066b0:	e008      	b.n	80066c4 <HAL_UART_IRQHandler+0x5b8>
      return;
 80066b2:	bf00      	nop
 80066b4:	e006      	b.n	80066c4 <HAL_UART_IRQHandler+0x5b8>
    return;
 80066b6:	bf00      	nop
 80066b8:	e004      	b.n	80066c4 <HAL_UART_IRQHandler+0x5b8>
      return;
 80066ba:	bf00      	nop
 80066bc:	e002      	b.n	80066c4 <HAL_UART_IRQHandler+0x5b8>
      return;
 80066be:	bf00      	nop
 80066c0:	e000      	b.n	80066c4 <HAL_UART_IRQHandler+0x5b8>
    return;
 80066c2:	bf00      	nop
  }

}
 80066c4:	37e8      	adds	r7, #232	; 0xe8
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}
 80066ca:	bf00      	nop

080066cc <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80066cc:	b480      	push	{r7}
 80066ce:	b083      	sub	sp, #12
 80066d0:	af00      	add	r7, sp, #0
 80066d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80066d4:	bf00      	nop
 80066d6:	370c      	adds	r7, #12
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr

080066e0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80066e8:	bf00      	nop
 80066ea:	370c      	adds	r7, #12
 80066ec:	46bd      	mov	sp, r7
 80066ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f2:	4770      	bx	lr

080066f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80066f4:	b480      	push	{r7}
 80066f6:	b083      	sub	sp, #12
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	460b      	mov	r3, r1
 80066fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006700:	bf00      	nop
 8006702:	370c      	adds	r7, #12
 8006704:	46bd      	mov	sp, r7
 8006706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670a:	4770      	bx	lr

0800670c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006714:	bf00      	nop
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b088      	sub	sp, #32
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006728:	2300      	movs	r3, #0
 800672a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	689a      	ldr	r2, [r3, #8]
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	431a      	orrs	r2, r3
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	695b      	ldr	r3, [r3, #20]
 800673a:	431a      	orrs	r2, r3
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	69db      	ldr	r3, [r3, #28]
 8006740:	4313      	orrs	r3, r2
 8006742:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	681a      	ldr	r2, [r3, #0]
 800674a:	4ba7      	ldr	r3, [pc, #668]	; (80069e8 <UART_SetConfig+0x2c8>)
 800674c:	4013      	ands	r3, r2
 800674e:	687a      	ldr	r2, [r7, #4]
 8006750:	6812      	ldr	r2, [r2, #0]
 8006752:	6979      	ldr	r1, [r7, #20]
 8006754:	430b      	orrs	r3, r1
 8006756:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	68da      	ldr	r2, [r3, #12]
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	430a      	orrs	r2, r1
 800676c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	699b      	ldr	r3, [r3, #24]
 8006772:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a1b      	ldr	r3, [r3, #32]
 8006778:	697a      	ldr	r2, [r7, #20]
 800677a:	4313      	orrs	r3, r2
 800677c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	689b      	ldr	r3, [r3, #8]
 8006784:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	697a      	ldr	r2, [r7, #20]
 800678e:	430a      	orrs	r2, r1
 8006790:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a95      	ldr	r2, [pc, #596]	; (80069ec <UART_SetConfig+0x2cc>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d120      	bne.n	80067de <UART_SetConfig+0xbe>
 800679c:	4b94      	ldr	r3, [pc, #592]	; (80069f0 <UART_SetConfig+0x2d0>)
 800679e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067a2:	f003 0303 	and.w	r3, r3, #3
 80067a6:	2b03      	cmp	r3, #3
 80067a8:	d816      	bhi.n	80067d8 <UART_SetConfig+0xb8>
 80067aa:	a201      	add	r2, pc, #4	; (adr r2, 80067b0 <UART_SetConfig+0x90>)
 80067ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067b0:	080067c1 	.word	0x080067c1
 80067b4:	080067cd 	.word	0x080067cd
 80067b8:	080067c7 	.word	0x080067c7
 80067bc:	080067d3 	.word	0x080067d3
 80067c0:	2301      	movs	r3, #1
 80067c2:	77fb      	strb	r3, [r7, #31]
 80067c4:	e14f      	b.n	8006a66 <UART_SetConfig+0x346>
 80067c6:	2302      	movs	r3, #2
 80067c8:	77fb      	strb	r3, [r7, #31]
 80067ca:	e14c      	b.n	8006a66 <UART_SetConfig+0x346>
 80067cc:	2304      	movs	r3, #4
 80067ce:	77fb      	strb	r3, [r7, #31]
 80067d0:	e149      	b.n	8006a66 <UART_SetConfig+0x346>
 80067d2:	2308      	movs	r3, #8
 80067d4:	77fb      	strb	r3, [r7, #31]
 80067d6:	e146      	b.n	8006a66 <UART_SetConfig+0x346>
 80067d8:	2310      	movs	r3, #16
 80067da:	77fb      	strb	r3, [r7, #31]
 80067dc:	e143      	b.n	8006a66 <UART_SetConfig+0x346>
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	4a84      	ldr	r2, [pc, #528]	; (80069f4 <UART_SetConfig+0x2d4>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d132      	bne.n	800684e <UART_SetConfig+0x12e>
 80067e8:	4b81      	ldr	r3, [pc, #516]	; (80069f0 <UART_SetConfig+0x2d0>)
 80067ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80067ee:	f003 030c 	and.w	r3, r3, #12
 80067f2:	2b0c      	cmp	r3, #12
 80067f4:	d828      	bhi.n	8006848 <UART_SetConfig+0x128>
 80067f6:	a201      	add	r2, pc, #4	; (adr r2, 80067fc <UART_SetConfig+0xdc>)
 80067f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067fc:	08006831 	.word	0x08006831
 8006800:	08006849 	.word	0x08006849
 8006804:	08006849 	.word	0x08006849
 8006808:	08006849 	.word	0x08006849
 800680c:	0800683d 	.word	0x0800683d
 8006810:	08006849 	.word	0x08006849
 8006814:	08006849 	.word	0x08006849
 8006818:	08006849 	.word	0x08006849
 800681c:	08006837 	.word	0x08006837
 8006820:	08006849 	.word	0x08006849
 8006824:	08006849 	.word	0x08006849
 8006828:	08006849 	.word	0x08006849
 800682c:	08006843 	.word	0x08006843
 8006830:	2300      	movs	r3, #0
 8006832:	77fb      	strb	r3, [r7, #31]
 8006834:	e117      	b.n	8006a66 <UART_SetConfig+0x346>
 8006836:	2302      	movs	r3, #2
 8006838:	77fb      	strb	r3, [r7, #31]
 800683a:	e114      	b.n	8006a66 <UART_SetConfig+0x346>
 800683c:	2304      	movs	r3, #4
 800683e:	77fb      	strb	r3, [r7, #31]
 8006840:	e111      	b.n	8006a66 <UART_SetConfig+0x346>
 8006842:	2308      	movs	r3, #8
 8006844:	77fb      	strb	r3, [r7, #31]
 8006846:	e10e      	b.n	8006a66 <UART_SetConfig+0x346>
 8006848:	2310      	movs	r3, #16
 800684a:	77fb      	strb	r3, [r7, #31]
 800684c:	e10b      	b.n	8006a66 <UART_SetConfig+0x346>
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4a69      	ldr	r2, [pc, #420]	; (80069f8 <UART_SetConfig+0x2d8>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d120      	bne.n	800689a <UART_SetConfig+0x17a>
 8006858:	4b65      	ldr	r3, [pc, #404]	; (80069f0 <UART_SetConfig+0x2d0>)
 800685a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800685e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006862:	2b30      	cmp	r3, #48	; 0x30
 8006864:	d013      	beq.n	800688e <UART_SetConfig+0x16e>
 8006866:	2b30      	cmp	r3, #48	; 0x30
 8006868:	d814      	bhi.n	8006894 <UART_SetConfig+0x174>
 800686a:	2b20      	cmp	r3, #32
 800686c:	d009      	beq.n	8006882 <UART_SetConfig+0x162>
 800686e:	2b20      	cmp	r3, #32
 8006870:	d810      	bhi.n	8006894 <UART_SetConfig+0x174>
 8006872:	2b00      	cmp	r3, #0
 8006874:	d002      	beq.n	800687c <UART_SetConfig+0x15c>
 8006876:	2b10      	cmp	r3, #16
 8006878:	d006      	beq.n	8006888 <UART_SetConfig+0x168>
 800687a:	e00b      	b.n	8006894 <UART_SetConfig+0x174>
 800687c:	2300      	movs	r3, #0
 800687e:	77fb      	strb	r3, [r7, #31]
 8006880:	e0f1      	b.n	8006a66 <UART_SetConfig+0x346>
 8006882:	2302      	movs	r3, #2
 8006884:	77fb      	strb	r3, [r7, #31]
 8006886:	e0ee      	b.n	8006a66 <UART_SetConfig+0x346>
 8006888:	2304      	movs	r3, #4
 800688a:	77fb      	strb	r3, [r7, #31]
 800688c:	e0eb      	b.n	8006a66 <UART_SetConfig+0x346>
 800688e:	2308      	movs	r3, #8
 8006890:	77fb      	strb	r3, [r7, #31]
 8006892:	e0e8      	b.n	8006a66 <UART_SetConfig+0x346>
 8006894:	2310      	movs	r3, #16
 8006896:	77fb      	strb	r3, [r7, #31]
 8006898:	e0e5      	b.n	8006a66 <UART_SetConfig+0x346>
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a57      	ldr	r2, [pc, #348]	; (80069fc <UART_SetConfig+0x2dc>)
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d120      	bne.n	80068e6 <UART_SetConfig+0x1c6>
 80068a4:	4b52      	ldr	r3, [pc, #328]	; (80069f0 <UART_SetConfig+0x2d0>)
 80068a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80068ae:	2bc0      	cmp	r3, #192	; 0xc0
 80068b0:	d013      	beq.n	80068da <UART_SetConfig+0x1ba>
 80068b2:	2bc0      	cmp	r3, #192	; 0xc0
 80068b4:	d814      	bhi.n	80068e0 <UART_SetConfig+0x1c0>
 80068b6:	2b80      	cmp	r3, #128	; 0x80
 80068b8:	d009      	beq.n	80068ce <UART_SetConfig+0x1ae>
 80068ba:	2b80      	cmp	r3, #128	; 0x80
 80068bc:	d810      	bhi.n	80068e0 <UART_SetConfig+0x1c0>
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d002      	beq.n	80068c8 <UART_SetConfig+0x1a8>
 80068c2:	2b40      	cmp	r3, #64	; 0x40
 80068c4:	d006      	beq.n	80068d4 <UART_SetConfig+0x1b4>
 80068c6:	e00b      	b.n	80068e0 <UART_SetConfig+0x1c0>
 80068c8:	2300      	movs	r3, #0
 80068ca:	77fb      	strb	r3, [r7, #31]
 80068cc:	e0cb      	b.n	8006a66 <UART_SetConfig+0x346>
 80068ce:	2302      	movs	r3, #2
 80068d0:	77fb      	strb	r3, [r7, #31]
 80068d2:	e0c8      	b.n	8006a66 <UART_SetConfig+0x346>
 80068d4:	2304      	movs	r3, #4
 80068d6:	77fb      	strb	r3, [r7, #31]
 80068d8:	e0c5      	b.n	8006a66 <UART_SetConfig+0x346>
 80068da:	2308      	movs	r3, #8
 80068dc:	77fb      	strb	r3, [r7, #31]
 80068de:	e0c2      	b.n	8006a66 <UART_SetConfig+0x346>
 80068e0:	2310      	movs	r3, #16
 80068e2:	77fb      	strb	r3, [r7, #31]
 80068e4:	e0bf      	b.n	8006a66 <UART_SetConfig+0x346>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	4a45      	ldr	r2, [pc, #276]	; (8006a00 <UART_SetConfig+0x2e0>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d125      	bne.n	800693c <UART_SetConfig+0x21c>
 80068f0:	4b3f      	ldr	r3, [pc, #252]	; (80069f0 <UART_SetConfig+0x2d0>)
 80068f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80068f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80068fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80068fe:	d017      	beq.n	8006930 <UART_SetConfig+0x210>
 8006900:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006904:	d817      	bhi.n	8006936 <UART_SetConfig+0x216>
 8006906:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800690a:	d00b      	beq.n	8006924 <UART_SetConfig+0x204>
 800690c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006910:	d811      	bhi.n	8006936 <UART_SetConfig+0x216>
 8006912:	2b00      	cmp	r3, #0
 8006914:	d003      	beq.n	800691e <UART_SetConfig+0x1fe>
 8006916:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800691a:	d006      	beq.n	800692a <UART_SetConfig+0x20a>
 800691c:	e00b      	b.n	8006936 <UART_SetConfig+0x216>
 800691e:	2300      	movs	r3, #0
 8006920:	77fb      	strb	r3, [r7, #31]
 8006922:	e0a0      	b.n	8006a66 <UART_SetConfig+0x346>
 8006924:	2302      	movs	r3, #2
 8006926:	77fb      	strb	r3, [r7, #31]
 8006928:	e09d      	b.n	8006a66 <UART_SetConfig+0x346>
 800692a:	2304      	movs	r3, #4
 800692c:	77fb      	strb	r3, [r7, #31]
 800692e:	e09a      	b.n	8006a66 <UART_SetConfig+0x346>
 8006930:	2308      	movs	r3, #8
 8006932:	77fb      	strb	r3, [r7, #31]
 8006934:	e097      	b.n	8006a66 <UART_SetConfig+0x346>
 8006936:	2310      	movs	r3, #16
 8006938:	77fb      	strb	r3, [r7, #31]
 800693a:	e094      	b.n	8006a66 <UART_SetConfig+0x346>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a30      	ldr	r2, [pc, #192]	; (8006a04 <UART_SetConfig+0x2e4>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d125      	bne.n	8006992 <UART_SetConfig+0x272>
 8006946:	4b2a      	ldr	r3, [pc, #168]	; (80069f0 <UART_SetConfig+0x2d0>)
 8006948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800694c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006950:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006954:	d017      	beq.n	8006986 <UART_SetConfig+0x266>
 8006956:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800695a:	d817      	bhi.n	800698c <UART_SetConfig+0x26c>
 800695c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006960:	d00b      	beq.n	800697a <UART_SetConfig+0x25a>
 8006962:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006966:	d811      	bhi.n	800698c <UART_SetConfig+0x26c>
 8006968:	2b00      	cmp	r3, #0
 800696a:	d003      	beq.n	8006974 <UART_SetConfig+0x254>
 800696c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006970:	d006      	beq.n	8006980 <UART_SetConfig+0x260>
 8006972:	e00b      	b.n	800698c <UART_SetConfig+0x26c>
 8006974:	2301      	movs	r3, #1
 8006976:	77fb      	strb	r3, [r7, #31]
 8006978:	e075      	b.n	8006a66 <UART_SetConfig+0x346>
 800697a:	2302      	movs	r3, #2
 800697c:	77fb      	strb	r3, [r7, #31]
 800697e:	e072      	b.n	8006a66 <UART_SetConfig+0x346>
 8006980:	2304      	movs	r3, #4
 8006982:	77fb      	strb	r3, [r7, #31]
 8006984:	e06f      	b.n	8006a66 <UART_SetConfig+0x346>
 8006986:	2308      	movs	r3, #8
 8006988:	77fb      	strb	r3, [r7, #31]
 800698a:	e06c      	b.n	8006a66 <UART_SetConfig+0x346>
 800698c:	2310      	movs	r3, #16
 800698e:	77fb      	strb	r3, [r7, #31]
 8006990:	e069      	b.n	8006a66 <UART_SetConfig+0x346>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	4a1c      	ldr	r2, [pc, #112]	; (8006a08 <UART_SetConfig+0x2e8>)
 8006998:	4293      	cmp	r3, r2
 800699a:	d137      	bne.n	8006a0c <UART_SetConfig+0x2ec>
 800699c:	4b14      	ldr	r3, [pc, #80]	; (80069f0 <UART_SetConfig+0x2d0>)
 800699e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80069a2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80069a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80069aa:	d017      	beq.n	80069dc <UART_SetConfig+0x2bc>
 80069ac:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80069b0:	d817      	bhi.n	80069e2 <UART_SetConfig+0x2c2>
 80069b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069b6:	d00b      	beq.n	80069d0 <UART_SetConfig+0x2b0>
 80069b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069bc:	d811      	bhi.n	80069e2 <UART_SetConfig+0x2c2>
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d003      	beq.n	80069ca <UART_SetConfig+0x2aa>
 80069c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069c6:	d006      	beq.n	80069d6 <UART_SetConfig+0x2b6>
 80069c8:	e00b      	b.n	80069e2 <UART_SetConfig+0x2c2>
 80069ca:	2300      	movs	r3, #0
 80069cc:	77fb      	strb	r3, [r7, #31]
 80069ce:	e04a      	b.n	8006a66 <UART_SetConfig+0x346>
 80069d0:	2302      	movs	r3, #2
 80069d2:	77fb      	strb	r3, [r7, #31]
 80069d4:	e047      	b.n	8006a66 <UART_SetConfig+0x346>
 80069d6:	2304      	movs	r3, #4
 80069d8:	77fb      	strb	r3, [r7, #31]
 80069da:	e044      	b.n	8006a66 <UART_SetConfig+0x346>
 80069dc:	2308      	movs	r3, #8
 80069de:	77fb      	strb	r3, [r7, #31]
 80069e0:	e041      	b.n	8006a66 <UART_SetConfig+0x346>
 80069e2:	2310      	movs	r3, #16
 80069e4:	77fb      	strb	r3, [r7, #31]
 80069e6:	e03e      	b.n	8006a66 <UART_SetConfig+0x346>
 80069e8:	efff69f3 	.word	0xefff69f3
 80069ec:	40011000 	.word	0x40011000
 80069f0:	40023800 	.word	0x40023800
 80069f4:	40004400 	.word	0x40004400
 80069f8:	40004800 	.word	0x40004800
 80069fc:	40004c00 	.word	0x40004c00
 8006a00:	40005000 	.word	0x40005000
 8006a04:	40011400 	.word	0x40011400
 8006a08:	40007800 	.word	0x40007800
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a71      	ldr	r2, [pc, #452]	; (8006bd8 <UART_SetConfig+0x4b8>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d125      	bne.n	8006a62 <UART_SetConfig+0x342>
 8006a16:	4b71      	ldr	r3, [pc, #452]	; (8006bdc <UART_SetConfig+0x4bc>)
 8006a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006a1c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006a20:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006a24:	d017      	beq.n	8006a56 <UART_SetConfig+0x336>
 8006a26:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006a2a:	d817      	bhi.n	8006a5c <UART_SetConfig+0x33c>
 8006a2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a30:	d00b      	beq.n	8006a4a <UART_SetConfig+0x32a>
 8006a32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a36:	d811      	bhi.n	8006a5c <UART_SetConfig+0x33c>
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d003      	beq.n	8006a44 <UART_SetConfig+0x324>
 8006a3c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006a40:	d006      	beq.n	8006a50 <UART_SetConfig+0x330>
 8006a42:	e00b      	b.n	8006a5c <UART_SetConfig+0x33c>
 8006a44:	2300      	movs	r3, #0
 8006a46:	77fb      	strb	r3, [r7, #31]
 8006a48:	e00d      	b.n	8006a66 <UART_SetConfig+0x346>
 8006a4a:	2302      	movs	r3, #2
 8006a4c:	77fb      	strb	r3, [r7, #31]
 8006a4e:	e00a      	b.n	8006a66 <UART_SetConfig+0x346>
 8006a50:	2304      	movs	r3, #4
 8006a52:	77fb      	strb	r3, [r7, #31]
 8006a54:	e007      	b.n	8006a66 <UART_SetConfig+0x346>
 8006a56:	2308      	movs	r3, #8
 8006a58:	77fb      	strb	r3, [r7, #31]
 8006a5a:	e004      	b.n	8006a66 <UART_SetConfig+0x346>
 8006a5c:	2310      	movs	r3, #16
 8006a5e:	77fb      	strb	r3, [r7, #31]
 8006a60:	e001      	b.n	8006a66 <UART_SetConfig+0x346>
 8006a62:	2310      	movs	r3, #16
 8006a64:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	69db      	ldr	r3, [r3, #28]
 8006a6a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006a6e:	d15a      	bne.n	8006b26 <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8006a70:	7ffb      	ldrb	r3, [r7, #31]
 8006a72:	2b08      	cmp	r3, #8
 8006a74:	d827      	bhi.n	8006ac6 <UART_SetConfig+0x3a6>
 8006a76:	a201      	add	r2, pc, #4	; (adr r2, 8006a7c <UART_SetConfig+0x35c>)
 8006a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a7c:	08006aa1 	.word	0x08006aa1
 8006a80:	08006aa9 	.word	0x08006aa9
 8006a84:	08006ab1 	.word	0x08006ab1
 8006a88:	08006ac7 	.word	0x08006ac7
 8006a8c:	08006ab7 	.word	0x08006ab7
 8006a90:	08006ac7 	.word	0x08006ac7
 8006a94:	08006ac7 	.word	0x08006ac7
 8006a98:	08006ac7 	.word	0x08006ac7
 8006a9c:	08006abf 	.word	0x08006abf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006aa0:	f7fd fc46 	bl	8004330 <HAL_RCC_GetPCLK1Freq>
 8006aa4:	61b8      	str	r0, [r7, #24]
        break;
 8006aa6:	e013      	b.n	8006ad0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006aa8:	f7fd fc56 	bl	8004358 <HAL_RCC_GetPCLK2Freq>
 8006aac:	61b8      	str	r0, [r7, #24]
        break;
 8006aae:	e00f      	b.n	8006ad0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ab0:	4b4b      	ldr	r3, [pc, #300]	; (8006be0 <UART_SetConfig+0x4c0>)
 8006ab2:	61bb      	str	r3, [r7, #24]
        break;
 8006ab4:	e00c      	b.n	8006ad0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006ab6:	f7fd fb4d 	bl	8004154 <HAL_RCC_GetSysClockFreq>
 8006aba:	61b8      	str	r0, [r7, #24]
        break;
 8006abc:	e008      	b.n	8006ad0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006abe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ac2:	61bb      	str	r3, [r7, #24]
        break;
 8006ac4:	e004      	b.n	8006ad0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006ac6:	2300      	movs	r3, #0
 8006ac8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006aca:	2301      	movs	r3, #1
 8006acc:	77bb      	strb	r3, [r7, #30]
        break;
 8006ace:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ad0:	69bb      	ldr	r3, [r7, #24]
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d074      	beq.n	8006bc0 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006ad6:	69bb      	ldr	r3, [r7, #24]
 8006ad8:	005a      	lsls	r2, r3, #1
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	685b      	ldr	r3, [r3, #4]
 8006ade:	085b      	lsrs	r3, r3, #1
 8006ae0:	441a      	add	r2, r3
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	685b      	ldr	r3, [r3, #4]
 8006ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aea:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006aec:	693b      	ldr	r3, [r7, #16]
 8006aee:	2b0f      	cmp	r3, #15
 8006af0:	d916      	bls.n	8006b20 <UART_SetConfig+0x400>
 8006af2:	693b      	ldr	r3, [r7, #16]
 8006af4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006af8:	d212      	bcs.n	8006b20 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	b29b      	uxth	r3, r3
 8006afe:	f023 030f 	bic.w	r3, r3, #15
 8006b02:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006b04:	693b      	ldr	r3, [r7, #16]
 8006b06:	085b      	lsrs	r3, r3, #1
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	f003 0307 	and.w	r3, r3, #7
 8006b0e:	b29a      	uxth	r2, r3
 8006b10:	89fb      	ldrh	r3, [r7, #14]
 8006b12:	4313      	orrs	r3, r2
 8006b14:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	89fa      	ldrh	r2, [r7, #14]
 8006b1c:	60da      	str	r2, [r3, #12]
 8006b1e:	e04f      	b.n	8006bc0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006b20:	2301      	movs	r3, #1
 8006b22:	77bb      	strb	r3, [r7, #30]
 8006b24:	e04c      	b.n	8006bc0 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006b26:	7ffb      	ldrb	r3, [r7, #31]
 8006b28:	2b08      	cmp	r3, #8
 8006b2a:	d828      	bhi.n	8006b7e <UART_SetConfig+0x45e>
 8006b2c:	a201      	add	r2, pc, #4	; (adr r2, 8006b34 <UART_SetConfig+0x414>)
 8006b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b32:	bf00      	nop
 8006b34:	08006b59 	.word	0x08006b59
 8006b38:	08006b61 	.word	0x08006b61
 8006b3c:	08006b69 	.word	0x08006b69
 8006b40:	08006b7f 	.word	0x08006b7f
 8006b44:	08006b6f 	.word	0x08006b6f
 8006b48:	08006b7f 	.word	0x08006b7f
 8006b4c:	08006b7f 	.word	0x08006b7f
 8006b50:	08006b7f 	.word	0x08006b7f
 8006b54:	08006b77 	.word	0x08006b77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006b58:	f7fd fbea 	bl	8004330 <HAL_RCC_GetPCLK1Freq>
 8006b5c:	61b8      	str	r0, [r7, #24]
        break;
 8006b5e:	e013      	b.n	8006b88 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006b60:	f7fd fbfa 	bl	8004358 <HAL_RCC_GetPCLK2Freq>
 8006b64:	61b8      	str	r0, [r7, #24]
        break;
 8006b66:	e00f      	b.n	8006b88 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006b68:	4b1d      	ldr	r3, [pc, #116]	; (8006be0 <UART_SetConfig+0x4c0>)
 8006b6a:	61bb      	str	r3, [r7, #24]
        break;
 8006b6c:	e00c      	b.n	8006b88 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006b6e:	f7fd faf1 	bl	8004154 <HAL_RCC_GetSysClockFreq>
 8006b72:	61b8      	str	r0, [r7, #24]
        break;
 8006b74:	e008      	b.n	8006b88 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006b76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006b7a:	61bb      	str	r3, [r7, #24]
        break;
 8006b7c:	e004      	b.n	8006b88 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006b7e:	2300      	movs	r3, #0
 8006b80:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
 8006b84:	77bb      	strb	r3, [r7, #30]
        break;
 8006b86:	bf00      	nop
    }

    if (pclk != 0U)
 8006b88:	69bb      	ldr	r3, [r7, #24]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d018      	beq.n	8006bc0 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	685b      	ldr	r3, [r3, #4]
 8006b92:	085a      	lsrs	r2, r3, #1
 8006b94:	69bb      	ldr	r3, [r7, #24]
 8006b96:	441a      	add	r2, r3
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	685b      	ldr	r3, [r3, #4]
 8006b9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ba0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	2b0f      	cmp	r3, #15
 8006ba6:	d909      	bls.n	8006bbc <UART_SetConfig+0x49c>
 8006ba8:	693b      	ldr	r3, [r7, #16]
 8006baa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006bae:	d205      	bcs.n	8006bbc <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	b29a      	uxth	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	60da      	str	r2, [r3, #12]
 8006bba:	e001      	b.n	8006bc0 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	2200      	movs	r2, #0
 8006bc4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006bcc:	7fbb      	ldrb	r3, [r7, #30]
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3720      	adds	r7, #32
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	40007c00 	.word	0x40007c00
 8006bdc:	40023800 	.word	0x40023800
 8006be0:	00f42400 	.word	0x00f42400

08006be4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf0:	f003 0301 	and.w	r3, r3, #1
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d00a      	beq.n	8006c0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	685b      	ldr	r3, [r3, #4]
 8006bfe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	430a      	orrs	r2, r1
 8006c0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c12:	f003 0302 	and.w	r3, r3, #2
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d00a      	beq.n	8006c30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	430a      	orrs	r2, r1
 8006c2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c34:	f003 0304 	and.w	r3, r3, #4
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d00a      	beq.n	8006c52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	685b      	ldr	r3, [r3, #4]
 8006c42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	430a      	orrs	r2, r1
 8006c50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c56:	f003 0308 	and.w	r3, r3, #8
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d00a      	beq.n	8006c74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	685b      	ldr	r3, [r3, #4]
 8006c64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	430a      	orrs	r2, r1
 8006c72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c78:	f003 0310 	and.w	r3, r3, #16
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d00a      	beq.n	8006c96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	689b      	ldr	r3, [r3, #8]
 8006c86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	430a      	orrs	r2, r1
 8006c94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c9a:	f003 0320 	and.w	r3, r3, #32
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d00a      	beq.n	8006cb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	430a      	orrs	r2, r1
 8006cb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d01a      	beq.n	8006cfa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	430a      	orrs	r2, r1
 8006cd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006ce2:	d10a      	bne.n	8006cfa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	685b      	ldr	r3, [r3, #4]
 8006cea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	430a      	orrs	r2, r1
 8006cf8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00a      	beq.n	8006d1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	430a      	orrs	r2, r1
 8006d1a:	605a      	str	r2, [r3, #4]
  }
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b086      	sub	sp, #24
 8006d2c:	af02      	add	r7, sp, #8
 8006d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006d38:	f7fa fbc4 	bl	80014c4 <HAL_GetTick>
 8006d3c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	f003 0308 	and.w	r3, r3, #8
 8006d48:	2b08      	cmp	r3, #8
 8006d4a:	d10e      	bne.n	8006d6a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d4c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d50:	9300      	str	r3, [sp, #0]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2200      	movs	r2, #0
 8006d56:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006d5a:	6878      	ldr	r0, [r7, #4]
 8006d5c:	f000 f82d 	bl	8006dba <UART_WaitOnFlagUntilTimeout>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d001      	beq.n	8006d6a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d66:	2303      	movs	r3, #3
 8006d68:	e023      	b.n	8006db2 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f003 0304 	and.w	r3, r3, #4
 8006d74:	2b04      	cmp	r3, #4
 8006d76:	d10e      	bne.n	8006d96 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006d78:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006d7c:	9300      	str	r3, [sp, #0]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 f817 	bl	8006dba <UART_WaitOnFlagUntilTimeout>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d001      	beq.n	8006d96 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006d92:	2303      	movs	r3, #3
 8006d94:	e00d      	b.n	8006db2 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2220      	movs	r2, #32
 8006d9a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	2220      	movs	r2, #32
 8006da0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006db0:	2300      	movs	r3, #0
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3710      	adds	r7, #16
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006dba:	b580      	push	{r7, lr}
 8006dbc:	b09c      	sub	sp, #112	; 0x70
 8006dbe:	af00      	add	r7, sp, #0
 8006dc0:	60f8      	str	r0, [r7, #12]
 8006dc2:	60b9      	str	r1, [r7, #8]
 8006dc4:	603b      	str	r3, [r7, #0]
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006dca:	e0a5      	b.n	8006f18 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006dcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dd2:	f000 80a1 	beq.w	8006f18 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dd6:	f7fa fb75 	bl	80014c4 <HAL_GetTick>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	1ad3      	subs	r3, r2, r3
 8006de0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006de2:	429a      	cmp	r2, r3
 8006de4:	d302      	bcc.n	8006dec <UART_WaitOnFlagUntilTimeout+0x32>
 8006de6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d13e      	bne.n	8006e6a <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006df4:	e853 3f00 	ldrex	r3, [r3]
 8006df8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dfc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006e00:	667b      	str	r3, [r7, #100]	; 0x64
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	461a      	mov	r2, r3
 8006e08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006e0c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e0e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006e10:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006e12:	e841 2300 	strex	r3, r2, [r1]
 8006e16:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006e18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d1e6      	bne.n	8006dec <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	3308      	adds	r3, #8
 8006e24:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e28:	e853 3f00 	ldrex	r3, [r3]
 8006e2c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e30:	f023 0301 	bic.w	r3, r3, #1
 8006e34:	663b      	str	r3, [r7, #96]	; 0x60
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	3308      	adds	r3, #8
 8006e3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006e3e:	64ba      	str	r2, [r7, #72]	; 0x48
 8006e40:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e46:	e841 2300 	strex	r3, r2, [r1]
 8006e4a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006e4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1e5      	bne.n	8006e1e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2220      	movs	r2, #32
 8006e56:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	2220      	movs	r2, #32
 8006e5c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	2200      	movs	r2, #0
 8006e62:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8006e66:	2303      	movs	r3, #3
 8006e68:	e067      	b.n	8006f3a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f003 0304 	and.w	r3, r3, #4
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d04f      	beq.n	8006f18 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	69db      	ldr	r3, [r3, #28]
 8006e7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006e86:	d147      	bne.n	8006f18 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e90:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9a:	e853 3f00 	ldrex	r3, [r3]
 8006e9e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006ea6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	461a      	mov	r2, r3
 8006eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eb0:	637b      	str	r3, [r7, #52]	; 0x34
 8006eb2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eb4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006eb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006eb8:	e841 2300 	strex	r3, r2, [r1]
 8006ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d1e6      	bne.n	8006e92 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	3308      	adds	r3, #8
 8006eca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ecc:	697b      	ldr	r3, [r7, #20]
 8006ece:	e853 3f00 	ldrex	r3, [r3]
 8006ed2:	613b      	str	r3, [r7, #16]
   return(result);
 8006ed4:	693b      	ldr	r3, [r7, #16]
 8006ed6:	f023 0301 	bic.w	r3, r3, #1
 8006eda:	66bb      	str	r3, [r7, #104]	; 0x68
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	3308      	adds	r3, #8
 8006ee2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006ee4:	623a      	str	r2, [r7, #32]
 8006ee6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee8:	69f9      	ldr	r1, [r7, #28]
 8006eea:	6a3a      	ldr	r2, [r7, #32]
 8006eec:	e841 2300 	strex	r3, r2, [r1]
 8006ef0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006ef2:	69bb      	ldr	r3, [r7, #24]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d1e5      	bne.n	8006ec4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2220      	movs	r2, #32
 8006efc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	2220      	movs	r2, #32
 8006f02:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	2220      	movs	r2, #32
 8006f08:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2200      	movs	r2, #0
 8006f10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006f14:	2303      	movs	r3, #3
 8006f16:	e010      	b.n	8006f3a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	69da      	ldr	r2, [r3, #28]
 8006f1e:	68bb      	ldr	r3, [r7, #8]
 8006f20:	4013      	ands	r3, r2
 8006f22:	68ba      	ldr	r2, [r7, #8]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	bf0c      	ite	eq
 8006f28:	2301      	moveq	r3, #1
 8006f2a:	2300      	movne	r3, #0
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	461a      	mov	r2, r3
 8006f30:	79fb      	ldrb	r3, [r7, #7]
 8006f32:	429a      	cmp	r2, r3
 8006f34:	f43f af4a 	beq.w	8006dcc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006f38:	2300      	movs	r3, #0
}
 8006f3a:	4618      	mov	r0, r3
 8006f3c:	3770      	adds	r7, #112	; 0x70
 8006f3e:	46bd      	mov	sp, r7
 8006f40:	bd80      	pop	{r7, pc}

08006f42 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006f42:	b480      	push	{r7}
 8006f44:	b095      	sub	sp, #84	; 0x54
 8006f46:	af00      	add	r7, sp, #0
 8006f48:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f52:	e853 3f00 	ldrex	r3, [r3]
 8006f56:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006f58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f5a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	461a      	mov	r2, r3
 8006f66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f68:	643b      	str	r3, [r7, #64]	; 0x40
 8006f6a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006f6e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006f70:	e841 2300 	strex	r3, r2, [r1]
 8006f74:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d1e6      	bne.n	8006f4a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	3308      	adds	r3, #8
 8006f82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f84:	6a3b      	ldr	r3, [r7, #32]
 8006f86:	e853 3f00 	ldrex	r3, [r3]
 8006f8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f8c:	69fb      	ldr	r3, [r7, #28]
 8006f8e:	f023 0301 	bic.w	r3, r3, #1
 8006f92:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	3308      	adds	r3, #8
 8006f9a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006f9c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006f9e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fa0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006fa2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006fa4:	e841 2300 	strex	r3, r2, [r1]
 8006fa8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d1e5      	bne.n	8006f7c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d118      	bne.n	8006fea <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	e853 3f00 	ldrex	r3, [r3]
 8006fc4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	f023 0310 	bic.w	r3, r3, #16
 8006fcc:	647b      	str	r3, [r7, #68]	; 0x44
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	461a      	mov	r2, r3
 8006fd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006fd6:	61bb      	str	r3, [r7, #24]
 8006fd8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fda:	6979      	ldr	r1, [r7, #20]
 8006fdc:	69ba      	ldr	r2, [r7, #24]
 8006fde:	e841 2300 	strex	r3, r2, [r1]
 8006fe2:	613b      	str	r3, [r7, #16]
   return(result);
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d1e6      	bne.n	8006fb8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2220      	movs	r2, #32
 8006fee:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2200      	movs	r2, #0
 8006ff4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	665a      	str	r2, [r3, #100]	; 0x64
}
 8006ffc:	bf00      	nop
 8006ffe:	3754      	adds	r7, #84	; 0x54
 8007000:	46bd      	mov	sp, r7
 8007002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007006:	4770      	bx	lr

08007008 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	b084      	sub	sp, #16
 800700c:	af00      	add	r7, sp, #0
 800700e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007014:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2200      	movs	r2, #0
 800701a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007026:	68f8      	ldr	r0, [r7, #12]
 8007028:	f7ff fb5a 	bl	80066e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800702c:	bf00      	nop
 800702e:	3710      	adds	r7, #16
 8007030:	46bd      	mov	sp, r7
 8007032:	bd80      	pop	{r7, pc}

08007034 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b088      	sub	sp, #32
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	e853 3f00 	ldrex	r3, [r3]
 8007048:	60bb      	str	r3, [r7, #8]
   return(result);
 800704a:	68bb      	ldr	r3, [r7, #8]
 800704c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007050:	61fb      	str	r3, [r7, #28]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	461a      	mov	r2, r3
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	61bb      	str	r3, [r7, #24]
 800705c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800705e:	6979      	ldr	r1, [r7, #20]
 8007060:	69ba      	ldr	r2, [r7, #24]
 8007062:	e841 2300 	strex	r3, r2, [r1]
 8007066:	613b      	str	r3, [r7, #16]
   return(result);
 8007068:	693b      	ldr	r3, [r7, #16]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1e6      	bne.n	800703c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2220      	movs	r2, #32
 8007072:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2200      	movs	r2, #0
 8007078:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f7ff fb26 	bl	80066cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007080:	bf00      	nop
 8007082:	3720      	adds	r7, #32
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}

08007088 <__errno>:
 8007088:	4b01      	ldr	r3, [pc, #4]	; (8007090 <__errno+0x8>)
 800708a:	6818      	ldr	r0, [r3, #0]
 800708c:	4770      	bx	lr
 800708e:	bf00      	nop
 8007090:	20000030 	.word	0x20000030

08007094 <__libc_init_array>:
 8007094:	b570      	push	{r4, r5, r6, lr}
 8007096:	4d0d      	ldr	r5, [pc, #52]	; (80070cc <__libc_init_array+0x38>)
 8007098:	4c0d      	ldr	r4, [pc, #52]	; (80070d0 <__libc_init_array+0x3c>)
 800709a:	1b64      	subs	r4, r4, r5
 800709c:	10a4      	asrs	r4, r4, #2
 800709e:	2600      	movs	r6, #0
 80070a0:	42a6      	cmp	r6, r4
 80070a2:	d109      	bne.n	80070b8 <__libc_init_array+0x24>
 80070a4:	4d0b      	ldr	r5, [pc, #44]	; (80070d4 <__libc_init_array+0x40>)
 80070a6:	4c0c      	ldr	r4, [pc, #48]	; (80070d8 <__libc_init_array+0x44>)
 80070a8:	f000 fc4e 	bl	8007948 <_init>
 80070ac:	1b64      	subs	r4, r4, r5
 80070ae:	10a4      	asrs	r4, r4, #2
 80070b0:	2600      	movs	r6, #0
 80070b2:	42a6      	cmp	r6, r4
 80070b4:	d105      	bne.n	80070c2 <__libc_init_array+0x2e>
 80070b6:	bd70      	pop	{r4, r5, r6, pc}
 80070b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80070bc:	4798      	blx	r3
 80070be:	3601      	adds	r6, #1
 80070c0:	e7ee      	b.n	80070a0 <__libc_init_array+0xc>
 80070c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80070c6:	4798      	blx	r3
 80070c8:	3601      	adds	r6, #1
 80070ca:	e7f2      	b.n	80070b2 <__libc_init_array+0x1e>
 80070cc:	080079bc 	.word	0x080079bc
 80070d0:	080079bc 	.word	0x080079bc
 80070d4:	080079bc 	.word	0x080079bc
 80070d8:	080079c0 	.word	0x080079c0

080070dc <memset>:
 80070dc:	4402      	add	r2, r0
 80070de:	4603      	mov	r3, r0
 80070e0:	4293      	cmp	r3, r2
 80070e2:	d100      	bne.n	80070e6 <memset+0xa>
 80070e4:	4770      	bx	lr
 80070e6:	f803 1b01 	strb.w	r1, [r3], #1
 80070ea:	e7f9      	b.n	80070e0 <memset+0x4>

080070ec <siprintf>:
 80070ec:	b40e      	push	{r1, r2, r3}
 80070ee:	b500      	push	{lr}
 80070f0:	b09c      	sub	sp, #112	; 0x70
 80070f2:	ab1d      	add	r3, sp, #116	; 0x74
 80070f4:	9002      	str	r0, [sp, #8]
 80070f6:	9006      	str	r0, [sp, #24]
 80070f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80070fc:	4809      	ldr	r0, [pc, #36]	; (8007124 <siprintf+0x38>)
 80070fe:	9107      	str	r1, [sp, #28]
 8007100:	9104      	str	r1, [sp, #16]
 8007102:	4909      	ldr	r1, [pc, #36]	; (8007128 <siprintf+0x3c>)
 8007104:	f853 2b04 	ldr.w	r2, [r3], #4
 8007108:	9105      	str	r1, [sp, #20]
 800710a:	6800      	ldr	r0, [r0, #0]
 800710c:	9301      	str	r3, [sp, #4]
 800710e:	a902      	add	r1, sp, #8
 8007110:	f000 f868 	bl	80071e4 <_svfiprintf_r>
 8007114:	9b02      	ldr	r3, [sp, #8]
 8007116:	2200      	movs	r2, #0
 8007118:	701a      	strb	r2, [r3, #0]
 800711a:	b01c      	add	sp, #112	; 0x70
 800711c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007120:	b003      	add	sp, #12
 8007122:	4770      	bx	lr
 8007124:	20000030 	.word	0x20000030
 8007128:	ffff0208 	.word	0xffff0208

0800712c <__ssputs_r>:
 800712c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007130:	688e      	ldr	r6, [r1, #8]
 8007132:	429e      	cmp	r6, r3
 8007134:	4682      	mov	sl, r0
 8007136:	460c      	mov	r4, r1
 8007138:	4690      	mov	r8, r2
 800713a:	461f      	mov	r7, r3
 800713c:	d838      	bhi.n	80071b0 <__ssputs_r+0x84>
 800713e:	898a      	ldrh	r2, [r1, #12]
 8007140:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007144:	d032      	beq.n	80071ac <__ssputs_r+0x80>
 8007146:	6825      	ldr	r5, [r4, #0]
 8007148:	6909      	ldr	r1, [r1, #16]
 800714a:	eba5 0901 	sub.w	r9, r5, r1
 800714e:	6965      	ldr	r5, [r4, #20]
 8007150:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007154:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007158:	3301      	adds	r3, #1
 800715a:	444b      	add	r3, r9
 800715c:	106d      	asrs	r5, r5, #1
 800715e:	429d      	cmp	r5, r3
 8007160:	bf38      	it	cc
 8007162:	461d      	movcc	r5, r3
 8007164:	0553      	lsls	r3, r2, #21
 8007166:	d531      	bpl.n	80071cc <__ssputs_r+0xa0>
 8007168:	4629      	mov	r1, r5
 800716a:	f000 fb47 	bl	80077fc <_malloc_r>
 800716e:	4606      	mov	r6, r0
 8007170:	b950      	cbnz	r0, 8007188 <__ssputs_r+0x5c>
 8007172:	230c      	movs	r3, #12
 8007174:	f8ca 3000 	str.w	r3, [sl]
 8007178:	89a3      	ldrh	r3, [r4, #12]
 800717a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800717e:	81a3      	strh	r3, [r4, #12]
 8007180:	f04f 30ff 	mov.w	r0, #4294967295
 8007184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007188:	6921      	ldr	r1, [r4, #16]
 800718a:	464a      	mov	r2, r9
 800718c:	f000 fabe 	bl	800770c <memcpy>
 8007190:	89a3      	ldrh	r3, [r4, #12]
 8007192:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007196:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800719a:	81a3      	strh	r3, [r4, #12]
 800719c:	6126      	str	r6, [r4, #16]
 800719e:	6165      	str	r5, [r4, #20]
 80071a0:	444e      	add	r6, r9
 80071a2:	eba5 0509 	sub.w	r5, r5, r9
 80071a6:	6026      	str	r6, [r4, #0]
 80071a8:	60a5      	str	r5, [r4, #8]
 80071aa:	463e      	mov	r6, r7
 80071ac:	42be      	cmp	r6, r7
 80071ae:	d900      	bls.n	80071b2 <__ssputs_r+0x86>
 80071b0:	463e      	mov	r6, r7
 80071b2:	4632      	mov	r2, r6
 80071b4:	6820      	ldr	r0, [r4, #0]
 80071b6:	4641      	mov	r1, r8
 80071b8:	f000 fab6 	bl	8007728 <memmove>
 80071bc:	68a3      	ldr	r3, [r4, #8]
 80071be:	6822      	ldr	r2, [r4, #0]
 80071c0:	1b9b      	subs	r3, r3, r6
 80071c2:	4432      	add	r2, r6
 80071c4:	60a3      	str	r3, [r4, #8]
 80071c6:	6022      	str	r2, [r4, #0]
 80071c8:	2000      	movs	r0, #0
 80071ca:	e7db      	b.n	8007184 <__ssputs_r+0x58>
 80071cc:	462a      	mov	r2, r5
 80071ce:	f000 fb6f 	bl	80078b0 <_realloc_r>
 80071d2:	4606      	mov	r6, r0
 80071d4:	2800      	cmp	r0, #0
 80071d6:	d1e1      	bne.n	800719c <__ssputs_r+0x70>
 80071d8:	6921      	ldr	r1, [r4, #16]
 80071da:	4650      	mov	r0, sl
 80071dc:	f000 fabe 	bl	800775c <_free_r>
 80071e0:	e7c7      	b.n	8007172 <__ssputs_r+0x46>
	...

080071e4 <_svfiprintf_r>:
 80071e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e8:	4698      	mov	r8, r3
 80071ea:	898b      	ldrh	r3, [r1, #12]
 80071ec:	061b      	lsls	r3, r3, #24
 80071ee:	b09d      	sub	sp, #116	; 0x74
 80071f0:	4607      	mov	r7, r0
 80071f2:	460d      	mov	r5, r1
 80071f4:	4614      	mov	r4, r2
 80071f6:	d50e      	bpl.n	8007216 <_svfiprintf_r+0x32>
 80071f8:	690b      	ldr	r3, [r1, #16]
 80071fa:	b963      	cbnz	r3, 8007216 <_svfiprintf_r+0x32>
 80071fc:	2140      	movs	r1, #64	; 0x40
 80071fe:	f000 fafd 	bl	80077fc <_malloc_r>
 8007202:	6028      	str	r0, [r5, #0]
 8007204:	6128      	str	r0, [r5, #16]
 8007206:	b920      	cbnz	r0, 8007212 <_svfiprintf_r+0x2e>
 8007208:	230c      	movs	r3, #12
 800720a:	603b      	str	r3, [r7, #0]
 800720c:	f04f 30ff 	mov.w	r0, #4294967295
 8007210:	e0d1      	b.n	80073b6 <_svfiprintf_r+0x1d2>
 8007212:	2340      	movs	r3, #64	; 0x40
 8007214:	616b      	str	r3, [r5, #20]
 8007216:	2300      	movs	r3, #0
 8007218:	9309      	str	r3, [sp, #36]	; 0x24
 800721a:	2320      	movs	r3, #32
 800721c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007220:	f8cd 800c 	str.w	r8, [sp, #12]
 8007224:	2330      	movs	r3, #48	; 0x30
 8007226:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80073d0 <_svfiprintf_r+0x1ec>
 800722a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800722e:	f04f 0901 	mov.w	r9, #1
 8007232:	4623      	mov	r3, r4
 8007234:	469a      	mov	sl, r3
 8007236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800723a:	b10a      	cbz	r2, 8007240 <_svfiprintf_r+0x5c>
 800723c:	2a25      	cmp	r2, #37	; 0x25
 800723e:	d1f9      	bne.n	8007234 <_svfiprintf_r+0x50>
 8007240:	ebba 0b04 	subs.w	fp, sl, r4
 8007244:	d00b      	beq.n	800725e <_svfiprintf_r+0x7a>
 8007246:	465b      	mov	r3, fp
 8007248:	4622      	mov	r2, r4
 800724a:	4629      	mov	r1, r5
 800724c:	4638      	mov	r0, r7
 800724e:	f7ff ff6d 	bl	800712c <__ssputs_r>
 8007252:	3001      	adds	r0, #1
 8007254:	f000 80aa 	beq.w	80073ac <_svfiprintf_r+0x1c8>
 8007258:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800725a:	445a      	add	r2, fp
 800725c:	9209      	str	r2, [sp, #36]	; 0x24
 800725e:	f89a 3000 	ldrb.w	r3, [sl]
 8007262:	2b00      	cmp	r3, #0
 8007264:	f000 80a2 	beq.w	80073ac <_svfiprintf_r+0x1c8>
 8007268:	2300      	movs	r3, #0
 800726a:	f04f 32ff 	mov.w	r2, #4294967295
 800726e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007272:	f10a 0a01 	add.w	sl, sl, #1
 8007276:	9304      	str	r3, [sp, #16]
 8007278:	9307      	str	r3, [sp, #28]
 800727a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800727e:	931a      	str	r3, [sp, #104]	; 0x68
 8007280:	4654      	mov	r4, sl
 8007282:	2205      	movs	r2, #5
 8007284:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007288:	4851      	ldr	r0, [pc, #324]	; (80073d0 <_svfiprintf_r+0x1ec>)
 800728a:	f7f8 ffe1 	bl	8000250 <memchr>
 800728e:	9a04      	ldr	r2, [sp, #16]
 8007290:	b9d8      	cbnz	r0, 80072ca <_svfiprintf_r+0xe6>
 8007292:	06d0      	lsls	r0, r2, #27
 8007294:	bf44      	itt	mi
 8007296:	2320      	movmi	r3, #32
 8007298:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800729c:	0711      	lsls	r1, r2, #28
 800729e:	bf44      	itt	mi
 80072a0:	232b      	movmi	r3, #43	; 0x2b
 80072a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80072a6:	f89a 3000 	ldrb.w	r3, [sl]
 80072aa:	2b2a      	cmp	r3, #42	; 0x2a
 80072ac:	d015      	beq.n	80072da <_svfiprintf_r+0xf6>
 80072ae:	9a07      	ldr	r2, [sp, #28]
 80072b0:	4654      	mov	r4, sl
 80072b2:	2000      	movs	r0, #0
 80072b4:	f04f 0c0a 	mov.w	ip, #10
 80072b8:	4621      	mov	r1, r4
 80072ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80072be:	3b30      	subs	r3, #48	; 0x30
 80072c0:	2b09      	cmp	r3, #9
 80072c2:	d94e      	bls.n	8007362 <_svfiprintf_r+0x17e>
 80072c4:	b1b0      	cbz	r0, 80072f4 <_svfiprintf_r+0x110>
 80072c6:	9207      	str	r2, [sp, #28]
 80072c8:	e014      	b.n	80072f4 <_svfiprintf_r+0x110>
 80072ca:	eba0 0308 	sub.w	r3, r0, r8
 80072ce:	fa09 f303 	lsl.w	r3, r9, r3
 80072d2:	4313      	orrs	r3, r2
 80072d4:	9304      	str	r3, [sp, #16]
 80072d6:	46a2      	mov	sl, r4
 80072d8:	e7d2      	b.n	8007280 <_svfiprintf_r+0x9c>
 80072da:	9b03      	ldr	r3, [sp, #12]
 80072dc:	1d19      	adds	r1, r3, #4
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	9103      	str	r1, [sp, #12]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	bfbb      	ittet	lt
 80072e6:	425b      	neglt	r3, r3
 80072e8:	f042 0202 	orrlt.w	r2, r2, #2
 80072ec:	9307      	strge	r3, [sp, #28]
 80072ee:	9307      	strlt	r3, [sp, #28]
 80072f0:	bfb8      	it	lt
 80072f2:	9204      	strlt	r2, [sp, #16]
 80072f4:	7823      	ldrb	r3, [r4, #0]
 80072f6:	2b2e      	cmp	r3, #46	; 0x2e
 80072f8:	d10c      	bne.n	8007314 <_svfiprintf_r+0x130>
 80072fa:	7863      	ldrb	r3, [r4, #1]
 80072fc:	2b2a      	cmp	r3, #42	; 0x2a
 80072fe:	d135      	bne.n	800736c <_svfiprintf_r+0x188>
 8007300:	9b03      	ldr	r3, [sp, #12]
 8007302:	1d1a      	adds	r2, r3, #4
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	9203      	str	r2, [sp, #12]
 8007308:	2b00      	cmp	r3, #0
 800730a:	bfb8      	it	lt
 800730c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007310:	3402      	adds	r4, #2
 8007312:	9305      	str	r3, [sp, #20]
 8007314:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80073e0 <_svfiprintf_r+0x1fc>
 8007318:	7821      	ldrb	r1, [r4, #0]
 800731a:	2203      	movs	r2, #3
 800731c:	4650      	mov	r0, sl
 800731e:	f7f8 ff97 	bl	8000250 <memchr>
 8007322:	b140      	cbz	r0, 8007336 <_svfiprintf_r+0x152>
 8007324:	2340      	movs	r3, #64	; 0x40
 8007326:	eba0 000a 	sub.w	r0, r0, sl
 800732a:	fa03 f000 	lsl.w	r0, r3, r0
 800732e:	9b04      	ldr	r3, [sp, #16]
 8007330:	4303      	orrs	r3, r0
 8007332:	3401      	adds	r4, #1
 8007334:	9304      	str	r3, [sp, #16]
 8007336:	f814 1b01 	ldrb.w	r1, [r4], #1
 800733a:	4826      	ldr	r0, [pc, #152]	; (80073d4 <_svfiprintf_r+0x1f0>)
 800733c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007340:	2206      	movs	r2, #6
 8007342:	f7f8 ff85 	bl	8000250 <memchr>
 8007346:	2800      	cmp	r0, #0
 8007348:	d038      	beq.n	80073bc <_svfiprintf_r+0x1d8>
 800734a:	4b23      	ldr	r3, [pc, #140]	; (80073d8 <_svfiprintf_r+0x1f4>)
 800734c:	bb1b      	cbnz	r3, 8007396 <_svfiprintf_r+0x1b2>
 800734e:	9b03      	ldr	r3, [sp, #12]
 8007350:	3307      	adds	r3, #7
 8007352:	f023 0307 	bic.w	r3, r3, #7
 8007356:	3308      	adds	r3, #8
 8007358:	9303      	str	r3, [sp, #12]
 800735a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800735c:	4433      	add	r3, r6
 800735e:	9309      	str	r3, [sp, #36]	; 0x24
 8007360:	e767      	b.n	8007232 <_svfiprintf_r+0x4e>
 8007362:	fb0c 3202 	mla	r2, ip, r2, r3
 8007366:	460c      	mov	r4, r1
 8007368:	2001      	movs	r0, #1
 800736a:	e7a5      	b.n	80072b8 <_svfiprintf_r+0xd4>
 800736c:	2300      	movs	r3, #0
 800736e:	3401      	adds	r4, #1
 8007370:	9305      	str	r3, [sp, #20]
 8007372:	4619      	mov	r1, r3
 8007374:	f04f 0c0a 	mov.w	ip, #10
 8007378:	4620      	mov	r0, r4
 800737a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800737e:	3a30      	subs	r2, #48	; 0x30
 8007380:	2a09      	cmp	r2, #9
 8007382:	d903      	bls.n	800738c <_svfiprintf_r+0x1a8>
 8007384:	2b00      	cmp	r3, #0
 8007386:	d0c5      	beq.n	8007314 <_svfiprintf_r+0x130>
 8007388:	9105      	str	r1, [sp, #20]
 800738a:	e7c3      	b.n	8007314 <_svfiprintf_r+0x130>
 800738c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007390:	4604      	mov	r4, r0
 8007392:	2301      	movs	r3, #1
 8007394:	e7f0      	b.n	8007378 <_svfiprintf_r+0x194>
 8007396:	ab03      	add	r3, sp, #12
 8007398:	9300      	str	r3, [sp, #0]
 800739a:	462a      	mov	r2, r5
 800739c:	4b0f      	ldr	r3, [pc, #60]	; (80073dc <_svfiprintf_r+0x1f8>)
 800739e:	a904      	add	r1, sp, #16
 80073a0:	4638      	mov	r0, r7
 80073a2:	f3af 8000 	nop.w
 80073a6:	1c42      	adds	r2, r0, #1
 80073a8:	4606      	mov	r6, r0
 80073aa:	d1d6      	bne.n	800735a <_svfiprintf_r+0x176>
 80073ac:	89ab      	ldrh	r3, [r5, #12]
 80073ae:	065b      	lsls	r3, r3, #25
 80073b0:	f53f af2c 	bmi.w	800720c <_svfiprintf_r+0x28>
 80073b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80073b6:	b01d      	add	sp, #116	; 0x74
 80073b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80073bc:	ab03      	add	r3, sp, #12
 80073be:	9300      	str	r3, [sp, #0]
 80073c0:	462a      	mov	r2, r5
 80073c2:	4b06      	ldr	r3, [pc, #24]	; (80073dc <_svfiprintf_r+0x1f8>)
 80073c4:	a904      	add	r1, sp, #16
 80073c6:	4638      	mov	r0, r7
 80073c8:	f000 f87a 	bl	80074c0 <_printf_i>
 80073cc:	e7eb      	b.n	80073a6 <_svfiprintf_r+0x1c2>
 80073ce:	bf00      	nop
 80073d0:	08007980 	.word	0x08007980
 80073d4:	0800798a 	.word	0x0800798a
 80073d8:	00000000 	.word	0x00000000
 80073dc:	0800712d 	.word	0x0800712d
 80073e0:	08007986 	.word	0x08007986

080073e4 <_printf_common>:
 80073e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073e8:	4616      	mov	r6, r2
 80073ea:	4699      	mov	r9, r3
 80073ec:	688a      	ldr	r2, [r1, #8]
 80073ee:	690b      	ldr	r3, [r1, #16]
 80073f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80073f4:	4293      	cmp	r3, r2
 80073f6:	bfb8      	it	lt
 80073f8:	4613      	movlt	r3, r2
 80073fa:	6033      	str	r3, [r6, #0]
 80073fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007400:	4607      	mov	r7, r0
 8007402:	460c      	mov	r4, r1
 8007404:	b10a      	cbz	r2, 800740a <_printf_common+0x26>
 8007406:	3301      	adds	r3, #1
 8007408:	6033      	str	r3, [r6, #0]
 800740a:	6823      	ldr	r3, [r4, #0]
 800740c:	0699      	lsls	r1, r3, #26
 800740e:	bf42      	ittt	mi
 8007410:	6833      	ldrmi	r3, [r6, #0]
 8007412:	3302      	addmi	r3, #2
 8007414:	6033      	strmi	r3, [r6, #0]
 8007416:	6825      	ldr	r5, [r4, #0]
 8007418:	f015 0506 	ands.w	r5, r5, #6
 800741c:	d106      	bne.n	800742c <_printf_common+0x48>
 800741e:	f104 0a19 	add.w	sl, r4, #25
 8007422:	68e3      	ldr	r3, [r4, #12]
 8007424:	6832      	ldr	r2, [r6, #0]
 8007426:	1a9b      	subs	r3, r3, r2
 8007428:	42ab      	cmp	r3, r5
 800742a:	dc26      	bgt.n	800747a <_printf_common+0x96>
 800742c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007430:	1e13      	subs	r3, r2, #0
 8007432:	6822      	ldr	r2, [r4, #0]
 8007434:	bf18      	it	ne
 8007436:	2301      	movne	r3, #1
 8007438:	0692      	lsls	r2, r2, #26
 800743a:	d42b      	bmi.n	8007494 <_printf_common+0xb0>
 800743c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007440:	4649      	mov	r1, r9
 8007442:	4638      	mov	r0, r7
 8007444:	47c0      	blx	r8
 8007446:	3001      	adds	r0, #1
 8007448:	d01e      	beq.n	8007488 <_printf_common+0xa4>
 800744a:	6823      	ldr	r3, [r4, #0]
 800744c:	68e5      	ldr	r5, [r4, #12]
 800744e:	6832      	ldr	r2, [r6, #0]
 8007450:	f003 0306 	and.w	r3, r3, #6
 8007454:	2b04      	cmp	r3, #4
 8007456:	bf08      	it	eq
 8007458:	1aad      	subeq	r5, r5, r2
 800745a:	68a3      	ldr	r3, [r4, #8]
 800745c:	6922      	ldr	r2, [r4, #16]
 800745e:	bf0c      	ite	eq
 8007460:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007464:	2500      	movne	r5, #0
 8007466:	4293      	cmp	r3, r2
 8007468:	bfc4      	itt	gt
 800746a:	1a9b      	subgt	r3, r3, r2
 800746c:	18ed      	addgt	r5, r5, r3
 800746e:	2600      	movs	r6, #0
 8007470:	341a      	adds	r4, #26
 8007472:	42b5      	cmp	r5, r6
 8007474:	d11a      	bne.n	80074ac <_printf_common+0xc8>
 8007476:	2000      	movs	r0, #0
 8007478:	e008      	b.n	800748c <_printf_common+0xa8>
 800747a:	2301      	movs	r3, #1
 800747c:	4652      	mov	r2, sl
 800747e:	4649      	mov	r1, r9
 8007480:	4638      	mov	r0, r7
 8007482:	47c0      	blx	r8
 8007484:	3001      	adds	r0, #1
 8007486:	d103      	bne.n	8007490 <_printf_common+0xac>
 8007488:	f04f 30ff 	mov.w	r0, #4294967295
 800748c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007490:	3501      	adds	r5, #1
 8007492:	e7c6      	b.n	8007422 <_printf_common+0x3e>
 8007494:	18e1      	adds	r1, r4, r3
 8007496:	1c5a      	adds	r2, r3, #1
 8007498:	2030      	movs	r0, #48	; 0x30
 800749a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800749e:	4422      	add	r2, r4
 80074a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80074a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80074a8:	3302      	adds	r3, #2
 80074aa:	e7c7      	b.n	800743c <_printf_common+0x58>
 80074ac:	2301      	movs	r3, #1
 80074ae:	4622      	mov	r2, r4
 80074b0:	4649      	mov	r1, r9
 80074b2:	4638      	mov	r0, r7
 80074b4:	47c0      	blx	r8
 80074b6:	3001      	adds	r0, #1
 80074b8:	d0e6      	beq.n	8007488 <_printf_common+0xa4>
 80074ba:	3601      	adds	r6, #1
 80074bc:	e7d9      	b.n	8007472 <_printf_common+0x8e>
	...

080074c0 <_printf_i>:
 80074c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80074c4:	460c      	mov	r4, r1
 80074c6:	4691      	mov	r9, r2
 80074c8:	7e27      	ldrb	r7, [r4, #24]
 80074ca:	990c      	ldr	r1, [sp, #48]	; 0x30
 80074cc:	2f78      	cmp	r7, #120	; 0x78
 80074ce:	4680      	mov	r8, r0
 80074d0:	469a      	mov	sl, r3
 80074d2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074d6:	d807      	bhi.n	80074e8 <_printf_i+0x28>
 80074d8:	2f62      	cmp	r7, #98	; 0x62
 80074da:	d80a      	bhi.n	80074f2 <_printf_i+0x32>
 80074dc:	2f00      	cmp	r7, #0
 80074de:	f000 80d8 	beq.w	8007692 <_printf_i+0x1d2>
 80074e2:	2f58      	cmp	r7, #88	; 0x58
 80074e4:	f000 80a3 	beq.w	800762e <_printf_i+0x16e>
 80074e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80074ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80074f0:	e03a      	b.n	8007568 <_printf_i+0xa8>
 80074f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80074f6:	2b15      	cmp	r3, #21
 80074f8:	d8f6      	bhi.n	80074e8 <_printf_i+0x28>
 80074fa:	a001      	add	r0, pc, #4	; (adr r0, 8007500 <_printf_i+0x40>)
 80074fc:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007500:	08007559 	.word	0x08007559
 8007504:	0800756d 	.word	0x0800756d
 8007508:	080074e9 	.word	0x080074e9
 800750c:	080074e9 	.word	0x080074e9
 8007510:	080074e9 	.word	0x080074e9
 8007514:	080074e9 	.word	0x080074e9
 8007518:	0800756d 	.word	0x0800756d
 800751c:	080074e9 	.word	0x080074e9
 8007520:	080074e9 	.word	0x080074e9
 8007524:	080074e9 	.word	0x080074e9
 8007528:	080074e9 	.word	0x080074e9
 800752c:	08007679 	.word	0x08007679
 8007530:	0800759d 	.word	0x0800759d
 8007534:	0800765b 	.word	0x0800765b
 8007538:	080074e9 	.word	0x080074e9
 800753c:	080074e9 	.word	0x080074e9
 8007540:	0800769b 	.word	0x0800769b
 8007544:	080074e9 	.word	0x080074e9
 8007548:	0800759d 	.word	0x0800759d
 800754c:	080074e9 	.word	0x080074e9
 8007550:	080074e9 	.word	0x080074e9
 8007554:	08007663 	.word	0x08007663
 8007558:	680b      	ldr	r3, [r1, #0]
 800755a:	1d1a      	adds	r2, r3, #4
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	600a      	str	r2, [r1, #0]
 8007560:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007564:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007568:	2301      	movs	r3, #1
 800756a:	e0a3      	b.n	80076b4 <_printf_i+0x1f4>
 800756c:	6825      	ldr	r5, [r4, #0]
 800756e:	6808      	ldr	r0, [r1, #0]
 8007570:	062e      	lsls	r6, r5, #24
 8007572:	f100 0304 	add.w	r3, r0, #4
 8007576:	d50a      	bpl.n	800758e <_printf_i+0xce>
 8007578:	6805      	ldr	r5, [r0, #0]
 800757a:	600b      	str	r3, [r1, #0]
 800757c:	2d00      	cmp	r5, #0
 800757e:	da03      	bge.n	8007588 <_printf_i+0xc8>
 8007580:	232d      	movs	r3, #45	; 0x2d
 8007582:	426d      	negs	r5, r5
 8007584:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007588:	485e      	ldr	r0, [pc, #376]	; (8007704 <_printf_i+0x244>)
 800758a:	230a      	movs	r3, #10
 800758c:	e019      	b.n	80075c2 <_printf_i+0x102>
 800758e:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007592:	6805      	ldr	r5, [r0, #0]
 8007594:	600b      	str	r3, [r1, #0]
 8007596:	bf18      	it	ne
 8007598:	b22d      	sxthne	r5, r5
 800759a:	e7ef      	b.n	800757c <_printf_i+0xbc>
 800759c:	680b      	ldr	r3, [r1, #0]
 800759e:	6825      	ldr	r5, [r4, #0]
 80075a0:	1d18      	adds	r0, r3, #4
 80075a2:	6008      	str	r0, [r1, #0]
 80075a4:	0628      	lsls	r0, r5, #24
 80075a6:	d501      	bpl.n	80075ac <_printf_i+0xec>
 80075a8:	681d      	ldr	r5, [r3, #0]
 80075aa:	e002      	b.n	80075b2 <_printf_i+0xf2>
 80075ac:	0669      	lsls	r1, r5, #25
 80075ae:	d5fb      	bpl.n	80075a8 <_printf_i+0xe8>
 80075b0:	881d      	ldrh	r5, [r3, #0]
 80075b2:	4854      	ldr	r0, [pc, #336]	; (8007704 <_printf_i+0x244>)
 80075b4:	2f6f      	cmp	r7, #111	; 0x6f
 80075b6:	bf0c      	ite	eq
 80075b8:	2308      	moveq	r3, #8
 80075ba:	230a      	movne	r3, #10
 80075bc:	2100      	movs	r1, #0
 80075be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80075c2:	6866      	ldr	r6, [r4, #4]
 80075c4:	60a6      	str	r6, [r4, #8]
 80075c6:	2e00      	cmp	r6, #0
 80075c8:	bfa2      	ittt	ge
 80075ca:	6821      	ldrge	r1, [r4, #0]
 80075cc:	f021 0104 	bicge.w	r1, r1, #4
 80075d0:	6021      	strge	r1, [r4, #0]
 80075d2:	b90d      	cbnz	r5, 80075d8 <_printf_i+0x118>
 80075d4:	2e00      	cmp	r6, #0
 80075d6:	d04d      	beq.n	8007674 <_printf_i+0x1b4>
 80075d8:	4616      	mov	r6, r2
 80075da:	fbb5 f1f3 	udiv	r1, r5, r3
 80075de:	fb03 5711 	mls	r7, r3, r1, r5
 80075e2:	5dc7      	ldrb	r7, [r0, r7]
 80075e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80075e8:	462f      	mov	r7, r5
 80075ea:	42bb      	cmp	r3, r7
 80075ec:	460d      	mov	r5, r1
 80075ee:	d9f4      	bls.n	80075da <_printf_i+0x11a>
 80075f0:	2b08      	cmp	r3, #8
 80075f2:	d10b      	bne.n	800760c <_printf_i+0x14c>
 80075f4:	6823      	ldr	r3, [r4, #0]
 80075f6:	07df      	lsls	r7, r3, #31
 80075f8:	d508      	bpl.n	800760c <_printf_i+0x14c>
 80075fa:	6923      	ldr	r3, [r4, #16]
 80075fc:	6861      	ldr	r1, [r4, #4]
 80075fe:	4299      	cmp	r1, r3
 8007600:	bfde      	ittt	le
 8007602:	2330      	movle	r3, #48	; 0x30
 8007604:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007608:	f106 36ff 	addle.w	r6, r6, #4294967295
 800760c:	1b92      	subs	r2, r2, r6
 800760e:	6122      	str	r2, [r4, #16]
 8007610:	f8cd a000 	str.w	sl, [sp]
 8007614:	464b      	mov	r3, r9
 8007616:	aa03      	add	r2, sp, #12
 8007618:	4621      	mov	r1, r4
 800761a:	4640      	mov	r0, r8
 800761c:	f7ff fee2 	bl	80073e4 <_printf_common>
 8007620:	3001      	adds	r0, #1
 8007622:	d14c      	bne.n	80076be <_printf_i+0x1fe>
 8007624:	f04f 30ff 	mov.w	r0, #4294967295
 8007628:	b004      	add	sp, #16
 800762a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800762e:	4835      	ldr	r0, [pc, #212]	; (8007704 <_printf_i+0x244>)
 8007630:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007634:	6823      	ldr	r3, [r4, #0]
 8007636:	680e      	ldr	r6, [r1, #0]
 8007638:	061f      	lsls	r7, r3, #24
 800763a:	f856 5b04 	ldr.w	r5, [r6], #4
 800763e:	600e      	str	r6, [r1, #0]
 8007640:	d514      	bpl.n	800766c <_printf_i+0x1ac>
 8007642:	07d9      	lsls	r1, r3, #31
 8007644:	bf44      	itt	mi
 8007646:	f043 0320 	orrmi.w	r3, r3, #32
 800764a:	6023      	strmi	r3, [r4, #0]
 800764c:	b91d      	cbnz	r5, 8007656 <_printf_i+0x196>
 800764e:	6823      	ldr	r3, [r4, #0]
 8007650:	f023 0320 	bic.w	r3, r3, #32
 8007654:	6023      	str	r3, [r4, #0]
 8007656:	2310      	movs	r3, #16
 8007658:	e7b0      	b.n	80075bc <_printf_i+0xfc>
 800765a:	6823      	ldr	r3, [r4, #0]
 800765c:	f043 0320 	orr.w	r3, r3, #32
 8007660:	6023      	str	r3, [r4, #0]
 8007662:	2378      	movs	r3, #120	; 0x78
 8007664:	4828      	ldr	r0, [pc, #160]	; (8007708 <_printf_i+0x248>)
 8007666:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800766a:	e7e3      	b.n	8007634 <_printf_i+0x174>
 800766c:	065e      	lsls	r6, r3, #25
 800766e:	bf48      	it	mi
 8007670:	b2ad      	uxthmi	r5, r5
 8007672:	e7e6      	b.n	8007642 <_printf_i+0x182>
 8007674:	4616      	mov	r6, r2
 8007676:	e7bb      	b.n	80075f0 <_printf_i+0x130>
 8007678:	680b      	ldr	r3, [r1, #0]
 800767a:	6826      	ldr	r6, [r4, #0]
 800767c:	6960      	ldr	r0, [r4, #20]
 800767e:	1d1d      	adds	r5, r3, #4
 8007680:	600d      	str	r5, [r1, #0]
 8007682:	0635      	lsls	r5, r6, #24
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	d501      	bpl.n	800768c <_printf_i+0x1cc>
 8007688:	6018      	str	r0, [r3, #0]
 800768a:	e002      	b.n	8007692 <_printf_i+0x1d2>
 800768c:	0671      	lsls	r1, r6, #25
 800768e:	d5fb      	bpl.n	8007688 <_printf_i+0x1c8>
 8007690:	8018      	strh	r0, [r3, #0]
 8007692:	2300      	movs	r3, #0
 8007694:	6123      	str	r3, [r4, #16]
 8007696:	4616      	mov	r6, r2
 8007698:	e7ba      	b.n	8007610 <_printf_i+0x150>
 800769a:	680b      	ldr	r3, [r1, #0]
 800769c:	1d1a      	adds	r2, r3, #4
 800769e:	600a      	str	r2, [r1, #0]
 80076a0:	681e      	ldr	r6, [r3, #0]
 80076a2:	6862      	ldr	r2, [r4, #4]
 80076a4:	2100      	movs	r1, #0
 80076a6:	4630      	mov	r0, r6
 80076a8:	f7f8 fdd2 	bl	8000250 <memchr>
 80076ac:	b108      	cbz	r0, 80076b2 <_printf_i+0x1f2>
 80076ae:	1b80      	subs	r0, r0, r6
 80076b0:	6060      	str	r0, [r4, #4]
 80076b2:	6863      	ldr	r3, [r4, #4]
 80076b4:	6123      	str	r3, [r4, #16]
 80076b6:	2300      	movs	r3, #0
 80076b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076bc:	e7a8      	b.n	8007610 <_printf_i+0x150>
 80076be:	6923      	ldr	r3, [r4, #16]
 80076c0:	4632      	mov	r2, r6
 80076c2:	4649      	mov	r1, r9
 80076c4:	4640      	mov	r0, r8
 80076c6:	47d0      	blx	sl
 80076c8:	3001      	adds	r0, #1
 80076ca:	d0ab      	beq.n	8007624 <_printf_i+0x164>
 80076cc:	6823      	ldr	r3, [r4, #0]
 80076ce:	079b      	lsls	r3, r3, #30
 80076d0:	d413      	bmi.n	80076fa <_printf_i+0x23a>
 80076d2:	68e0      	ldr	r0, [r4, #12]
 80076d4:	9b03      	ldr	r3, [sp, #12]
 80076d6:	4298      	cmp	r0, r3
 80076d8:	bfb8      	it	lt
 80076da:	4618      	movlt	r0, r3
 80076dc:	e7a4      	b.n	8007628 <_printf_i+0x168>
 80076de:	2301      	movs	r3, #1
 80076e0:	4632      	mov	r2, r6
 80076e2:	4649      	mov	r1, r9
 80076e4:	4640      	mov	r0, r8
 80076e6:	47d0      	blx	sl
 80076e8:	3001      	adds	r0, #1
 80076ea:	d09b      	beq.n	8007624 <_printf_i+0x164>
 80076ec:	3501      	adds	r5, #1
 80076ee:	68e3      	ldr	r3, [r4, #12]
 80076f0:	9903      	ldr	r1, [sp, #12]
 80076f2:	1a5b      	subs	r3, r3, r1
 80076f4:	42ab      	cmp	r3, r5
 80076f6:	dcf2      	bgt.n	80076de <_printf_i+0x21e>
 80076f8:	e7eb      	b.n	80076d2 <_printf_i+0x212>
 80076fa:	2500      	movs	r5, #0
 80076fc:	f104 0619 	add.w	r6, r4, #25
 8007700:	e7f5      	b.n	80076ee <_printf_i+0x22e>
 8007702:	bf00      	nop
 8007704:	08007991 	.word	0x08007991
 8007708:	080079a2 	.word	0x080079a2

0800770c <memcpy>:
 800770c:	440a      	add	r2, r1
 800770e:	4291      	cmp	r1, r2
 8007710:	f100 33ff 	add.w	r3, r0, #4294967295
 8007714:	d100      	bne.n	8007718 <memcpy+0xc>
 8007716:	4770      	bx	lr
 8007718:	b510      	push	{r4, lr}
 800771a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800771e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007722:	4291      	cmp	r1, r2
 8007724:	d1f9      	bne.n	800771a <memcpy+0xe>
 8007726:	bd10      	pop	{r4, pc}

08007728 <memmove>:
 8007728:	4288      	cmp	r0, r1
 800772a:	b510      	push	{r4, lr}
 800772c:	eb01 0402 	add.w	r4, r1, r2
 8007730:	d902      	bls.n	8007738 <memmove+0x10>
 8007732:	4284      	cmp	r4, r0
 8007734:	4623      	mov	r3, r4
 8007736:	d807      	bhi.n	8007748 <memmove+0x20>
 8007738:	1e43      	subs	r3, r0, #1
 800773a:	42a1      	cmp	r1, r4
 800773c:	d008      	beq.n	8007750 <memmove+0x28>
 800773e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007742:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007746:	e7f8      	b.n	800773a <memmove+0x12>
 8007748:	4402      	add	r2, r0
 800774a:	4601      	mov	r1, r0
 800774c:	428a      	cmp	r2, r1
 800774e:	d100      	bne.n	8007752 <memmove+0x2a>
 8007750:	bd10      	pop	{r4, pc}
 8007752:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007756:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800775a:	e7f7      	b.n	800774c <memmove+0x24>

0800775c <_free_r>:
 800775c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800775e:	2900      	cmp	r1, #0
 8007760:	d048      	beq.n	80077f4 <_free_r+0x98>
 8007762:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007766:	9001      	str	r0, [sp, #4]
 8007768:	2b00      	cmp	r3, #0
 800776a:	f1a1 0404 	sub.w	r4, r1, #4
 800776e:	bfb8      	it	lt
 8007770:	18e4      	addlt	r4, r4, r3
 8007772:	f000 f8d3 	bl	800791c <__malloc_lock>
 8007776:	4a20      	ldr	r2, [pc, #128]	; (80077f8 <_free_r+0x9c>)
 8007778:	9801      	ldr	r0, [sp, #4]
 800777a:	6813      	ldr	r3, [r2, #0]
 800777c:	4615      	mov	r5, r2
 800777e:	b933      	cbnz	r3, 800778e <_free_r+0x32>
 8007780:	6063      	str	r3, [r4, #4]
 8007782:	6014      	str	r4, [r2, #0]
 8007784:	b003      	add	sp, #12
 8007786:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800778a:	f000 b8cd 	b.w	8007928 <__malloc_unlock>
 800778e:	42a3      	cmp	r3, r4
 8007790:	d90b      	bls.n	80077aa <_free_r+0x4e>
 8007792:	6821      	ldr	r1, [r4, #0]
 8007794:	1862      	adds	r2, r4, r1
 8007796:	4293      	cmp	r3, r2
 8007798:	bf04      	itt	eq
 800779a:	681a      	ldreq	r2, [r3, #0]
 800779c:	685b      	ldreq	r3, [r3, #4]
 800779e:	6063      	str	r3, [r4, #4]
 80077a0:	bf04      	itt	eq
 80077a2:	1852      	addeq	r2, r2, r1
 80077a4:	6022      	streq	r2, [r4, #0]
 80077a6:	602c      	str	r4, [r5, #0]
 80077a8:	e7ec      	b.n	8007784 <_free_r+0x28>
 80077aa:	461a      	mov	r2, r3
 80077ac:	685b      	ldr	r3, [r3, #4]
 80077ae:	b10b      	cbz	r3, 80077b4 <_free_r+0x58>
 80077b0:	42a3      	cmp	r3, r4
 80077b2:	d9fa      	bls.n	80077aa <_free_r+0x4e>
 80077b4:	6811      	ldr	r1, [r2, #0]
 80077b6:	1855      	adds	r5, r2, r1
 80077b8:	42a5      	cmp	r5, r4
 80077ba:	d10b      	bne.n	80077d4 <_free_r+0x78>
 80077bc:	6824      	ldr	r4, [r4, #0]
 80077be:	4421      	add	r1, r4
 80077c0:	1854      	adds	r4, r2, r1
 80077c2:	42a3      	cmp	r3, r4
 80077c4:	6011      	str	r1, [r2, #0]
 80077c6:	d1dd      	bne.n	8007784 <_free_r+0x28>
 80077c8:	681c      	ldr	r4, [r3, #0]
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	6053      	str	r3, [r2, #4]
 80077ce:	4421      	add	r1, r4
 80077d0:	6011      	str	r1, [r2, #0]
 80077d2:	e7d7      	b.n	8007784 <_free_r+0x28>
 80077d4:	d902      	bls.n	80077dc <_free_r+0x80>
 80077d6:	230c      	movs	r3, #12
 80077d8:	6003      	str	r3, [r0, #0]
 80077da:	e7d3      	b.n	8007784 <_free_r+0x28>
 80077dc:	6825      	ldr	r5, [r4, #0]
 80077de:	1961      	adds	r1, r4, r5
 80077e0:	428b      	cmp	r3, r1
 80077e2:	bf04      	itt	eq
 80077e4:	6819      	ldreq	r1, [r3, #0]
 80077e6:	685b      	ldreq	r3, [r3, #4]
 80077e8:	6063      	str	r3, [r4, #4]
 80077ea:	bf04      	itt	eq
 80077ec:	1949      	addeq	r1, r1, r5
 80077ee:	6021      	streq	r1, [r4, #0]
 80077f0:	6054      	str	r4, [r2, #4]
 80077f2:	e7c7      	b.n	8007784 <_free_r+0x28>
 80077f4:	b003      	add	sp, #12
 80077f6:	bd30      	pop	{r4, r5, pc}
 80077f8:	200000cc 	.word	0x200000cc

080077fc <_malloc_r>:
 80077fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077fe:	1ccd      	adds	r5, r1, #3
 8007800:	f025 0503 	bic.w	r5, r5, #3
 8007804:	3508      	adds	r5, #8
 8007806:	2d0c      	cmp	r5, #12
 8007808:	bf38      	it	cc
 800780a:	250c      	movcc	r5, #12
 800780c:	2d00      	cmp	r5, #0
 800780e:	4606      	mov	r6, r0
 8007810:	db01      	blt.n	8007816 <_malloc_r+0x1a>
 8007812:	42a9      	cmp	r1, r5
 8007814:	d903      	bls.n	800781e <_malloc_r+0x22>
 8007816:	230c      	movs	r3, #12
 8007818:	6033      	str	r3, [r6, #0]
 800781a:	2000      	movs	r0, #0
 800781c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800781e:	f000 f87d 	bl	800791c <__malloc_lock>
 8007822:	4921      	ldr	r1, [pc, #132]	; (80078a8 <_malloc_r+0xac>)
 8007824:	680a      	ldr	r2, [r1, #0]
 8007826:	4614      	mov	r4, r2
 8007828:	b99c      	cbnz	r4, 8007852 <_malloc_r+0x56>
 800782a:	4f20      	ldr	r7, [pc, #128]	; (80078ac <_malloc_r+0xb0>)
 800782c:	683b      	ldr	r3, [r7, #0]
 800782e:	b923      	cbnz	r3, 800783a <_malloc_r+0x3e>
 8007830:	4621      	mov	r1, r4
 8007832:	4630      	mov	r0, r6
 8007834:	f000 f862 	bl	80078fc <_sbrk_r>
 8007838:	6038      	str	r0, [r7, #0]
 800783a:	4629      	mov	r1, r5
 800783c:	4630      	mov	r0, r6
 800783e:	f000 f85d 	bl	80078fc <_sbrk_r>
 8007842:	1c43      	adds	r3, r0, #1
 8007844:	d123      	bne.n	800788e <_malloc_r+0x92>
 8007846:	230c      	movs	r3, #12
 8007848:	6033      	str	r3, [r6, #0]
 800784a:	4630      	mov	r0, r6
 800784c:	f000 f86c 	bl	8007928 <__malloc_unlock>
 8007850:	e7e3      	b.n	800781a <_malloc_r+0x1e>
 8007852:	6823      	ldr	r3, [r4, #0]
 8007854:	1b5b      	subs	r3, r3, r5
 8007856:	d417      	bmi.n	8007888 <_malloc_r+0x8c>
 8007858:	2b0b      	cmp	r3, #11
 800785a:	d903      	bls.n	8007864 <_malloc_r+0x68>
 800785c:	6023      	str	r3, [r4, #0]
 800785e:	441c      	add	r4, r3
 8007860:	6025      	str	r5, [r4, #0]
 8007862:	e004      	b.n	800786e <_malloc_r+0x72>
 8007864:	6863      	ldr	r3, [r4, #4]
 8007866:	42a2      	cmp	r2, r4
 8007868:	bf0c      	ite	eq
 800786a:	600b      	streq	r3, [r1, #0]
 800786c:	6053      	strne	r3, [r2, #4]
 800786e:	4630      	mov	r0, r6
 8007870:	f000 f85a 	bl	8007928 <__malloc_unlock>
 8007874:	f104 000b 	add.w	r0, r4, #11
 8007878:	1d23      	adds	r3, r4, #4
 800787a:	f020 0007 	bic.w	r0, r0, #7
 800787e:	1ac2      	subs	r2, r0, r3
 8007880:	d0cc      	beq.n	800781c <_malloc_r+0x20>
 8007882:	1a1b      	subs	r3, r3, r0
 8007884:	50a3      	str	r3, [r4, r2]
 8007886:	e7c9      	b.n	800781c <_malloc_r+0x20>
 8007888:	4622      	mov	r2, r4
 800788a:	6864      	ldr	r4, [r4, #4]
 800788c:	e7cc      	b.n	8007828 <_malloc_r+0x2c>
 800788e:	1cc4      	adds	r4, r0, #3
 8007890:	f024 0403 	bic.w	r4, r4, #3
 8007894:	42a0      	cmp	r0, r4
 8007896:	d0e3      	beq.n	8007860 <_malloc_r+0x64>
 8007898:	1a21      	subs	r1, r4, r0
 800789a:	4630      	mov	r0, r6
 800789c:	f000 f82e 	bl	80078fc <_sbrk_r>
 80078a0:	3001      	adds	r0, #1
 80078a2:	d1dd      	bne.n	8007860 <_malloc_r+0x64>
 80078a4:	e7cf      	b.n	8007846 <_malloc_r+0x4a>
 80078a6:	bf00      	nop
 80078a8:	200000cc 	.word	0x200000cc
 80078ac:	200000d0 	.word	0x200000d0

080078b0 <_realloc_r>:
 80078b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078b2:	4607      	mov	r7, r0
 80078b4:	4614      	mov	r4, r2
 80078b6:	460e      	mov	r6, r1
 80078b8:	b921      	cbnz	r1, 80078c4 <_realloc_r+0x14>
 80078ba:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80078be:	4611      	mov	r1, r2
 80078c0:	f7ff bf9c 	b.w	80077fc <_malloc_r>
 80078c4:	b922      	cbnz	r2, 80078d0 <_realloc_r+0x20>
 80078c6:	f7ff ff49 	bl	800775c <_free_r>
 80078ca:	4625      	mov	r5, r4
 80078cc:	4628      	mov	r0, r5
 80078ce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078d0:	f000 f830 	bl	8007934 <_malloc_usable_size_r>
 80078d4:	42a0      	cmp	r0, r4
 80078d6:	d20f      	bcs.n	80078f8 <_realloc_r+0x48>
 80078d8:	4621      	mov	r1, r4
 80078da:	4638      	mov	r0, r7
 80078dc:	f7ff ff8e 	bl	80077fc <_malloc_r>
 80078e0:	4605      	mov	r5, r0
 80078e2:	2800      	cmp	r0, #0
 80078e4:	d0f2      	beq.n	80078cc <_realloc_r+0x1c>
 80078e6:	4631      	mov	r1, r6
 80078e8:	4622      	mov	r2, r4
 80078ea:	f7ff ff0f 	bl	800770c <memcpy>
 80078ee:	4631      	mov	r1, r6
 80078f0:	4638      	mov	r0, r7
 80078f2:	f7ff ff33 	bl	800775c <_free_r>
 80078f6:	e7e9      	b.n	80078cc <_realloc_r+0x1c>
 80078f8:	4635      	mov	r5, r6
 80078fa:	e7e7      	b.n	80078cc <_realloc_r+0x1c>

080078fc <_sbrk_r>:
 80078fc:	b538      	push	{r3, r4, r5, lr}
 80078fe:	4d06      	ldr	r5, [pc, #24]	; (8007918 <_sbrk_r+0x1c>)
 8007900:	2300      	movs	r3, #0
 8007902:	4604      	mov	r4, r0
 8007904:	4608      	mov	r0, r1
 8007906:	602b      	str	r3, [r5, #0]
 8007908:	f7f9 fb2c 	bl	8000f64 <_sbrk>
 800790c:	1c43      	adds	r3, r0, #1
 800790e:	d102      	bne.n	8007916 <_sbrk_r+0x1a>
 8007910:	682b      	ldr	r3, [r5, #0]
 8007912:	b103      	cbz	r3, 8007916 <_sbrk_r+0x1a>
 8007914:	6023      	str	r3, [r4, #0]
 8007916:	bd38      	pop	{r3, r4, r5, pc}
 8007918:	2000029c 	.word	0x2000029c

0800791c <__malloc_lock>:
 800791c:	4801      	ldr	r0, [pc, #4]	; (8007924 <__malloc_lock+0x8>)
 800791e:	f000 b811 	b.w	8007944 <__retarget_lock_acquire_recursive>
 8007922:	bf00      	nop
 8007924:	200002a4 	.word	0x200002a4

08007928 <__malloc_unlock>:
 8007928:	4801      	ldr	r0, [pc, #4]	; (8007930 <__malloc_unlock+0x8>)
 800792a:	f000 b80c 	b.w	8007946 <__retarget_lock_release_recursive>
 800792e:	bf00      	nop
 8007930:	200002a4 	.word	0x200002a4

08007934 <_malloc_usable_size_r>:
 8007934:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007938:	1f18      	subs	r0, r3, #4
 800793a:	2b00      	cmp	r3, #0
 800793c:	bfbc      	itt	lt
 800793e:	580b      	ldrlt	r3, [r1, r0]
 8007940:	18c0      	addlt	r0, r0, r3
 8007942:	4770      	bx	lr

08007944 <__retarget_lock_acquire_recursive>:
 8007944:	4770      	bx	lr

08007946 <__retarget_lock_release_recursive>:
 8007946:	4770      	bx	lr

08007948 <_init>:
 8007948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800794a:	bf00      	nop
 800794c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800794e:	bc08      	pop	{r3}
 8007950:	469e      	mov	lr, r3
 8007952:	4770      	bx	lr

08007954 <_fini>:
 8007954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007956:	bf00      	nop
 8007958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800795a:	bc08      	pop	{r3}
 800795c:	469e      	mov	lr, r3
 800795e:	4770      	bx	lr
