
Projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e90  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  08009090  08009090  00019090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080092f8  080092f8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  080092f8  080092f8  000192f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009300  08009300  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009300  08009300  00019300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009304  08009304  00019304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08009308  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  200001e4  080094ec  000201e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000508  080094ec  00020508  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ca7c  00000000  00000000  00020212  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a4b  00000000  00000000  0003cc8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013d0  00000000  00000000  000406e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001218  00000000  00000000  00041ab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a8de  00000000  00000000  00042cc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001adea  00000000  00000000  0006d5a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104aa0  00000000  00000000  00088390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000cc  00000000  00000000  0018ce30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005940  00000000  00000000  0018cefc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_loc    00000df5  00000000  00000000  0019283c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e4 	.word	0x200001e4
 800021c:	00000000 	.word	0x00000000
 8000220:	08009078 	.word	0x08009078

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e8 	.word	0x200001e8
 800023c:	08009078 	.word	0x08009078

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ee:	463b      	mov	r3, r7
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005fa:	4b21      	ldr	r3, [pc, #132]	; (8000680 <MX_ADC1_Init+0x98>)
 80005fc:	4a21      	ldr	r2, [pc, #132]	; (8000684 <MX_ADC1_Init+0x9c>)
 80005fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000600:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <MX_ADC1_Init+0x98>)
 8000602:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000606:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000608:	4b1d      	ldr	r3, [pc, #116]	; (8000680 <MX_ADC1_Init+0x98>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800060e:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <MX_ADC1_Init+0x98>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000614:	4b1a      	ldr	r3, [pc, #104]	; (8000680 <MX_ADC1_Init+0x98>)
 8000616:	2200      	movs	r2, #0
 8000618:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061a:	4b19      	ldr	r3, [pc, #100]	; (8000680 <MX_ADC1_Init+0x98>)
 800061c:	2200      	movs	r2, #0
 800061e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000622:	4b17      	ldr	r3, [pc, #92]	; (8000680 <MX_ADC1_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000628:	4b15      	ldr	r3, [pc, #84]	; (8000680 <MX_ADC1_Init+0x98>)
 800062a:	4a17      	ldr	r2, [pc, #92]	; (8000688 <MX_ADC1_Init+0xa0>)
 800062c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800062e:	4b14      	ldr	r3, [pc, #80]	; (8000680 <MX_ADC1_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000634:	4b12      	ldr	r3, [pc, #72]	; (8000680 <MX_ADC1_Init+0x98>)
 8000636:	2201      	movs	r2, #1
 8000638:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800063a:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_ADC1_Init+0x98>)
 800063c:	2200      	movs	r2, #0
 800063e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000642:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MX_ADC1_Init+0x98>)
 8000644:	2201      	movs	r2, #1
 8000646:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000648:	480d      	ldr	r0, [pc, #52]	; (8000680 <MX_ADC1_Init+0x98>)
 800064a:	f001 f903 	bl	8001854 <HAL_ADC_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000654:	f000 fd0a 	bl	800106c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000658:	2303      	movs	r3, #3
 800065a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800065c:	2301      	movs	r3, #1
 800065e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000660:	2307      	movs	r3, #7
 8000662:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000664:	463b      	mov	r3, r7
 8000666:	4619      	mov	r1, r3
 8000668:	4805      	ldr	r0, [pc, #20]	; (8000680 <MX_ADC1_Init+0x98>)
 800066a:	f001 fa65 	bl	8001b38 <HAL_ADC_ConfigChannel>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000674:	f000 fcfa 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000678:	bf00      	nop
 800067a:	3710      	adds	r7, #16
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000308 	.word	0x20000308
 8000684:	40012000 	.word	0x40012000
 8000688:	0f000001 	.word	0x0f000001

0800068c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08a      	sub	sp, #40	; 0x28
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000694:	f107 0314 	add.w	r3, r7, #20
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a19      	ldr	r2, [pc, #100]	; (8000710 <HAL_ADC_MspInit+0x84>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d12b      	bne.n	8000706 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006ae:	4b19      	ldr	r3, [pc, #100]	; (8000714 <HAL_ADC_MspInit+0x88>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b2:	4a18      	ldr	r2, [pc, #96]	; (8000714 <HAL_ADC_MspInit+0x88>)
 80006b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006b8:	6453      	str	r3, [r2, #68]	; 0x44
 80006ba:	4b16      	ldr	r3, [pc, #88]	; (8000714 <HAL_ADC_MspInit+0x88>)
 80006bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006c2:	613b      	str	r3, [r7, #16]
 80006c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c6:	4b13      	ldr	r3, [pc, #76]	; (8000714 <HAL_ADC_MspInit+0x88>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a12      	ldr	r2, [pc, #72]	; (8000714 <HAL_ADC_MspInit+0x88>)
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <HAL_ADC_MspInit+0x88>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006de:	2308      	movs	r3, #8
 80006e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006e2:	2303      	movs	r3, #3
 80006e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	4619      	mov	r1, r3
 80006f0:	4809      	ldr	r0, [pc, #36]	; (8000718 <HAL_ADC_MspInit+0x8c>)
 80006f2:	f001 fe2d 	bl	8002350 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2100      	movs	r1, #0
 80006fa:	2012      	movs	r0, #18
 80006fc:	f001 fd51 	bl	80021a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000700:	2012      	movs	r0, #18
 8000702:	f001 fd6a 	bl	80021da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000706:	bf00      	nop
 8000708:	3728      	adds	r7, #40	; 0x28
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40012000 	.word	0x40012000
 8000714:	40023800 	.word	0x40023800
 8000718:	40020000 	.word	0x40020000

0800071c <BH1750_Init>:
 *  Created on: Nov 13, 2021
 *      Author: konst
 */
#include "bh1750.h"

void BH1750_Init(BH1750_HandleTypeDef* hbh1750, uint8_t command){
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af02      	add	r7, sp, #8
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	460b      	mov	r3, r1
 8000726:	70fb      	strb	r3, [r7, #3]
uint8_t start = BH1750_POWER_ON;
 8000728:	2301      	movs	r3, #1
 800072a:	73fb      	strb	r3, [r7, #15]
HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &start, 1, hbh1750->Timeout);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	6818      	ldr	r0, [r3, #0]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	791b      	ldrb	r3, [r3, #4]
 8000734:	b299      	uxth	r1, r3
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	689b      	ldr	r3, [r3, #8]
 800073a:	f107 020f 	add.w	r2, r7, #15
 800073e:	9300      	str	r3, [sp, #0]
 8000740:	2301      	movs	r3, #1
 8000742:	f002 f85b 	bl	80027fc <HAL_I2C_Master_Transmit>
HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, 1,hbh1750->Timeout);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6818      	ldr	r0, [r3, #0]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	791b      	ldrb	r3, [r3, #4]
 800074e:	b299      	uxth	r1, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	689b      	ldr	r3, [r3, #8]
 8000754:	1cfa      	adds	r2, r7, #3
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	2301      	movs	r3, #1
 800075a:	f002 f84f 	bl	80027fc <HAL_I2C_Master_Transmit>
}
 800075e:	bf00      	nop
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
	...

08000768 <BH1750_ReadLux>:


float BH1750_ReadLux(BH1750_HandleTypeDef* hbh1750){
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af02      	add	r7, sp, #8
 800076e:	6078      	str	r0, [r7, #4]
float light = 0;
 8000770:	f04f 0300 	mov.w	r3, #0
 8000774:	60fb      	str	r3, [r7, #12]
uint8_t buff[2];
HAL_I2C_Master_Receive(hbh1750->I2C, hbh1750->Address, buff, 2, hbh1750->Timeout);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	6818      	ldr	r0, [r3, #0]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	791b      	ldrb	r3, [r3, #4]
 800077e:	b299      	uxth	r1, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	689b      	ldr	r3, [r3, #8]
 8000784:	f107 0208 	add.w	r2, r7, #8
 8000788:	9300      	str	r3, [sp, #0]
 800078a:	2302      	movs	r3, #2
 800078c:	f002 f92a 	bl	80029e4 <HAL_I2C_Master_Receive>
light = ((buff[0] << 8) | buff[1]) / 1.2;
 8000790:	7a3b      	ldrb	r3, [r7, #8]
 8000792:	021b      	lsls	r3, r3, #8
 8000794:	7a7a      	ldrb	r2, [r7, #9]
 8000796:	4313      	orrs	r3, r2
 8000798:	ee07 3a90 	vmov	s15, r3
 800079c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80007a0:	ed9f 5b07 	vldr	d5, [pc, #28]	; 80007c0 <BH1750_ReadLux+0x58>
 80007a4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80007a8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007ac:	edc7 7a03 	vstr	s15, [r7, #12]
return light;
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	ee07 3a90 	vmov	s15, r3
}
 80007b6:	eeb0 0a67 	vmov.f32	s0, s15
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	33333333 	.word	0x33333333
 80007c4:	3ff33333 	.word	0x3ff33333

080007c8 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08c      	sub	sp, #48	; 0x30
 80007cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007de:	4b77      	ldr	r3, [pc, #476]	; (80009bc <MX_GPIO_Init+0x1f4>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a76      	ldr	r2, [pc, #472]	; (80009bc <MX_GPIO_Init+0x1f4>)
 80007e4:	f043 0304 	orr.w	r3, r3, #4
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b74      	ldr	r3, [pc, #464]	; (80009bc <MX_GPIO_Init+0x1f4>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0304 	and.w	r3, r3, #4
 80007f2:	61bb      	str	r3, [r7, #24]
 80007f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f6:	4b71      	ldr	r3, [pc, #452]	; (80009bc <MX_GPIO_Init+0x1f4>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a70      	ldr	r2, [pc, #448]	; (80009bc <MX_GPIO_Init+0x1f4>)
 80007fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b6e      	ldr	r3, [pc, #440]	; (80009bc <MX_GPIO_Init+0x1f4>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080a:	617b      	str	r3, [r7, #20]
 800080c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	4b6b      	ldr	r3, [pc, #428]	; (80009bc <MX_GPIO_Init+0x1f4>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a6a      	ldr	r2, [pc, #424]	; (80009bc <MX_GPIO_Init+0x1f4>)
 8000814:	f043 0301 	orr.w	r3, r3, #1
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b68      	ldr	r3, [pc, #416]	; (80009bc <MX_GPIO_Init+0x1f4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0301 	and.w	r3, r3, #1
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	4b65      	ldr	r3, [pc, #404]	; (80009bc <MX_GPIO_Init+0x1f4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a64      	ldr	r2, [pc, #400]	; (80009bc <MX_GPIO_Init+0x1f4>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b62      	ldr	r3, [pc, #392]	; (80009bc <MX_GPIO_Init+0x1f4>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0302 	and.w	r3, r3, #2
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800083e:	4b5f      	ldr	r3, [pc, #380]	; (80009bc <MX_GPIO_Init+0x1f4>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a5e      	ldr	r2, [pc, #376]	; (80009bc <MX_GPIO_Init+0x1f4>)
 8000844:	f043 0308 	orr.w	r3, r3, #8
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b5c      	ldr	r3, [pc, #368]	; (80009bc <MX_GPIO_Init+0x1f4>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0308 	and.w	r3, r3, #8
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000856:	4b59      	ldr	r3, [pc, #356]	; (80009bc <MX_GPIO_Init+0x1f4>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a58      	ldr	r2, [pc, #352]	; (80009bc <MX_GPIO_Init+0x1f4>)
 800085c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b56      	ldr	r3, [pc, #344]	; (80009bc <MX_GPIO_Init+0x1f4>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	f244 0181 	movw	r1, #16513	; 0x4081
 8000874:	4852      	ldr	r0, [pc, #328]	; (80009c0 <MX_GPIO_Init+0x1f8>)
 8000876:	f001 ff17 	bl	80026a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800087a:	2200      	movs	r2, #0
 800087c:	2140      	movs	r1, #64	; 0x40
 800087e:	4851      	ldr	r0, [pc, #324]	; (80009c4 <MX_GPIO_Init+0x1fc>)
 8000880:	f001 ff12 	bl	80026a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000884:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000888:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800088a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800088e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000894:	f107 031c 	add.w	r3, r7, #28
 8000898:	4619      	mov	r1, r3
 800089a:	484b      	ldr	r0, [pc, #300]	; (80009c8 <MX_GPIO_Init+0x200>)
 800089c:	f001 fd58 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80008a0:	2332      	movs	r3, #50	; 0x32
 80008a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a4:	2302      	movs	r3, #2
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ac:	2303      	movs	r3, #3
 80008ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008b0:	230b      	movs	r3, #11
 80008b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b4:	f107 031c 	add.w	r3, r7, #28
 80008b8:	4619      	mov	r1, r3
 80008ba:	4843      	ldr	r0, [pc, #268]	; (80009c8 <MX_GPIO_Init+0x200>)
 80008bc:	f001 fd48 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80008c0:	2386      	movs	r3, #134	; 0x86
 80008c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008c4:	2302      	movs	r3, #2
 80008c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c8:	2300      	movs	r3, #0
 80008ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008cc:	2303      	movs	r3, #3
 80008ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008d0:	230b      	movs	r3, #11
 80008d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008d4:	f107 031c 	add.w	r3, r7, #28
 80008d8:	4619      	mov	r1, r3
 80008da:	483c      	ldr	r0, [pc, #240]	; (80009cc <MX_GPIO_Init+0x204>)
 80008dc:	f001 fd38 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008e0:	f244 0381 	movw	r3, #16513	; 0x4081
 80008e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008e6:	2301      	movs	r3, #1
 80008e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f2:	f107 031c 	add.w	r3, r7, #28
 80008f6:	4619      	mov	r1, r3
 80008f8:	4831      	ldr	r0, [pc, #196]	; (80009c0 <MX_GPIO_Init+0x1f8>)
 80008fa:	f001 fd29 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80008fe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000902:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000904:	2302      	movs	r3, #2
 8000906:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800090c:	2303      	movs	r3, #3
 800090e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000910:	230b      	movs	r3, #11
 8000912:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000914:	f107 031c 	add.w	r3, r7, #28
 8000918:	4619      	mov	r1, r3
 800091a:	4829      	ldr	r0, [pc, #164]	; (80009c0 <MX_GPIO_Init+0x1f8>)
 800091c:	f001 fd18 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000920:	2340      	movs	r3, #64	; 0x40
 8000922:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000924:	2301      	movs	r3, #1
 8000926:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000928:	2300      	movs	r3, #0
 800092a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092c:	2300      	movs	r3, #0
 800092e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000930:	f107 031c 	add.w	r3, r7, #28
 8000934:	4619      	mov	r1, r3
 8000936:	4823      	ldr	r0, [pc, #140]	; (80009c4 <MX_GPIO_Init+0x1fc>)
 8000938:	f001 fd0a 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800093c:	2380      	movs	r3, #128	; 0x80
 800093e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000940:	2300      	movs	r3, #0
 8000942:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	481d      	ldr	r0, [pc, #116]	; (80009c4 <MX_GPIO_Init+0x1fc>)
 8000950:	f001 fcfe 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000954:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000958:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000962:	2303      	movs	r3, #3
 8000964:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000966:	230a      	movs	r3, #10
 8000968:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	4816      	ldr	r0, [pc, #88]	; (80009cc <MX_GPIO_Init+0x204>)
 8000972:	f001 fced 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000976:	f44f 7300 	mov.w	r3, #512	; 0x200
 800097a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097c:	2300      	movs	r3, #0
 800097e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000980:	2300      	movs	r3, #0
 8000982:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000984:	f107 031c 	add.w	r3, r7, #28
 8000988:	4619      	mov	r1, r3
 800098a:	4810      	ldr	r0, [pc, #64]	; (80009cc <MX_GPIO_Init+0x204>)
 800098c:	f001 fce0 	bl	8002350 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000990:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000996:	2302      	movs	r3, #2
 8000998:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099a:	2300      	movs	r3, #0
 800099c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099e:	2303      	movs	r3, #3
 80009a0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009a2:	230b      	movs	r3, #11
 80009a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009a6:	f107 031c 	add.w	r3, r7, #28
 80009aa:	4619      	mov	r1, r3
 80009ac:	4805      	ldr	r0, [pc, #20]	; (80009c4 <MX_GPIO_Init+0x1fc>)
 80009ae:	f001 fccf 	bl	8002350 <HAL_GPIO_Init>

}
 80009b2:	bf00      	nop
 80009b4:	3730      	adds	r7, #48	; 0x30
 80009b6:	46bd      	mov	sp, r7
 80009b8:	bd80      	pop	{r7, pc}
 80009ba:	bf00      	nop
 80009bc:	40023800 	.word	0x40023800
 80009c0:	40020400 	.word	0x40020400
 80009c4:	40021800 	.word	0x40021800
 80009c8:	40020800 	.word	0x40020800
 80009cc:	40020000 	.word	0x40020000

080009d0 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009d4:	4b1b      	ldr	r3, [pc, #108]	; (8000a44 <MX_I2C1_Init+0x74>)
 80009d6:	4a1c      	ldr	r2, [pc, #112]	; (8000a48 <MX_I2C1_Init+0x78>)
 80009d8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 80009da:	4b1a      	ldr	r3, [pc, #104]	; (8000a44 <MX_I2C1_Init+0x74>)
 80009dc:	4a1b      	ldr	r2, [pc, #108]	; (8000a4c <MX_I2C1_Init+0x7c>)
 80009de:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80009e0:	4b18      	ldr	r3, [pc, #96]	; (8000a44 <MX_I2C1_Init+0x74>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009e6:	4b17      	ldr	r3, [pc, #92]	; (8000a44 <MX_I2C1_Init+0x74>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009ec:	4b15      	ldr	r3, [pc, #84]	; (8000a44 <MX_I2C1_Init+0x74>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80009f2:	4b14      	ldr	r3, [pc, #80]	; (8000a44 <MX_I2C1_Init+0x74>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80009f8:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <MX_I2C1_Init+0x74>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009fe:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <MX_I2C1_Init+0x74>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a04:	4b0f      	ldr	r3, [pc, #60]	; (8000a44 <MX_I2C1_Init+0x74>)
 8000a06:	2200      	movs	r2, #0
 8000a08:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a0a:	480e      	ldr	r0, [pc, #56]	; (8000a44 <MX_I2C1_Init+0x74>)
 8000a0c:	f001 fe66 	bl	80026dc <HAL_I2C_Init>
 8000a10:	4603      	mov	r3, r0
 8000a12:	2b00      	cmp	r3, #0
 8000a14:	d001      	beq.n	8000a1a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a16:	f000 fb29 	bl	800106c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4809      	ldr	r0, [pc, #36]	; (8000a44 <MX_I2C1_Init+0x74>)
 8000a1e:	f003 f8c3 	bl	8003ba8 <HAL_I2CEx_ConfigAnalogFilter>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d001      	beq.n	8000a2c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a28:	f000 fb20 	bl	800106c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	4805      	ldr	r0, [pc, #20]	; (8000a44 <MX_I2C1_Init+0x74>)
 8000a30:	f003 f905 	bl	8003c3e <HAL_I2CEx_ConfigDigitalFilter>
 8000a34:	4603      	mov	r3, r0
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d001      	beq.n	8000a3e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a3a:	f000 fb17 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a3e:	bf00      	nop
 8000a40:	bd80      	pop	{r7, pc}
 8000a42:	bf00      	nop
 8000a44:	20000350 	.word	0x20000350
 8000a48:	40005400 	.word	0x40005400
 8000a4c:	20404768 	.word	0x20404768

08000a50 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b08a      	sub	sp, #40	; 0x28
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a58:	f107 0314 	add.w	r3, r7, #20
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
 8000a62:	609a      	str	r2, [r3, #8]
 8000a64:	60da      	str	r2, [r3, #12]
 8000a66:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	4a1f      	ldr	r2, [pc, #124]	; (8000aec <HAL_I2C_MspInit+0x9c>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d138      	bne.n	8000ae4 <HAL_I2C_MspInit+0x94>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a72:	4b1f      	ldr	r3, [pc, #124]	; (8000af0 <HAL_I2C_MspInit+0xa0>)
 8000a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a76:	4a1e      	ldr	r2, [pc, #120]	; (8000af0 <HAL_I2C_MspInit+0xa0>)
 8000a78:	f043 0302 	orr.w	r3, r3, #2
 8000a7c:	6313      	str	r3, [r2, #48]	; 0x30
 8000a7e:	4b1c      	ldr	r3, [pc, #112]	; (8000af0 <HAL_I2C_MspInit+0xa0>)
 8000a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a82:	f003 0302 	and.w	r3, r3, #2
 8000a86:	613b      	str	r3, [r7, #16]
 8000a88:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a90:	2312      	movs	r3, #18
 8000a92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a94:	2300      	movs	r3, #0
 8000a96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a98:	2303      	movs	r3, #3
 8000a9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000a9c:	2304      	movs	r3, #4
 8000a9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aa0:	f107 0314 	add.w	r3, r7, #20
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4813      	ldr	r0, [pc, #76]	; (8000af4 <HAL_I2C_MspInit+0xa4>)
 8000aa8:	f001 fc52 	bl	8002350 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aac:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <HAL_I2C_MspInit+0xa0>)
 8000aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab0:	4a0f      	ldr	r2, [pc, #60]	; (8000af0 <HAL_I2C_MspInit+0xa0>)
 8000ab2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ab6:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab8:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <HAL_I2C_MspInit+0xa0>)
 8000aba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ac0:	60fb      	str	r3, [r7, #12]
 8000ac2:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	201f      	movs	r0, #31
 8000aca:	f001 fb6a 	bl	80021a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000ace:	201f      	movs	r0, #31
 8000ad0:	f001 fb83 	bl	80021da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	2020      	movs	r0, #32
 8000ada:	f001 fb62 	bl	80021a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000ade:	2020      	movs	r0, #32
 8000ae0:	f001 fb7b 	bl	80021da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ae4:	bf00      	nop
 8000ae6:	3728      	adds	r7, #40	; 0x28
 8000ae8:	46bd      	mov	sp, r7
 8000aea:	bd80      	pop	{r7, pc}
 8000aec:	40005400 	.word	0x40005400
 8000af0:	40023800 	.word	0x40023800
 8000af4:	40020400 	.word	0x40020400

08000af8 <ColorsGenerator>:
 *      Author: Konstanty
 */
#include "led.h"


void ColorsGenerator(LED_HandleTypeDef* led, float rgb_duty){
 8000af8:	b480      	push	{r7}
 8000afa:	b083      	sub	sp, #12
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	ed87 0a00 	vstr	s0, [r7]
	led->duty_B = rgb_duty*led->B;
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	ed93 7a02 	vldr	s14, [r3, #8]
 8000b0a:	edd7 7a00 	vldr	s15, [r7]
 8000b0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	edc3 7a05 	vstr	s15, [r3, #20]
	led->duty_G = rgb_duty*led->G;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	ed93 7a01 	vldr	s14, [r3, #4]
 8000b1e:	edd7 7a00 	vldr	s15, [r7]
 8000b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	edc3 7a04 	vstr	s15, [r3, #16]
	led->duty_R = rgb_duty*led->R;
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	ed93 7a00 	vldr	s14, [r3]
 8000b32:	edd7 7a00 	vldr	s15, [r7]
 8000b36:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	edc3 7a03 	vstr	s15, [r3, #12]
};
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr

08000b4c <HAL_UART_RxCpltCallback>:
    		};



void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b084      	sub	sp, #16
 8000b50:	af02      	add	r7, sp, #8
 8000b52:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	4a3e      	ldr	r2, [pc, #248]	; (8000c54 <HAL_UART_RxCpltCallback+0x108>)
 8000b5a:	4293      	cmp	r3, r2
 8000b5c:	d175      	bne.n	8000c4a <HAL_UART_RxCpltCallback+0xfe>
	{
		if(kolor[0]=='R' && kolor[4]=='G' && kolor[8]=='B' )
 8000b5e:	4b3e      	ldr	r3, [pc, #248]	; (8000c58 <HAL_UART_RxCpltCallback+0x10c>)
 8000b60:	781b      	ldrb	r3, [r3, #0]
 8000b62:	2b52      	cmp	r3, #82	; 0x52
 8000b64:	d154      	bne.n	8000c10 <HAL_UART_RxCpltCallback+0xc4>
 8000b66:	4b3c      	ldr	r3, [pc, #240]	; (8000c58 <HAL_UART_RxCpltCallback+0x10c>)
 8000b68:	791b      	ldrb	r3, [r3, #4]
 8000b6a:	2b47      	cmp	r3, #71	; 0x47
 8000b6c:	d150      	bne.n	8000c10 <HAL_UART_RxCpltCallback+0xc4>
 8000b6e:	4b3a      	ldr	r3, [pc, #232]	; (8000c58 <HAL_UART_RxCpltCallback+0x10c>)
 8000b70:	7a1b      	ldrb	r3, [r3, #8]
 8000b72:	2b42      	cmp	r3, #66	; 0x42
 8000b74:	d14c      	bne.n	8000c10 <HAL_UART_RxCpltCallback+0xc4>
		{
		  sscanf(kolor,"R%dG%dB%d",&pulseR,&pulseG,&pulseB);
 8000b76:	4b39      	ldr	r3, [pc, #228]	; (8000c5c <HAL_UART_RxCpltCallback+0x110>)
 8000b78:	9300      	str	r3, [sp, #0]
 8000b7a:	4b39      	ldr	r3, [pc, #228]	; (8000c60 <HAL_UART_RxCpltCallback+0x114>)
 8000b7c:	4a39      	ldr	r2, [pc, #228]	; (8000c64 <HAL_UART_RxCpltCallback+0x118>)
 8000b7e:	493a      	ldr	r1, [pc, #232]	; (8000c68 <HAL_UART_RxCpltCallback+0x11c>)
 8000b80:	4835      	ldr	r0, [pc, #212]	; (8000c58 <HAL_UART_RxCpltCallback+0x10c>)
 8000b82:	f007 f9b5 	bl	8007ef0 <siscanf>
		  if(pulseR >=0 && pulseR <=100)
 8000b86:	4b37      	ldr	r3, [pc, #220]	; (8000c64 <HAL_UART_RxCpltCallback+0x118>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	db10      	blt.n	8000bb0 <HAL_UART_RxCpltCallback+0x64>
 8000b8e:	4b35      	ldr	r3, [pc, #212]	; (8000c64 <HAL_UART_RxCpltCallback+0x118>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	2b64      	cmp	r3, #100	; 0x64
 8000b94:	dc0c      	bgt.n	8000bb0 <HAL_UART_RxCpltCallback+0x64>
		  {
			  led.R = (float)(pulseR/100.0f);
 8000b96:	4b33      	ldr	r3, [pc, #204]	; (8000c64 <HAL_UART_RxCpltCallback+0x118>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	ee07 3a90 	vmov	s15, r3
 8000b9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ba2:	eddf 6a32 	vldr	s13, [pc, #200]	; 8000c6c <HAL_UART_RxCpltCallback+0x120>
 8000ba6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000baa:	4b31      	ldr	r3, [pc, #196]	; (8000c70 <HAL_UART_RxCpltCallback+0x124>)
 8000bac:	edc3 7a00 	vstr	s15, [r3]

			  //HAL_UART_Receive_IT(&huart3, (uint8_t*)on, 3);
		  }
		  if(pulseG >=0 && pulseG <=100)
 8000bb0:	4b2b      	ldr	r3, [pc, #172]	; (8000c60 <HAL_UART_RxCpltCallback+0x114>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	db10      	blt.n	8000bda <HAL_UART_RxCpltCallback+0x8e>
 8000bb8:	4b29      	ldr	r3, [pc, #164]	; (8000c60 <HAL_UART_RxCpltCallback+0x114>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	2b64      	cmp	r3, #100	; 0x64
 8000bbe:	dc0c      	bgt.n	8000bda <HAL_UART_RxCpltCallback+0x8e>
		  {
		  	  led.G = (float)(pulseG/100.0f);
 8000bc0:	4b27      	ldr	r3, [pc, #156]	; (8000c60 <HAL_UART_RxCpltCallback+0x114>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	ee07 3a90 	vmov	s15, r3
 8000bc8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bcc:	eddf 6a27 	vldr	s13, [pc, #156]	; 8000c6c <HAL_UART_RxCpltCallback+0x120>
 8000bd0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bd4:	4b26      	ldr	r3, [pc, #152]	; (8000c70 <HAL_UART_RxCpltCallback+0x124>)
 8000bd6:	edc3 7a01 	vstr	s15, [r3, #4]

		  	  //HAL_UART_Receive_IT(&huart3, (uint8_t*)on, 3);
		  }
		  if(pulseB >=0 && pulseB <=100)
 8000bda:	4b20      	ldr	r3, [pc, #128]	; (8000c5c <HAL_UART_RxCpltCallback+0x110>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	db10      	blt.n	8000c04 <HAL_UART_RxCpltCallback+0xb8>
 8000be2:	4b1e      	ldr	r3, [pc, #120]	; (8000c5c <HAL_UART_RxCpltCallback+0x110>)
 8000be4:	681b      	ldr	r3, [r3, #0]
 8000be6:	2b64      	cmp	r3, #100	; 0x64
 8000be8:	dc0c      	bgt.n	8000c04 <HAL_UART_RxCpltCallback+0xb8>
		  {
		  	  led.B = (float)(pulseB/100.0f);
 8000bea:	4b1c      	ldr	r3, [pc, #112]	; (8000c5c <HAL_UART_RxCpltCallback+0x110>)
 8000bec:	681b      	ldr	r3, [r3, #0]
 8000bee:	ee07 3a90 	vmov	s15, r3
 8000bf2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000bf6:	eddf 6a1d 	vldr	s13, [pc, #116]	; 8000c6c <HAL_UART_RxCpltCallback+0x120>
 8000bfa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bfe:	4b1c      	ldr	r3, [pc, #112]	; (8000c70 <HAL_UART_RxCpltCallback+0x124>)
 8000c00:	edc3 7a02 	vstr	s15, [r3, #8]

		  	  //HAL_UART_Receive_IT(&huart3, (uint8_t*)on, 3);
		  }
		  HAL_UART_Receive_IT(&huart3, (uint8_t*)on, 3);
 8000c04:	2203      	movs	r2, #3
 8000c06:	491b      	ldr	r1, [pc, #108]	; (8000c74 <HAL_UART_RxCpltCallback+0x128>)
 8000c08:	481b      	ldr	r0, [pc, #108]	; (8000c78 <HAL_UART_RxCpltCallback+0x12c>)
 8000c0a:	f005 fc3a 	bl	8006482 <HAL_UART_Receive_IT>
 8000c0e:	e00a      	b.n	8000c26 <HAL_UART_RxCpltCallback+0xda>

		}
		else
		{
			HAL_UART_Transmit(huart, erros, strlen(erros), 1000);
 8000c10:	481a      	ldr	r0, [pc, #104]	; (8000c7c <HAL_UART_RxCpltCallback+0x130>)
 8000c12:	f7ff fb15 	bl	8000240 <strlen>
 8000c16:	4603      	mov	r3, r0
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c1e:	4917      	ldr	r1, [pc, #92]	; (8000c7c <HAL_UART_RxCpltCallback+0x130>)
 8000c20:	6878      	ldr	r0, [r7, #4]
 8000c22:	f005 fb9b 	bl	800635c <HAL_UART_Transmit>
		}


		if(on[0] == 'O' && on[1] == 'N')
 8000c26:	4b13      	ldr	r3, [pc, #76]	; (8000c74 <HAL_UART_RxCpltCallback+0x128>)
 8000c28:	781b      	ldrb	r3, [r3, #0]
 8000c2a:	2b4f      	cmp	r3, #79	; 0x4f
 8000c2c:	d10d      	bne.n	8000c4a <HAL_UART_RxCpltCallback+0xfe>
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <HAL_UART_RxCpltCallback+0x128>)
 8000c30:	785b      	ldrb	r3, [r3, #1]
 8000c32:	2b4e      	cmp	r3, #78	; 0x4e
 8000c34:	d109      	bne.n	8000c4a <HAL_UART_RxCpltCallback+0xfe>
		{
		  sscanf(on,"ON%d",&akcja);
 8000c36:	4a12      	ldr	r2, [pc, #72]	; (8000c80 <HAL_UART_RxCpltCallback+0x134>)
 8000c38:	4912      	ldr	r1, [pc, #72]	; (8000c84 <HAL_UART_RxCpltCallback+0x138>)
 8000c3a:	480e      	ldr	r0, [pc, #56]	; (8000c74 <HAL_UART_RxCpltCallback+0x128>)
 8000c3c:	f007 f958 	bl	8007ef0 <siscanf>
		  HAL_UART_Receive_IT(&huart3, (uint8_t*)on, 3);
 8000c40:	2203      	movs	r2, #3
 8000c42:	490c      	ldr	r1, [pc, #48]	; (8000c74 <HAL_UART_RxCpltCallback+0x128>)
 8000c44:	480c      	ldr	r0, [pc, #48]	; (8000c78 <HAL_UART_RxCpltCallback+0x12c>)
 8000c46:	f005 fc1c 	bl	8006482 <HAL_UART_Receive_IT>
		}

	}
}
 8000c4a:	bf00      	nop
 8000c4c:	3708      	adds	r7, #8
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40004800 	.word	0x40004800
 8000c58:	200003cc 	.word	0x200003cc
 8000c5c:	20000210 	.word	0x20000210
 8000c60:	2000020c 	.word	0x2000020c
 8000c64:	20000208 	.word	0x20000208
 8000c68:	08009090 	.word	0x08009090
 8000c6c:	42c80000 	.word	0x42c80000
 8000c70:	20000038 	.word	0x20000038
 8000c74:	200003b8 	.word	0x200003b8
 8000c78:	20000470 	.word	0x20000470
 8000c7c:	20000058 	.word	0x20000058
 8000c80:	20000000 	.word	0x20000000
 8000c84:	0800909c 	.word	0x0800909c

08000c88 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c98:	f040 80c8 	bne.w	8000e2c <HAL_TIM_PeriodElapsedCallback+0x1a4>
//			pulse=0;
//			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,pulse);
//			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,pulse);
//		}

		if(akcja == START)
 8000c9c:	4b65      	ldr	r3, [pc, #404]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	2b01      	cmp	r3, #1
 8000ca2:	f040 8085 	bne.w	8000db0 <HAL_TIM_PeriodElapsedCallback+0x128>
		{
		LightIntensity = BH1750_ReadLux(&hbh1750_1);
 8000ca6:	4864      	ldr	r0, [pc, #400]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8000ca8:	f7ff fd5e 	bl	8000768 <BH1750_ReadLux>
 8000cac:	eef0 7a40 	vmov.f32	s15, s0
 8000cb0:	4b62      	ldr	r3, [pc, #392]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000cb2:	edc3 7a00 	vstr	s15, [r3]
		arm_fir_f32(&AnalogInFir,&LightIntensity,&LightIntensity_Fir,1);
 8000cb6:	2301      	movs	r3, #1
 8000cb8:	4a61      	ldr	r2, [pc, #388]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000cba:	4960      	ldr	r1, [pc, #384]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000cbc:	4861      	ldr	r0, [pc, #388]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8000cbe:	f006 fe23 	bl	8007908 <arm_fir_f32>
		light = LightIntensity_Fir*100;
 8000cc2:	4b5f      	ldr	r3, [pc, #380]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8000cc4:	edd3 7a00 	vldr	s15, [r3]
 8000cc8:	ed9f 7a5f 	vldr	s14, [pc, #380]	; 8000e48 <HAL_TIM_PeriodElapsedCallback+0x1c0>
 8000ccc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000cd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000cd4:	ee17 2a90 	vmov	r2, s15
 8000cd8:	4b5c      	ldr	r3, [pc, #368]	; (8000e4c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000cda:	601a      	str	r2, [r3, #0]

		sprintf(komunikat,"%d.%d\r\n",light/100,light%100);
 8000cdc:	4b5b      	ldr	r3, [pc, #364]	; (8000e4c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	4a5b      	ldr	r2, [pc, #364]	; (8000e50 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000ce2:	fb82 1203 	smull	r1, r2, r2, r3
 8000ce6:	1152      	asrs	r2, r2, #5
 8000ce8:	17db      	asrs	r3, r3, #31
 8000cea:	1ad0      	subs	r0, r2, r3
 8000cec:	4b57      	ldr	r3, [pc, #348]	; (8000e4c <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	4a57      	ldr	r2, [pc, #348]	; (8000e50 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8000cf2:	fb82 1203 	smull	r1, r2, r2, r3
 8000cf6:	1151      	asrs	r1, r2, #5
 8000cf8:	17da      	asrs	r2, r3, #31
 8000cfa:	1a8a      	subs	r2, r1, r2
 8000cfc:	2164      	movs	r1, #100	; 0x64
 8000cfe:	fb01 f202 	mul.w	r2, r1, r2
 8000d02:	1a9a      	subs	r2, r3, r2
 8000d04:	4613      	mov	r3, r2
 8000d06:	4602      	mov	r2, r0
 8000d08:	4952      	ldr	r1, [pc, #328]	; (8000e54 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8000d0a:	4853      	ldr	r0, [pc, #332]	; (8000e58 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000d0c:	f007 f8d0 	bl	8007eb0 <siprintf>
		HAL_UART_Transmit(&huart3, komunikat, strlen(komunikat), 1000);
 8000d10:	4851      	ldr	r0, [pc, #324]	; (8000e58 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000d12:	f7ff fa95 	bl	8000240 <strlen>
 8000d16:	4603      	mov	r3, r0
 8000d18:	b29a      	uxth	r2, r3
 8000d1a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d1e:	494e      	ldr	r1, [pc, #312]	; (8000e58 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8000d20:	484e      	ldr	r0, [pc, #312]	; (8000e5c <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8000d22:	f005 fb1b 	bl	800635c <HAL_UART_Transmit>
		duty = Reg_SignalControl(&reg_I, wartosc_zadana, LightIntensity);
 8000d26:	4b4e      	ldr	r3, [pc, #312]	; (8000e60 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8000d28:	edd3 7a00 	vldr	s15, [r3]
 8000d2c:	4b43      	ldr	r3, [pc, #268]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8000d2e:	ed93 7a00 	vldr	s14, [r3]
 8000d32:	eef0 0a47 	vmov.f32	s1, s14
 8000d36:	eeb0 0a67 	vmov.f32	s0, s15
 8000d3a:	484a      	ldr	r0, [pc, #296]	; (8000e64 <HAL_TIM_PeriodElapsedCallback+0x1dc>)
 8000d3c:	f000 f99c 	bl	8001078 <Reg_SignalControl>
 8000d40:	eef0 7a40 	vmov.f32	s15, s0
 8000d44:	4b48      	ldr	r3, [pc, #288]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000d46:	edc3 7a00 	vstr	s15, [r3]
		ColorsGenerator(&led, duty);
 8000d4a:	4b47      	ldr	r3, [pc, #284]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000d4c:	edd3 7a00 	vldr	s15, [r3]
 8000d50:	eeb0 0a67 	vmov.f32	s0, s15
 8000d54:	4845      	ldr	r0, [pc, #276]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000d56:	f7ff fecf 	bl	8000af8 <ColorsGenerator>


		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,(uint32_t)((led.duty_R)*10));
 8000d5a:	4b44      	ldr	r3, [pc, #272]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000d5c:	edd3 7a03 	vldr	s15, [r3, #12]
 8000d60:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000d64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d68:	4b41      	ldr	r3, [pc, #260]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d70:	ee17 2a90 	vmov	r2, s15
 8000d74:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,(uint32_t)((led.duty_G)*10));
 8000d76:	4b3d      	ldr	r3, [pc, #244]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000d78:	edd3 7a04 	vldr	s15, [r3, #16]
 8000d7c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000d80:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d84:	4b3a      	ldr	r3, [pc, #232]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000d8c:	ee17 2a90 	vmov	r2, s15
 8000d90:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,(uint32_t)((led.duty_B)*10));
 8000d92:	4b36      	ldr	r3, [pc, #216]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000d94:	edd3 7a05 	vldr	s15, [r3, #20]
 8000d98:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000d9c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000da0:	4b33      	ldr	r3, [pc, #204]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000da8:	ee17 2a90 	vmov	r2, s15
 8000dac:	63da      	str	r2, [r3, #60]	; 0x3c
		}


	}

}
 8000dae:	e03d      	b.n	8000e2c <HAL_TIM_PeriodElapsedCallback+0x1a4>
		else if(akcja == STOP)
 8000db0:	4b20      	ldr	r3, [pc, #128]	; (8000e34 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d139      	bne.n	8000e2c <HAL_TIM_PeriodElapsedCallback+0x1a4>
			led.duty_R = 0.0f;
 8000db8:	4b2c      	ldr	r3, [pc, #176]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000dba:	f04f 0200 	mov.w	r2, #0
 8000dbe:	60da      	str	r2, [r3, #12]
			led.duty_G = 0.0f;
 8000dc0:	4b2a      	ldr	r3, [pc, #168]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000dc2:	f04f 0200 	mov.w	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
			led.duty_B = 0.0f;
 8000dc8:	4b28      	ldr	r3, [pc, #160]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000dca:	f04f 0200 	mov.w	r2, #0
 8000dce:	615a      	str	r2, [r3, #20]
			duty = 0.0f;
 8000dd0:	4b25      	ldr	r3, [pc, #148]	; (8000e68 <HAL_TIM_PeriodElapsedCallback+0x1e0>)
 8000dd2:	f04f 0200 	mov.w	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,(uint32_t)((led.duty_R)*10));
 8000dd8:	4b24      	ldr	r3, [pc, #144]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000dda:	edd3 7a03 	vldr	s15, [r3, #12]
 8000dde:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000de2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000de6:	4b22      	ldr	r3, [pc, #136]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000dee:	ee17 2a90 	vmov	r2, s15
 8000df2:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,(uint32_t)((led.duty_G)*10));
 8000df4:	4b1d      	ldr	r3, [pc, #116]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000df6:	edd3 7a04 	vldr	s15, [r3, #16]
 8000dfa:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000dfe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e02:	4b1b      	ldr	r3, [pc, #108]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e0a:	ee17 2a90 	vmov	r2, s15
 8000e0e:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,(uint32_t)((led.duty_B)*10));
 8000e10:	4b16      	ldr	r3, [pc, #88]	; (8000e6c <HAL_TIM_PeriodElapsedCallback+0x1e4>)
 8000e12:	edd3 7a05 	vldr	s15, [r3, #20]
 8000e16:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8000e1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e1e:	4b14      	ldr	r3, [pc, #80]	; (8000e70 <HAL_TIM_PeriodElapsedCallback+0x1e8>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e26:	ee17 2a90 	vmov	r2, s15
 8000e2a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8000e2c:	bf00      	nop
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}
 8000e34:	20000000 	.word	0x20000000
 8000e38:	20000008 	.word	0x20000008
 8000e3c:	20000050 	.word	0x20000050
 8000e40:	20000204 	.word	0x20000204
 8000e44:	200003bc 	.word	0x200003bc
 8000e48:	42c80000 	.word	0x42c80000
 8000e4c:	20000054 	.word	0x20000054
 8000e50:	51eb851f 	.word	0x51eb851f
 8000e54:	080090a4 	.word	0x080090a4
 8000e58:	200003a0 	.word	0x200003a0
 8000e5c:	20000470 	.word	0x20000470
 8000e60:	20000004 	.word	0x20000004
 8000e64:	20000014 	.word	0x20000014
 8000e68:	20000200 	.word	0x20000200
 8000e6c:	20000038 	.word	0x20000038
 8000e70:	200003d8 	.word	0x200003d8

08000e74 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b0a2      	sub	sp, #136	; 0x88
 8000e78:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e7a:	f000 fc8e 	bl	800179a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e7e:	f000 f85f 	bl	8000f40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e82:	f7ff fca1 	bl	80007c8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000e86:	f000 fbe3 	bl	8001650 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 8000e8a:	f7ff fbad 	bl	80005e8 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000e8e:	f000 fabb 	bl	8001408 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000e92:	f000 fa6b 	bl	800136c <MX_TIM2_Init>
  MX_I2C1_Init();
 8000e96:	f7ff fd9b 	bl	80009d0 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  //Inicjalizacja
   arm_fir_init_f32(&AnalogInFir, FirNumTaps, FirB,FirX,1);
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	4b1f      	ldr	r3, [pc, #124]	; (8000f1c <main+0xa8>)
 8000ea0:	4a1f      	ldr	r2, [pc, #124]	; (8000f20 <main+0xac>)
 8000ea2:	213a      	movs	r1, #58	; 0x3a
 8000ea4:	481f      	ldr	r0, [pc, #124]	; (8000f24 <main+0xb0>)
 8000ea6:	f006 fd21 	bl	80078ec <arm_fir_init_f32>
   uint8_t TrybPracy = BH1750_CONTINOUS_H_RES_MODE;
 8000eaa:	2310      	movs	r3, #16
 8000eac:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
   BH1750_Init(&hbh1750_1, TrybPracy);
 8000eb0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	481c      	ldr	r0, [pc, #112]	; (8000f28 <main+0xb4>)
 8000eb8:	f7ff fc30 	bl	800071c <BH1750_Init>
   HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	481b      	ldr	r0, [pc, #108]	; (8000f2c <main+0xb8>)
 8000ec0:	f004 f974 	bl	80051ac <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8000ec4:	2104      	movs	r1, #4
 8000ec6:	4819      	ldr	r0, [pc, #100]	; (8000f2c <main+0xb8>)
 8000ec8:	f004 f970 	bl	80051ac <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8000ecc:	2108      	movs	r1, #8
 8000ece:	4817      	ldr	r0, [pc, #92]	; (8000f2c <main+0xb8>)
 8000ed0:	f004 f96c 	bl	80051ac <HAL_TIM_PWM_Start>
   HAL_TIM_Base_Start_IT(&htim2);
 8000ed4:	4816      	ldr	r0, [pc, #88]	; (8000f30 <main+0xbc>)
 8000ed6:	f004 f88f 	bl	8004ff8 <HAL_TIM_Base_Start_IT>

   char witaj[120] = "Wybierz kolor(wzor: R<000 lub 100>G<000 lub 100>B<000 lub 100>) i nastepnie wlacz uklad (ON lub OF)\r\n";
 8000eda:	4a16      	ldr	r2, [pc, #88]	; (8000f34 <main+0xc0>)
 8000edc:	1d3b      	adds	r3, r7, #4
 8000ede:	4611      	mov	r1, r2
 8000ee0:	2266      	movs	r2, #102	; 0x66
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f006 ffce 	bl	8007e84 <memcpy>
 8000ee8:	f107 036a 	add.w	r3, r7, #106	; 0x6a
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	821a      	strh	r2, [r3, #16]
   HAL_UART_Transmit(&huart3,witaj,strlen(witaj),1000);
 8000ef8:	1d3b      	adds	r3, r7, #4
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff f9a0 	bl	8000240 <strlen>
 8000f00:	4603      	mov	r3, r0
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	1d39      	adds	r1, r7, #4
 8000f06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f0a:	480b      	ldr	r0, [pc, #44]	; (8000f38 <main+0xc4>)
 8000f0c:	f005 fa26 	bl	800635c <HAL_UART_Transmit>
   HAL_UART_Receive_IT(&huart3, (uint8_t*)kolor, 12);
 8000f10:	220c      	movs	r2, #12
 8000f12:	490a      	ldr	r1, [pc, #40]	; (8000f3c <main+0xc8>)
 8000f14:	4808      	ldr	r0, [pc, #32]	; (8000f38 <main+0xc4>)
 8000f16:	f005 fab4 	bl	8006482 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f1a:	e7fe      	b.n	8000f1a <main+0xa6>
 8000f1c:	20000214 	.word	0x20000214
 8000f20:	2000008c 	.word	0x2000008c
 8000f24:	200003bc 	.word	0x200003bc
 8000f28:	20000008 	.word	0x20000008
 8000f2c:	200003d8 	.word	0x200003d8
 8000f30:	20000424 	.word	0x20000424
 8000f34:	080090ac 	.word	0x080090ac
 8000f38:	20000470 	.word	0x20000470
 8000f3c:	200003cc 	.word	0x200003cc

08000f40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b0b8      	sub	sp, #224	; 0xe0
 8000f44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f46:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000f4a:	2234      	movs	r2, #52	; 0x34
 8000f4c:	2100      	movs	r1, #0
 8000f4e:	4618      	mov	r0, r3
 8000f50:	f006 ffa6 	bl	8007ea0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f54:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f64:	f107 0308 	add.w	r3, r7, #8
 8000f68:	2290      	movs	r2, #144	; 0x90
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f006 ff97 	bl	8007ea0 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f72:	f002 feb1 	bl	8003cd8 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f76:	4b3b      	ldr	r3, [pc, #236]	; (8001064 <SystemClock_Config+0x124>)
 8000f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7a:	4a3a      	ldr	r2, [pc, #232]	; (8001064 <SystemClock_Config+0x124>)
 8000f7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f80:	6413      	str	r3, [r2, #64]	; 0x40
 8000f82:	4b38      	ldr	r3, [pc, #224]	; (8001064 <SystemClock_Config+0x124>)
 8000f84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f8e:	4b36      	ldr	r3, [pc, #216]	; (8001068 <SystemClock_Config+0x128>)
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	4a35      	ldr	r2, [pc, #212]	; (8001068 <SystemClock_Config+0x128>)
 8000f94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f98:	6013      	str	r3, [r2, #0]
 8000f9a:	4b33      	ldr	r3, [pc, #204]	; (8001068 <SystemClock_Config+0x128>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fa2:	603b      	str	r3, [r7, #0]
 8000fa4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000fac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000fb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fc2:	2304      	movs	r3, #4
 8000fc4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 8000fc8:	23d8      	movs	r3, #216	; 0xd8
 8000fca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fce:	2302      	movs	r3, #2
 8000fd0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fd4:	2304      	movs	r3, #4
 8000fd6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f002 fed7 	bl	8003d98 <HAL_RCC_OscConfig>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000ff0:	f000 f83c 	bl	800106c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000ff4:	f002 fe80 	bl	8003cf8 <HAL_PWREx_EnableOverDrive>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ffe:	f000 f835 	bl	800106c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001002:	230f      	movs	r3, #15
 8001004:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001008:	2302      	movs	r3, #2
 800100a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800100e:	2300      	movs	r3, #0
 8001010:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001014:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001018:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800101c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001020:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001024:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001028:	2107      	movs	r1, #7
 800102a:	4618      	mov	r0, r3
 800102c:	f003 f962 	bl	80042f4 <HAL_RCC_ClockConfig>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8001036:	f000 f819 	bl	800106c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1;
 800103a:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 800103e:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001040:	2300      	movs	r3, #0
 8001042:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001044:	2300      	movs	r3, #0
 8001046:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001048:	f107 0308 	add.w	r3, r7, #8
 800104c:	4618      	mov	r0, r3
 800104e:	f003 fb53 	bl	80046f8 <HAL_RCCEx_PeriphCLKConfig>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8001058:	f000 f808 	bl	800106c <Error_Handler>
  }
}
 800105c:	bf00      	nop
 800105e:	37e0      	adds	r7, #224	; 0xe0
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40023800 	.word	0x40023800
 8001068:	40007000 	.word	0x40007000

0800106c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001070:	b672      	cpsid	i
}
 8001072:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001074:	e7fe      	b.n	8001074 <Error_Handler+0x8>
	...

08001078 <Reg_SignalControl>:
 *      Author: Konstanty
 */
#include "regulator.h"

float Reg_SignalControl(regulator_Handle_TypeDef* Reg,float y_ref, float pomiar)
{
 8001078:	b480      	push	{r7}
 800107a:	b089      	sub	sp, #36	; 0x24
 800107c:	af00      	add	r7, sp, #0
 800107e:	60f8      	str	r0, [r7, #12]
 8001080:	ed87 0a02 	vstr	s0, [r7, #8]
 8001084:	edc7 0a01 	vstr	s1, [r7, #4]
	float e;
	float u;
	float u_sat;
	float N=0.01f;
 8001088:	4b4e      	ldr	r3, [pc, #312]	; (80011c4 <Reg_SignalControl+0x14c>)
 800108a:	61bb      	str	r3, [r7, #24]
	e = y_ref - pomiar;
 800108c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001090:	edd7 7a01 	vldr	s15, [r7, #4]
 8001094:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001098:	edc7 7a05 	vstr	s15, [r7, #20]
			Reg->e_int += Reg->Ki*Reg->Ts*e;
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	ed93 7a04 	vldr	s14, [r3, #16]
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	edd3 6a00 	vldr	s13, [r3]
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	edd3 7a03 	vldr	s15, [r3, #12]
 80010ae:	ee66 6aa7 	vmul.f32	s13, s13, s15
 80010b2:	edd7 7a05 	vldr	s15, [r7, #20]
 80010b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	edc3 7a04 	vstr	s15, [r3, #16]
			Reg->e_der = (Reg->Kd*N)*(e-Reg->e_prev) + (1.0f - N*Reg->Ts)*Reg->e_der;
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	ed93 7a01 	vldr	s14, [r3, #4]
 80010ca:	edd7 7a06 	vldr	s15, [r7, #24]
 80010ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010d2:	68fb      	ldr	r3, [r7, #12]
 80010d4:	edd3 7a06 	vldr	s15, [r3, #24]
 80010d8:	edd7 6a05 	vldr	s13, [r7, #20]
 80010dc:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80010e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	edd3 6a03 	vldr	s13, [r3, #12]
 80010ea:	edd7 7a06 	vldr	s15, [r7, #24]
 80010ee:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80010f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80010f6:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80010fa:	68fb      	ldr	r3, [r7, #12]
 80010fc:	edd3 7a05 	vldr	s15, [r3, #20]
 8001100:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001104:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	edc3 7a05 	vstr	s15, [r3, #20]
			Reg->e_prev = e;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	697a      	ldr	r2, [r7, #20]
 8001112:	619a      	str	r2, [r3, #24]

			u = Reg->e_int + Reg->e_der + (Reg->Kp*e);
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	ed93 7a04 	vldr	s14, [r3, #16]
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001120:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	edd3 6a02 	vldr	s13, [r3, #8]
 800112a:	edd7 7a05 	vldr	s15, [r7, #20]
 800112e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001132:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001136:	edc7 7a04 	vstr	s15, [r7, #16]

			if(u > Reg->limitup)
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	edd3 7a08 	vldr	s15, [r3, #32]
 8001140:	ed97 7a04 	vldr	s14, [r7, #16]
 8001144:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001148:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800114c:	dd03      	ble.n	8001156 <Reg_SignalControl+0xde>
			{
			  u_sat = Reg->limitup;
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	6a1b      	ldr	r3, [r3, #32]
 8001152:	61fb      	str	r3, [r7, #28]
 8001154:	e00f      	b.n	8001176 <Reg_SignalControl+0xfe>
			}
			else if(u < Reg->limitdown)
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	edd3 7a07 	vldr	s15, [r3, #28]
 800115c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001160:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001168:	d503      	bpl.n	8001172 <Reg_SignalControl+0xfa>
			{
			  u_sat = Reg->limitdown;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	69db      	ldr	r3, [r3, #28]
 800116e:	61fb      	str	r3, [r7, #28]
 8001170:	e001      	b.n	8001176 <Reg_SignalControl+0xfe>
			}
			else
			{
			  u_sat = u;
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	61fb      	str	r3, [r7, #28]
			}

			if(u!=u_sat)
 8001176:	ed97 7a04 	vldr	s14, [r7, #16]
 800117a:	edd7 7a07 	vldr	s15, [r7, #28]
 800117e:	eeb4 7a67 	vcmp.f32	s14, s15
 8001182:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001186:	d013      	beq.n	80011b0 <Reg_SignalControl+0x138>
			{
			  Reg->e_int -=Reg->Ki*Reg->Ts*e;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	ed93 7a04 	vldr	s14, [r3, #16]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	edd3 6a00 	vldr	s13, [r3]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	edd3 7a03 	vldr	s15, [r3, #12]
 800119a:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800119e:	edd7 7a05 	vldr	s15, [r7, #20]
 80011a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80011a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	edc3 7a04 	vstr	s15, [r3, #16]
			}
	return u_sat;
 80011b0:	69fb      	ldr	r3, [r7, #28]
 80011b2:	ee07 3a90 	vmov	s15, r3
};
 80011b6:	eeb0 0a67 	vmov.f32	s0, s15
 80011ba:	3724      	adds	r7, #36	; 0x24
 80011bc:	46bd      	mov	sp, r7
 80011be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c2:	4770      	bx	lr
 80011c4:	3c23d70a 	.word	0x3c23d70a

080011c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	b083      	sub	sp, #12
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011ce:	4b0f      	ldr	r3, [pc, #60]	; (800120c <HAL_MspInit+0x44>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	4a0e      	ldr	r2, [pc, #56]	; (800120c <HAL_MspInit+0x44>)
 80011d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011d8:	6413      	str	r3, [r2, #64]	; 0x40
 80011da:	4b0c      	ldr	r3, [pc, #48]	; (800120c <HAL_MspInit+0x44>)
 80011dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e2:	607b      	str	r3, [r7, #4]
 80011e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e6:	4b09      	ldr	r3, [pc, #36]	; (800120c <HAL_MspInit+0x44>)
 80011e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ea:	4a08      	ldr	r2, [pc, #32]	; (800120c <HAL_MspInit+0x44>)
 80011ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011f0:	6453      	str	r3, [r2, #68]	; 0x44
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <HAL_MspInit+0x44>)
 80011f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011fe:	bf00      	nop
 8001200:	370c      	adds	r7, #12
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	40023800 	.word	0x40023800

08001210 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <NMI_Handler+0x4>

08001216 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121a:	e7fe      	b.n	800121a <HardFault_Handler+0x4>

0800121c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <MemManage_Handler+0x4>

08001222 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <BusFault_Handler+0x4>

08001228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <UsageFault_Handler+0x4>

0800122e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800125c:	f000 fada 	bl	8001814 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}

08001264 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001268:	4802      	ldr	r0, [pc, #8]	; (8001274 <ADC_IRQHandler+0x10>)
 800126a:	f000 fb37 	bl	80018dc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000308 	.word	0x20000308

08001278 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800127c:	4802      	ldr	r0, [pc, #8]	; (8001288 <TIM2_IRQHandler+0x10>)
 800127e:	f004 f88f 	bl	80053a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000424 	.word	0x20000424

0800128c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001290:	4802      	ldr	r0, [pc, #8]	; (800129c <TIM3_IRQHandler+0x10>)
 8001292:	f004 f885 	bl	80053a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001296:	bf00      	nop
 8001298:	bd80      	pop	{r7, pc}
 800129a:	bf00      	nop
 800129c:	200003d8 	.word	0x200003d8

080012a0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80012a4:	4802      	ldr	r0, [pc, #8]	; (80012b0 <I2C1_EV_IRQHandler+0x10>)
 80012a6:	f001 fc93 	bl	8002bd0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20000350 	.word	0x20000350

080012b4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80012b8:	4802      	ldr	r0, [pc, #8]	; (80012c4 <I2C1_ER_IRQHandler+0x10>)
 80012ba:	f001 fca3 	bl	8002c04 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80012be:	bf00      	nop
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	20000350 	.word	0x20000350

080012c8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80012cc:	4802      	ldr	r0, [pc, #8]	; (80012d8 <USART3_IRQHandler+0x10>)
 80012ce:	f005 f927 	bl	8006520 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80012d2:	bf00      	nop
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	20000470 	.word	0x20000470

080012dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b086      	sub	sp, #24
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012e4:	4a14      	ldr	r2, [pc, #80]	; (8001338 <_sbrk+0x5c>)
 80012e6:	4b15      	ldr	r3, [pc, #84]	; (800133c <_sbrk+0x60>)
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012ec:	697b      	ldr	r3, [r7, #20]
 80012ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012f0:	4b13      	ldr	r3, [pc, #76]	; (8001340 <_sbrk+0x64>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d102      	bne.n	80012fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012f8:	4b11      	ldr	r3, [pc, #68]	; (8001340 <_sbrk+0x64>)
 80012fa:	4a12      	ldr	r2, [pc, #72]	; (8001344 <_sbrk+0x68>)
 80012fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012fe:	4b10      	ldr	r3, [pc, #64]	; (8001340 <_sbrk+0x64>)
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4413      	add	r3, r2
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	429a      	cmp	r2, r3
 800130a:	d207      	bcs.n	800131c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800130c:	f006 fd90 	bl	8007e30 <__errno>
 8001310:	4603      	mov	r3, r0
 8001312:	220c      	movs	r2, #12
 8001314:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001316:	f04f 33ff 	mov.w	r3, #4294967295
 800131a:	e009      	b.n	8001330 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800131c:	4b08      	ldr	r3, [pc, #32]	; (8001340 <_sbrk+0x64>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001322:	4b07      	ldr	r3, [pc, #28]	; (8001340 <_sbrk+0x64>)
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	4413      	add	r3, r2
 800132a:	4a05      	ldr	r2, [pc, #20]	; (8001340 <_sbrk+0x64>)
 800132c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800132e:	68fb      	ldr	r3, [r7, #12]
}
 8001330:	4618      	mov	r0, r3
 8001332:	3718      	adds	r7, #24
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20080000 	.word	0x20080000
 800133c:	00000400 	.word	0x00000400
 8001340:	200002fc 	.word	0x200002fc
 8001344:	20000508 	.word	0x20000508

08001348 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800134c:	4b06      	ldr	r3, [pc, #24]	; (8001368 <SystemInit+0x20>)
 800134e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001352:	4a05      	ldr	r2, [pc, #20]	; (8001368 <SystemInit+0x20>)
 8001354:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001358:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800135c:	bf00      	nop
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
 8001366:	bf00      	nop
 8001368:	e000ed00 	.word	0xe000ed00

0800136c <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	b088      	sub	sp, #32
 8001370:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001372:	f107 0310 	add.w	r3, r7, #16
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001380:	1d3b      	adds	r3, r7, #4
 8001382:	2200      	movs	r2, #0
 8001384:	601a      	str	r2, [r3, #0]
 8001386:	605a      	str	r2, [r3, #4]
 8001388:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800138a:	4b1d      	ldr	r3, [pc, #116]	; (8001400 <MX_TIM2_Init+0x94>)
 800138c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001390:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 8001392:	4b1b      	ldr	r3, [pc, #108]	; (8001400 <MX_TIM2_Init+0x94>)
 8001394:	226b      	movs	r2, #107	; 0x6b
 8001396:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001398:	4b19      	ldr	r3, [pc, #100]	; (8001400 <MX_TIM2_Init+0x94>)
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 129869;
 800139e:	4b18      	ldr	r3, [pc, #96]	; (8001400 <MX_TIM2_Init+0x94>)
 80013a0:	4a18      	ldr	r2, [pc, #96]	; (8001404 <MX_TIM2_Init+0x98>)
 80013a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a4:	4b16      	ldr	r3, [pc, #88]	; (8001400 <MX_TIM2_Init+0x94>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013aa:	4b15      	ldr	r3, [pc, #84]	; (8001400 <MX_TIM2_Init+0x94>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013b0:	4813      	ldr	r0, [pc, #76]	; (8001400 <MX_TIM2_Init+0x94>)
 80013b2:	f003 fdc9 	bl	8004f48 <HAL_TIM_Base_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80013bc:	f7ff fe56 	bl	800106c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013c6:	f107 0310 	add.w	r3, r7, #16
 80013ca:	4619      	mov	r1, r3
 80013cc:	480c      	ldr	r0, [pc, #48]	; (8001400 <MX_TIM2_Init+0x94>)
 80013ce:	f004 fa1b 	bl	8005808 <HAL_TIM_ConfigClockSource>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80013d8:	f7ff fe48 	bl	800106c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013dc:	2300      	movs	r3, #0
 80013de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e0:	2300      	movs	r3, #0
 80013e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013e4:	1d3b      	adds	r3, r7, #4
 80013e6:	4619      	mov	r1, r3
 80013e8:	4805      	ldr	r0, [pc, #20]	; (8001400 <MX_TIM2_Init+0x94>)
 80013ea:	f004 febd 	bl	8006168 <HAL_TIMEx_MasterConfigSynchronization>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80013f4:	f7ff fe3a 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013f8:	bf00      	nop
 80013fa:	3720      	adds	r7, #32
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000424 	.word	0x20000424
 8001404:	0001fb4d 	.word	0x0001fb4d

08001408 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08e      	sub	sp, #56	; 0x38
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800140e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800141c:	f107 031c 	add.w	r3, r7, #28
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
 8001426:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001428:	463b      	mov	r3, r7
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
 8001434:	611a      	str	r2, [r3, #16]
 8001436:	615a      	str	r2, [r3, #20]
 8001438:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800143a:	4b38      	ldr	r3, [pc, #224]	; (800151c <MX_TIM3_Init+0x114>)
 800143c:	4a38      	ldr	r2, [pc, #224]	; (8001520 <MX_TIM3_Init+0x118>)
 800143e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 107;
 8001440:	4b36      	ldr	r3, [pc, #216]	; (800151c <MX_TIM3_Init+0x114>)
 8001442:	226b      	movs	r2, #107	; 0x6b
 8001444:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001446:	4b35      	ldr	r3, [pc, #212]	; (800151c <MX_TIM3_Init+0x114>)
 8001448:	2200      	movs	r2, #0
 800144a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 800144c:	4b33      	ldr	r3, [pc, #204]	; (800151c <MX_TIM3_Init+0x114>)
 800144e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001452:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001454:	4b31      	ldr	r3, [pc, #196]	; (800151c <MX_TIM3_Init+0x114>)
 8001456:	2200      	movs	r2, #0
 8001458:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800145a:	4b30      	ldr	r3, [pc, #192]	; (800151c <MX_TIM3_Init+0x114>)
 800145c:	2200      	movs	r2, #0
 800145e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001460:	482e      	ldr	r0, [pc, #184]	; (800151c <MX_TIM3_Init+0x114>)
 8001462:	f003 fd71 	bl	8004f48 <HAL_TIM_Base_Init>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800146c:	f7ff fdfe 	bl	800106c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001470:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001474:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001476:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800147a:	4619      	mov	r1, r3
 800147c:	4827      	ldr	r0, [pc, #156]	; (800151c <MX_TIM3_Init+0x114>)
 800147e:	f004 f9c3 	bl	8005808 <HAL_TIM_ConfigClockSource>
 8001482:	4603      	mov	r3, r0
 8001484:	2b00      	cmp	r3, #0
 8001486:	d001      	beq.n	800148c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001488:	f7ff fdf0 	bl	800106c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800148c:	4823      	ldr	r0, [pc, #140]	; (800151c <MX_TIM3_Init+0x114>)
 800148e:	f003 fe2b 	bl	80050e8 <HAL_TIM_PWM_Init>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001498:	f7ff fde8 	bl	800106c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800149c:	2300      	movs	r3, #0
 800149e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014a0:	2300      	movs	r3, #0
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014a4:	f107 031c 	add.w	r3, r7, #28
 80014a8:	4619      	mov	r1, r3
 80014aa:	481c      	ldr	r0, [pc, #112]	; (800151c <MX_TIM3_Init+0x114>)
 80014ac:	f004 fe5c 	bl	8006168 <HAL_TIMEx_MasterConfigSynchronization>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80014b6:	f7ff fdd9 	bl	800106c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ba:	2360      	movs	r3, #96	; 0x60
 80014bc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014c2:	2300      	movs	r3, #0
 80014c4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014c6:	2300      	movs	r3, #0
 80014c8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014ca:	463b      	mov	r3, r7
 80014cc:	2200      	movs	r2, #0
 80014ce:	4619      	mov	r1, r3
 80014d0:	4812      	ldr	r0, [pc, #72]	; (800151c <MX_TIM3_Init+0x114>)
 80014d2:	f004 f885 	bl	80055e0 <HAL_TIM_PWM_ConfigChannel>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d001      	beq.n	80014e0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80014dc:	f7ff fdc6 	bl	800106c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014e0:	463b      	mov	r3, r7
 80014e2:	2204      	movs	r2, #4
 80014e4:	4619      	mov	r1, r3
 80014e6:	480d      	ldr	r0, [pc, #52]	; (800151c <MX_TIM3_Init+0x114>)
 80014e8:	f004 f87a 	bl	80055e0 <HAL_TIM_PWM_ConfigChannel>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80014f2:	f7ff fdbb 	bl	800106c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014f6:	463b      	mov	r3, r7
 80014f8:	2208      	movs	r2, #8
 80014fa:	4619      	mov	r1, r3
 80014fc:	4807      	ldr	r0, [pc, #28]	; (800151c <MX_TIM3_Init+0x114>)
 80014fe:	f004 f86f 	bl	80055e0 <HAL_TIM_PWM_ConfigChannel>
 8001502:	4603      	mov	r3, r0
 8001504:	2b00      	cmp	r3, #0
 8001506:	d001      	beq.n	800150c <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001508:	f7ff fdb0 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800150c:	4803      	ldr	r0, [pc, #12]	; (800151c <MX_TIM3_Init+0x114>)
 800150e:	f000 f849 	bl	80015a4 <HAL_TIM_MspPostInit>

}
 8001512:	bf00      	nop
 8001514:	3738      	adds	r7, #56	; 0x38
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	200003d8 	.word	0x200003d8
 8001520:	40000400 	.word	0x40000400

08001524 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b084      	sub	sp, #16
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001534:	d114      	bne.n	8001560 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001536:	4b19      	ldr	r3, [pc, #100]	; (800159c <HAL_TIM_Base_MspInit+0x78>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	4a18      	ldr	r2, [pc, #96]	; (800159c <HAL_TIM_Base_MspInit+0x78>)
 800153c:	f043 0301 	orr.w	r3, r3, #1
 8001540:	6413      	str	r3, [r2, #64]	; 0x40
 8001542:	4b16      	ldr	r3, [pc, #88]	; (800159c <HAL_TIM_Base_MspInit+0x78>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	60fb      	str	r3, [r7, #12]
 800154c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800154e:	2200      	movs	r2, #0
 8001550:	2100      	movs	r1, #0
 8001552:	201c      	movs	r0, #28
 8001554:	f000 fe25 	bl	80021a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001558:	201c      	movs	r0, #28
 800155a:	f000 fe3e 	bl	80021da <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800155e:	e018      	b.n	8001592 <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM3)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a0e      	ldr	r2, [pc, #56]	; (80015a0 <HAL_TIM_Base_MspInit+0x7c>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d113      	bne.n	8001592 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800156a:	4b0c      	ldr	r3, [pc, #48]	; (800159c <HAL_TIM_Base_MspInit+0x78>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	4a0b      	ldr	r2, [pc, #44]	; (800159c <HAL_TIM_Base_MspInit+0x78>)
 8001570:	f043 0302 	orr.w	r3, r3, #2
 8001574:	6413      	str	r3, [r2, #64]	; 0x40
 8001576:	4b09      	ldr	r3, [pc, #36]	; (800159c <HAL_TIM_Base_MspInit+0x78>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	60bb      	str	r3, [r7, #8]
 8001580:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	2100      	movs	r1, #0
 8001586:	201d      	movs	r0, #29
 8001588:	f000 fe0b 	bl	80021a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800158c:	201d      	movs	r0, #29
 800158e:	f000 fe24 	bl	80021da <HAL_NVIC_EnableIRQ>
}
 8001592:	bf00      	nop
 8001594:	3710      	adds	r7, #16
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40023800 	.word	0x40023800
 80015a0:	40000400 	.word	0x40000400

080015a4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08a      	sub	sp, #40	; 0x28
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ac:	f107 0314 	add.w	r3, r7, #20
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a1f      	ldr	r2, [pc, #124]	; (8001640 <HAL_TIM_MspPostInit+0x9c>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d138      	bne.n	8001638 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c6:	4b1f      	ldr	r3, [pc, #124]	; (8001644 <HAL_TIM_MspPostInit+0xa0>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	4a1e      	ldr	r2, [pc, #120]	; (8001644 <HAL_TIM_MspPostInit+0xa0>)
 80015cc:	f043 0301 	orr.w	r3, r3, #1
 80015d0:	6313      	str	r3, [r2, #48]	; 0x30
 80015d2:	4b1c      	ldr	r3, [pc, #112]	; (8001644 <HAL_TIM_MspPostInit+0xa0>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	f003 0301 	and.w	r3, r3, #1
 80015da:	613b      	str	r3, [r7, #16]
 80015dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015de:	4b19      	ldr	r3, [pc, #100]	; (8001644 <HAL_TIM_MspPostInit+0xa0>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	4a18      	ldr	r2, [pc, #96]	; (8001644 <HAL_TIM_MspPostInit+0xa0>)
 80015e4:	f043 0304 	orr.w	r3, r3, #4
 80015e8:	6313      	str	r3, [r2, #48]	; 0x30
 80015ea:	4b16      	ldr	r3, [pc, #88]	; (8001644 <HAL_TIM_MspPostInit+0xa0>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	f003 0304 	and.w	r3, r3, #4
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80015f6:	2340      	movs	r3, #64	; 0x40
 80015f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015fa:	2302      	movs	r3, #2
 80015fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fe:	2300      	movs	r3, #0
 8001600:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001602:	2300      	movs	r3, #0
 8001604:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001606:	2302      	movs	r3, #2
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	4619      	mov	r1, r3
 8001610:	480d      	ldr	r0, [pc, #52]	; (8001648 <HAL_TIM_MspPostInit+0xa4>)
 8001612:	f000 fe9d 	bl	8002350 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001616:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800161a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800161c:	2302      	movs	r3, #2
 800161e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001624:	2300      	movs	r3, #0
 8001626:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001628:	2302      	movs	r3, #2
 800162a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	4619      	mov	r1, r3
 8001632:	4806      	ldr	r0, [pc, #24]	; (800164c <HAL_TIM_MspPostInit+0xa8>)
 8001634:	f000 fe8c 	bl	8002350 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001638:	bf00      	nop
 800163a:	3728      	adds	r7, #40	; 0x28
 800163c:	46bd      	mov	sp, r7
 800163e:	bd80      	pop	{r7, pc}
 8001640:	40000400 	.word	0x40000400
 8001644:	40023800 	.word	0x40023800
 8001648:	40020000 	.word	0x40020000
 800164c:	40020800 	.word	0x40020800

08001650 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001654:	4b14      	ldr	r3, [pc, #80]	; (80016a8 <MX_USART3_UART_Init+0x58>)
 8001656:	4a15      	ldr	r2, [pc, #84]	; (80016ac <MX_USART3_UART_Init+0x5c>)
 8001658:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800165a:	4b13      	ldr	r3, [pc, #76]	; (80016a8 <MX_USART3_UART_Init+0x58>)
 800165c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001660:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001662:	4b11      	ldr	r3, [pc, #68]	; (80016a8 <MX_USART3_UART_Init+0x58>)
 8001664:	2200      	movs	r2, #0
 8001666:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001668:	4b0f      	ldr	r3, [pc, #60]	; (80016a8 <MX_USART3_UART_Init+0x58>)
 800166a:	2200      	movs	r2, #0
 800166c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800166e:	4b0e      	ldr	r3, [pc, #56]	; (80016a8 <MX_USART3_UART_Init+0x58>)
 8001670:	2200      	movs	r2, #0
 8001672:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001674:	4b0c      	ldr	r3, [pc, #48]	; (80016a8 <MX_USART3_UART_Init+0x58>)
 8001676:	220c      	movs	r2, #12
 8001678:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800167a:	4b0b      	ldr	r3, [pc, #44]	; (80016a8 <MX_USART3_UART_Init+0x58>)
 800167c:	2200      	movs	r2, #0
 800167e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001680:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <MX_USART3_UART_Init+0x58>)
 8001682:	2200      	movs	r2, #0
 8001684:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001686:	4b08      	ldr	r3, [pc, #32]	; (80016a8 <MX_USART3_UART_Init+0x58>)
 8001688:	2200      	movs	r2, #0
 800168a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800168c:	4b06      	ldr	r3, [pc, #24]	; (80016a8 <MX_USART3_UART_Init+0x58>)
 800168e:	2200      	movs	r2, #0
 8001690:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001692:	4805      	ldr	r0, [pc, #20]	; (80016a8 <MX_USART3_UART_Init+0x58>)
 8001694:	f004 fe14 	bl	80062c0 <HAL_UART_Init>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800169e:	f7ff fce5 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80016a2:	bf00      	nop
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	20000470 	.word	0x20000470
 80016ac:	40004800 	.word	0x40004800

080016b0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b08a      	sub	sp, #40	; 0x28
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b8:	f107 0314 	add.w	r3, r7, #20
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
 80016c6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	4a1b      	ldr	r2, [pc, #108]	; (800173c <HAL_UART_MspInit+0x8c>)
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d130      	bne.n	8001734 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80016d2:	4b1b      	ldr	r3, [pc, #108]	; (8001740 <HAL_UART_MspInit+0x90>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	4a1a      	ldr	r2, [pc, #104]	; (8001740 <HAL_UART_MspInit+0x90>)
 80016d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016dc:	6413      	str	r3, [r2, #64]	; 0x40
 80016de:	4b18      	ldr	r3, [pc, #96]	; (8001740 <HAL_UART_MspInit+0x90>)
 80016e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016e6:	613b      	str	r3, [r7, #16]
 80016e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80016ea:	4b15      	ldr	r3, [pc, #84]	; (8001740 <HAL_UART_MspInit+0x90>)
 80016ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ee:	4a14      	ldr	r2, [pc, #80]	; (8001740 <HAL_UART_MspInit+0x90>)
 80016f0:	f043 0308 	orr.w	r3, r3, #8
 80016f4:	6313      	str	r3, [r2, #48]	; 0x30
 80016f6:	4b12      	ldr	r3, [pc, #72]	; (8001740 <HAL_UART_MspInit+0x90>)
 80016f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fa:	f003 0308 	and.w	r3, r3, #8
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001702:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001706:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001708:	2302      	movs	r3, #2
 800170a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170c:	2300      	movs	r3, #0
 800170e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001710:	2303      	movs	r3, #3
 8001712:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001714:	2307      	movs	r3, #7
 8001716:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	4619      	mov	r1, r3
 800171e:	4809      	ldr	r0, [pc, #36]	; (8001744 <HAL_UART_MspInit+0x94>)
 8001720:	f000 fe16 	bl	8002350 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001724:	2200      	movs	r2, #0
 8001726:	2100      	movs	r1, #0
 8001728:	2027      	movs	r0, #39	; 0x27
 800172a:	f000 fd3a 	bl	80021a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800172e:	2027      	movs	r0, #39	; 0x27
 8001730:	f000 fd53 	bl	80021da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001734:	bf00      	nop
 8001736:	3728      	adds	r7, #40	; 0x28
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	40004800 	.word	0x40004800
 8001740:	40023800 	.word	0x40023800
 8001744:	40020c00 	.word	0x40020c00

08001748 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001748:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001780 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800174c:	480d      	ldr	r0, [pc, #52]	; (8001784 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800174e:	490e      	ldr	r1, [pc, #56]	; (8001788 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001750:	4a0e      	ldr	r2, [pc, #56]	; (800178c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001754:	e002      	b.n	800175c <LoopCopyDataInit>

08001756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800175a:	3304      	adds	r3, #4

0800175c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800175c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800175e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001760:	d3f9      	bcc.n	8001756 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001762:	4a0b      	ldr	r2, [pc, #44]	; (8001790 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001764:	4c0b      	ldr	r4, [pc, #44]	; (8001794 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001768:	e001      	b.n	800176e <LoopFillZerobss>

0800176a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800176a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800176c:	3204      	adds	r2, #4

0800176e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800176e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001770:	d3fb      	bcc.n	800176a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001772:	f7ff fde9 	bl	8001348 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001776:	f006 fb61 	bl	8007e3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800177a:	f7ff fb7b 	bl	8000e74 <main>
  bx  lr    
 800177e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001780:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001784:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001788:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 800178c:	08009308 	.word	0x08009308
  ldr r2, =_sbss
 8001790:	200001e4 	.word	0x200001e4
  ldr r4, =_ebss
 8001794:	20000508 	.word	0x20000508

08001798 <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001798:	e7fe      	b.n	8001798 <CAN1_RX0_IRQHandler>

0800179a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800179a:	b580      	push	{r7, lr}
 800179c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800179e:	2003      	movs	r0, #3
 80017a0:	f000 fcf4 	bl	800218c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017a4:	2000      	movs	r0, #0
 80017a6:	f000 f805 	bl	80017b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017aa:	f7ff fd0d 	bl	80011c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017ae:	2300      	movs	r3, #0
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	bd80      	pop	{r7, pc}

080017b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b082      	sub	sp, #8
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017bc:	4b12      	ldr	r3, [pc, #72]	; (8001808 <HAL_InitTick+0x54>)
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	4b12      	ldr	r3, [pc, #72]	; (800180c <HAL_InitTick+0x58>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	4619      	mov	r1, r3
 80017c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80017d2:	4618      	mov	r0, r3
 80017d4:	f000 fd0f 	bl	80021f6 <HAL_SYSTICK_Config>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e00e      	b.n	8001800 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2b0f      	cmp	r3, #15
 80017e6:	d80a      	bhi.n	80017fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017e8:	2200      	movs	r2, #0
 80017ea:	6879      	ldr	r1, [r7, #4]
 80017ec:	f04f 30ff 	mov.w	r0, #4294967295
 80017f0:	f000 fcd7 	bl	80021a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017f4:	4a06      	ldr	r2, [pc, #24]	; (8001810 <HAL_InitTick+0x5c>)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017fa:	2300      	movs	r3, #0
 80017fc:	e000      	b.n	8001800 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
}
 8001800:	4618      	mov	r0, r3
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20000174 	.word	0x20000174
 800180c:	2000017c 	.word	0x2000017c
 8001810:	20000178 	.word	0x20000178

08001814 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001818:	4b06      	ldr	r3, [pc, #24]	; (8001834 <HAL_IncTick+0x20>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	461a      	mov	r2, r3
 800181e:	4b06      	ldr	r3, [pc, #24]	; (8001838 <HAL_IncTick+0x24>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4413      	add	r3, r2
 8001824:	4a04      	ldr	r2, [pc, #16]	; (8001838 <HAL_IncTick+0x24>)
 8001826:	6013      	str	r3, [r2, #0]
}
 8001828:	bf00      	nop
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	2000017c 	.word	0x2000017c
 8001838:	200004f4 	.word	0x200004f4

0800183c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  return uwTick;
 8001840:	4b03      	ldr	r3, [pc, #12]	; (8001850 <HAL_GetTick+0x14>)
 8001842:	681b      	ldr	r3, [r3, #0]
}
 8001844:	4618      	mov	r0, r3
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	200004f4 	.word	0x200004f4

08001854 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b084      	sub	sp, #16
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800185c:	2300      	movs	r3, #0
 800185e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d101      	bne.n	800186a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
 8001868:	e031      	b.n	80018ce <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	2b00      	cmp	r3, #0
 8001870:	d109      	bne.n	8001886 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f7fe ff0a 	bl	800068c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2200      	movs	r2, #0
 800187c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2200      	movs	r2, #0
 8001882:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188a:	f003 0310 	and.w	r3, r3, #16
 800188e:	2b00      	cmp	r3, #0
 8001890:	d116      	bne.n	80018c0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001896:	4b10      	ldr	r3, [pc, #64]	; (80018d8 <HAL_ADC_Init+0x84>)
 8001898:	4013      	ands	r3, r2
 800189a:	f043 0202 	orr.w	r2, r3, #2
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 fa9e 	bl	8001de4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2200      	movs	r2, #0
 80018ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	f023 0303 	bic.w	r3, r3, #3
 80018b6:	f043 0201 	orr.w	r2, r3, #1
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	641a      	str	r2, [r3, #64]	; 0x40
 80018be:	e001      	b.n	80018c4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2200      	movs	r2, #0
 80018c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80018ce:	4618      	mov	r0, r3
 80018d0:	3710      	adds	r7, #16
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	ffffeefd 	.word	0xffffeefd

080018dc <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b086      	sub	sp, #24
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]
 80018e8:	2300      	movs	r3, #0
 80018ea:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f003 0302 	and.w	r3, r3, #2
 8001902:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001904:	68bb      	ldr	r3, [r7, #8]
 8001906:	f003 0320 	and.w	r3, r3, #32
 800190a:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d049      	beq.n	80019a6 <HAL_ADC_IRQHandler+0xca>
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d046      	beq.n	80019a6 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191c:	f003 0310 	and.w	r3, r3, #16
 8001920:	2b00      	cmp	r3, #0
 8001922:	d105      	bne.n	8001930 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001928:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800193a:	2b00      	cmp	r3, #0
 800193c:	d12b      	bne.n	8001996 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001942:	2b00      	cmp	r3, #0
 8001944:	d127      	bne.n	8001996 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800194c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001950:	2b00      	cmp	r3, #0
 8001952:	d006      	beq.n	8001962 <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800195e:	2b00      	cmp	r3, #0
 8001960:	d119      	bne.n	8001996 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	685a      	ldr	r2, [r3, #4]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f022 0220 	bic.w	r2, r2, #32
 8001970:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001976:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d105      	bne.n	8001996 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800198e:	f043 0201 	orr.w	r2, r3, #1
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f000 f8b0 	bl	8001afc <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f06f 0212 	mvn.w	r2, #18
 80019a4:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80019ae:	68bb      	ldr	r3, [r7, #8]
 80019b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019b4:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 80019b6:	697b      	ldr	r3, [r7, #20]
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d057      	beq.n	8001a6c <HAL_ADC_IRQHandler+0x190>
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d054      	beq.n	8001a6c <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019c6:	f003 0310 	and.w	r3, r3, #16
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d105      	bne.n	80019da <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d2:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d139      	bne.n	8001a5c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019ee:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d006      	beq.n	8001a04 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d12b      	bne.n	8001a5c <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d124      	bne.n	8001a5c <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d11d      	bne.n	8001a5c <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d119      	bne.n	8001a5c <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	685a      	ldr	r2, [r3, #4]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a36:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d105      	bne.n	8001a5c <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a54:	f043 0201 	orr.w	r2, r3, #1
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001a5c:	6878      	ldr	r0, [r7, #4]
 8001a5e:	f000 fabb 	bl	8001fd8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f06f 020c 	mvn.w	r2, #12
 8001a6a:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	f003 0301 	and.w	r3, r3, #1
 8001a72:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a7a:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001a7c:	697b      	ldr	r3, [r7, #20]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d017      	beq.n	8001ab2 <HAL_ADC_IRQHandler+0x1d6>
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d014      	beq.n	8001ab2 <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b01      	cmp	r3, #1
 8001a94:	d10d      	bne.n	8001ab2 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001aa2:	6878      	ldr	r0, [r7, #4]
 8001aa4:	f000 f834 	bl	8001b10 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f06f 0201 	mvn.w	r2, #1
 8001ab0:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	f003 0320 	and.w	r3, r3, #32
 8001ab8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ac0:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d015      	beq.n	8001af4 <HAL_ADC_IRQHandler+0x218>
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d012      	beq.n	8001af4 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ad2:	f043 0202 	orr.w	r2, r3, #2
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f06f 0220 	mvn.w	r2, #32
 8001ae2:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001ae4:	6878      	ldr	r0, [r7, #4]
 8001ae6:	f000 f81d 	bl	8001b24 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f06f 0220 	mvn.w	r2, #32
 8001af2:	601a      	str	r2, [r3, #0]
  }
}
 8001af4:	bf00      	nop
 8001af6:	3718      	adds	r7, #24
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}

08001afc <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8001b18:	bf00      	nop
 8001b1a:	370c      	adds	r7, #12
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001b2c:	bf00      	nop
 8001b2e:	370c      	adds	r7, #12
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8001b42:	2300      	movs	r3, #0
 8001b44:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001b4c:	2b01      	cmp	r3, #1
 8001b4e:	d101      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x1c>
 8001b50:	2302      	movs	r3, #2
 8001b52:	e136      	b.n	8001dc2 <HAL_ADC_ConfigChannel+0x28a>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b09      	cmp	r3, #9
 8001b62:	d93a      	bls.n	8001bda <HAL_ADC_ConfigChannel+0xa2>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001b6c:	d035      	beq.n	8001bda <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	68d9      	ldr	r1, [r3, #12]
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	4613      	mov	r3, r2
 8001b7e:	005b      	lsls	r3, r3, #1
 8001b80:	4413      	add	r3, r2
 8001b82:	3b1e      	subs	r3, #30
 8001b84:	2207      	movs	r2, #7
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43da      	mvns	r2, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	400a      	ands	r2, r1
 8001b92:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	4a8d      	ldr	r2, [pc, #564]	; (8001dd0 <HAL_ADC_ConfigChannel+0x298>)
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d10a      	bne.n	8001bb4 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	68d9      	ldr	r1, [r3, #12]
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	061a      	lsls	r2, r3, #24
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	430a      	orrs	r2, r1
 8001bb0:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bb2:	e035      	b.n	8001c20 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	68d9      	ldr	r1, [r3, #12]
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	689a      	ldr	r2, [r3, #8]
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	4403      	add	r3, r0
 8001bcc:	3b1e      	subs	r3, #30
 8001bce:	409a      	lsls	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001bd8:	e022      	b.n	8001c20 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	6919      	ldr	r1, [r3, #16]
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	461a      	mov	r2, r3
 8001be8:	4613      	mov	r3, r2
 8001bea:	005b      	lsls	r3, r3, #1
 8001bec:	4413      	add	r3, r2
 8001bee:	2207      	movs	r2, #7
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43da      	mvns	r2, r3
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	400a      	ands	r2, r1
 8001bfc:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	6919      	ldr	r1, [r3, #16]
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	689a      	ldr	r2, [r3, #8]
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	b29b      	uxth	r3, r3
 8001c0e:	4618      	mov	r0, r3
 8001c10:	4603      	mov	r3, r0
 8001c12:	005b      	lsls	r3, r3, #1
 8001c14:	4403      	add	r3, r0
 8001c16:	409a      	lsls	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	430a      	orrs	r2, r1
 8001c1e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b06      	cmp	r3, #6
 8001c26:	d824      	bhi.n	8001c72 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	685a      	ldr	r2, [r3, #4]
 8001c32:	4613      	mov	r3, r2
 8001c34:	009b      	lsls	r3, r3, #2
 8001c36:	4413      	add	r3, r2
 8001c38:	3b05      	subs	r3, #5
 8001c3a:	221f      	movs	r2, #31
 8001c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c40:	43da      	mvns	r2, r3
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	400a      	ands	r2, r1
 8001c48:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	b29b      	uxth	r3, r3
 8001c56:	4618      	mov	r0, r3
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685a      	ldr	r2, [r3, #4]
 8001c5c:	4613      	mov	r3, r2
 8001c5e:	009b      	lsls	r3, r3, #2
 8001c60:	4413      	add	r3, r2
 8001c62:	3b05      	subs	r3, #5
 8001c64:	fa00 f203 	lsl.w	r2, r0, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	430a      	orrs	r2, r1
 8001c6e:	635a      	str	r2, [r3, #52]	; 0x34
 8001c70:	e04c      	b.n	8001d0c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	2b0c      	cmp	r3, #12
 8001c78:	d824      	bhi.n	8001cc4 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	4613      	mov	r3, r2
 8001c86:	009b      	lsls	r3, r3, #2
 8001c88:	4413      	add	r3, r2
 8001c8a:	3b23      	subs	r3, #35	; 0x23
 8001c8c:	221f      	movs	r2, #31
 8001c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c92:	43da      	mvns	r2, r3
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	400a      	ands	r2, r1
 8001c9a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	b29b      	uxth	r3, r3
 8001ca8:	4618      	mov	r0, r3
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	685a      	ldr	r2, [r3, #4]
 8001cae:	4613      	mov	r3, r2
 8001cb0:	009b      	lsls	r3, r3, #2
 8001cb2:	4413      	add	r3, r2
 8001cb4:	3b23      	subs	r3, #35	; 0x23
 8001cb6:	fa00 f203 	lsl.w	r2, r0, r3
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	631a      	str	r2, [r3, #48]	; 0x30
 8001cc2:	e023      	b.n	8001d0c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	685a      	ldr	r2, [r3, #4]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	4413      	add	r3, r2
 8001cd4:	3b41      	subs	r3, #65	; 0x41
 8001cd6:	221f      	movs	r2, #31
 8001cd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cdc:	43da      	mvns	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	400a      	ands	r2, r1
 8001ce4:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	685a      	ldr	r2, [r3, #4]
 8001cf8:	4613      	mov	r3, r2
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	4413      	add	r3, r2
 8001cfe:	3b41      	subs	r3, #65	; 0x41
 8001d00:	fa00 f203 	lsl.w	r2, r0, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	430a      	orrs	r2, r1
 8001d0a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a30      	ldr	r2, [pc, #192]	; (8001dd4 <HAL_ADC_ConfigChannel+0x29c>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d10a      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x1f4>
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001d1e:	d105      	bne.n	8001d2c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001d20:	4b2d      	ldr	r3, [pc, #180]	; (8001dd8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	4a2c      	ldr	r2, [pc, #176]	; (8001dd8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d26:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001d2a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	4a28      	ldr	r2, [pc, #160]	; (8001dd4 <HAL_ADC_ConfigChannel+0x29c>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d10f      	bne.n	8001d56 <HAL_ADC_ConfigChannel+0x21e>
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	2b12      	cmp	r3, #18
 8001d3c:	d10b      	bne.n	8001d56 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8001d3e:	4b26      	ldr	r3, [pc, #152]	; (8001dd8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	4a25      	ldr	r2, [pc, #148]	; (8001dd8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d44:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001d48:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8001d4a:	4b23      	ldr	r3, [pc, #140]	; (8001dd8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	4a22      	ldr	r2, [pc, #136]	; (8001dd8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d50:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001d54:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a1e      	ldr	r2, [pc, #120]	; (8001dd4 <HAL_ADC_ConfigChannel+0x29c>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d12b      	bne.n	8001db8 <HAL_ADC_ConfigChannel+0x280>
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a1a      	ldr	r2, [pc, #104]	; (8001dd0 <HAL_ADC_ConfigChannel+0x298>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d003      	beq.n	8001d72 <HAL_ADC_ConfigChannel+0x23a>
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	2b11      	cmp	r3, #17
 8001d70:	d122      	bne.n	8001db8 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8001d72:	4b19      	ldr	r3, [pc, #100]	; (8001dd8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	4a18      	ldr	r2, [pc, #96]	; (8001dd8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d78:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8001d7c:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8001d7e:	4b16      	ldr	r3, [pc, #88]	; (8001dd8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	4a15      	ldr	r2, [pc, #84]	; (8001dd8 <HAL_ADC_ConfigChannel+0x2a0>)
 8001d84:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001d88:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	4a10      	ldr	r2, [pc, #64]	; (8001dd0 <HAL_ADC_ConfigChannel+0x298>)
 8001d90:	4293      	cmp	r3, r2
 8001d92:	d111      	bne.n	8001db8 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001d94:	4b11      	ldr	r3, [pc, #68]	; (8001ddc <HAL_ADC_ConfigChannel+0x2a4>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4a11      	ldr	r2, [pc, #68]	; (8001de0 <HAL_ADC_ConfigChannel+0x2a8>)
 8001d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d9e:	0c9a      	lsrs	r2, r3, #18
 8001da0:	4613      	mov	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	4413      	add	r3, r2
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001daa:	e002      	b.n	8001db2 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	3b01      	subs	r3, #1
 8001db0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d1f9      	bne.n	8001dac <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	3714      	adds	r7, #20
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	10000012 	.word	0x10000012
 8001dd4:	40012000 	.word	0x40012000
 8001dd8:	40012300 	.word	0x40012300
 8001ddc:	20000174 	.word	0x20000174
 8001de0:	431bde83 	.word	0x431bde83

08001de4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001dec:	4b78      	ldr	r3, [pc, #480]	; (8001fd0 <ADC_Init+0x1ec>)
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	4a77      	ldr	r2, [pc, #476]	; (8001fd0 <ADC_Init+0x1ec>)
 8001df2:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8001df6:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001df8:	4b75      	ldr	r3, [pc, #468]	; (8001fd0 <ADC_Init+0x1ec>)
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	685b      	ldr	r3, [r3, #4]
 8001e00:	4973      	ldr	r1, [pc, #460]	; (8001fd0 <ADC_Init+0x1ec>)
 8001e02:	4313      	orrs	r3, r2
 8001e04:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001e14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	6859      	ldr	r1, [r3, #4]
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	691b      	ldr	r3, [r3, #16]
 8001e20:	021a      	lsls	r2, r3, #8
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	430a      	orrs	r2, r1
 8001e28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	685a      	ldr	r2, [r3, #4]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001e38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6859      	ldr	r1, [r3, #4]
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	689a      	ldr	r2, [r3, #8]
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689a      	ldr	r2, [r3, #8]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001e5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6899      	ldr	r1, [r3, #8]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	68da      	ldr	r2, [r3, #12]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e72:	4a58      	ldr	r2, [pc, #352]	; (8001fd4 <ADC_Init+0x1f0>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d022      	beq.n	8001ebe <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	689a      	ldr	r2, [r3, #8]
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001e86:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	6899      	ldr	r1, [r3, #8]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001ea8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	6899      	ldr	r1, [r3, #8]
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	e00f      	b.n	8001ede <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	689a      	ldr	r2, [r3, #8]
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001ecc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	689a      	ldr	r2, [r3, #8]
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001edc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f022 0202 	bic.w	r2, r2, #2
 8001eec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6899      	ldr	r1, [r3, #8]
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	699b      	ldr	r3, [r3, #24]
 8001ef8:	005a      	lsls	r2, r3, #1
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d01b      	beq.n	8001f44 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	685a      	ldr	r2, [r3, #4]
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001f1a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	685a      	ldr	r2, [r3, #4]
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001f2a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	6859      	ldr	r1, [r3, #4]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f36:	3b01      	subs	r3, #1
 8001f38:	035a      	lsls	r2, r3, #13
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	430a      	orrs	r2, r1
 8001f40:	605a      	str	r2, [r3, #4]
 8001f42:	e007      	b.n	8001f54 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001f52:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001f62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	3b01      	subs	r3, #1
 8001f70:	051a      	lsls	r2, r3, #20
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	430a      	orrs	r2, r1
 8001f78:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001f88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6899      	ldr	r1, [r3, #8]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001f96:	025a      	lsls	r2, r3, #9
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	430a      	orrs	r2, r1
 8001f9e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	689a      	ldr	r2, [r3, #8]
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001fae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	6899      	ldr	r1, [r3, #8]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	695b      	ldr	r3, [r3, #20]
 8001fba:	029a      	lsls	r2, r3, #10
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	430a      	orrs	r2, r1
 8001fc2:	609a      	str	r2, [r3, #8]
}
 8001fc4:	bf00      	nop
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fce:	4770      	bx	lr
 8001fd0:	40012300 	.word	0x40012300
 8001fd4:	0f000001 	.word	0x0f000001

08001fd8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b083      	sub	sp, #12
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8001fe0:	bf00      	nop
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b085      	sub	sp, #20
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ffc:	4b0b      	ldr	r3, [pc, #44]	; (800202c <__NVIC_SetPriorityGrouping+0x40>)
 8001ffe:	68db      	ldr	r3, [r3, #12]
 8002000:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002002:	68ba      	ldr	r2, [r7, #8]
 8002004:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002008:	4013      	ands	r3, r2
 800200a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002010:	68bb      	ldr	r3, [r7, #8]
 8002012:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002014:	4b06      	ldr	r3, [pc, #24]	; (8002030 <__NVIC_SetPriorityGrouping+0x44>)
 8002016:	4313      	orrs	r3, r2
 8002018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800201a:	4a04      	ldr	r2, [pc, #16]	; (800202c <__NVIC_SetPriorityGrouping+0x40>)
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	60d3      	str	r3, [r2, #12]
}
 8002020:	bf00      	nop
 8002022:	3714      	adds	r7, #20
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr
 800202c:	e000ed00 	.word	0xe000ed00
 8002030:	05fa0000 	.word	0x05fa0000

08002034 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002038:	4b04      	ldr	r3, [pc, #16]	; (800204c <__NVIC_GetPriorityGrouping+0x18>)
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	0a1b      	lsrs	r3, r3, #8
 800203e:	f003 0307 	and.w	r3, r3, #7
}
 8002042:	4618      	mov	r0, r3
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr
 800204c:	e000ed00 	.word	0xe000ed00

08002050 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002050:	b480      	push	{r7}
 8002052:	b083      	sub	sp, #12
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800205a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205e:	2b00      	cmp	r3, #0
 8002060:	db0b      	blt.n	800207a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	f003 021f 	and.w	r2, r3, #31
 8002068:	4907      	ldr	r1, [pc, #28]	; (8002088 <__NVIC_EnableIRQ+0x38>)
 800206a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206e:	095b      	lsrs	r3, r3, #5
 8002070:	2001      	movs	r0, #1
 8002072:	fa00 f202 	lsl.w	r2, r0, r2
 8002076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800207a:	bf00      	nop
 800207c:	370c      	adds	r7, #12
 800207e:	46bd      	mov	sp, r7
 8002080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002084:	4770      	bx	lr
 8002086:	bf00      	nop
 8002088:	e000e100 	.word	0xe000e100

0800208c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800208c:	b480      	push	{r7}
 800208e:	b083      	sub	sp, #12
 8002090:	af00      	add	r7, sp, #0
 8002092:	4603      	mov	r3, r0
 8002094:	6039      	str	r1, [r7, #0]
 8002096:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800209c:	2b00      	cmp	r3, #0
 800209e:	db0a      	blt.n	80020b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	b2da      	uxtb	r2, r3
 80020a4:	490c      	ldr	r1, [pc, #48]	; (80020d8 <__NVIC_SetPriority+0x4c>)
 80020a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020aa:	0112      	lsls	r2, r2, #4
 80020ac:	b2d2      	uxtb	r2, r2
 80020ae:	440b      	add	r3, r1
 80020b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020b4:	e00a      	b.n	80020cc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020b6:	683b      	ldr	r3, [r7, #0]
 80020b8:	b2da      	uxtb	r2, r3
 80020ba:	4908      	ldr	r1, [pc, #32]	; (80020dc <__NVIC_SetPriority+0x50>)
 80020bc:	79fb      	ldrb	r3, [r7, #7]
 80020be:	f003 030f 	and.w	r3, r3, #15
 80020c2:	3b04      	subs	r3, #4
 80020c4:	0112      	lsls	r2, r2, #4
 80020c6:	b2d2      	uxtb	r2, r2
 80020c8:	440b      	add	r3, r1
 80020ca:	761a      	strb	r2, [r3, #24]
}
 80020cc:	bf00      	nop
 80020ce:	370c      	adds	r7, #12
 80020d0:	46bd      	mov	sp, r7
 80020d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d6:	4770      	bx	lr
 80020d8:	e000e100 	.word	0xe000e100
 80020dc:	e000ed00 	.word	0xe000ed00

080020e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b089      	sub	sp, #36	; 0x24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	60f8      	str	r0, [r7, #12]
 80020e8:	60b9      	str	r1, [r7, #8]
 80020ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f003 0307 	and.w	r3, r3, #7
 80020f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80020f4:	69fb      	ldr	r3, [r7, #28]
 80020f6:	f1c3 0307 	rsb	r3, r3, #7
 80020fa:	2b04      	cmp	r3, #4
 80020fc:	bf28      	it	cs
 80020fe:	2304      	movcs	r3, #4
 8002100:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	3304      	adds	r3, #4
 8002106:	2b06      	cmp	r3, #6
 8002108:	d902      	bls.n	8002110 <NVIC_EncodePriority+0x30>
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	3b03      	subs	r3, #3
 800210e:	e000      	b.n	8002112 <NVIC_EncodePriority+0x32>
 8002110:	2300      	movs	r3, #0
 8002112:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002114:	f04f 32ff 	mov.w	r2, #4294967295
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	fa02 f303 	lsl.w	r3, r2, r3
 800211e:	43da      	mvns	r2, r3
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	401a      	ands	r2, r3
 8002124:	697b      	ldr	r3, [r7, #20]
 8002126:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002128:	f04f 31ff 	mov.w	r1, #4294967295
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	fa01 f303 	lsl.w	r3, r1, r3
 8002132:	43d9      	mvns	r1, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002138:	4313      	orrs	r3, r2
         );
}
 800213a:	4618      	mov	r0, r3
 800213c:	3724      	adds	r7, #36	; 0x24
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr
	...

08002148 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	3b01      	subs	r3, #1
 8002154:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002158:	d301      	bcc.n	800215e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800215a:	2301      	movs	r3, #1
 800215c:	e00f      	b.n	800217e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800215e:	4a0a      	ldr	r2, [pc, #40]	; (8002188 <SysTick_Config+0x40>)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	3b01      	subs	r3, #1
 8002164:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002166:	210f      	movs	r1, #15
 8002168:	f04f 30ff 	mov.w	r0, #4294967295
 800216c:	f7ff ff8e 	bl	800208c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002170:	4b05      	ldr	r3, [pc, #20]	; (8002188 <SysTick_Config+0x40>)
 8002172:	2200      	movs	r2, #0
 8002174:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002176:	4b04      	ldr	r3, [pc, #16]	; (8002188 <SysTick_Config+0x40>)
 8002178:	2207      	movs	r2, #7
 800217a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	e000e010 	.word	0xe000e010

0800218c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002194:	6878      	ldr	r0, [r7, #4]
 8002196:	f7ff ff29 	bl	8001fec <__NVIC_SetPriorityGrouping>
}
 800219a:	bf00      	nop
 800219c:	3708      	adds	r7, #8
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}

080021a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021a2:	b580      	push	{r7, lr}
 80021a4:	b086      	sub	sp, #24
 80021a6:	af00      	add	r7, sp, #0
 80021a8:	4603      	mov	r3, r0
 80021aa:	60b9      	str	r1, [r7, #8]
 80021ac:	607a      	str	r2, [r7, #4]
 80021ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80021b0:	2300      	movs	r3, #0
 80021b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021b4:	f7ff ff3e 	bl	8002034 <__NVIC_GetPriorityGrouping>
 80021b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021ba:	687a      	ldr	r2, [r7, #4]
 80021bc:	68b9      	ldr	r1, [r7, #8]
 80021be:	6978      	ldr	r0, [r7, #20]
 80021c0:	f7ff ff8e 	bl	80020e0 <NVIC_EncodePriority>
 80021c4:	4602      	mov	r2, r0
 80021c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021ca:	4611      	mov	r1, r2
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff ff5d 	bl	800208c <__NVIC_SetPriority>
}
 80021d2:	bf00      	nop
 80021d4:	3718      	adds	r7, #24
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}

080021da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021da:	b580      	push	{r7, lr}
 80021dc:	b082      	sub	sp, #8
 80021de:	af00      	add	r7, sp, #0
 80021e0:	4603      	mov	r3, r0
 80021e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021e8:	4618      	mov	r0, r3
 80021ea:	f7ff ff31 	bl	8002050 <__NVIC_EnableIRQ>
}
 80021ee:	bf00      	nop
 80021f0:	3708      	adds	r7, #8
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}

080021f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b082      	sub	sp, #8
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	f7ff ffa2 	bl	8002148 <SysTick_Config>
 8002204:	4603      	mov	r3, r0
}
 8002206:	4618      	mov	r0, r3
 8002208:	3708      	adds	r7, #8
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}

0800220e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800220e:	b580      	push	{r7, lr}
 8002210:	b084      	sub	sp, #16
 8002212:	af00      	add	r7, sp, #0
 8002214:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800221a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800221c:	f7ff fb0e 	bl	800183c <HAL_GetTick>
 8002220:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002228:	b2db      	uxtb	r3, r3
 800222a:	2b02      	cmp	r3, #2
 800222c:	d008      	beq.n	8002240 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2280      	movs	r2, #128	; 0x80
 8002232:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e052      	b.n	80022e6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681a      	ldr	r2, [r3, #0]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f022 0216 	bic.w	r2, r2, #22
 800224e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	695a      	ldr	r2, [r3, #20]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800225e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002264:	2b00      	cmp	r3, #0
 8002266:	d103      	bne.n	8002270 <HAL_DMA_Abort+0x62>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800226c:	2b00      	cmp	r3, #0
 800226e:	d007      	beq.n	8002280 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f022 0208 	bic.w	r2, r2, #8
 800227e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 0201 	bic.w	r2, r2, #1
 800228e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002290:	e013      	b.n	80022ba <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002292:	f7ff fad3 	bl	800183c <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b05      	cmp	r3, #5
 800229e:	d90c      	bls.n	80022ba <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2220      	movs	r2, #32
 80022a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2203      	movs	r2, #3
 80022aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e015      	b.n	80022e6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f003 0301 	and.w	r3, r3, #1
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d1e4      	bne.n	8002292 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022cc:	223f      	movs	r2, #63	; 0x3f
 80022ce:	409a      	lsls	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2200      	movs	r2, #0
 80022e0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}

080022ee <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80022ee:	b480      	push	{r7}
 80022f0:	b083      	sub	sp, #12
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d004      	beq.n	800230c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2280      	movs	r2, #128	; 0x80
 8002306:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e00c      	b.n	8002326 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2205      	movs	r2, #5
 8002310:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f022 0201 	bic.w	r2, r2, #1
 8002322:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	370c      	adds	r7, #12
 800232a:	46bd      	mov	sp, r7
 800232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002330:	4770      	bx	lr

08002332 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002332:	b480      	push	{r7}
 8002334:	b083      	sub	sp, #12
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002340:	b2db      	uxtb	r3, r3
}
 8002342:	4618      	mov	r0, r3
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr
	...

08002350 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002350:	b480      	push	{r7}
 8002352:	b089      	sub	sp, #36	; 0x24
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
 8002358:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800235a:	2300      	movs	r3, #0
 800235c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800235e:	2300      	movs	r3, #0
 8002360:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002362:	2300      	movs	r3, #0
 8002364:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002366:	2300      	movs	r3, #0
 8002368:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800236a:	2300      	movs	r3, #0
 800236c:	61fb      	str	r3, [r7, #28]
 800236e:	e175      	b.n	800265c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002370:	2201      	movs	r2, #1
 8002372:	69fb      	ldr	r3, [r7, #28]
 8002374:	fa02 f303 	lsl.w	r3, r2, r3
 8002378:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	697a      	ldr	r2, [r7, #20]
 8002380:	4013      	ands	r3, r2
 8002382:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002384:	693a      	ldr	r2, [r7, #16]
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	429a      	cmp	r2, r3
 800238a:	f040 8164 	bne.w	8002656 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	2b01      	cmp	r3, #1
 8002398:	d005      	beq.n	80023a6 <HAL_GPIO_Init+0x56>
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	685b      	ldr	r3, [r3, #4]
 800239e:	f003 0303 	and.w	r3, r3, #3
 80023a2:	2b02      	cmp	r3, #2
 80023a4:	d130      	bne.n	8002408 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	2203      	movs	r2, #3
 80023b2:	fa02 f303 	lsl.w	r3, r2, r3
 80023b6:	43db      	mvns	r3, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4013      	ands	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	68da      	ldr	r2, [r3, #12]
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	005b      	lsls	r3, r3, #1
 80023c6:	fa02 f303 	lsl.w	r3, r2, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	69ba      	ldr	r2, [r7, #24]
 80023d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023dc:	2201      	movs	r2, #1
 80023de:	69fb      	ldr	r3, [r7, #28]
 80023e0:	fa02 f303 	lsl.w	r3, r2, r3
 80023e4:	43db      	mvns	r3, r3
 80023e6:	69ba      	ldr	r2, [r7, #24]
 80023e8:	4013      	ands	r3, r2
 80023ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	091b      	lsrs	r3, r3, #4
 80023f2:	f003 0201 	and.w	r2, r3, #1
 80023f6:	69fb      	ldr	r3, [r7, #28]
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4313      	orrs	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	69ba      	ldr	r2, [r7, #24]
 8002406:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	685b      	ldr	r3, [r3, #4]
 800240c:	f003 0303 	and.w	r3, r3, #3
 8002410:	2b03      	cmp	r3, #3
 8002412:	d017      	beq.n	8002444 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	68db      	ldr	r3, [r3, #12]
 8002418:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	2203      	movs	r2, #3
 8002420:	fa02 f303 	lsl.w	r3, r2, r3
 8002424:	43db      	mvns	r3, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4013      	ands	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	689a      	ldr	r2, [r3, #8]
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	005b      	lsls	r3, r3, #1
 8002434:	fa02 f303 	lsl.w	r3, r2, r3
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	4313      	orrs	r3, r2
 800243c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	69ba      	ldr	r2, [r7, #24]
 8002442:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 0303 	and.w	r3, r3, #3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d123      	bne.n	8002498 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002450:	69fb      	ldr	r3, [r7, #28]
 8002452:	08da      	lsrs	r2, r3, #3
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	3208      	adds	r2, #8
 8002458:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800245c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	220f      	movs	r2, #15
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	43db      	mvns	r3, r3
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	4013      	ands	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	691a      	ldr	r2, [r3, #16]
 8002478:	69fb      	ldr	r3, [r7, #28]
 800247a:	f003 0307 	and.w	r3, r3, #7
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4313      	orrs	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	08da      	lsrs	r2, r3, #3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	3208      	adds	r2, #8
 8002492:	69b9      	ldr	r1, [r7, #24]
 8002494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	005b      	lsls	r3, r3, #1
 80024a2:	2203      	movs	r2, #3
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	43db      	mvns	r3, r3
 80024aa:	69ba      	ldr	r2, [r7, #24]
 80024ac:	4013      	ands	r3, r2
 80024ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	685b      	ldr	r3, [r3, #4]
 80024b4:	f003 0203 	and.w	r2, r3, #3
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	005b      	lsls	r3, r3, #1
 80024bc:	fa02 f303 	lsl.w	r3, r2, r3
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	4313      	orrs	r3, r2
 80024c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	685b      	ldr	r3, [r3, #4]
 80024d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	f000 80be 	beq.w	8002656 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024da:	4b66      	ldr	r3, [pc, #408]	; (8002674 <HAL_GPIO_Init+0x324>)
 80024dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024de:	4a65      	ldr	r2, [pc, #404]	; (8002674 <HAL_GPIO_Init+0x324>)
 80024e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024e4:	6453      	str	r3, [r2, #68]	; 0x44
 80024e6:	4b63      	ldr	r3, [pc, #396]	; (8002674 <HAL_GPIO_Init+0x324>)
 80024e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ee:	60fb      	str	r3, [r7, #12]
 80024f0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80024f2:	4a61      	ldr	r2, [pc, #388]	; (8002678 <HAL_GPIO_Init+0x328>)
 80024f4:	69fb      	ldr	r3, [r7, #28]
 80024f6:	089b      	lsrs	r3, r3, #2
 80024f8:	3302      	adds	r3, #2
 80024fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	f003 0303 	and.w	r3, r3, #3
 8002506:	009b      	lsls	r3, r3, #2
 8002508:	220f      	movs	r2, #15
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43db      	mvns	r3, r3
 8002510:	69ba      	ldr	r2, [r7, #24]
 8002512:	4013      	ands	r3, r2
 8002514:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a58      	ldr	r2, [pc, #352]	; (800267c <HAL_GPIO_Init+0x32c>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d037      	beq.n	800258e <HAL_GPIO_Init+0x23e>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a57      	ldr	r2, [pc, #348]	; (8002680 <HAL_GPIO_Init+0x330>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d031      	beq.n	800258a <HAL_GPIO_Init+0x23a>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a56      	ldr	r2, [pc, #344]	; (8002684 <HAL_GPIO_Init+0x334>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d02b      	beq.n	8002586 <HAL_GPIO_Init+0x236>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a55      	ldr	r2, [pc, #340]	; (8002688 <HAL_GPIO_Init+0x338>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d025      	beq.n	8002582 <HAL_GPIO_Init+0x232>
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4a54      	ldr	r2, [pc, #336]	; (800268c <HAL_GPIO_Init+0x33c>)
 800253a:	4293      	cmp	r3, r2
 800253c:	d01f      	beq.n	800257e <HAL_GPIO_Init+0x22e>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	4a53      	ldr	r2, [pc, #332]	; (8002690 <HAL_GPIO_Init+0x340>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d019      	beq.n	800257a <HAL_GPIO_Init+0x22a>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4a52      	ldr	r2, [pc, #328]	; (8002694 <HAL_GPIO_Init+0x344>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d013      	beq.n	8002576 <HAL_GPIO_Init+0x226>
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	4a51      	ldr	r2, [pc, #324]	; (8002698 <HAL_GPIO_Init+0x348>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d00d      	beq.n	8002572 <HAL_GPIO_Init+0x222>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	4a50      	ldr	r2, [pc, #320]	; (800269c <HAL_GPIO_Init+0x34c>)
 800255a:	4293      	cmp	r3, r2
 800255c:	d007      	beq.n	800256e <HAL_GPIO_Init+0x21e>
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	4a4f      	ldr	r2, [pc, #316]	; (80026a0 <HAL_GPIO_Init+0x350>)
 8002562:	4293      	cmp	r3, r2
 8002564:	d101      	bne.n	800256a <HAL_GPIO_Init+0x21a>
 8002566:	2309      	movs	r3, #9
 8002568:	e012      	b.n	8002590 <HAL_GPIO_Init+0x240>
 800256a:	230a      	movs	r3, #10
 800256c:	e010      	b.n	8002590 <HAL_GPIO_Init+0x240>
 800256e:	2308      	movs	r3, #8
 8002570:	e00e      	b.n	8002590 <HAL_GPIO_Init+0x240>
 8002572:	2307      	movs	r3, #7
 8002574:	e00c      	b.n	8002590 <HAL_GPIO_Init+0x240>
 8002576:	2306      	movs	r3, #6
 8002578:	e00a      	b.n	8002590 <HAL_GPIO_Init+0x240>
 800257a:	2305      	movs	r3, #5
 800257c:	e008      	b.n	8002590 <HAL_GPIO_Init+0x240>
 800257e:	2304      	movs	r3, #4
 8002580:	e006      	b.n	8002590 <HAL_GPIO_Init+0x240>
 8002582:	2303      	movs	r3, #3
 8002584:	e004      	b.n	8002590 <HAL_GPIO_Init+0x240>
 8002586:	2302      	movs	r3, #2
 8002588:	e002      	b.n	8002590 <HAL_GPIO_Init+0x240>
 800258a:	2301      	movs	r3, #1
 800258c:	e000      	b.n	8002590 <HAL_GPIO_Init+0x240>
 800258e:	2300      	movs	r3, #0
 8002590:	69fa      	ldr	r2, [r7, #28]
 8002592:	f002 0203 	and.w	r2, r2, #3
 8002596:	0092      	lsls	r2, r2, #2
 8002598:	4093      	lsls	r3, r2
 800259a:	69ba      	ldr	r2, [r7, #24]
 800259c:	4313      	orrs	r3, r2
 800259e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80025a0:	4935      	ldr	r1, [pc, #212]	; (8002678 <HAL_GPIO_Init+0x328>)
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	089b      	lsrs	r3, r3, #2
 80025a6:	3302      	adds	r3, #2
 80025a8:	69ba      	ldr	r2, [r7, #24]
 80025aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025ae:	4b3d      	ldr	r3, [pc, #244]	; (80026a4 <HAL_GPIO_Init+0x354>)
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	43db      	mvns	r3, r3
 80025b8:	69ba      	ldr	r2, [r7, #24]
 80025ba:	4013      	ands	r3, r2
 80025bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d003      	beq.n	80025d2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80025ca:	69ba      	ldr	r2, [r7, #24]
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	4313      	orrs	r3, r2
 80025d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025d2:	4a34      	ldr	r2, [pc, #208]	; (80026a4 <HAL_GPIO_Init+0x354>)
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025d8:	4b32      	ldr	r3, [pc, #200]	; (80026a4 <HAL_GPIO_Init+0x354>)
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	43db      	mvns	r3, r3
 80025e2:	69ba      	ldr	r2, [r7, #24]
 80025e4:	4013      	ands	r3, r2
 80025e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d003      	beq.n	80025fc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80025f4:	69ba      	ldr	r2, [r7, #24]
 80025f6:	693b      	ldr	r3, [r7, #16]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025fc:	4a29      	ldr	r2, [pc, #164]	; (80026a4 <HAL_GPIO_Init+0x354>)
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002602:	4b28      	ldr	r3, [pc, #160]	; (80026a4 <HAL_GPIO_Init+0x354>)
 8002604:	685b      	ldr	r3, [r3, #4]
 8002606:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002608:	693b      	ldr	r3, [r7, #16]
 800260a:	43db      	mvns	r3, r3
 800260c:	69ba      	ldr	r2, [r7, #24]
 800260e:	4013      	ands	r3, r2
 8002610:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800261a:	2b00      	cmp	r3, #0
 800261c:	d003      	beq.n	8002626 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800261e:	69ba      	ldr	r2, [r7, #24]
 8002620:	693b      	ldr	r3, [r7, #16]
 8002622:	4313      	orrs	r3, r2
 8002624:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002626:	4a1f      	ldr	r2, [pc, #124]	; (80026a4 <HAL_GPIO_Init+0x354>)
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800262c:	4b1d      	ldr	r3, [pc, #116]	; (80026a4 <HAL_GPIO_Init+0x354>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	43db      	mvns	r3, r3
 8002636:	69ba      	ldr	r2, [r7, #24]
 8002638:	4013      	ands	r3, r2
 800263a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002644:	2b00      	cmp	r3, #0
 8002646:	d003      	beq.n	8002650 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	4313      	orrs	r3, r2
 800264e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002650:	4a14      	ldr	r2, [pc, #80]	; (80026a4 <HAL_GPIO_Init+0x354>)
 8002652:	69bb      	ldr	r3, [r7, #24]
 8002654:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002656:	69fb      	ldr	r3, [r7, #28]
 8002658:	3301      	adds	r3, #1
 800265a:	61fb      	str	r3, [r7, #28]
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	2b0f      	cmp	r3, #15
 8002660:	f67f ae86 	bls.w	8002370 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002664:	bf00      	nop
 8002666:	bf00      	nop
 8002668:	3724      	adds	r7, #36	; 0x24
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	40023800 	.word	0x40023800
 8002678:	40013800 	.word	0x40013800
 800267c:	40020000 	.word	0x40020000
 8002680:	40020400 	.word	0x40020400
 8002684:	40020800 	.word	0x40020800
 8002688:	40020c00 	.word	0x40020c00
 800268c:	40021000 	.word	0x40021000
 8002690:	40021400 	.word	0x40021400
 8002694:	40021800 	.word	0x40021800
 8002698:	40021c00 	.word	0x40021c00
 800269c:	40022000 	.word	0x40022000
 80026a0:	40022400 	.word	0x40022400
 80026a4:	40013c00 	.word	0x40013c00

080026a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	460b      	mov	r3, r1
 80026b2:	807b      	strh	r3, [r7, #2]
 80026b4:	4613      	mov	r3, r2
 80026b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80026b8:	787b      	ldrb	r3, [r7, #1]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026be:	887a      	ldrh	r2, [r7, #2]
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80026c4:	e003      	b.n	80026ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80026c6:	887b      	ldrh	r3, [r7, #2]
 80026c8:	041a      	lsls	r2, r3, #16
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	619a      	str	r2, [r3, #24]
}
 80026ce:	bf00      	nop
 80026d0:	370c      	adds	r7, #12
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
	...

080026dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026dc:	b580      	push	{r7, lr}
 80026de:	b082      	sub	sp, #8
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e07f      	b.n	80027ee <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d106      	bne.n	8002708 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002702:	6878      	ldr	r0, [r7, #4]
 8002704:	f7fe f9a4 	bl	8000a50 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	2224      	movs	r2, #36	; 0x24
 800270c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	681a      	ldr	r2, [r3, #0]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f022 0201 	bic.w	r2, r2, #1
 800271e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685a      	ldr	r2, [r3, #4]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800272c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800273c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	68db      	ldr	r3, [r3, #12]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d107      	bne.n	8002756 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002752:	609a      	str	r2, [r3, #8]
 8002754:	e006      	b.n	8002764 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689a      	ldr	r2, [r3, #8]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002762:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	2b02      	cmp	r3, #2
 800276a:	d104      	bne.n	8002776 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002774:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	6859      	ldr	r1, [r3, #4]
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	4b1d      	ldr	r3, [pc, #116]	; (80027f8 <HAL_I2C_Init+0x11c>)
 8002782:	430b      	orrs	r3, r1
 8002784:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68da      	ldr	r2, [r3, #12]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002794:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	691a      	ldr	r2, [r3, #16]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	430a      	orrs	r2, r1
 80027ae:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	69d9      	ldr	r1, [r3, #28]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6a1a      	ldr	r2, [r3, #32]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	430a      	orrs	r2, r1
 80027be:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	681a      	ldr	r2, [r3, #0]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f042 0201 	orr.w	r2, r2, #1
 80027ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2200      	movs	r2, #0
 80027d4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2220      	movs	r2, #32
 80027da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80027ec:	2300      	movs	r3, #0
}
 80027ee:	4618      	mov	r0, r3
 80027f0:	3708      	adds	r7, #8
 80027f2:	46bd      	mov	sp, r7
 80027f4:	bd80      	pop	{r7, pc}
 80027f6:	bf00      	nop
 80027f8:	02008000 	.word	0x02008000

080027fc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b088      	sub	sp, #32
 8002800:	af02      	add	r7, sp, #8
 8002802:	60f8      	str	r0, [r7, #12]
 8002804:	607a      	str	r2, [r7, #4]
 8002806:	461a      	mov	r2, r3
 8002808:	460b      	mov	r3, r1
 800280a:	817b      	strh	r3, [r7, #10]
 800280c:	4613      	mov	r3, r2
 800280e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b20      	cmp	r3, #32
 800281a:	f040 80da 	bne.w	80029d2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002824:	2b01      	cmp	r3, #1
 8002826:	d101      	bne.n	800282c <HAL_I2C_Master_Transmit+0x30>
 8002828:	2302      	movs	r3, #2
 800282a:	e0d3      	b.n	80029d4 <HAL_I2C_Master_Transmit+0x1d8>
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002834:	f7ff f802 	bl	800183c <HAL_GetTick>
 8002838:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	9300      	str	r3, [sp, #0]
 800283e:	2319      	movs	r3, #25
 8002840:	2201      	movs	r2, #1
 8002842:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002846:	68f8      	ldr	r0, [r7, #12]
 8002848:	f000 fefb 	bl	8003642 <I2C_WaitOnFlagUntilTimeout>
 800284c:	4603      	mov	r3, r0
 800284e:	2b00      	cmp	r3, #0
 8002850:	d001      	beq.n	8002856 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002852:	2301      	movs	r3, #1
 8002854:	e0be      	b.n	80029d4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	2221      	movs	r2, #33	; 0x21
 800285a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2210      	movs	r2, #16
 8002862:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2200      	movs	r2, #0
 800286a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	893a      	ldrh	r2, [r7, #8]
 8002876:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2200      	movs	r2, #0
 800287c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002882:	b29b      	uxth	r3, r3
 8002884:	2bff      	cmp	r3, #255	; 0xff
 8002886:	d90e      	bls.n	80028a6 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	22ff      	movs	r2, #255	; 0xff
 800288c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002892:	b2da      	uxtb	r2, r3
 8002894:	8979      	ldrh	r1, [r7, #10]
 8002896:	4b51      	ldr	r3, [pc, #324]	; (80029dc <HAL_I2C_Master_Transmit+0x1e0>)
 8002898:	9300      	str	r3, [sp, #0]
 800289a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800289e:	68f8      	ldr	r0, [r7, #12]
 80028a0:	f001 f8f2 	bl	8003a88 <I2C_TransferConfig>
 80028a4:	e06c      	b.n	8002980 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028aa:	b29a      	uxth	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80028b4:	b2da      	uxtb	r2, r3
 80028b6:	8979      	ldrh	r1, [r7, #10]
 80028b8:	4b48      	ldr	r3, [pc, #288]	; (80029dc <HAL_I2C_Master_Transmit+0x1e0>)
 80028ba:	9300      	str	r3, [sp, #0]
 80028bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80028c0:	68f8      	ldr	r0, [r7, #12]
 80028c2:	f001 f8e1 	bl	8003a88 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80028c6:	e05b      	b.n	8002980 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	6a39      	ldr	r1, [r7, #32]
 80028cc:	68f8      	ldr	r0, [r7, #12]
 80028ce:	f000 fef8 	bl	80036c2 <I2C_WaitOnTXISFlagUntilTimeout>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d001      	beq.n	80028dc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e07b      	b.n	80029d4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028e0:	781a      	ldrb	r2, [r3, #0]
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028ec:	1c5a      	adds	r2, r3, #1
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80028f6:	b29b      	uxth	r3, r3
 80028f8:	3b01      	subs	r3, #1
 80028fa:	b29a      	uxth	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002904:	3b01      	subs	r3, #1
 8002906:	b29a      	uxth	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002910:	b29b      	uxth	r3, r3
 8002912:	2b00      	cmp	r3, #0
 8002914:	d034      	beq.n	8002980 <HAL_I2C_Master_Transmit+0x184>
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800291a:	2b00      	cmp	r3, #0
 800291c:	d130      	bne.n	8002980 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	9300      	str	r3, [sp, #0]
 8002922:	6a3b      	ldr	r3, [r7, #32]
 8002924:	2200      	movs	r2, #0
 8002926:	2180      	movs	r1, #128	; 0x80
 8002928:	68f8      	ldr	r0, [r7, #12]
 800292a:	f000 fe8a 	bl	8003642 <I2C_WaitOnFlagUntilTimeout>
 800292e:	4603      	mov	r3, r0
 8002930:	2b00      	cmp	r3, #0
 8002932:	d001      	beq.n	8002938 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e04d      	b.n	80029d4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800293c:	b29b      	uxth	r3, r3
 800293e:	2bff      	cmp	r3, #255	; 0xff
 8002940:	d90e      	bls.n	8002960 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	22ff      	movs	r2, #255	; 0xff
 8002946:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800294c:	b2da      	uxtb	r2, r3
 800294e:	8979      	ldrh	r1, [r7, #10]
 8002950:	2300      	movs	r3, #0
 8002952:	9300      	str	r3, [sp, #0]
 8002954:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	f001 f895 	bl	8003a88 <I2C_TransferConfig>
 800295e:	e00f      	b.n	8002980 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002964:	b29a      	uxth	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800296e:	b2da      	uxtb	r2, r3
 8002970:	8979      	ldrh	r1, [r7, #10]
 8002972:	2300      	movs	r3, #0
 8002974:	9300      	str	r3, [sp, #0]
 8002976:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800297a:	68f8      	ldr	r0, [r7, #12]
 800297c:	f001 f884 	bl	8003a88 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002984:	b29b      	uxth	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d19e      	bne.n	80028c8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800298a:	697a      	ldr	r2, [r7, #20]
 800298c:	6a39      	ldr	r1, [r7, #32]
 800298e:	68f8      	ldr	r0, [r7, #12]
 8002990:	f000 fed7 	bl	8003742 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
 800299c:	e01a      	b.n	80029d4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	2220      	movs	r2, #32
 80029a4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	6859      	ldr	r1, [r3, #4]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <HAL_I2C_Master_Transmit+0x1e4>)
 80029b2:	400b      	ands	r3, r1
 80029b4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2220      	movs	r2, #32
 80029ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2200      	movs	r2, #0
 80029c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2200      	movs	r2, #0
 80029ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80029ce:	2300      	movs	r3, #0
 80029d0:	e000      	b.n	80029d4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80029d2:	2302      	movs	r3, #2
  }
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}
 80029dc:	80002000 	.word	0x80002000
 80029e0:	fe00e800 	.word	0xfe00e800

080029e4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b088      	sub	sp, #32
 80029e8:	af02      	add	r7, sp, #8
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	607a      	str	r2, [r7, #4]
 80029ee:	461a      	mov	r2, r3
 80029f0:	460b      	mov	r3, r1
 80029f2:	817b      	strh	r3, [r7, #10]
 80029f4:	4613      	mov	r3, r2
 80029f6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	2b20      	cmp	r3, #32
 8002a02:	f040 80db 	bne.w	8002bbc <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d101      	bne.n	8002a14 <HAL_I2C_Master_Receive+0x30>
 8002a10:	2302      	movs	r3, #2
 8002a12:	e0d4      	b.n	8002bbe <HAL_I2C_Master_Receive+0x1da>
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	2201      	movs	r2, #1
 8002a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002a1c:	f7fe ff0e 	bl	800183c <HAL_GetTick>
 8002a20:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	9300      	str	r3, [sp, #0]
 8002a26:	2319      	movs	r3, #25
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002a2e:	68f8      	ldr	r0, [r7, #12]
 8002a30:	f000 fe07 	bl	8003642 <I2C_WaitOnFlagUntilTimeout>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d001      	beq.n	8002a3e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e0bf      	b.n	8002bbe <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2222      	movs	r2, #34	; 0x22
 8002a42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2210      	movs	r2, #16
 8002a4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	893a      	ldrh	r2, [r7, #8]
 8002a5e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2200      	movs	r2, #0
 8002a64:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a6a:	b29b      	uxth	r3, r3
 8002a6c:	2bff      	cmp	r3, #255	; 0xff
 8002a6e:	d90e      	bls.n	8002a8e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	22ff      	movs	r2, #255	; 0xff
 8002a74:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a7a:	b2da      	uxtb	r2, r3
 8002a7c:	8979      	ldrh	r1, [r7, #10]
 8002a7e:	4b52      	ldr	r3, [pc, #328]	; (8002bc8 <HAL_I2C_Master_Receive+0x1e4>)
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002a86:	68f8      	ldr	r0, [r7, #12]
 8002a88:	f000 fffe 	bl	8003a88 <I2C_TransferConfig>
 8002a8c:	e06d      	b.n	8002b6a <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a9c:	b2da      	uxtb	r2, r3
 8002a9e:	8979      	ldrh	r1, [r7, #10]
 8002aa0:	4b49      	ldr	r3, [pc, #292]	; (8002bc8 <HAL_I2C_Master_Receive+0x1e4>)
 8002aa2:	9300      	str	r3, [sp, #0]
 8002aa4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	f000 ffed 	bl	8003a88 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8002aae:	e05c      	b.n	8002b6a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	6a39      	ldr	r1, [r7, #32]
 8002ab4:	68f8      	ldr	r0, [r7, #12]
 8002ab6:	f000 fe81 	bl	80037bc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d001      	beq.n	8002ac4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e07c      	b.n	8002bbe <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ace:	b2d2      	uxtb	r2, r2
 8002ad0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ad6:	1c5a      	adds	r2, r3, #1
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	b29a      	uxth	r2, r3
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	3b01      	subs	r3, #1
 8002af0:	b29a      	uxth	r2, r3
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d034      	beq.n	8002b6a <HAL_I2C_Master_Receive+0x186>
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d130      	bne.n	8002b6a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	2180      	movs	r1, #128	; 0x80
 8002b12:	68f8      	ldr	r0, [r7, #12]
 8002b14:	f000 fd95 	bl	8003642 <I2C_WaitOnFlagUntilTimeout>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e04d      	b.n	8002bbe <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b26:	b29b      	uxth	r3, r3
 8002b28:	2bff      	cmp	r3, #255	; 0xff
 8002b2a:	d90e      	bls.n	8002b4a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	22ff      	movs	r2, #255	; 0xff
 8002b30:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b36:	b2da      	uxtb	r2, r3
 8002b38:	8979      	ldrh	r1, [r7, #10]
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	9300      	str	r3, [sp, #0]
 8002b3e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002b42:	68f8      	ldr	r0, [r7, #12]
 8002b44:	f000 ffa0 	bl	8003a88 <I2C_TransferConfig>
 8002b48:	e00f      	b.n	8002b6a <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b4e:	b29a      	uxth	r2, r3
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002b58:	b2da      	uxtb	r2, r3
 8002b5a:	8979      	ldrh	r1, [r7, #10]
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	9300      	str	r3, [sp, #0]
 8002b60:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	f000 ff8f 	bl	8003a88 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002b6e:	b29b      	uxth	r3, r3
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d19d      	bne.n	8002ab0 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	6a39      	ldr	r1, [r7, #32]
 8002b78:	68f8      	ldr	r0, [r7, #12]
 8002b7a:	f000 fde2 	bl	8003742 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e01a      	b.n	8002bbe <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	2220      	movs	r2, #32
 8002b8e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	6859      	ldr	r1, [r3, #4]
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	4b0c      	ldr	r3, [pc, #48]	; (8002bcc <HAL_I2C_Master_Receive+0x1e8>)
 8002b9c:	400b      	ands	r3, r1
 8002b9e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2220      	movs	r2, #32
 8002ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	2200      	movs	r2, #0
 8002bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	e000      	b.n	8002bbe <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8002bbc:	2302      	movs	r3, #2
  }
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3718      	adds	r7, #24
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	80002400 	.word	0x80002400
 8002bcc:	fe00e800 	.word	0xfe00e800

08002bd0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d005      	beq.n	8002bfc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf4:	68ba      	ldr	r2, [r7, #8]
 8002bf6:	68f9      	ldr	r1, [r7, #12]
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	4798      	blx	r3
  }
}
 8002bfc:	bf00      	nop
 8002bfe:	3710      	adds	r7, #16
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002c1c:	697b      	ldr	r3, [r7, #20]
 8002c1e:	0a1b      	lsrs	r3, r3, #8
 8002c20:	f003 0301 	and.w	r3, r3, #1
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d010      	beq.n	8002c4a <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	09db      	lsrs	r3, r3, #7
 8002c2c:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00a      	beq.n	8002c4a <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c38:	f043 0201 	orr.w	r2, r3, #1
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002c48:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	0a9b      	lsrs	r3, r3, #10
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d010      	beq.n	8002c78 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002c56:	693b      	ldr	r3, [r7, #16]
 8002c58:	09db      	lsrs	r3, r3, #7
 8002c5a:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00a      	beq.n	8002c78 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c66:	f043 0208 	orr.w	r2, r3, #8
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c76:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	0a5b      	lsrs	r3, r3, #9
 8002c7c:	f003 0301 	and.w	r3, r3, #1
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d010      	beq.n	8002ca6 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	09db      	lsrs	r3, r3, #7
 8002c88:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d00a      	beq.n	8002ca6 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c94:	f043 0202 	orr.w	r2, r3, #2
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ca4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002caa:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	f003 030b 	and.w	r3, r3, #11
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d003      	beq.n	8002cbe <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8002cb6:	68f9      	ldr	r1, [r7, #12]
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 fb89 	bl	80033d0 <I2C_ITError>
  }
}
 8002cbe:	bf00      	nop
 8002cc0:	3718      	adds	r7, #24
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd80      	pop	{r7, pc}

08002cc6 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cc6:	b480      	push	{r7}
 8002cc8:	b083      	sub	sp, #12
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd8:	4770      	bx	lr

08002cda <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002cda:	b480      	push	{r7}
 8002cdc:	b083      	sub	sp, #12
 8002cde:	af00      	add	r7, sp, #0
 8002ce0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8002ce2:	bf00      	nop
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr

08002cee <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8002cee:	b480      	push	{r7}
 8002cf0:	b083      	sub	sp, #12
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	6078      	str	r0, [r7, #4]
 8002cf6:	460b      	mov	r3, r1
 8002cf8:	70fb      	strb	r3, [r7, #3]
 8002cfa:	4613      	mov	r3, r2
 8002cfc:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8002d12:	bf00      	nop
 8002d14:	370c      	adds	r7, #12
 8002d16:	46bd      	mov	sp, r7
 8002d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1c:	4770      	bx	lr

08002d1e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8002d1e:	b480      	push	{r7}
 8002d20:	b083      	sub	sp, #12
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8002d26:	bf00      	nop
 8002d28:	370c      	adds	r7, #12
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d30:	4770      	bx	lr

08002d32 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8002d32:	b480      	push	{r7}
 8002d34:	b083      	sub	sp, #12
 8002d36:	af00      	add	r7, sp, #0
 8002d38:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr

08002d46 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8002d46:	b580      	push	{r7, lr}
 8002d48:	b086      	sub	sp, #24
 8002d4a:	af00      	add	r7, sp, #0
 8002d4c:	60f8      	str	r0, [r7, #12]
 8002d4e:	60b9      	str	r1, [r7, #8]
 8002d50:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d56:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d101      	bne.n	8002d6a <I2C_Slave_ISR_IT+0x24>
 8002d66:	2302      	movs	r3, #2
 8002d68:	e0ec      	b.n	8002f44 <I2C_Slave_ISR_IT+0x1fe>
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	095b      	lsrs	r3, r3, #5
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d009      	beq.n	8002d92 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	095b      	lsrs	r3, r3, #5
 8002d82:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d003      	beq.n	8002d92 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8002d8a:	6939      	ldr	r1, [r7, #16]
 8002d8c:	68f8      	ldr	r0, [r7, #12]
 8002d8e:	f000 f9bf 	bl	8003110 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	091b      	lsrs	r3, r3, #4
 8002d96:	f003 0301 	and.w	r3, r3, #1
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d04d      	beq.n	8002e3a <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	091b      	lsrs	r3, r3, #4
 8002da2:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d047      	beq.n	8002e3a <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dae:	b29b      	uxth	r3, r3
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d128      	bne.n	8002e06 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	2b28      	cmp	r3, #40	; 0x28
 8002dbe:	d108      	bne.n	8002dd2 <I2C_Slave_ISR_IT+0x8c>
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002dc6:	d104      	bne.n	8002dd2 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8002dc8:	6939      	ldr	r1, [r7, #16]
 8002dca:	68f8      	ldr	r0, [r7, #12]
 8002dcc:	f000 faaa 	bl	8003324 <I2C_ITListenCplt>
 8002dd0:	e032      	b.n	8002e38 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dd8:	b2db      	uxtb	r3, r3
 8002dda:	2b29      	cmp	r3, #41	; 0x29
 8002ddc:	d10e      	bne.n	8002dfc <I2C_Slave_ISR_IT+0xb6>
 8002dde:	697b      	ldr	r3, [r7, #20]
 8002de0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002de4:	d00a      	beq.n	8002dfc <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2210      	movs	r2, #16
 8002dec:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f000 fbe5 	bl	80035be <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f000 f92d 	bl	8003054 <I2C_ITSlaveSeqCplt>
 8002dfa:	e01d      	b.n	8002e38 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2210      	movs	r2, #16
 8002e02:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8002e04:	e096      	b.n	8002f34 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	2210      	movs	r2, #16
 8002e0c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e12:	f043 0204 	orr.w	r2, r3, #4
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d004      	beq.n	8002e2a <I2C_Slave_ISR_IT+0xe4>
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e26:	f040 8085 	bne.w	8002f34 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e2e:	4619      	mov	r1, r3
 8002e30:	68f8      	ldr	r0, [r7, #12]
 8002e32:	f000 facd 	bl	80033d0 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8002e36:	e07d      	b.n	8002f34 <I2C_Slave_ISR_IT+0x1ee>
 8002e38:	e07c      	b.n	8002f34 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	089b      	lsrs	r3, r3, #2
 8002e3e:	f003 0301 	and.w	r3, r3, #1
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d030      	beq.n	8002ea8 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	089b      	lsrs	r3, r3, #2
 8002e4a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d02a      	beq.n	8002ea8 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d018      	beq.n	8002e8e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e66:	b2d2      	uxtb	r2, r2
 8002e68:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6e:	1c5a      	adds	r2, r3, #1
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e84:	b29b      	uxth	r3, r3
 8002e86:	3b01      	subs	r3, #1
 8002e88:	b29a      	uxth	r2, r3
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d14f      	bne.n	8002f38 <I2C_Slave_ISR_IT+0x1f2>
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e9e:	d04b      	beq.n	8002f38 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f000 f8d7 	bl	8003054 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8002ea6:	e047      	b.n	8002f38 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	08db      	lsrs	r3, r3, #3
 8002eac:	f003 0301 	and.w	r3, r3, #1
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d00a      	beq.n	8002eca <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	08db      	lsrs	r3, r3, #3
 8002eb8:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d004      	beq.n	8002eca <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8002ec0:	6939      	ldr	r1, [r7, #16]
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f000 f842 	bl	8002f4c <I2C_ITAddrCplt>
 8002ec8:	e037      	b.n	8002f3a <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002eca:	693b      	ldr	r3, [r7, #16]
 8002ecc:	085b      	lsrs	r3, r3, #1
 8002ece:	f003 0301 	and.w	r3, r3, #1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d031      	beq.n	8002f3a <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	085b      	lsrs	r3, r3, #1
 8002eda:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d02b      	beq.n	8002f3a <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee6:	b29b      	uxth	r3, r3
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d018      	beq.n	8002f1e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef0:	781a      	ldrb	r2, [r3, #0]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002efc:	1c5a      	adds	r2, r3, #1
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	3b01      	subs	r3, #1
 8002f0a:	b29a      	uxth	r2, r3
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002f14:	3b01      	subs	r3, #1
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	851a      	strh	r2, [r3, #40]	; 0x28
 8002f1c:	e00d      	b.n	8002f3a <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8002f1e:	697b      	ldr	r3, [r7, #20]
 8002f20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f24:	d002      	beq.n	8002f2c <I2C_Slave_ISR_IT+0x1e6>
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d106      	bne.n	8002f3a <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f000 f891 	bl	8003054 <I2C_ITSlaveSeqCplt>
 8002f32:	e002      	b.n	8002f3a <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8002f34:	bf00      	nop
 8002f36:	e000      	b.n	8002f3a <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8002f38:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8002f42:	2300      	movs	r3, #0
}
 8002f44:	4618      	mov	r0, r3
 8002f46:	3718      	adds	r7, #24
 8002f48:	46bd      	mov	sp, r7
 8002f4a:	bd80      	pop	{r7, pc}

08002f4c <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f5c:	b2db      	uxtb	r3, r3
 8002f5e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002f62:	2b28      	cmp	r3, #40	; 0x28
 8002f64:	d16a      	bne.n	800303c <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	699b      	ldr	r3, [r3, #24]
 8002f6c:	0c1b      	lsrs	r3, r3, #16
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	699b      	ldr	r3, [r3, #24]
 8002f7c:	0c1b      	lsrs	r3, r3, #16
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002f84:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	b29b      	uxth	r3, r3
 8002f8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002f92:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	68db      	ldr	r3, [r3, #12]
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8002fa0:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	68db      	ldr	r3, [r3, #12]
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d138      	bne.n	800301c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8002faa:	897b      	ldrh	r3, [r7, #10]
 8002fac:	09db      	lsrs	r3, r3, #7
 8002fae:	b29a      	uxth	r2, r3
 8002fb0:	89bb      	ldrh	r3, [r7, #12]
 8002fb2:	4053      	eors	r3, r2
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	f003 0306 	and.w	r3, r3, #6
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d11c      	bne.n	8002ff8 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8002fbe:	897b      	ldrh	r3, [r7, #10]
 8002fc0:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fc6:	1c5a      	adds	r2, r3, #1
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002fd0:	2b02      	cmp	r3, #2
 8002fd2:	d13b      	bne.n	800304c <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	2208      	movs	r2, #8
 8002fe0:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8002fea:	89ba      	ldrh	r2, [r7, #12]
 8002fec:	7bfb      	ldrb	r3, [r7, #15]
 8002fee:	4619      	mov	r1, r3
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f7ff fe7c 	bl	8002cee <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8002ff6:	e029      	b.n	800304c <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8002ff8:	893b      	ldrh	r3, [r7, #8]
 8002ffa:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8002ffc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 fd73 	bl	8003aec <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800300e:	89ba      	ldrh	r2, [r7, #12]
 8003010:	7bfb      	ldrb	r3, [r7, #15]
 8003012:	4619      	mov	r1, r3
 8003014:	6878      	ldr	r0, [r7, #4]
 8003016:	f7ff fe6a 	bl	8002cee <HAL_I2C_AddrCallback>
}
 800301a:	e017      	b.n	800304c <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800301c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003020:	6878      	ldr	r0, [r7, #4]
 8003022:	f000 fd63 	bl	8003aec <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	2200      	movs	r2, #0
 800302a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800302e:	89ba      	ldrh	r2, [r7, #12]
 8003030:	7bfb      	ldrb	r3, [r7, #15]
 8003032:	4619      	mov	r1, r3
 8003034:	6878      	ldr	r0, [r7, #4]
 8003036:	f7ff fe5a 	bl	8002cee <HAL_I2C_AddrCallback>
}
 800303a:	e007      	b.n	800304c <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2208      	movs	r2, #8
 8003042:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2200      	movs	r2, #0
 8003048:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 800304c:	bf00      	nop
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2200      	movs	r2, #0
 8003068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	0b9b      	lsrs	r3, r3, #14
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b00      	cmp	r3, #0
 8003076:	d008      	beq.n	800308a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003086:	601a      	str	r2, [r3, #0]
 8003088:	e00d      	b.n	80030a6 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	0bdb      	lsrs	r3, r3, #15
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d007      	beq.n	80030a6 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	681a      	ldr	r2, [r3, #0]
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80030a4:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030ac:	b2db      	uxtb	r3, r3
 80030ae:	2b29      	cmp	r3, #41	; 0x29
 80030b0:	d112      	bne.n	80030d8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2228      	movs	r2, #40	; 0x28
 80030b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2221      	movs	r2, #33	; 0x21
 80030be:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80030c0:	2101      	movs	r1, #1
 80030c2:	6878      	ldr	r0, [r7, #4]
 80030c4:	f000 fd12 	bl	8003aec <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2200      	movs	r2, #0
 80030cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80030d0:	6878      	ldr	r0, [r7, #4]
 80030d2:	f7ff fdf8 	bl	8002cc6 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80030d6:	e017      	b.n	8003108 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b2a      	cmp	r3, #42	; 0x2a
 80030e2:	d111      	bne.n	8003108 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2228      	movs	r2, #40	; 0x28
 80030e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2222      	movs	r2, #34	; 0x22
 80030f0:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80030f2:	2102      	movs	r1, #2
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 fcf9 	bl	8003aec <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f7ff fde9 	bl	8002cda <HAL_I2C_SlaveRxCpltCallback>
}
 8003108:	bf00      	nop
 800310a:	3710      	adds	r7, #16
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}

08003110 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b086      	sub	sp, #24
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800312c:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2220      	movs	r2, #32
 8003134:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003136:	7bfb      	ldrb	r3, [r7, #15]
 8003138:	2b21      	cmp	r3, #33	; 0x21
 800313a:	d002      	beq.n	8003142 <I2C_ITSlaveCplt+0x32>
 800313c:	7bfb      	ldrb	r3, [r7, #15]
 800313e:	2b29      	cmp	r3, #41	; 0x29
 8003140:	d108      	bne.n	8003154 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003142:	f248 0101 	movw	r1, #32769	; 0x8001
 8003146:	6878      	ldr	r0, [r7, #4]
 8003148:	f000 fcd0 	bl	8003aec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	2221      	movs	r2, #33	; 0x21
 8003150:	631a      	str	r2, [r3, #48]	; 0x30
 8003152:	e00d      	b.n	8003170 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003154:	7bfb      	ldrb	r3, [r7, #15]
 8003156:	2b22      	cmp	r3, #34	; 0x22
 8003158:	d002      	beq.n	8003160 <I2C_ITSlaveCplt+0x50>
 800315a:	7bfb      	ldrb	r3, [r7, #15]
 800315c:	2b2a      	cmp	r3, #42	; 0x2a
 800315e:	d107      	bne.n	8003170 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003160:	f248 0102 	movw	r1, #32770	; 0x8002
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 fcc1 	bl	8003aec <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2222      	movs	r2, #34	; 0x22
 800316e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	685a      	ldr	r2, [r3, #4]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800317e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	6859      	ldr	r1, [r3, #4]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	4b64      	ldr	r3, [pc, #400]	; (800331c <I2C_ITSlaveCplt+0x20c>)
 800318c:	400b      	ands	r3, r1
 800318e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003190:	6878      	ldr	r0, [r7, #4]
 8003192:	f000 fa14 	bl	80035be <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	0b9b      	lsrs	r3, r3, #14
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d013      	beq.n	80031ca <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80031b0:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d020      	beq.n	80031fc <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80031c8:	e018      	b.n	80031fc <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	0bdb      	lsrs	r3, r3, #15
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d012      	beq.n	80031fc <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80031e4:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d006      	beq.n	80031fc <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	089b      	lsrs	r3, r3, #2
 8003200:	f003 0301 	and.w	r3, r3, #1
 8003204:	2b00      	cmp	r3, #0
 8003206:	d020      	beq.n	800324a <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003208:	697b      	ldr	r3, [r7, #20]
 800320a:	f023 0304 	bic.w	r3, r3, #4
 800320e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	b2d2      	uxtb	r2, r2
 800321c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003222:	1c5a      	adds	r2, r3, #1
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800322c:	2b00      	cmp	r3, #0
 800322e:	d00c      	beq.n	800324a <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003234:	3b01      	subs	r3, #1
 8003236:	b29a      	uxth	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003240:	b29b      	uxth	r3, r3
 8003242:	3b01      	subs	r3, #1
 8003244:	b29a      	uxth	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800324e:	b29b      	uxth	r3, r3
 8003250:	2b00      	cmp	r3, #0
 8003252:	d005      	beq.n	8003260 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003258:	f043 0204 	orr.w	r2, r3, #4
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2200      	movs	r2, #0
 8003264:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2200      	movs	r2, #0
 800326c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003272:	2b00      	cmp	r3, #0
 8003274:	d010      	beq.n	8003298 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327a:	4619      	mov	r1, r3
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 f8a7 	bl	80033d0 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b28      	cmp	r3, #40	; 0x28
 800328c:	d141      	bne.n	8003312 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800328e:	6979      	ldr	r1, [r7, #20]
 8003290:	6878      	ldr	r0, [r7, #4]
 8003292:	f000 f847 	bl	8003324 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003296:	e03c      	b.n	8003312 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80032a0:	d014      	beq.n	80032cc <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7ff fed6 	bl	8003054 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	4a1d      	ldr	r2, [pc, #116]	; (8003320 <I2C_ITSlaveCplt+0x210>)
 80032ac:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2220      	movs	r2, #32
 80032b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2200      	movs	r2, #0
 80032c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80032c4:	6878      	ldr	r0, [r7, #4]
 80032c6:	f7ff fd20 	bl	8002d0a <HAL_I2C_ListenCpltCallback>
}
 80032ca:	e022      	b.n	8003312 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032d2:	b2db      	uxtb	r3, r3
 80032d4:	2b22      	cmp	r3, #34	; 0x22
 80032d6:	d10e      	bne.n	80032f6 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2220      	movs	r2, #32
 80032dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2200      	movs	r2, #0
 80032e4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 80032ee:	6878      	ldr	r0, [r7, #4]
 80032f0:	f7ff fcf3 	bl	8002cda <HAL_I2C_SlaveRxCpltCallback>
}
 80032f4:	e00d      	b.n	8003312 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2220      	movs	r2, #32
 80032fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2200      	movs	r2, #0
 8003308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f7ff fcda 	bl	8002cc6 <HAL_I2C_SlaveTxCpltCallback>
}
 8003312:	bf00      	nop
 8003314:	3718      	adds	r7, #24
 8003316:	46bd      	mov	sp, r7
 8003318:	bd80      	pop	{r7, pc}
 800331a:	bf00      	nop
 800331c:	fe00e800 	.word	0xfe00e800
 8003320:	ffff0000 	.word	0xffff0000

08003324 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	4a26      	ldr	r2, [pc, #152]	; (80033cc <I2C_ITListenCplt+0xa8>)
 8003332:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2200      	movs	r2, #0
 8003338:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2220      	movs	r2, #32
 800333e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2200      	movs	r2, #0
 800334e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	089b      	lsrs	r3, r3, #2
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	2b00      	cmp	r3, #0
 800335a:	d022      	beq.n	80033a2 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003366:	b2d2      	uxtb	r2, r2
 8003368:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800336e:	1c5a      	adds	r2, r3, #1
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003378:	2b00      	cmp	r3, #0
 800337a:	d012      	beq.n	80033a2 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003380:	3b01      	subs	r3, #1
 8003382:	b29a      	uxth	r2, r3
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800338c:	b29b      	uxth	r3, r3
 800338e:	3b01      	subs	r3, #1
 8003390:	b29a      	uxth	r2, r3
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800339a:	f043 0204 	orr.w	r2, r3, #4
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80033a2:	f248 0103 	movw	r1, #32771	; 0x8003
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 fba0 	bl	8003aec <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2210      	movs	r2, #16
 80033b2:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f7ff fca4 	bl	8002d0a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80033c2:	bf00      	nop
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}
 80033ca:	bf00      	nop
 80033cc:	ffff0000 	.word	0xffff0000

080033d0 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a5d      	ldr	r2, [pc, #372]	; (8003564 <I2C_ITError+0x194>)
 80033ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2200      	movs	r2, #0
 80033f4:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	431a      	orrs	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003402:	7bfb      	ldrb	r3, [r7, #15]
 8003404:	2b28      	cmp	r3, #40	; 0x28
 8003406:	d005      	beq.n	8003414 <I2C_ITError+0x44>
 8003408:	7bfb      	ldrb	r3, [r7, #15]
 800340a:	2b29      	cmp	r3, #41	; 0x29
 800340c:	d002      	beq.n	8003414 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800340e:	7bfb      	ldrb	r3, [r7, #15]
 8003410:	2b2a      	cmp	r3, #42	; 0x2a
 8003412:	d10b      	bne.n	800342c <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003414:	2103      	movs	r1, #3
 8003416:	6878      	ldr	r0, [r7, #4]
 8003418:	f000 fb68 	bl	8003aec <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2228      	movs	r2, #40	; 0x28
 8003420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	4a50      	ldr	r2, [pc, #320]	; (8003568 <I2C_ITError+0x198>)
 8003428:	635a      	str	r2, [r3, #52]	; 0x34
 800342a:	e011      	b.n	8003450 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800342c:	f248 0103 	movw	r1, #32771	; 0x8003
 8003430:	6878      	ldr	r0, [r7, #4]
 8003432:	f000 fb5b 	bl	8003aec <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800343c:	b2db      	uxtb	r3, r3
 800343e:	2b60      	cmp	r3, #96	; 0x60
 8003440:	d003      	beq.n	800344a <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2220      	movs	r2, #32
 8003446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003454:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800345a:	2b00      	cmp	r3, #0
 800345c:	d039      	beq.n	80034d2 <I2C_ITError+0x102>
 800345e:	68bb      	ldr	r3, [r7, #8]
 8003460:	2b11      	cmp	r3, #17
 8003462:	d002      	beq.n	800346a <I2C_ITError+0x9a>
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	2b21      	cmp	r3, #33	; 0x21
 8003468:	d133      	bne.n	80034d2 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003474:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003478:	d107      	bne.n	800348a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681a      	ldr	r2, [r3, #0]
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003488:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800348e:	4618      	mov	r0, r3
 8003490:	f7fe ff4f 	bl	8002332 <HAL_DMA_GetState>
 8003494:	4603      	mov	r3, r0
 8003496:	2b01      	cmp	r3, #1
 8003498:	d017      	beq.n	80034ca <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800349e:	4a33      	ldr	r2, [pc, #204]	; (800356c <I2C_ITError+0x19c>)
 80034a0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7fe ff1d 	bl	80022ee <HAL_DMA_Abort_IT>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d04d      	beq.n	8003556 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80034c4:	4610      	mov	r0, r2
 80034c6:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80034c8:	e045      	b.n	8003556 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f850 	bl	8003570 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80034d0:	e041      	b.n	8003556 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d039      	beq.n	800354e <I2C_ITError+0x17e>
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	2b12      	cmp	r3, #18
 80034de:	d002      	beq.n	80034e6 <I2C_ITError+0x116>
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	2b22      	cmp	r3, #34	; 0x22
 80034e4:	d133      	bne.n	800354e <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80034f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034f4:	d107      	bne.n	8003506 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681a      	ldr	r2, [r3, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003504:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800350a:	4618      	mov	r0, r3
 800350c:	f7fe ff11 	bl	8002332 <HAL_DMA_GetState>
 8003510:	4603      	mov	r3, r0
 8003512:	2b01      	cmp	r3, #1
 8003514:	d017      	beq.n	8003546 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800351a:	4a14      	ldr	r2, [pc, #80]	; (800356c <I2C_ITError+0x19c>)
 800351c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800352a:	4618      	mov	r0, r3
 800352c:	f7fe fedf 	bl	80022ee <HAL_DMA_Abort_IT>
 8003530:	4603      	mov	r3, r0
 8003532:	2b00      	cmp	r3, #0
 8003534:	d011      	beq.n	800355a <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800353a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003540:	4610      	mov	r0, r2
 8003542:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003544:	e009      	b.n	800355a <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f812 	bl	8003570 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800354c:	e005      	b.n	800355a <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f80e 	bl	8003570 <I2C_TreatErrorCallback>
  }
}
 8003554:	e002      	b.n	800355c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003556:	bf00      	nop
 8003558:	e000      	b.n	800355c <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800355a:	bf00      	nop
}
 800355c:	bf00      	nop
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	ffff0000 	.word	0xffff0000
 8003568:	08002d47 	.word	0x08002d47
 800356c:	08003607 	.word	0x08003607

08003570 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800357e:	b2db      	uxtb	r3, r3
 8003580:	2b60      	cmp	r3, #96	; 0x60
 8003582:	d10e      	bne.n	80035a2 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2220      	movs	r2, #32
 8003588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2200      	movs	r2, #0
 8003596:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f7ff fbc9 	bl	8002d32 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80035a0:	e009      	b.n	80035b6 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80035b0:	6878      	ldr	r0, [r7, #4]
 80035b2:	f7ff fbb4 	bl	8002d1e <HAL_I2C_ErrorCallback>
}
 80035b6:	bf00      	nop
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}

080035be <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80035be:	b480      	push	{r7}
 80035c0:	b083      	sub	sp, #12
 80035c2:	af00      	add	r7, sp, #0
 80035c4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	699b      	ldr	r3, [r3, #24]
 80035cc:	f003 0302 	and.w	r3, r3, #2
 80035d0:	2b02      	cmp	r3, #2
 80035d2:	d103      	bne.n	80035dc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	2200      	movs	r2, #0
 80035da:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	699b      	ldr	r3, [r3, #24]
 80035e2:	f003 0301 	and.w	r3, r3, #1
 80035e6:	2b01      	cmp	r3, #1
 80035e8:	d007      	beq.n	80035fa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	699a      	ldr	r2, [r3, #24]
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	f042 0201 	orr.w	r2, r2, #1
 80035f8:	619a      	str	r2, [r3, #24]
  }
}
 80035fa:	bf00      	nop
 80035fc:	370c      	adds	r7, #12
 80035fe:	46bd      	mov	sp, r7
 8003600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003604:	4770      	bx	lr

08003606 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b084      	sub	sp, #16
 800360a:	af00      	add	r7, sp, #0
 800360c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003612:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003618:	2b00      	cmp	r3, #0
 800361a:	d003      	beq.n	8003624 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003620:	2200      	movs	r2, #0
 8003622:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003628:	2b00      	cmp	r3, #0
 800362a:	d003      	beq.n	8003634 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003630:	2200      	movs	r2, #0
 8003632:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8003634:	68f8      	ldr	r0, [r7, #12]
 8003636:	f7ff ff9b 	bl	8003570 <I2C_TreatErrorCallback>
}
 800363a:	bf00      	nop
 800363c:	3710      	adds	r7, #16
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}

08003642 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003642:	b580      	push	{r7, lr}
 8003644:	b084      	sub	sp, #16
 8003646:	af00      	add	r7, sp, #0
 8003648:	60f8      	str	r0, [r7, #12]
 800364a:	60b9      	str	r1, [r7, #8]
 800364c:	603b      	str	r3, [r7, #0]
 800364e:	4613      	mov	r3, r2
 8003650:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003652:	e022      	b.n	800369a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800365a:	d01e      	beq.n	800369a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800365c:	f7fe f8ee 	bl	800183c <HAL_GetTick>
 8003660:	4602      	mov	r2, r0
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	683a      	ldr	r2, [r7, #0]
 8003668:	429a      	cmp	r2, r3
 800366a:	d302      	bcc.n	8003672 <I2C_WaitOnFlagUntilTimeout+0x30>
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	2b00      	cmp	r3, #0
 8003670:	d113      	bne.n	800369a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003676:	f043 0220 	orr.w	r2, r3, #32
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	2220      	movs	r2, #32
 8003682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003696:	2301      	movs	r3, #1
 8003698:	e00f      	b.n	80036ba <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	699a      	ldr	r2, [r3, #24]
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	4013      	ands	r3, r2
 80036a4:	68ba      	ldr	r2, [r7, #8]
 80036a6:	429a      	cmp	r2, r3
 80036a8:	bf0c      	ite	eq
 80036aa:	2301      	moveq	r3, #1
 80036ac:	2300      	movne	r3, #0
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	461a      	mov	r2, r3
 80036b2:	79fb      	ldrb	r3, [r7, #7]
 80036b4:	429a      	cmp	r2, r3
 80036b6:	d0cd      	beq.n	8003654 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}

080036c2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80036c2:	b580      	push	{r7, lr}
 80036c4:	b084      	sub	sp, #16
 80036c6:	af00      	add	r7, sp, #0
 80036c8:	60f8      	str	r0, [r7, #12]
 80036ca:	60b9      	str	r1, [r7, #8]
 80036cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80036ce:	e02c      	b.n	800372a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	68b9      	ldr	r1, [r7, #8]
 80036d4:	68f8      	ldr	r0, [r7, #12]
 80036d6:	f000 f8eb 	bl	80038b0 <I2C_IsErrorOccurred>
 80036da:	4603      	mov	r3, r0
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d001      	beq.n	80036e4 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e02a      	b.n	800373a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036e4:	68bb      	ldr	r3, [r7, #8]
 80036e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ea:	d01e      	beq.n	800372a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036ec:	f7fe f8a6 	bl	800183c <HAL_GetTick>
 80036f0:	4602      	mov	r2, r0
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	1ad3      	subs	r3, r2, r3
 80036f6:	68ba      	ldr	r2, [r7, #8]
 80036f8:	429a      	cmp	r2, r3
 80036fa:	d302      	bcc.n	8003702 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d113      	bne.n	800372a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003706:	f043 0220 	orr.w	r2, r3, #32
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	2220      	movs	r2, #32
 8003712:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2200      	movs	r2, #0
 800371a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	2200      	movs	r2, #0
 8003722:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003726:	2301      	movs	r3, #1
 8003728:	e007      	b.n	800373a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	699b      	ldr	r3, [r3, #24]
 8003730:	f003 0302 	and.w	r3, r3, #2
 8003734:	2b02      	cmp	r3, #2
 8003736:	d1cb      	bne.n	80036d0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3710      	adds	r7, #16
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}

08003742 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003742:	b580      	push	{r7, lr}
 8003744:	b084      	sub	sp, #16
 8003746:	af00      	add	r7, sp, #0
 8003748:	60f8      	str	r0, [r7, #12]
 800374a:	60b9      	str	r1, [r7, #8]
 800374c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800374e:	e028      	b.n	80037a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003750:	687a      	ldr	r2, [r7, #4]
 8003752:	68b9      	ldr	r1, [r7, #8]
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 f8ab 	bl	80038b0 <I2C_IsErrorOccurred>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d001      	beq.n	8003764 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e026      	b.n	80037b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003764:	f7fe f86a 	bl	800183c <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	68ba      	ldr	r2, [r7, #8]
 8003770:	429a      	cmp	r2, r3
 8003772:	d302      	bcc.n	800377a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d113      	bne.n	80037a2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800377e:	f043 0220 	orr.w	r2, r3, #32
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	2220      	movs	r2, #32
 800378a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2200      	movs	r2, #0
 8003792:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	2200      	movs	r2, #0
 800379a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e007      	b.n	80037b2 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	699b      	ldr	r3, [r3, #24]
 80037a8:	f003 0320 	and.w	r3, r3, #32
 80037ac:	2b20      	cmp	r3, #32
 80037ae:	d1cf      	bne.n	8003750 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
	...

080037bc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037c8:	e064      	b.n	8003894 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	68b9      	ldr	r1, [r7, #8]
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f000 f86e 	bl	80038b0 <I2C_IsErrorOccurred>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e062      	b.n	80038a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	699b      	ldr	r3, [r3, #24]
 80037e4:	f003 0320 	and.w	r3, r3, #32
 80037e8:	2b20      	cmp	r3, #32
 80037ea:	d138      	bne.n	800385e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	699b      	ldr	r3, [r3, #24]
 80037f2:	f003 0304 	and.w	r3, r3, #4
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	d105      	bne.n	8003806 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003802:	2300      	movs	r3, #0
 8003804:	e04e      	b.n	80038a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	f003 0310 	and.w	r3, r3, #16
 8003810:	2b10      	cmp	r3, #16
 8003812:	d107      	bne.n	8003824 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2210      	movs	r2, #16
 800381a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	2204      	movs	r2, #4
 8003820:	645a      	str	r2, [r3, #68]	; 0x44
 8003822:	e002      	b.n	800382a <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2220      	movs	r2, #32
 8003830:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	6859      	ldr	r1, [r3, #4]
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	4b1b      	ldr	r3, [pc, #108]	; (80038ac <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 800383e:	400b      	ands	r3, r1
 8003840:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2220      	movs	r2, #32
 8003846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2200      	movs	r2, #0
 800384e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2200      	movs	r2, #0
 8003856:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e022      	b.n	80038a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800385e:	f7fd ffed 	bl	800183c <HAL_GetTick>
 8003862:	4602      	mov	r2, r0
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	1ad3      	subs	r3, r2, r3
 8003868:	68ba      	ldr	r2, [r7, #8]
 800386a:	429a      	cmp	r2, r3
 800386c:	d302      	bcc.n	8003874 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d10f      	bne.n	8003894 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003878:	f043 0220 	orr.w	r2, r3, #32
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2220      	movs	r2, #32
 8003884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003890:	2301      	movs	r3, #1
 8003892:	e007      	b.n	80038a4 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	f003 0304 	and.w	r3, r3, #4
 800389e:	2b04      	cmp	r3, #4
 80038a0:	d193      	bne.n	80037ca <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80038a2:	2300      	movs	r3, #0
}
 80038a4:	4618      	mov	r0, r3
 80038a6:	3710      	adds	r7, #16
 80038a8:	46bd      	mov	sp, r7
 80038aa:	bd80      	pop	{r7, pc}
 80038ac:	fe00e800 	.word	0xfe00e800

080038b0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b08a      	sub	sp, #40	; 0x28
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	60f8      	str	r0, [r7, #12]
 80038b8:	60b9      	str	r1, [r7, #8]
 80038ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038bc:	2300      	movs	r3, #0
 80038be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	699b      	ldr	r3, [r3, #24]
 80038c8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80038ca:	2300      	movs	r3, #0
 80038cc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80038d2:	69bb      	ldr	r3, [r7, #24]
 80038d4:	f003 0310 	and.w	r3, r3, #16
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d075      	beq.n	80039c8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	2210      	movs	r2, #16
 80038e2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80038e4:	e056      	b.n	8003994 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80038e6:	68bb      	ldr	r3, [r7, #8]
 80038e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038ec:	d052      	beq.n	8003994 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80038ee:	f7fd ffa5 	bl	800183c <HAL_GetTick>
 80038f2:	4602      	mov	r2, r0
 80038f4:	69fb      	ldr	r3, [r7, #28]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	68ba      	ldr	r2, [r7, #8]
 80038fa:	429a      	cmp	r2, r3
 80038fc:	d302      	bcc.n	8003904 <I2C_IsErrorOccurred+0x54>
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d147      	bne.n	8003994 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800390e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003916:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	699b      	ldr	r3, [r3, #24]
 800391e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003922:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003926:	d12e      	bne.n	8003986 <I2C_IsErrorOccurred+0xd6>
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800392e:	d02a      	beq.n	8003986 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003930:	7cfb      	ldrb	r3, [r7, #19]
 8003932:	2b20      	cmp	r3, #32
 8003934:	d027      	beq.n	8003986 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	685a      	ldr	r2, [r3, #4]
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003944:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003946:	f7fd ff79 	bl	800183c <HAL_GetTick>
 800394a:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800394c:	e01b      	b.n	8003986 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800394e:	f7fd ff75 	bl	800183c <HAL_GetTick>
 8003952:	4602      	mov	r2, r0
 8003954:	69fb      	ldr	r3, [r7, #28]
 8003956:	1ad3      	subs	r3, r2, r3
 8003958:	2b19      	cmp	r3, #25
 800395a:	d914      	bls.n	8003986 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003960:	f043 0220 	orr.w	r2, r3, #32
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	2220      	movs	r2, #32
 800396c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	2200      	movs	r2, #0
 8003974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	2200      	movs	r2, #0
 800397c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	f003 0320 	and.w	r3, r3, #32
 8003990:	2b20      	cmp	r3, #32
 8003992:	d1dc      	bne.n	800394e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	699b      	ldr	r3, [r3, #24]
 800399a:	f003 0320 	and.w	r3, r3, #32
 800399e:	2b20      	cmp	r3, #32
 80039a0:	d003      	beq.n	80039aa <I2C_IsErrorOccurred+0xfa>
 80039a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d09d      	beq.n	80038e6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80039aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d103      	bne.n	80039ba <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2220      	movs	r2, #32
 80039b8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80039ba:	6a3b      	ldr	r3, [r7, #32]
 80039bc:	f043 0304 	orr.w	r3, r3, #4
 80039c0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80039c2:	2301      	movs	r3, #1
 80039c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d00b      	beq.n	80039f2 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80039da:	6a3b      	ldr	r3, [r7, #32]
 80039dc:	f043 0301 	orr.w	r3, r3, #1
 80039e0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80039ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d00b      	beq.n	8003a14 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80039fc:	6a3b      	ldr	r3, [r7, #32]
 80039fe:	f043 0308 	orr.w	r3, r3, #8
 8003a02:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003a0c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a0e:	2301      	movs	r3, #1
 8003a10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003a14:	69bb      	ldr	r3, [r7, #24]
 8003a16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d00b      	beq.n	8003a36 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003a1e:	6a3b      	ldr	r3, [r7, #32]
 8003a20:	f043 0302 	orr.w	r3, r3, #2
 8003a24:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003a2e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003a30:	2301      	movs	r3, #1
 8003a32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003a36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d01c      	beq.n	8003a78 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003a3e:	68f8      	ldr	r0, [r7, #12]
 8003a40:	f7ff fdbd 	bl	80035be <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	6859      	ldr	r1, [r3, #4]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	4b0d      	ldr	r3, [pc, #52]	; (8003a84 <I2C_IsErrorOccurred+0x1d4>)
 8003a50:	400b      	ands	r3, r1
 8003a52:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003a58:	6a3b      	ldr	r3, [r7, #32]
 8003a5a:	431a      	orrs	r2, r3
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	2220      	movs	r2, #32
 8003a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	2200      	movs	r2, #0
 8003a74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003a78:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3728      	adds	r7, #40	; 0x28
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}
 8003a84:	fe00e800 	.word	0xfe00e800

08003a88 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b087      	sub	sp, #28
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	607b      	str	r3, [r7, #4]
 8003a92:	460b      	mov	r3, r1
 8003a94:	817b      	strh	r3, [r7, #10]
 8003a96:	4613      	mov	r3, r2
 8003a98:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003a9a:	897b      	ldrh	r3, [r7, #10]
 8003a9c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003aa0:	7a7b      	ldrb	r3, [r7, #9]
 8003aa2:	041b      	lsls	r3, r3, #16
 8003aa4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003aa8:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8003aae:	6a3b      	ldr	r3, [r7, #32]
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8003ab6:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	6a3b      	ldr	r3, [r7, #32]
 8003ac0:	0d5b      	lsrs	r3, r3, #21
 8003ac2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8003ac6:	4b08      	ldr	r3, [pc, #32]	; (8003ae8 <I2C_TransferConfig+0x60>)
 8003ac8:	430b      	orrs	r3, r1
 8003aca:	43db      	mvns	r3, r3
 8003acc:	ea02 0103 	and.w	r1, r2, r3
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8003ada:	bf00      	nop
 8003adc:	371c      	adds	r7, #28
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae4:	4770      	bx	lr
 8003ae6:	bf00      	nop
 8003ae8:	03ff63ff 	.word	0x03ff63ff

08003aec <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8003aec:	b480      	push	{r7}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
 8003af4:	460b      	mov	r3, r1
 8003af6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8003af8:	2300      	movs	r3, #0
 8003afa:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8003afc:	887b      	ldrh	r3, [r7, #2]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d00f      	beq.n	8003b26 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8003b0c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b1a:	2b28      	cmp	r3, #40	; 0x28
 8003b1c:	d003      	beq.n	8003b26 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003b24:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8003b26:	887b      	ldrh	r3, [r7, #2]
 8003b28:	f003 0302 	and.w	r3, r3, #2
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d00f      	beq.n	8003b50 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8003b36:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b3e:	b2db      	uxtb	r3, r3
 8003b40:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003b44:	2b28      	cmp	r3, #40	; 0x28
 8003b46:	d003      	beq.n	8003b50 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8003b4e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8003b50:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	da03      	bge.n	8003b60 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8003b5e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8003b60:	887b      	ldrh	r3, [r7, #2]
 8003b62:	2b10      	cmp	r3, #16
 8003b64:	d103      	bne.n	8003b6e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8003b6c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8003b6e:	887b      	ldrh	r3, [r7, #2]
 8003b70:	2b20      	cmp	r3, #32
 8003b72:	d103      	bne.n	8003b7c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f043 0320 	orr.w	r3, r3, #32
 8003b7a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8003b7c:	887b      	ldrh	r3, [r7, #2]
 8003b7e:	2b40      	cmp	r3, #64	; 0x40
 8003b80:	d103      	bne.n	8003b8a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b88:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	6819      	ldr	r1, [r3, #0]
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	43da      	mvns	r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	400a      	ands	r2, r1
 8003b9a:	601a      	str	r2, [r3, #0]
}
 8003b9c:	bf00      	nop
 8003b9e:	3714      	adds	r7, #20
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b083      	sub	sp, #12
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bb8:	b2db      	uxtb	r3, r3
 8003bba:	2b20      	cmp	r3, #32
 8003bbc:	d138      	bne.n	8003c30 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d101      	bne.n	8003bcc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003bc8:	2302      	movs	r3, #2
 8003bca:	e032      	b.n	8003c32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2224      	movs	r2, #36	; 0x24
 8003bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0201 	bic.w	r2, r2, #1
 8003bea:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003bfa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	6819      	ldr	r1, [r3, #0]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	683a      	ldr	r2, [r7, #0]
 8003c08:	430a      	orrs	r2, r1
 8003c0a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681a      	ldr	r2, [r3, #0]
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f042 0201 	orr.w	r2, r2, #1
 8003c1a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2220      	movs	r2, #32
 8003c20:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2200      	movs	r2, #0
 8003c28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	e000      	b.n	8003c32 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003c30:	2302      	movs	r3, #2
  }
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	370c      	adds	r7, #12
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr

08003c3e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003c3e:	b480      	push	{r7}
 8003c40:	b085      	sub	sp, #20
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
 8003c46:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b20      	cmp	r3, #32
 8003c52:	d139      	bne.n	8003cc8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d101      	bne.n	8003c62 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003c5e:	2302      	movs	r3, #2
 8003c60:	e033      	b.n	8003cca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	2201      	movs	r2, #1
 8003c66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2224      	movs	r2, #36	; 0x24
 8003c6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	681a      	ldr	r2, [r3, #0]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f022 0201 	bic.w	r2, r2, #1
 8003c80:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c90:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	021b      	lsls	r3, r3, #8
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 0201 	orr.w	r2, r2, #1
 8003cb2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	e000      	b.n	8003cca <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003cc8:	2302      	movs	r3, #2
  }
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3714      	adds	r7, #20
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
	...

08003cd8 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003cdc:	4b05      	ldr	r3, [pc, #20]	; (8003cf4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a04      	ldr	r2, [pc, #16]	; (8003cf4 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003ce2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ce6:	6013      	str	r3, [r2, #0]
}
 8003ce8:	bf00      	nop
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	40007000 	.word	0x40007000

08003cf8 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003cfe:	2300      	movs	r3, #0
 8003d00:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003d02:	4b23      	ldr	r3, [pc, #140]	; (8003d90 <HAL_PWREx_EnableOverDrive+0x98>)
 8003d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d06:	4a22      	ldr	r2, [pc, #136]	; (8003d90 <HAL_PWREx_EnableOverDrive+0x98>)
 8003d08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003d0e:	4b20      	ldr	r3, [pc, #128]	; (8003d90 <HAL_PWREx_EnableOverDrive+0x98>)
 8003d10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d16:	603b      	str	r3, [r7, #0]
 8003d18:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003d1a:	4b1e      	ldr	r3, [pc, #120]	; (8003d94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a1d      	ldr	r2, [pc, #116]	; (8003d94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d24:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d26:	f7fd fd89 	bl	800183c <HAL_GetTick>
 8003d2a:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d2c:	e009      	b.n	8003d42 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d2e:	f7fd fd85 	bl	800183c <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d3c:	d901      	bls.n	8003d42 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003d3e:	2303      	movs	r3, #3
 8003d40:	e022      	b.n	8003d88 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003d42:	4b14      	ldr	r3, [pc, #80]	; (8003d94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d4e:	d1ee      	bne.n	8003d2e <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003d50:	4b10      	ldr	r3, [pc, #64]	; (8003d94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a0f      	ldr	r2, [pc, #60]	; (8003d94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d56:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d5a:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003d5c:	f7fd fd6e 	bl	800183c <HAL_GetTick>
 8003d60:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003d62:	e009      	b.n	8003d78 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003d64:	f7fd fd6a 	bl	800183c <HAL_GetTick>
 8003d68:	4602      	mov	r2, r0
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	1ad3      	subs	r3, r2, r3
 8003d6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003d72:	d901      	bls.n	8003d78 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e007      	b.n	8003d88 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003d78:	4b06      	ldr	r3, [pc, #24]	; (8003d94 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d80:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d84:	d1ee      	bne.n	8003d64 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003d86:	2300      	movs	r3, #0
}
 8003d88:	4618      	mov	r0, r3
 8003d8a:	3708      	adds	r7, #8
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	40023800 	.word	0x40023800
 8003d94:	40007000 	.word	0x40007000

08003d98 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003da0:	2300      	movs	r3, #0
 8003da2:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d101      	bne.n	8003dae <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003daa:	2301      	movs	r3, #1
 8003dac:	e29b      	b.n	80042e6 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f003 0301 	and.w	r3, r3, #1
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 8087 	beq.w	8003eca <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003dbc:	4b96      	ldr	r3, [pc, #600]	; (8004018 <HAL_RCC_OscConfig+0x280>)
 8003dbe:	689b      	ldr	r3, [r3, #8]
 8003dc0:	f003 030c 	and.w	r3, r3, #12
 8003dc4:	2b04      	cmp	r3, #4
 8003dc6:	d00c      	beq.n	8003de2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dc8:	4b93      	ldr	r3, [pc, #588]	; (8004018 <HAL_RCC_OscConfig+0x280>)
 8003dca:	689b      	ldr	r3, [r3, #8]
 8003dcc:	f003 030c 	and.w	r3, r3, #12
 8003dd0:	2b08      	cmp	r3, #8
 8003dd2:	d112      	bne.n	8003dfa <HAL_RCC_OscConfig+0x62>
 8003dd4:	4b90      	ldr	r3, [pc, #576]	; (8004018 <HAL_RCC_OscConfig+0x280>)
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ddc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003de0:	d10b      	bne.n	8003dfa <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de2:	4b8d      	ldr	r3, [pc, #564]	; (8004018 <HAL_RCC_OscConfig+0x280>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d06c      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x130>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	685b      	ldr	r3, [r3, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d168      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e275      	b.n	80042e6 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e02:	d106      	bne.n	8003e12 <HAL_RCC_OscConfig+0x7a>
 8003e04:	4b84      	ldr	r3, [pc, #528]	; (8004018 <HAL_RCC_OscConfig+0x280>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a83      	ldr	r2, [pc, #524]	; (8004018 <HAL_RCC_OscConfig+0x280>)
 8003e0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e0e:	6013      	str	r3, [r2, #0]
 8003e10:	e02e      	b.n	8003e70 <HAL_RCC_OscConfig+0xd8>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d10c      	bne.n	8003e34 <HAL_RCC_OscConfig+0x9c>
 8003e1a:	4b7f      	ldr	r3, [pc, #508]	; (8004018 <HAL_RCC_OscConfig+0x280>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a7e      	ldr	r2, [pc, #504]	; (8004018 <HAL_RCC_OscConfig+0x280>)
 8003e20:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e24:	6013      	str	r3, [r2, #0]
 8003e26:	4b7c      	ldr	r3, [pc, #496]	; (8004018 <HAL_RCC_OscConfig+0x280>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a7b      	ldr	r2, [pc, #492]	; (8004018 <HAL_RCC_OscConfig+0x280>)
 8003e2c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e30:	6013      	str	r3, [r2, #0]
 8003e32:	e01d      	b.n	8003e70 <HAL_RCC_OscConfig+0xd8>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e3c:	d10c      	bne.n	8003e58 <HAL_RCC_OscConfig+0xc0>
 8003e3e:	4b76      	ldr	r3, [pc, #472]	; (8004018 <HAL_RCC_OscConfig+0x280>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a75      	ldr	r2, [pc, #468]	; (8004018 <HAL_RCC_OscConfig+0x280>)
 8003e44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e48:	6013      	str	r3, [r2, #0]
 8003e4a:	4b73      	ldr	r3, [pc, #460]	; (8004018 <HAL_RCC_OscConfig+0x280>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a72      	ldr	r2, [pc, #456]	; (8004018 <HAL_RCC_OscConfig+0x280>)
 8003e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e54:	6013      	str	r3, [r2, #0]
 8003e56:	e00b      	b.n	8003e70 <HAL_RCC_OscConfig+0xd8>
 8003e58:	4b6f      	ldr	r3, [pc, #444]	; (8004018 <HAL_RCC_OscConfig+0x280>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a6e      	ldr	r2, [pc, #440]	; (8004018 <HAL_RCC_OscConfig+0x280>)
 8003e5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e62:	6013      	str	r3, [r2, #0]
 8003e64:	4b6c      	ldr	r3, [pc, #432]	; (8004018 <HAL_RCC_OscConfig+0x280>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a6b      	ldr	r2, [pc, #428]	; (8004018 <HAL_RCC_OscConfig+0x280>)
 8003e6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d013      	beq.n	8003ea0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e78:	f7fd fce0 	bl	800183c <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e80:	f7fd fcdc 	bl	800183c <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b64      	cmp	r3, #100	; 0x64
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e229      	b.n	80042e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e92:	4b61      	ldr	r3, [pc, #388]	; (8004018 <HAL_RCC_OscConfig+0x280>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d0f0      	beq.n	8003e80 <HAL_RCC_OscConfig+0xe8>
 8003e9e:	e014      	b.n	8003eca <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ea0:	f7fd fccc 	bl	800183c <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ea8:	f7fd fcc8 	bl	800183c <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b64      	cmp	r3, #100	; 0x64
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e215      	b.n	80042e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eba:	4b57      	ldr	r3, [pc, #348]	; (8004018 <HAL_RCC_OscConfig+0x280>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1f0      	bne.n	8003ea8 <HAL_RCC_OscConfig+0x110>
 8003ec6:	e000      	b.n	8003eca <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ec8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d069      	beq.n	8003faa <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003ed6:	4b50      	ldr	r3, [pc, #320]	; (8004018 <HAL_RCC_OscConfig+0x280>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 030c 	and.w	r3, r3, #12
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00b      	beq.n	8003efa <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ee2:	4b4d      	ldr	r3, [pc, #308]	; (8004018 <HAL_RCC_OscConfig+0x280>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 030c 	and.w	r3, r3, #12
 8003eea:	2b08      	cmp	r3, #8
 8003eec:	d11c      	bne.n	8003f28 <HAL_RCC_OscConfig+0x190>
 8003eee:	4b4a      	ldr	r3, [pc, #296]	; (8004018 <HAL_RCC_OscConfig+0x280>)
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d116      	bne.n	8003f28 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003efa:	4b47      	ldr	r3, [pc, #284]	; (8004018 <HAL_RCC_OscConfig+0x280>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d005      	beq.n	8003f12 <HAL_RCC_OscConfig+0x17a>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d001      	beq.n	8003f12 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e1e9      	b.n	80042e6 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f12:	4b41      	ldr	r3, [pc, #260]	; (8004018 <HAL_RCC_OscConfig+0x280>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	493d      	ldr	r1, [pc, #244]	; (8004018 <HAL_RCC_OscConfig+0x280>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f26:	e040      	b.n	8003faa <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d023      	beq.n	8003f78 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f30:	4b39      	ldr	r3, [pc, #228]	; (8004018 <HAL_RCC_OscConfig+0x280>)
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a38      	ldr	r2, [pc, #224]	; (8004018 <HAL_RCC_OscConfig+0x280>)
 8003f36:	f043 0301 	orr.w	r3, r3, #1
 8003f3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f3c:	f7fd fc7e 	bl	800183c <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f44:	f7fd fc7a 	bl	800183c <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e1c7      	b.n	80042e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f56:	4b30      	ldr	r3, [pc, #192]	; (8004018 <HAL_RCC_OscConfig+0x280>)
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d0f0      	beq.n	8003f44 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f62:	4b2d      	ldr	r3, [pc, #180]	; (8004018 <HAL_RCC_OscConfig+0x280>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	00db      	lsls	r3, r3, #3
 8003f70:	4929      	ldr	r1, [pc, #164]	; (8004018 <HAL_RCC_OscConfig+0x280>)
 8003f72:	4313      	orrs	r3, r2
 8003f74:	600b      	str	r3, [r1, #0]
 8003f76:	e018      	b.n	8003faa <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f78:	4b27      	ldr	r3, [pc, #156]	; (8004018 <HAL_RCC_OscConfig+0x280>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	4a26      	ldr	r2, [pc, #152]	; (8004018 <HAL_RCC_OscConfig+0x280>)
 8003f7e:	f023 0301 	bic.w	r3, r3, #1
 8003f82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f84:	f7fd fc5a 	bl	800183c <HAL_GetTick>
 8003f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f8a:	e008      	b.n	8003f9e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f8c:	f7fd fc56 	bl	800183c <HAL_GetTick>
 8003f90:	4602      	mov	r2, r0
 8003f92:	693b      	ldr	r3, [r7, #16]
 8003f94:	1ad3      	subs	r3, r2, r3
 8003f96:	2b02      	cmp	r3, #2
 8003f98:	d901      	bls.n	8003f9e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f9a:	2303      	movs	r3, #3
 8003f9c:	e1a3      	b.n	80042e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f9e:	4b1e      	ldr	r3, [pc, #120]	; (8004018 <HAL_RCC_OscConfig+0x280>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d1f0      	bne.n	8003f8c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f003 0308 	and.w	r3, r3, #8
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d038      	beq.n	8004028 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d019      	beq.n	8003ff2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fbe:	4b16      	ldr	r3, [pc, #88]	; (8004018 <HAL_RCC_OscConfig+0x280>)
 8003fc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fc2:	4a15      	ldr	r2, [pc, #84]	; (8004018 <HAL_RCC_OscConfig+0x280>)
 8003fc4:	f043 0301 	orr.w	r3, r3, #1
 8003fc8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fca:	f7fd fc37 	bl	800183c <HAL_GetTick>
 8003fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fd0:	e008      	b.n	8003fe4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fd2:	f7fd fc33 	bl	800183c <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e180      	b.n	80042e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fe4:	4b0c      	ldr	r3, [pc, #48]	; (8004018 <HAL_RCC_OscConfig+0x280>)
 8003fe6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fe8:	f003 0302 	and.w	r3, r3, #2
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d0f0      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x23a>
 8003ff0:	e01a      	b.n	8004028 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ff2:	4b09      	ldr	r3, [pc, #36]	; (8004018 <HAL_RCC_OscConfig+0x280>)
 8003ff4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ff6:	4a08      	ldr	r2, [pc, #32]	; (8004018 <HAL_RCC_OscConfig+0x280>)
 8003ff8:	f023 0301 	bic.w	r3, r3, #1
 8003ffc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ffe:	f7fd fc1d 	bl	800183c <HAL_GetTick>
 8004002:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004004:	e00a      	b.n	800401c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004006:	f7fd fc19 	bl	800183c <HAL_GetTick>
 800400a:	4602      	mov	r2, r0
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	1ad3      	subs	r3, r2, r3
 8004010:	2b02      	cmp	r3, #2
 8004012:	d903      	bls.n	800401c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004014:	2303      	movs	r3, #3
 8004016:	e166      	b.n	80042e6 <HAL_RCC_OscConfig+0x54e>
 8004018:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800401c:	4b92      	ldr	r3, [pc, #584]	; (8004268 <HAL_RCC_OscConfig+0x4d0>)
 800401e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004020:	f003 0302 	and.w	r3, r3, #2
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1ee      	bne.n	8004006 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f003 0304 	and.w	r3, r3, #4
 8004030:	2b00      	cmp	r3, #0
 8004032:	f000 80a4 	beq.w	800417e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004036:	4b8c      	ldr	r3, [pc, #560]	; (8004268 <HAL_RCC_OscConfig+0x4d0>)
 8004038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800403e:	2b00      	cmp	r3, #0
 8004040:	d10d      	bne.n	800405e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004042:	4b89      	ldr	r3, [pc, #548]	; (8004268 <HAL_RCC_OscConfig+0x4d0>)
 8004044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004046:	4a88      	ldr	r2, [pc, #544]	; (8004268 <HAL_RCC_OscConfig+0x4d0>)
 8004048:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800404c:	6413      	str	r3, [r2, #64]	; 0x40
 800404e:	4b86      	ldr	r3, [pc, #536]	; (8004268 <HAL_RCC_OscConfig+0x4d0>)
 8004050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004052:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004056:	60bb      	str	r3, [r7, #8]
 8004058:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800405a:	2301      	movs	r3, #1
 800405c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800405e:	4b83      	ldr	r3, [pc, #524]	; (800426c <HAL_RCC_OscConfig+0x4d4>)
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004066:	2b00      	cmp	r3, #0
 8004068:	d118      	bne.n	800409c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800406a:	4b80      	ldr	r3, [pc, #512]	; (800426c <HAL_RCC_OscConfig+0x4d4>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a7f      	ldr	r2, [pc, #508]	; (800426c <HAL_RCC_OscConfig+0x4d4>)
 8004070:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004074:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004076:	f7fd fbe1 	bl	800183c <HAL_GetTick>
 800407a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800407c:	e008      	b.n	8004090 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800407e:	f7fd fbdd 	bl	800183c <HAL_GetTick>
 8004082:	4602      	mov	r2, r0
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	2b64      	cmp	r3, #100	; 0x64
 800408a:	d901      	bls.n	8004090 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800408c:	2303      	movs	r3, #3
 800408e:	e12a      	b.n	80042e6 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004090:	4b76      	ldr	r3, [pc, #472]	; (800426c <HAL_RCC_OscConfig+0x4d4>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004098:	2b00      	cmp	r3, #0
 800409a:	d0f0      	beq.n	800407e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d106      	bne.n	80040b2 <HAL_RCC_OscConfig+0x31a>
 80040a4:	4b70      	ldr	r3, [pc, #448]	; (8004268 <HAL_RCC_OscConfig+0x4d0>)
 80040a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a8:	4a6f      	ldr	r2, [pc, #444]	; (8004268 <HAL_RCC_OscConfig+0x4d0>)
 80040aa:	f043 0301 	orr.w	r3, r3, #1
 80040ae:	6713      	str	r3, [r2, #112]	; 0x70
 80040b0:	e02d      	b.n	800410e <HAL_RCC_OscConfig+0x376>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d10c      	bne.n	80040d4 <HAL_RCC_OscConfig+0x33c>
 80040ba:	4b6b      	ldr	r3, [pc, #428]	; (8004268 <HAL_RCC_OscConfig+0x4d0>)
 80040bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040be:	4a6a      	ldr	r2, [pc, #424]	; (8004268 <HAL_RCC_OscConfig+0x4d0>)
 80040c0:	f023 0301 	bic.w	r3, r3, #1
 80040c4:	6713      	str	r3, [r2, #112]	; 0x70
 80040c6:	4b68      	ldr	r3, [pc, #416]	; (8004268 <HAL_RCC_OscConfig+0x4d0>)
 80040c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ca:	4a67      	ldr	r2, [pc, #412]	; (8004268 <HAL_RCC_OscConfig+0x4d0>)
 80040cc:	f023 0304 	bic.w	r3, r3, #4
 80040d0:	6713      	str	r3, [r2, #112]	; 0x70
 80040d2:	e01c      	b.n	800410e <HAL_RCC_OscConfig+0x376>
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	2b05      	cmp	r3, #5
 80040da:	d10c      	bne.n	80040f6 <HAL_RCC_OscConfig+0x35e>
 80040dc:	4b62      	ldr	r3, [pc, #392]	; (8004268 <HAL_RCC_OscConfig+0x4d0>)
 80040de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040e0:	4a61      	ldr	r2, [pc, #388]	; (8004268 <HAL_RCC_OscConfig+0x4d0>)
 80040e2:	f043 0304 	orr.w	r3, r3, #4
 80040e6:	6713      	str	r3, [r2, #112]	; 0x70
 80040e8:	4b5f      	ldr	r3, [pc, #380]	; (8004268 <HAL_RCC_OscConfig+0x4d0>)
 80040ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040ec:	4a5e      	ldr	r2, [pc, #376]	; (8004268 <HAL_RCC_OscConfig+0x4d0>)
 80040ee:	f043 0301 	orr.w	r3, r3, #1
 80040f2:	6713      	str	r3, [r2, #112]	; 0x70
 80040f4:	e00b      	b.n	800410e <HAL_RCC_OscConfig+0x376>
 80040f6:	4b5c      	ldr	r3, [pc, #368]	; (8004268 <HAL_RCC_OscConfig+0x4d0>)
 80040f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040fa:	4a5b      	ldr	r2, [pc, #364]	; (8004268 <HAL_RCC_OscConfig+0x4d0>)
 80040fc:	f023 0301 	bic.w	r3, r3, #1
 8004100:	6713      	str	r3, [r2, #112]	; 0x70
 8004102:	4b59      	ldr	r3, [pc, #356]	; (8004268 <HAL_RCC_OscConfig+0x4d0>)
 8004104:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004106:	4a58      	ldr	r2, [pc, #352]	; (8004268 <HAL_RCC_OscConfig+0x4d0>)
 8004108:	f023 0304 	bic.w	r3, r3, #4
 800410c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d015      	beq.n	8004142 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004116:	f7fd fb91 	bl	800183c <HAL_GetTick>
 800411a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800411c:	e00a      	b.n	8004134 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800411e:	f7fd fb8d 	bl	800183c <HAL_GetTick>
 8004122:	4602      	mov	r2, r0
 8004124:	693b      	ldr	r3, [r7, #16]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	f241 3288 	movw	r2, #5000	; 0x1388
 800412c:	4293      	cmp	r3, r2
 800412e:	d901      	bls.n	8004134 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004130:	2303      	movs	r3, #3
 8004132:	e0d8      	b.n	80042e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004134:	4b4c      	ldr	r3, [pc, #304]	; (8004268 <HAL_RCC_OscConfig+0x4d0>)
 8004136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004138:	f003 0302 	and.w	r3, r3, #2
 800413c:	2b00      	cmp	r3, #0
 800413e:	d0ee      	beq.n	800411e <HAL_RCC_OscConfig+0x386>
 8004140:	e014      	b.n	800416c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004142:	f7fd fb7b 	bl	800183c <HAL_GetTick>
 8004146:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004148:	e00a      	b.n	8004160 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800414a:	f7fd fb77 	bl	800183c <HAL_GetTick>
 800414e:	4602      	mov	r2, r0
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	f241 3288 	movw	r2, #5000	; 0x1388
 8004158:	4293      	cmp	r3, r2
 800415a:	d901      	bls.n	8004160 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800415c:	2303      	movs	r3, #3
 800415e:	e0c2      	b.n	80042e6 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004160:	4b41      	ldr	r3, [pc, #260]	; (8004268 <HAL_RCC_OscConfig+0x4d0>)
 8004162:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1ee      	bne.n	800414a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800416c:	7dfb      	ldrb	r3, [r7, #23]
 800416e:	2b01      	cmp	r3, #1
 8004170:	d105      	bne.n	800417e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004172:	4b3d      	ldr	r3, [pc, #244]	; (8004268 <HAL_RCC_OscConfig+0x4d0>)
 8004174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004176:	4a3c      	ldr	r2, [pc, #240]	; (8004268 <HAL_RCC_OscConfig+0x4d0>)
 8004178:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800417c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	2b00      	cmp	r3, #0
 8004184:	f000 80ae 	beq.w	80042e4 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004188:	4b37      	ldr	r3, [pc, #220]	; (8004268 <HAL_RCC_OscConfig+0x4d0>)
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f003 030c 	and.w	r3, r3, #12
 8004190:	2b08      	cmp	r3, #8
 8004192:	d06d      	beq.n	8004270 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	2b02      	cmp	r3, #2
 800419a:	d14b      	bne.n	8004234 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800419c:	4b32      	ldr	r3, [pc, #200]	; (8004268 <HAL_RCC_OscConfig+0x4d0>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	4a31      	ldr	r2, [pc, #196]	; (8004268 <HAL_RCC_OscConfig+0x4d0>)
 80041a2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80041a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041a8:	f7fd fb48 	bl	800183c <HAL_GetTick>
 80041ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041ae:	e008      	b.n	80041c2 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041b0:	f7fd fb44 	bl	800183c <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d901      	bls.n	80041c2 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80041be:	2303      	movs	r3, #3
 80041c0:	e091      	b.n	80042e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041c2:	4b29      	ldr	r3, [pc, #164]	; (8004268 <HAL_RCC_OscConfig+0x4d0>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d1f0      	bne.n	80041b0 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	69da      	ldr	r2, [r3, #28]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6a1b      	ldr	r3, [r3, #32]
 80041d6:	431a      	orrs	r2, r3
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	019b      	lsls	r3, r3, #6
 80041de:	431a      	orrs	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e4:	085b      	lsrs	r3, r3, #1
 80041e6:	3b01      	subs	r3, #1
 80041e8:	041b      	lsls	r3, r3, #16
 80041ea:	431a      	orrs	r2, r3
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f0:	061b      	lsls	r3, r3, #24
 80041f2:	431a      	orrs	r2, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f8:	071b      	lsls	r3, r3, #28
 80041fa:	491b      	ldr	r1, [pc, #108]	; (8004268 <HAL_RCC_OscConfig+0x4d0>)
 80041fc:	4313      	orrs	r3, r2
 80041fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004200:	4b19      	ldr	r3, [pc, #100]	; (8004268 <HAL_RCC_OscConfig+0x4d0>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4a18      	ldr	r2, [pc, #96]	; (8004268 <HAL_RCC_OscConfig+0x4d0>)
 8004206:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800420a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800420c:	f7fd fb16 	bl	800183c <HAL_GetTick>
 8004210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004212:	e008      	b.n	8004226 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004214:	f7fd fb12 	bl	800183c <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e05f      	b.n	80042e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004226:	4b10      	ldr	r3, [pc, #64]	; (8004268 <HAL_RCC_OscConfig+0x4d0>)
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d0f0      	beq.n	8004214 <HAL_RCC_OscConfig+0x47c>
 8004232:	e057      	b.n	80042e4 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004234:	4b0c      	ldr	r3, [pc, #48]	; (8004268 <HAL_RCC_OscConfig+0x4d0>)
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a0b      	ldr	r2, [pc, #44]	; (8004268 <HAL_RCC_OscConfig+0x4d0>)
 800423a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800423e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004240:	f7fd fafc 	bl	800183c <HAL_GetTick>
 8004244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004246:	e008      	b.n	800425a <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004248:	f7fd faf8 	bl	800183c <HAL_GetTick>
 800424c:	4602      	mov	r2, r0
 800424e:	693b      	ldr	r3, [r7, #16]
 8004250:	1ad3      	subs	r3, r2, r3
 8004252:	2b02      	cmp	r3, #2
 8004254:	d901      	bls.n	800425a <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004256:	2303      	movs	r3, #3
 8004258:	e045      	b.n	80042e6 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800425a:	4b03      	ldr	r3, [pc, #12]	; (8004268 <HAL_RCC_OscConfig+0x4d0>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004262:	2b00      	cmp	r3, #0
 8004264:	d1f0      	bne.n	8004248 <HAL_RCC_OscConfig+0x4b0>
 8004266:	e03d      	b.n	80042e4 <HAL_RCC_OscConfig+0x54c>
 8004268:	40023800 	.word	0x40023800
 800426c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004270:	4b1f      	ldr	r3, [pc, #124]	; (80042f0 <HAL_RCC_OscConfig+0x558>)
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	699b      	ldr	r3, [r3, #24]
 800427a:	2b01      	cmp	r3, #1
 800427c:	d030      	beq.n	80042e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004288:	429a      	cmp	r2, r3
 800428a:	d129      	bne.n	80042e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004296:	429a      	cmp	r2, r3
 8004298:	d122      	bne.n	80042e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800429a:	68fa      	ldr	r2, [r7, #12]
 800429c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80042a0:	4013      	ands	r3, r2
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80042a6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d119      	bne.n	80042e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042b6:	085b      	lsrs	r3, r3, #1
 80042b8:	3b01      	subs	r3, #1
 80042ba:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80042bc:	429a      	cmp	r2, r3
 80042be:	d10f      	bne.n	80042e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ca:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80042cc:	429a      	cmp	r2, r3
 80042ce:	d107      	bne.n	80042e0 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042da:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042dc:	429a      	cmp	r2, r3
 80042de:	d001      	beq.n	80042e4 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80042e0:	2301      	movs	r3, #1
 80042e2:	e000      	b.n	80042e6 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80042e4:	2300      	movs	r3, #0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3718      	adds	r7, #24
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
 80042ee:	bf00      	nop
 80042f0:	40023800 	.word	0x40023800

080042f4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b084      	sub	sp, #16
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	6078      	str	r0, [r7, #4]
 80042fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80042fe:	2300      	movs	r3, #0
 8004300:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d101      	bne.n	800430c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004308:	2301      	movs	r3, #1
 800430a:	e0d0      	b.n	80044ae <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800430c:	4b6a      	ldr	r3, [pc, #424]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f003 030f 	and.w	r3, r3, #15
 8004314:	683a      	ldr	r2, [r7, #0]
 8004316:	429a      	cmp	r2, r3
 8004318:	d910      	bls.n	800433c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800431a:	4b67      	ldr	r3, [pc, #412]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f023 020f 	bic.w	r2, r3, #15
 8004322:	4965      	ldr	r1, [pc, #404]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	4313      	orrs	r3, r2
 8004328:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800432a:	4b63      	ldr	r3, [pc, #396]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	f003 030f 	and.w	r3, r3, #15
 8004332:	683a      	ldr	r2, [r7, #0]
 8004334:	429a      	cmp	r2, r3
 8004336:	d001      	beq.n	800433c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e0b8      	b.n	80044ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0302 	and.w	r3, r3, #2
 8004344:	2b00      	cmp	r3, #0
 8004346:	d020      	beq.n	800438a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0304 	and.w	r3, r3, #4
 8004350:	2b00      	cmp	r3, #0
 8004352:	d005      	beq.n	8004360 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004354:	4b59      	ldr	r3, [pc, #356]	; (80044bc <HAL_RCC_ClockConfig+0x1c8>)
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	4a58      	ldr	r2, [pc, #352]	; (80044bc <HAL_RCC_ClockConfig+0x1c8>)
 800435a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800435e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f003 0308 	and.w	r3, r3, #8
 8004368:	2b00      	cmp	r3, #0
 800436a:	d005      	beq.n	8004378 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800436c:	4b53      	ldr	r3, [pc, #332]	; (80044bc <HAL_RCC_ClockConfig+0x1c8>)
 800436e:	689b      	ldr	r3, [r3, #8]
 8004370:	4a52      	ldr	r2, [pc, #328]	; (80044bc <HAL_RCC_ClockConfig+0x1c8>)
 8004372:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004376:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004378:	4b50      	ldr	r3, [pc, #320]	; (80044bc <HAL_RCC_ClockConfig+0x1c8>)
 800437a:	689b      	ldr	r3, [r3, #8]
 800437c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	689b      	ldr	r3, [r3, #8]
 8004384:	494d      	ldr	r1, [pc, #308]	; (80044bc <HAL_RCC_ClockConfig+0x1c8>)
 8004386:	4313      	orrs	r3, r2
 8004388:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	d040      	beq.n	8004418 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	2b01      	cmp	r3, #1
 800439c:	d107      	bne.n	80043ae <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800439e:	4b47      	ldr	r3, [pc, #284]	; (80044bc <HAL_RCC_ClockConfig+0x1c8>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d115      	bne.n	80043d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	e07f      	b.n	80044ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	685b      	ldr	r3, [r3, #4]
 80043b2:	2b02      	cmp	r3, #2
 80043b4:	d107      	bne.n	80043c6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043b6:	4b41      	ldr	r3, [pc, #260]	; (80044bc <HAL_RCC_ClockConfig+0x1c8>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d109      	bne.n	80043d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e073      	b.n	80044ae <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80043c6:	4b3d      	ldr	r3, [pc, #244]	; (80044bc <HAL_RCC_ClockConfig+0x1c8>)
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d101      	bne.n	80043d6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	e06b      	b.n	80044ae <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043d6:	4b39      	ldr	r3, [pc, #228]	; (80044bc <HAL_RCC_ClockConfig+0x1c8>)
 80043d8:	689b      	ldr	r3, [r3, #8]
 80043da:	f023 0203 	bic.w	r2, r3, #3
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	685b      	ldr	r3, [r3, #4]
 80043e2:	4936      	ldr	r1, [pc, #216]	; (80044bc <HAL_RCC_ClockConfig+0x1c8>)
 80043e4:	4313      	orrs	r3, r2
 80043e6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043e8:	f7fd fa28 	bl	800183c <HAL_GetTick>
 80043ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043ee:	e00a      	b.n	8004406 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043f0:	f7fd fa24 	bl	800183c <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80043fe:	4293      	cmp	r3, r2
 8004400:	d901      	bls.n	8004406 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004402:	2303      	movs	r3, #3
 8004404:	e053      	b.n	80044ae <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004406:	4b2d      	ldr	r3, [pc, #180]	; (80044bc <HAL_RCC_ClockConfig+0x1c8>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 020c 	and.w	r2, r3, #12
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	429a      	cmp	r2, r3
 8004416:	d1eb      	bne.n	80043f0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004418:	4b27      	ldr	r3, [pc, #156]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 030f 	and.w	r3, r3, #15
 8004420:	683a      	ldr	r2, [r7, #0]
 8004422:	429a      	cmp	r2, r3
 8004424:	d210      	bcs.n	8004448 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004426:	4b24      	ldr	r3, [pc, #144]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f023 020f 	bic.w	r2, r3, #15
 800442e:	4922      	ldr	r1, [pc, #136]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	4313      	orrs	r3, r2
 8004434:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004436:	4b20      	ldr	r3, [pc, #128]	; (80044b8 <HAL_RCC_ClockConfig+0x1c4>)
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f003 030f 	and.w	r3, r3, #15
 800443e:	683a      	ldr	r2, [r7, #0]
 8004440:	429a      	cmp	r2, r3
 8004442:	d001      	beq.n	8004448 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004444:	2301      	movs	r3, #1
 8004446:	e032      	b.n	80044ae <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0304 	and.w	r3, r3, #4
 8004450:	2b00      	cmp	r3, #0
 8004452:	d008      	beq.n	8004466 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004454:	4b19      	ldr	r3, [pc, #100]	; (80044bc <HAL_RCC_ClockConfig+0x1c8>)
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	4916      	ldr	r1, [pc, #88]	; (80044bc <HAL_RCC_ClockConfig+0x1c8>)
 8004462:	4313      	orrs	r3, r2
 8004464:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f003 0308 	and.w	r3, r3, #8
 800446e:	2b00      	cmp	r3, #0
 8004470:	d009      	beq.n	8004486 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004472:	4b12      	ldr	r3, [pc, #72]	; (80044bc <HAL_RCC_ClockConfig+0x1c8>)
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	691b      	ldr	r3, [r3, #16]
 800447e:	00db      	lsls	r3, r3, #3
 8004480:	490e      	ldr	r1, [pc, #56]	; (80044bc <HAL_RCC_ClockConfig+0x1c8>)
 8004482:	4313      	orrs	r3, r2
 8004484:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004486:	f000 f821 	bl	80044cc <HAL_RCC_GetSysClockFreq>
 800448a:	4602      	mov	r2, r0
 800448c:	4b0b      	ldr	r3, [pc, #44]	; (80044bc <HAL_RCC_ClockConfig+0x1c8>)
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	091b      	lsrs	r3, r3, #4
 8004492:	f003 030f 	and.w	r3, r3, #15
 8004496:	490a      	ldr	r1, [pc, #40]	; (80044c0 <HAL_RCC_ClockConfig+0x1cc>)
 8004498:	5ccb      	ldrb	r3, [r1, r3]
 800449a:	fa22 f303 	lsr.w	r3, r2, r3
 800449e:	4a09      	ldr	r2, [pc, #36]	; (80044c4 <HAL_RCC_ClockConfig+0x1d0>)
 80044a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80044a2:	4b09      	ldr	r3, [pc, #36]	; (80044c8 <HAL_RCC_ClockConfig+0x1d4>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4618      	mov	r0, r3
 80044a8:	f7fd f984 	bl	80017b4 <HAL_InitTick>

  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	40023c00 	.word	0x40023c00
 80044bc:	40023800 	.word	0x40023800
 80044c0:	08009130 	.word	0x08009130
 80044c4:	20000174 	.word	0x20000174
 80044c8:	20000178 	.word	0x20000178

080044cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80044cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80044d0:	b084      	sub	sp, #16
 80044d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80044d4:	2300      	movs	r3, #0
 80044d6:	607b      	str	r3, [r7, #4]
 80044d8:	2300      	movs	r3, #0
 80044da:	60fb      	str	r3, [r7, #12]
 80044dc:	2300      	movs	r3, #0
 80044de:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80044e0:	2300      	movs	r3, #0
 80044e2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80044e4:	4b67      	ldr	r3, [pc, #412]	; (8004684 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f003 030c 	and.w	r3, r3, #12
 80044ec:	2b08      	cmp	r3, #8
 80044ee:	d00d      	beq.n	800450c <HAL_RCC_GetSysClockFreq+0x40>
 80044f0:	2b08      	cmp	r3, #8
 80044f2:	f200 80bd 	bhi.w	8004670 <HAL_RCC_GetSysClockFreq+0x1a4>
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d002      	beq.n	8004500 <HAL_RCC_GetSysClockFreq+0x34>
 80044fa:	2b04      	cmp	r3, #4
 80044fc:	d003      	beq.n	8004506 <HAL_RCC_GetSysClockFreq+0x3a>
 80044fe:	e0b7      	b.n	8004670 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004500:	4b61      	ldr	r3, [pc, #388]	; (8004688 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004502:	60bb      	str	r3, [r7, #8]
      break;
 8004504:	e0b7      	b.n	8004676 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004506:	4b61      	ldr	r3, [pc, #388]	; (800468c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004508:	60bb      	str	r3, [r7, #8]
      break;
 800450a:	e0b4      	b.n	8004676 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800450c:	4b5d      	ldr	r3, [pc, #372]	; (8004684 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004514:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004516:	4b5b      	ldr	r3, [pc, #364]	; (8004684 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800451e:	2b00      	cmp	r3, #0
 8004520:	d04d      	beq.n	80045be <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004522:	4b58      	ldr	r3, [pc, #352]	; (8004684 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004524:	685b      	ldr	r3, [r3, #4]
 8004526:	099b      	lsrs	r3, r3, #6
 8004528:	461a      	mov	r2, r3
 800452a:	f04f 0300 	mov.w	r3, #0
 800452e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004532:	f04f 0100 	mov.w	r1, #0
 8004536:	ea02 0800 	and.w	r8, r2, r0
 800453a:	ea03 0901 	and.w	r9, r3, r1
 800453e:	4640      	mov	r0, r8
 8004540:	4649      	mov	r1, r9
 8004542:	f04f 0200 	mov.w	r2, #0
 8004546:	f04f 0300 	mov.w	r3, #0
 800454a:	014b      	lsls	r3, r1, #5
 800454c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004550:	0142      	lsls	r2, r0, #5
 8004552:	4610      	mov	r0, r2
 8004554:	4619      	mov	r1, r3
 8004556:	ebb0 0008 	subs.w	r0, r0, r8
 800455a:	eb61 0109 	sbc.w	r1, r1, r9
 800455e:	f04f 0200 	mov.w	r2, #0
 8004562:	f04f 0300 	mov.w	r3, #0
 8004566:	018b      	lsls	r3, r1, #6
 8004568:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800456c:	0182      	lsls	r2, r0, #6
 800456e:	1a12      	subs	r2, r2, r0
 8004570:	eb63 0301 	sbc.w	r3, r3, r1
 8004574:	f04f 0000 	mov.w	r0, #0
 8004578:	f04f 0100 	mov.w	r1, #0
 800457c:	00d9      	lsls	r1, r3, #3
 800457e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004582:	00d0      	lsls	r0, r2, #3
 8004584:	4602      	mov	r2, r0
 8004586:	460b      	mov	r3, r1
 8004588:	eb12 0208 	adds.w	r2, r2, r8
 800458c:	eb43 0309 	adc.w	r3, r3, r9
 8004590:	f04f 0000 	mov.w	r0, #0
 8004594:	f04f 0100 	mov.w	r1, #0
 8004598:	0259      	lsls	r1, r3, #9
 800459a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800459e:	0250      	lsls	r0, r2, #9
 80045a0:	4602      	mov	r2, r0
 80045a2:	460b      	mov	r3, r1
 80045a4:	4610      	mov	r0, r2
 80045a6:	4619      	mov	r1, r3
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	461a      	mov	r2, r3
 80045ac:	f04f 0300 	mov.w	r3, #0
 80045b0:	f7fb fe9e 	bl	80002f0 <__aeabi_uldivmod>
 80045b4:	4602      	mov	r2, r0
 80045b6:	460b      	mov	r3, r1
 80045b8:	4613      	mov	r3, r2
 80045ba:	60fb      	str	r3, [r7, #12]
 80045bc:	e04a      	b.n	8004654 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80045be:	4b31      	ldr	r3, [pc, #196]	; (8004684 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	099b      	lsrs	r3, r3, #6
 80045c4:	461a      	mov	r2, r3
 80045c6:	f04f 0300 	mov.w	r3, #0
 80045ca:	f240 10ff 	movw	r0, #511	; 0x1ff
 80045ce:	f04f 0100 	mov.w	r1, #0
 80045d2:	ea02 0400 	and.w	r4, r2, r0
 80045d6:	ea03 0501 	and.w	r5, r3, r1
 80045da:	4620      	mov	r0, r4
 80045dc:	4629      	mov	r1, r5
 80045de:	f04f 0200 	mov.w	r2, #0
 80045e2:	f04f 0300 	mov.w	r3, #0
 80045e6:	014b      	lsls	r3, r1, #5
 80045e8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80045ec:	0142      	lsls	r2, r0, #5
 80045ee:	4610      	mov	r0, r2
 80045f0:	4619      	mov	r1, r3
 80045f2:	1b00      	subs	r0, r0, r4
 80045f4:	eb61 0105 	sbc.w	r1, r1, r5
 80045f8:	f04f 0200 	mov.w	r2, #0
 80045fc:	f04f 0300 	mov.w	r3, #0
 8004600:	018b      	lsls	r3, r1, #6
 8004602:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004606:	0182      	lsls	r2, r0, #6
 8004608:	1a12      	subs	r2, r2, r0
 800460a:	eb63 0301 	sbc.w	r3, r3, r1
 800460e:	f04f 0000 	mov.w	r0, #0
 8004612:	f04f 0100 	mov.w	r1, #0
 8004616:	00d9      	lsls	r1, r3, #3
 8004618:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800461c:	00d0      	lsls	r0, r2, #3
 800461e:	4602      	mov	r2, r0
 8004620:	460b      	mov	r3, r1
 8004622:	1912      	adds	r2, r2, r4
 8004624:	eb45 0303 	adc.w	r3, r5, r3
 8004628:	f04f 0000 	mov.w	r0, #0
 800462c:	f04f 0100 	mov.w	r1, #0
 8004630:	0299      	lsls	r1, r3, #10
 8004632:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004636:	0290      	lsls	r0, r2, #10
 8004638:	4602      	mov	r2, r0
 800463a:	460b      	mov	r3, r1
 800463c:	4610      	mov	r0, r2
 800463e:	4619      	mov	r1, r3
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	461a      	mov	r2, r3
 8004644:	f04f 0300 	mov.w	r3, #0
 8004648:	f7fb fe52 	bl	80002f0 <__aeabi_uldivmod>
 800464c:	4602      	mov	r2, r0
 800464e:	460b      	mov	r3, r1
 8004650:	4613      	mov	r3, r2
 8004652:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004654:	4b0b      	ldr	r3, [pc, #44]	; (8004684 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	0c1b      	lsrs	r3, r3, #16
 800465a:	f003 0303 	and.w	r3, r3, #3
 800465e:	3301      	adds	r3, #1
 8004660:	005b      	lsls	r3, r3, #1
 8004662:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004664:	68fa      	ldr	r2, [r7, #12]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	fbb2 f3f3 	udiv	r3, r2, r3
 800466c:	60bb      	str	r3, [r7, #8]
      break;
 800466e:	e002      	b.n	8004676 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004670:	4b05      	ldr	r3, [pc, #20]	; (8004688 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004672:	60bb      	str	r3, [r7, #8]
      break;
 8004674:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004676:	68bb      	ldr	r3, [r7, #8]
}
 8004678:	4618      	mov	r0, r3
 800467a:	3710      	adds	r7, #16
 800467c:	46bd      	mov	sp, r7
 800467e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004682:	bf00      	nop
 8004684:	40023800 	.word	0x40023800
 8004688:	00f42400 	.word	0x00f42400
 800468c:	007a1200 	.word	0x007a1200

08004690 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004690:	b480      	push	{r7}
 8004692:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004694:	4b03      	ldr	r3, [pc, #12]	; (80046a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8004696:	681b      	ldr	r3, [r3, #0]
}
 8004698:	4618      	mov	r0, r3
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	20000174 	.word	0x20000174

080046a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046a8:	b580      	push	{r7, lr}
 80046aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046ac:	f7ff fff0 	bl	8004690 <HAL_RCC_GetHCLKFreq>
 80046b0:	4602      	mov	r2, r0
 80046b2:	4b05      	ldr	r3, [pc, #20]	; (80046c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	0a9b      	lsrs	r3, r3, #10
 80046b8:	f003 0307 	and.w	r3, r3, #7
 80046bc:	4903      	ldr	r1, [pc, #12]	; (80046cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80046be:	5ccb      	ldrb	r3, [r1, r3]
 80046c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	40023800 	.word	0x40023800
 80046cc:	08009140 	.word	0x08009140

080046d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80046d4:	f7ff ffdc 	bl	8004690 <HAL_RCC_GetHCLKFreq>
 80046d8:	4602      	mov	r2, r0
 80046da:	4b05      	ldr	r3, [pc, #20]	; (80046f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	0b5b      	lsrs	r3, r3, #13
 80046e0:	f003 0307 	and.w	r3, r3, #7
 80046e4:	4903      	ldr	r1, [pc, #12]	; (80046f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80046e6:	5ccb      	ldrb	r3, [r1, r3]
 80046e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	40023800 	.word	0x40023800
 80046f4:	08009140 	.word	0x08009140

080046f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b088      	sub	sp, #32
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004700:	2300      	movs	r3, #0
 8004702:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004704:	2300      	movs	r3, #0
 8004706:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004708:	2300      	movs	r3, #0
 800470a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800470c:	2300      	movs	r3, #0
 800470e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004710:	2300      	movs	r3, #0
 8004712:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0301 	and.w	r3, r3, #1
 800471c:	2b00      	cmp	r3, #0
 800471e:	d012      	beq.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004720:	4b69      	ldr	r3, [pc, #420]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	4a68      	ldr	r2, [pc, #416]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004726:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800472a:	6093      	str	r3, [r2, #8]
 800472c:	4b66      	ldr	r3, [pc, #408]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800472e:	689a      	ldr	r2, [r3, #8]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004734:	4964      	ldr	r1, [pc, #400]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004736:	4313      	orrs	r3, r2
 8004738:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800473e:	2b00      	cmp	r3, #0
 8004740:	d101      	bne.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004742:	2301      	movs	r3, #1
 8004744:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d017      	beq.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004752:	4b5d      	ldr	r3, [pc, #372]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004754:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004758:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004760:	4959      	ldr	r1, [pc, #356]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004762:	4313      	orrs	r3, r2
 8004764:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800476c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004770:	d101      	bne.n	8004776 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004772:	2301      	movs	r3, #1
 8004774:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800477e:	2301      	movs	r3, #1
 8004780:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800478a:	2b00      	cmp	r3, #0
 800478c:	d017      	beq.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800478e:	4b4e      	ldr	r3, [pc, #312]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004790:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004794:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479c:	494a      	ldr	r1, [pc, #296]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80047ac:	d101      	bne.n	80047b2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80047ae:	2301      	movs	r3, #1
 80047b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d101      	bne.n	80047be <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80047ba:	2301      	movs	r3, #1
 80047bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d001      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80047ca:	2301      	movs	r3, #1
 80047cc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f003 0320 	and.w	r3, r3, #32
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	f000 808b 	beq.w	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80047dc:	4b3a      	ldr	r3, [pc, #232]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e0:	4a39      	ldr	r2, [pc, #228]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047e2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80047e6:	6413      	str	r3, [r2, #64]	; 0x40
 80047e8:	4b37      	ldr	r3, [pc, #220]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80047ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80047f0:	60bb      	str	r3, [r7, #8]
 80047f2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80047f4:	4b35      	ldr	r3, [pc, #212]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a34      	ldr	r2, [pc, #208]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80047fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004800:	f7fd f81c 	bl	800183c <HAL_GetTick>
 8004804:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004806:	e008      	b.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004808:	f7fd f818 	bl	800183c <HAL_GetTick>
 800480c:	4602      	mov	r2, r0
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	1ad3      	subs	r3, r2, r3
 8004812:	2b64      	cmp	r3, #100	; 0x64
 8004814:	d901      	bls.n	800481a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004816:	2303      	movs	r3, #3
 8004818:	e38f      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800481a:	4b2c      	ldr	r3, [pc, #176]	; (80048cc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004822:	2b00      	cmp	r3, #0
 8004824:	d0f0      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004826:	4b28      	ldr	r3, [pc, #160]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800482e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004830:	693b      	ldr	r3, [r7, #16]
 8004832:	2b00      	cmp	r3, #0
 8004834:	d035      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800483e:	693a      	ldr	r2, [r7, #16]
 8004840:	429a      	cmp	r2, r3
 8004842:	d02e      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004844:	4b20      	ldr	r3, [pc, #128]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004846:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004848:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800484c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800484e:	4b1e      	ldr	r3, [pc, #120]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004852:	4a1d      	ldr	r2, [pc, #116]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004854:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004858:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800485a:	4b1b      	ldr	r3, [pc, #108]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800485c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800485e:	4a1a      	ldr	r2, [pc, #104]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004860:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004864:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004866:	4a18      	ldr	r2, [pc, #96]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800486c:	4b16      	ldr	r3, [pc, #88]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800486e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004870:	f003 0301 	and.w	r3, r3, #1
 8004874:	2b01      	cmp	r3, #1
 8004876:	d114      	bne.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004878:	f7fc ffe0 	bl	800183c <HAL_GetTick>
 800487c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800487e:	e00a      	b.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004880:	f7fc ffdc 	bl	800183c <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	697b      	ldr	r3, [r7, #20]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	f241 3288 	movw	r2, #5000	; 0x1388
 800488e:	4293      	cmp	r3, r2
 8004890:	d901      	bls.n	8004896 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e351      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004896:	4b0c      	ldr	r3, [pc, #48]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d0ee      	beq.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80048ae:	d111      	bne.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80048b0:	4b05      	ldr	r3, [pc, #20]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80048bc:	4b04      	ldr	r3, [pc, #16]	; (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80048be:	400b      	ands	r3, r1
 80048c0:	4901      	ldr	r1, [pc, #4]	; (80048c8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	608b      	str	r3, [r1, #8]
 80048c6:	e00b      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80048c8:	40023800 	.word	0x40023800
 80048cc:	40007000 	.word	0x40007000
 80048d0:	0ffffcff 	.word	0x0ffffcff
 80048d4:	4bb3      	ldr	r3, [pc, #716]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	4ab2      	ldr	r2, [pc, #712]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048da:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80048de:	6093      	str	r3, [r2, #8]
 80048e0:	4bb0      	ldr	r3, [pc, #704]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048e2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048ec:	49ad      	ldr	r1, [pc, #692]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0310 	and.w	r3, r3, #16
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d010      	beq.n	8004920 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80048fe:	4ba9      	ldr	r3, [pc, #676]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004900:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004904:	4aa7      	ldr	r2, [pc, #668]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004906:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800490a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800490e:	4ba5      	ldr	r3, [pc, #660]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004910:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004918:	49a2      	ldr	r1, [pc, #648]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800491a:	4313      	orrs	r3, r2
 800491c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004928:	2b00      	cmp	r3, #0
 800492a:	d00a      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800492c:	4b9d      	ldr	r3, [pc, #628]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800492e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004932:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800493a:	499a      	ldr	r1, [pc, #616]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800493c:	4313      	orrs	r3, r2
 800493e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800494a:	2b00      	cmp	r3, #0
 800494c:	d00a      	beq.n	8004964 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800494e:	4b95      	ldr	r3, [pc, #596]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004950:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004954:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800495c:	4991      	ldr	r1, [pc, #580]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800495e:	4313      	orrs	r3, r2
 8004960:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800496c:	2b00      	cmp	r3, #0
 800496e:	d00a      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004970:	4b8c      	ldr	r3, [pc, #560]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004972:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004976:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800497e:	4989      	ldr	r1, [pc, #548]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004980:	4313      	orrs	r3, r2
 8004982:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00a      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004992:	4b84      	ldr	r3, [pc, #528]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004998:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a0:	4980      	ldr	r1, [pc, #512]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00a      	beq.n	80049ca <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80049b4:	4b7b      	ldr	r3, [pc, #492]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ba:	f023 0203 	bic.w	r2, r3, #3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c2:	4978      	ldr	r1, [pc, #480]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049c4:	4313      	orrs	r3, r2
 80049c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00a      	beq.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049d6:	4b73      	ldr	r3, [pc, #460]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049dc:	f023 020c 	bic.w	r2, r3, #12
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049e4:	496f      	ldr	r1, [pc, #444]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049e6:	4313      	orrs	r3, r2
 80049e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d00a      	beq.n	8004a0e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80049f8:	4b6a      	ldr	r3, [pc, #424]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80049fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049fe:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a06:	4967      	ldr	r1, [pc, #412]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a08:	4313      	orrs	r3, r2
 8004a0a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d00a      	beq.n	8004a30 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a1a:	4b62      	ldr	r3, [pc, #392]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a20:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a28:	495e      	ldr	r1, [pc, #376]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d00a      	beq.n	8004a52 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004a3c:	4b59      	ldr	r3, [pc, #356]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a42:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4a:	4956      	ldr	r1, [pc, #344]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a4c:	4313      	orrs	r3, r2
 8004a4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00a      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004a5e:	4b51      	ldr	r3, [pc, #324]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a64:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a6c:	494d      	ldr	r1, [pc, #308]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d00a      	beq.n	8004a96 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8004a80:	4b48      	ldr	r3, [pc, #288]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a86:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a8e:	4945      	ldr	r1, [pc, #276]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d00a      	beq.n	8004ab8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8004aa2:	4b40      	ldr	r3, [pc, #256]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004aa4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aa8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ab0:	493c      	ldr	r1, [pc, #240]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d00a      	beq.n	8004ada <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004ac4:	4b37      	ldr	r3, [pc, #220]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ac6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aca:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004ad2:	4934      	ldr	r1, [pc, #208]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d011      	beq.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004ae6:	4b2f      	ldr	r3, [pc, #188]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004aec:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004af4:	492b      	ldr	r1, [pc, #172]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004af6:	4313      	orrs	r3, r2
 8004af8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004b00:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004b04:	d101      	bne.n	8004b0a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004b06:	2301      	movs	r3, #1
 8004b08:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0308 	and.w	r3, r3, #8
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d001      	beq.n	8004b1a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004b16:	2301      	movs	r3, #1
 8004b18:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00a      	beq.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004b26:	4b1f      	ldr	r3, [pc, #124]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b2c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b34:	491b      	ldr	r1, [pc, #108]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b36:	4313      	orrs	r3, r2
 8004b38:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d00b      	beq.n	8004b60 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004b48:	4b16      	ldr	r3, [pc, #88]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b4e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b58:	4912      	ldr	r1, [pc, #72]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b5a:	4313      	orrs	r3, r2
 8004b5c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d00b      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004b6c:	4b0d      	ldr	r3, [pc, #52]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004b72:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b7c:	4909      	ldr	r1, [pc, #36]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d00f      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004b90:	4b04      	ldr	r3, [pc, #16]	; (8004ba4 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004b92:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b96:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba0:	e002      	b.n	8004ba8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8004ba2:	bf00      	nop
 8004ba4:	40023800 	.word	0x40023800
 8004ba8:	4986      	ldr	r1, [pc, #536]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00b      	beq.n	8004bd4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004bbc:	4b81      	ldr	r3, [pc, #516]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bbe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bc2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004bcc:	497d      	ldr	r1, [pc, #500]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d006      	beq.n	8004be8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f000 80d6 	beq.w	8004d94 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004be8:	4b76      	ldr	r3, [pc, #472]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a75      	ldr	r2, [pc, #468]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004bf2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bf4:	f7fc fe22 	bl	800183c <HAL_GetTick>
 8004bf8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004bfa:	e008      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004bfc:	f7fc fe1e 	bl	800183c <HAL_GetTick>
 8004c00:	4602      	mov	r2, r0
 8004c02:	697b      	ldr	r3, [r7, #20]
 8004c04:	1ad3      	subs	r3, r2, r3
 8004c06:	2b64      	cmp	r3, #100	; 0x64
 8004c08:	d901      	bls.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c0a:	2303      	movs	r3, #3
 8004c0c:	e195      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004c0e:	4b6d      	ldr	r3, [pc, #436]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d1f0      	bne.n	8004bfc <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d021      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d11d      	bne.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004c2e:	4b65      	ldr	r3, [pc, #404]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c34:	0c1b      	lsrs	r3, r3, #16
 8004c36:	f003 0303 	and.w	r3, r3, #3
 8004c3a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004c3c:	4b61      	ldr	r3, [pc, #388]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c3e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c42:	0e1b      	lsrs	r3, r3, #24
 8004c44:	f003 030f 	and.w	r3, r3, #15
 8004c48:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	019a      	lsls	r2, r3, #6
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	041b      	lsls	r3, r3, #16
 8004c54:	431a      	orrs	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	061b      	lsls	r3, r3, #24
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	071b      	lsls	r3, r3, #28
 8004c62:	4958      	ldr	r1, [pc, #352]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c64:	4313      	orrs	r3, r2
 8004c66:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d004      	beq.n	8004c80 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c7a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c7e:	d00a      	beq.n	8004c96 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d02e      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c90:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004c94:	d129      	bne.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004c96:	4b4b      	ldr	r3, [pc, #300]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c98:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c9c:	0c1b      	lsrs	r3, r3, #16
 8004c9e:	f003 0303 	and.w	r3, r3, #3
 8004ca2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004ca4:	4b47      	ldr	r3, [pc, #284]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004caa:	0f1b      	lsrs	r3, r3, #28
 8004cac:	f003 0307 	and.w	r3, r3, #7
 8004cb0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	685b      	ldr	r3, [r3, #4]
 8004cb6:	019a      	lsls	r2, r3, #6
 8004cb8:	693b      	ldr	r3, [r7, #16]
 8004cba:	041b      	lsls	r3, r3, #16
 8004cbc:	431a      	orrs	r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	061b      	lsls	r3, r3, #24
 8004cc4:	431a      	orrs	r2, r3
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	071b      	lsls	r3, r3, #28
 8004cca:	493e      	ldr	r1, [pc, #248]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ccc:	4313      	orrs	r3, r2
 8004cce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004cd2:	4b3c      	ldr	r3, [pc, #240]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cd8:	f023 021f 	bic.w	r2, r3, #31
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce0:	3b01      	subs	r3, #1
 8004ce2:	4938      	ldr	r1, [pc, #224]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d01d      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004cf6:	4b33      	ldr	r3, [pc, #204]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004cf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004cfc:	0e1b      	lsrs	r3, r3, #24
 8004cfe:	f003 030f 	and.w	r3, r3, #15
 8004d02:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004d04:	4b2f      	ldr	r3, [pc, #188]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d06:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d0a:	0f1b      	lsrs	r3, r3, #28
 8004d0c:	f003 0307 	and.w	r3, r3, #7
 8004d10:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	019a      	lsls	r2, r3, #6
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	691b      	ldr	r3, [r3, #16]
 8004d1c:	041b      	lsls	r3, r3, #16
 8004d1e:	431a      	orrs	r2, r3
 8004d20:	693b      	ldr	r3, [r7, #16]
 8004d22:	061b      	lsls	r3, r3, #24
 8004d24:	431a      	orrs	r2, r3
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	071b      	lsls	r3, r3, #28
 8004d2a:	4926      	ldr	r1, [pc, #152]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d011      	beq.n	8004d62 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	019a      	lsls	r2, r3, #6
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	041b      	lsls	r3, r3, #16
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	68db      	ldr	r3, [r3, #12]
 8004d50:	061b      	lsls	r3, r3, #24
 8004d52:	431a      	orrs	r2, r3
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	071b      	lsls	r3, r3, #28
 8004d5a:	491a      	ldr	r1, [pc, #104]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d5c:	4313      	orrs	r3, r2
 8004d5e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004d62:	4b18      	ldr	r3, [pc, #96]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a17      	ldr	r2, [pc, #92]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d68:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004d6c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d6e:	f7fc fd65 	bl	800183c <HAL_GetTick>
 8004d72:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d74:	e008      	b.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004d76:	f7fc fd61 	bl	800183c <HAL_GetTick>
 8004d7a:	4602      	mov	r2, r0
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	1ad3      	subs	r3, r2, r3
 8004d80:	2b64      	cmp	r3, #100	; 0x64
 8004d82:	d901      	bls.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d84:	2303      	movs	r3, #3
 8004d86:	e0d8      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004d88:	4b0e      	ldr	r3, [pc, #56]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d0f0      	beq.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004d94:	69bb      	ldr	r3, [r7, #24]
 8004d96:	2b01      	cmp	r3, #1
 8004d98:	f040 80ce 	bne.w	8004f38 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004d9c:	4b09      	ldr	r3, [pc, #36]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a08      	ldr	r2, [pc, #32]	; (8004dc4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004da2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004da6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004da8:	f7fc fd48 	bl	800183c <HAL_GetTick>
 8004dac:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004dae:	e00b      	b.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004db0:	f7fc fd44 	bl	800183c <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	2b64      	cmp	r3, #100	; 0x64
 8004dbc:	d904      	bls.n	8004dc8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e0bb      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004dc2:	bf00      	nop
 8004dc4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004dc8:	4b5e      	ldr	r3, [pc, #376]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004dd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dd4:	d0ec      	beq.n	8004db0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d003      	beq.n	8004dea <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d009      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d02e      	beq.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d12a      	bne.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004dfe:	4b51      	ldr	r3, [pc, #324]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e04:	0c1b      	lsrs	r3, r3, #16
 8004e06:	f003 0303 	and.w	r3, r3, #3
 8004e0a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004e0c:	4b4d      	ldr	r3, [pc, #308]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e12:	0f1b      	lsrs	r3, r3, #28
 8004e14:	f003 0307 	and.w	r3, r3, #7
 8004e18:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	019a      	lsls	r2, r3, #6
 8004e20:	693b      	ldr	r3, [r7, #16]
 8004e22:	041b      	lsls	r3, r3, #16
 8004e24:	431a      	orrs	r2, r3
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	699b      	ldr	r3, [r3, #24]
 8004e2a:	061b      	lsls	r3, r3, #24
 8004e2c:	431a      	orrs	r2, r3
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	071b      	lsls	r3, r3, #28
 8004e32:	4944      	ldr	r1, [pc, #272]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e34:	4313      	orrs	r3, r2
 8004e36:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004e3a:	4b42      	ldr	r3, [pc, #264]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e3c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e40:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e48:	3b01      	subs	r3, #1
 8004e4a:	021b      	lsls	r3, r3, #8
 8004e4c:	493d      	ldr	r1, [pc, #244]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d022      	beq.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e64:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004e68:	d11d      	bne.n	8004ea6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004e6a:	4b36      	ldr	r3, [pc, #216]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e70:	0e1b      	lsrs	r3, r3, #24
 8004e72:	f003 030f 	and.w	r3, r3, #15
 8004e76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004e78:	4b32      	ldr	r3, [pc, #200]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e7e:	0f1b      	lsrs	r3, r3, #28
 8004e80:	f003 0307 	and.w	r3, r3, #7
 8004e84:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	019a      	lsls	r2, r3, #6
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6a1b      	ldr	r3, [r3, #32]
 8004e90:	041b      	lsls	r3, r3, #16
 8004e92:	431a      	orrs	r2, r3
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	061b      	lsls	r3, r3, #24
 8004e98:	431a      	orrs	r2, r3
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	071b      	lsls	r3, r3, #28
 8004e9e:	4929      	ldr	r1, [pc, #164]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f003 0308 	and.w	r3, r3, #8
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d028      	beq.n	8004f04 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004eb2:	4b24      	ldr	r3, [pc, #144]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004eb4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004eb8:	0e1b      	lsrs	r3, r3, #24
 8004eba:	f003 030f 	and.w	r3, r3, #15
 8004ebe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004ec0:	4b20      	ldr	r3, [pc, #128]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ec2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ec6:	0c1b      	lsrs	r3, r3, #16
 8004ec8:	f003 0303 	and.w	r3, r3, #3
 8004ecc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	695b      	ldr	r3, [r3, #20]
 8004ed2:	019a      	lsls	r2, r3, #6
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	041b      	lsls	r3, r3, #16
 8004ed8:	431a      	orrs	r2, r3
 8004eda:	693b      	ldr	r3, [r7, #16]
 8004edc:	061b      	lsls	r3, r3, #24
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	69db      	ldr	r3, [r3, #28]
 8004ee4:	071b      	lsls	r3, r3, #28
 8004ee6:	4917      	ldr	r1, [pc, #92]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004eee:	4b15      	ldr	r3, [pc, #84]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ef0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ef4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004efc:	4911      	ldr	r1, [pc, #68]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004f04:	4b0f      	ldr	r3, [pc, #60]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a0e      	ldr	r2, [pc, #56]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f10:	f7fc fc94 	bl	800183c <HAL_GetTick>
 8004f14:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f16:	e008      	b.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004f18:	f7fc fc90 	bl	800183c <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b64      	cmp	r3, #100	; 0x64
 8004f24:	d901      	bls.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e007      	b.n	8004f3a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004f2a:	4b06      	ldr	r3, [pc, #24]	; (8004f44 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f32:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004f36:	d1ef      	bne.n	8004f18 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004f38:	2300      	movs	r3, #0
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3720      	adds	r7, #32
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	40023800 	.word	0x40023800

08004f48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e049      	b.n	8004fee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d106      	bne.n	8004f74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f7fc fad8 	bl	8001524 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2202      	movs	r2, #2
 8004f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	3304      	adds	r3, #4
 8004f84:	4619      	mov	r1, r3
 8004f86:	4610      	mov	r0, r2
 8004f88:	f000 fd30 	bl	80059ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fec:	2300      	movs	r3, #0
}
 8004fee:	4618      	mov	r0, r3
 8004ff0:	3708      	adds	r7, #8
 8004ff2:	46bd      	mov	sp, r7
 8004ff4:	bd80      	pop	{r7, pc}
	...

08004ff8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b085      	sub	sp, #20
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005006:	b2db      	uxtb	r3, r3
 8005008:	2b01      	cmp	r3, #1
 800500a:	d001      	beq.n	8005010 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800500c:	2301      	movs	r3, #1
 800500e:	e054      	b.n	80050ba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2202      	movs	r2, #2
 8005014:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	68da      	ldr	r2, [r3, #12]
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f042 0201 	orr.w	r2, r2, #1
 8005026:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a26      	ldr	r2, [pc, #152]	; (80050c8 <HAL_TIM_Base_Start_IT+0xd0>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d022      	beq.n	8005078 <HAL_TIM_Base_Start_IT+0x80>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800503a:	d01d      	beq.n	8005078 <HAL_TIM_Base_Start_IT+0x80>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a22      	ldr	r2, [pc, #136]	; (80050cc <HAL_TIM_Base_Start_IT+0xd4>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d018      	beq.n	8005078 <HAL_TIM_Base_Start_IT+0x80>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a21      	ldr	r2, [pc, #132]	; (80050d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d013      	beq.n	8005078 <HAL_TIM_Base_Start_IT+0x80>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a1f      	ldr	r2, [pc, #124]	; (80050d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d00e      	beq.n	8005078 <HAL_TIM_Base_Start_IT+0x80>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a1e      	ldr	r2, [pc, #120]	; (80050d8 <HAL_TIM_Base_Start_IT+0xe0>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d009      	beq.n	8005078 <HAL_TIM_Base_Start_IT+0x80>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4a1c      	ldr	r2, [pc, #112]	; (80050dc <HAL_TIM_Base_Start_IT+0xe4>)
 800506a:	4293      	cmp	r3, r2
 800506c:	d004      	beq.n	8005078 <HAL_TIM_Base_Start_IT+0x80>
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	4a1b      	ldr	r2, [pc, #108]	; (80050e0 <HAL_TIM_Base_Start_IT+0xe8>)
 8005074:	4293      	cmp	r3, r2
 8005076:	d115      	bne.n	80050a4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	689a      	ldr	r2, [r3, #8]
 800507e:	4b19      	ldr	r3, [pc, #100]	; (80050e4 <HAL_TIM_Base_Start_IT+0xec>)
 8005080:	4013      	ands	r3, r2
 8005082:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	2b06      	cmp	r3, #6
 8005088:	d015      	beq.n	80050b6 <HAL_TIM_Base_Start_IT+0xbe>
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005090:	d011      	beq.n	80050b6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f042 0201 	orr.w	r2, r2, #1
 80050a0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050a2:	e008      	b.n	80050b6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f042 0201 	orr.w	r2, r2, #1
 80050b2:	601a      	str	r2, [r3, #0]
 80050b4:	e000      	b.n	80050b8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050b6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050b8:	2300      	movs	r3, #0
}
 80050ba:	4618      	mov	r0, r3
 80050bc:	3714      	adds	r7, #20
 80050be:	46bd      	mov	sp, r7
 80050c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c4:	4770      	bx	lr
 80050c6:	bf00      	nop
 80050c8:	40010000 	.word	0x40010000
 80050cc:	40000400 	.word	0x40000400
 80050d0:	40000800 	.word	0x40000800
 80050d4:	40000c00 	.word	0x40000c00
 80050d8:	40010400 	.word	0x40010400
 80050dc:	40014000 	.word	0x40014000
 80050e0:	40001800 	.word	0x40001800
 80050e4:	00010007 	.word	0x00010007

080050e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b082      	sub	sp, #8
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d101      	bne.n	80050fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050f6:	2301      	movs	r3, #1
 80050f8:	e049      	b.n	800518e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005100:	b2db      	uxtb	r3, r3
 8005102:	2b00      	cmp	r3, #0
 8005104:	d106      	bne.n	8005114 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f841 	bl	8005196 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	2202      	movs	r2, #2
 8005118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	3304      	adds	r3, #4
 8005124:	4619      	mov	r1, r3
 8005126:	4610      	mov	r0, r2
 8005128:	f000 fc60 	bl	80059ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2201      	movs	r2, #1
 8005138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	2201      	movs	r2, #1
 8005140:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	2201      	movs	r2, #1
 8005148:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2201      	movs	r2, #1
 8005150:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2201      	movs	r2, #1
 8005160:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2201      	movs	r2, #1
 8005168:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2201      	movs	r2, #1
 8005178:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2201      	movs	r2, #1
 8005188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800518c:	2300      	movs	r3, #0
}
 800518e:	4618      	mov	r0, r3
 8005190:	3708      	adds	r7, #8
 8005192:	46bd      	mov	sp, r7
 8005194:	bd80      	pop	{r7, pc}

08005196 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005196:	b480      	push	{r7}
 8005198:	b083      	sub	sp, #12
 800519a:	af00      	add	r7, sp, #0
 800519c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800519e:	bf00      	nop
 80051a0:	370c      	adds	r7, #12
 80051a2:	46bd      	mov	sp, r7
 80051a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a8:	4770      	bx	lr
	...

080051ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b084      	sub	sp, #16
 80051b0:	af00      	add	r7, sp, #0
 80051b2:	6078      	str	r0, [r7, #4]
 80051b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d109      	bne.n	80051d0 <HAL_TIM_PWM_Start+0x24>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80051c2:	b2db      	uxtb	r3, r3
 80051c4:	2b01      	cmp	r3, #1
 80051c6:	bf14      	ite	ne
 80051c8:	2301      	movne	r3, #1
 80051ca:	2300      	moveq	r3, #0
 80051cc:	b2db      	uxtb	r3, r3
 80051ce:	e03c      	b.n	800524a <HAL_TIM_PWM_Start+0x9e>
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	2b04      	cmp	r3, #4
 80051d4:	d109      	bne.n	80051ea <HAL_TIM_PWM_Start+0x3e>
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80051dc:	b2db      	uxtb	r3, r3
 80051de:	2b01      	cmp	r3, #1
 80051e0:	bf14      	ite	ne
 80051e2:	2301      	movne	r3, #1
 80051e4:	2300      	moveq	r3, #0
 80051e6:	b2db      	uxtb	r3, r3
 80051e8:	e02f      	b.n	800524a <HAL_TIM_PWM_Start+0x9e>
 80051ea:	683b      	ldr	r3, [r7, #0]
 80051ec:	2b08      	cmp	r3, #8
 80051ee:	d109      	bne.n	8005204 <HAL_TIM_PWM_Start+0x58>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051f6:	b2db      	uxtb	r3, r3
 80051f8:	2b01      	cmp	r3, #1
 80051fa:	bf14      	ite	ne
 80051fc:	2301      	movne	r3, #1
 80051fe:	2300      	moveq	r3, #0
 8005200:	b2db      	uxtb	r3, r3
 8005202:	e022      	b.n	800524a <HAL_TIM_PWM_Start+0x9e>
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	2b0c      	cmp	r3, #12
 8005208:	d109      	bne.n	800521e <HAL_TIM_PWM_Start+0x72>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005210:	b2db      	uxtb	r3, r3
 8005212:	2b01      	cmp	r3, #1
 8005214:	bf14      	ite	ne
 8005216:	2301      	movne	r3, #1
 8005218:	2300      	moveq	r3, #0
 800521a:	b2db      	uxtb	r3, r3
 800521c:	e015      	b.n	800524a <HAL_TIM_PWM_Start+0x9e>
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	2b10      	cmp	r3, #16
 8005222:	d109      	bne.n	8005238 <HAL_TIM_PWM_Start+0x8c>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800522a:	b2db      	uxtb	r3, r3
 800522c:	2b01      	cmp	r3, #1
 800522e:	bf14      	ite	ne
 8005230:	2301      	movne	r3, #1
 8005232:	2300      	moveq	r3, #0
 8005234:	b2db      	uxtb	r3, r3
 8005236:	e008      	b.n	800524a <HAL_TIM_PWM_Start+0x9e>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800523e:	b2db      	uxtb	r3, r3
 8005240:	2b01      	cmp	r3, #1
 8005242:	bf14      	ite	ne
 8005244:	2301      	movne	r3, #1
 8005246:	2300      	moveq	r3, #0
 8005248:	b2db      	uxtb	r3, r3
 800524a:	2b00      	cmp	r3, #0
 800524c:	d001      	beq.n	8005252 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e092      	b.n	8005378 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005252:	683b      	ldr	r3, [r7, #0]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d104      	bne.n	8005262 <HAL_TIM_PWM_Start+0xb6>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2202      	movs	r2, #2
 800525c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005260:	e023      	b.n	80052aa <HAL_TIM_PWM_Start+0xfe>
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	2b04      	cmp	r3, #4
 8005266:	d104      	bne.n	8005272 <HAL_TIM_PWM_Start+0xc6>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2202      	movs	r2, #2
 800526c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005270:	e01b      	b.n	80052aa <HAL_TIM_PWM_Start+0xfe>
 8005272:	683b      	ldr	r3, [r7, #0]
 8005274:	2b08      	cmp	r3, #8
 8005276:	d104      	bne.n	8005282 <HAL_TIM_PWM_Start+0xd6>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2202      	movs	r2, #2
 800527c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005280:	e013      	b.n	80052aa <HAL_TIM_PWM_Start+0xfe>
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	2b0c      	cmp	r3, #12
 8005286:	d104      	bne.n	8005292 <HAL_TIM_PWM_Start+0xe6>
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2202      	movs	r2, #2
 800528c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005290:	e00b      	b.n	80052aa <HAL_TIM_PWM_Start+0xfe>
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	2b10      	cmp	r3, #16
 8005296:	d104      	bne.n	80052a2 <HAL_TIM_PWM_Start+0xf6>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2202      	movs	r2, #2
 800529c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80052a0:	e003      	b.n	80052aa <HAL_TIM_PWM_Start+0xfe>
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2202      	movs	r2, #2
 80052a6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	2201      	movs	r2, #1
 80052b0:	6839      	ldr	r1, [r7, #0]
 80052b2:	4618      	mov	r0, r3
 80052b4:	f000 ff32 	bl	800611c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	4a30      	ldr	r2, [pc, #192]	; (8005380 <HAL_TIM_PWM_Start+0x1d4>)
 80052be:	4293      	cmp	r3, r2
 80052c0:	d004      	beq.n	80052cc <HAL_TIM_PWM_Start+0x120>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a2f      	ldr	r2, [pc, #188]	; (8005384 <HAL_TIM_PWM_Start+0x1d8>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d101      	bne.n	80052d0 <HAL_TIM_PWM_Start+0x124>
 80052cc:	2301      	movs	r3, #1
 80052ce:	e000      	b.n	80052d2 <HAL_TIM_PWM_Start+0x126>
 80052d0:	2300      	movs	r3, #0
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d007      	beq.n	80052e6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80052e4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a25      	ldr	r2, [pc, #148]	; (8005380 <HAL_TIM_PWM_Start+0x1d4>)
 80052ec:	4293      	cmp	r3, r2
 80052ee:	d022      	beq.n	8005336 <HAL_TIM_PWM_Start+0x18a>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052f8:	d01d      	beq.n	8005336 <HAL_TIM_PWM_Start+0x18a>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a22      	ldr	r2, [pc, #136]	; (8005388 <HAL_TIM_PWM_Start+0x1dc>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d018      	beq.n	8005336 <HAL_TIM_PWM_Start+0x18a>
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	4a20      	ldr	r2, [pc, #128]	; (800538c <HAL_TIM_PWM_Start+0x1e0>)
 800530a:	4293      	cmp	r3, r2
 800530c:	d013      	beq.n	8005336 <HAL_TIM_PWM_Start+0x18a>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a1f      	ldr	r2, [pc, #124]	; (8005390 <HAL_TIM_PWM_Start+0x1e4>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d00e      	beq.n	8005336 <HAL_TIM_PWM_Start+0x18a>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a19      	ldr	r2, [pc, #100]	; (8005384 <HAL_TIM_PWM_Start+0x1d8>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d009      	beq.n	8005336 <HAL_TIM_PWM_Start+0x18a>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	4a1b      	ldr	r2, [pc, #108]	; (8005394 <HAL_TIM_PWM_Start+0x1e8>)
 8005328:	4293      	cmp	r3, r2
 800532a:	d004      	beq.n	8005336 <HAL_TIM_PWM_Start+0x18a>
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	4a19      	ldr	r2, [pc, #100]	; (8005398 <HAL_TIM_PWM_Start+0x1ec>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d115      	bne.n	8005362 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	689a      	ldr	r2, [r3, #8]
 800533c:	4b17      	ldr	r3, [pc, #92]	; (800539c <HAL_TIM_PWM_Start+0x1f0>)
 800533e:	4013      	ands	r3, r2
 8005340:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	2b06      	cmp	r3, #6
 8005346:	d015      	beq.n	8005374 <HAL_TIM_PWM_Start+0x1c8>
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800534e:	d011      	beq.n	8005374 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f042 0201 	orr.w	r2, r2, #1
 800535e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005360:	e008      	b.n	8005374 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	681a      	ldr	r2, [r3, #0]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f042 0201 	orr.w	r2, r2, #1
 8005370:	601a      	str	r2, [r3, #0]
 8005372:	e000      	b.n	8005376 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005374:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	40010000 	.word	0x40010000
 8005384:	40010400 	.word	0x40010400
 8005388:	40000400 	.word	0x40000400
 800538c:	40000800 	.word	0x40000800
 8005390:	40000c00 	.word	0x40000c00
 8005394:	40014000 	.word	0x40014000
 8005398:	40001800 	.word	0x40001800
 800539c:	00010007 	.word	0x00010007

080053a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b082      	sub	sp, #8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	691b      	ldr	r3, [r3, #16]
 80053ae:	f003 0302 	and.w	r3, r3, #2
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d122      	bne.n	80053fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	68db      	ldr	r3, [r3, #12]
 80053bc:	f003 0302 	and.w	r3, r3, #2
 80053c0:	2b02      	cmp	r3, #2
 80053c2:	d11b      	bne.n	80053fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f06f 0202 	mvn.w	r2, #2
 80053cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	699b      	ldr	r3, [r3, #24]
 80053da:	f003 0303 	and.w	r3, r3, #3
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d003      	beq.n	80053ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 fae4 	bl	80059b0 <HAL_TIM_IC_CaptureCallback>
 80053e8:	e005      	b.n	80053f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f000 fad6 	bl	800599c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 fae7 	bl	80059c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	f003 0304 	and.w	r3, r3, #4
 8005406:	2b04      	cmp	r3, #4
 8005408:	d122      	bne.n	8005450 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	f003 0304 	and.w	r3, r3, #4
 8005414:	2b04      	cmp	r3, #4
 8005416:	d11b      	bne.n	8005450 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f06f 0204 	mvn.w	r2, #4
 8005420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2202      	movs	r2, #2
 8005426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005432:	2b00      	cmp	r3, #0
 8005434:	d003      	beq.n	800543e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005436:	6878      	ldr	r0, [r7, #4]
 8005438:	f000 faba 	bl	80059b0 <HAL_TIM_IC_CaptureCallback>
 800543c:	e005      	b.n	800544a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f000 faac 	bl	800599c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 fabd 	bl	80059c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2200      	movs	r2, #0
 800544e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	691b      	ldr	r3, [r3, #16]
 8005456:	f003 0308 	and.w	r3, r3, #8
 800545a:	2b08      	cmp	r3, #8
 800545c:	d122      	bne.n	80054a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	f003 0308 	and.w	r3, r3, #8
 8005468:	2b08      	cmp	r3, #8
 800546a:	d11b      	bne.n	80054a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f06f 0208 	mvn.w	r2, #8
 8005474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2204      	movs	r2, #4
 800547a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	69db      	ldr	r3, [r3, #28]
 8005482:	f003 0303 	and.w	r3, r3, #3
 8005486:	2b00      	cmp	r3, #0
 8005488:	d003      	beq.n	8005492 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f000 fa90 	bl	80059b0 <HAL_TIM_IC_CaptureCallback>
 8005490:	e005      	b.n	800549e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005492:	6878      	ldr	r0, [r7, #4]
 8005494:	f000 fa82 	bl	800599c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 fa93 	bl	80059c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2200      	movs	r2, #0
 80054a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	f003 0310 	and.w	r3, r3, #16
 80054ae:	2b10      	cmp	r3, #16
 80054b0:	d122      	bne.n	80054f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	68db      	ldr	r3, [r3, #12]
 80054b8:	f003 0310 	and.w	r3, r3, #16
 80054bc:	2b10      	cmp	r3, #16
 80054be:	d11b      	bne.n	80054f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f06f 0210 	mvn.w	r2, #16
 80054c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2208      	movs	r2, #8
 80054ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	69db      	ldr	r3, [r3, #28]
 80054d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d003      	beq.n	80054e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 fa66 	bl	80059b0 <HAL_TIM_IC_CaptureCallback>
 80054e4:	e005      	b.n	80054f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054e6:	6878      	ldr	r0, [r7, #4]
 80054e8:	f000 fa58 	bl	800599c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 fa69 	bl	80059c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2200      	movs	r2, #0
 80054f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	691b      	ldr	r3, [r3, #16]
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	2b01      	cmp	r3, #1
 8005504:	d10e      	bne.n	8005524 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	f003 0301 	and.w	r3, r3, #1
 8005510:	2b01      	cmp	r3, #1
 8005512:	d107      	bne.n	8005524 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f06f 0201 	mvn.w	r2, #1
 800551c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f7fb fbb2 	bl	8000c88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800552e:	2b80      	cmp	r3, #128	; 0x80
 8005530:	d10e      	bne.n	8005550 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800553c:	2b80      	cmp	r3, #128	; 0x80
 800553e:	d107      	bne.n	8005550 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800554a:	6878      	ldr	r0, [r7, #4]
 800554c:	f000 fea4 	bl	8006298 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	691b      	ldr	r3, [r3, #16]
 8005556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800555a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800555e:	d10e      	bne.n	800557e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	68db      	ldr	r3, [r3, #12]
 8005566:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800556a:	2b80      	cmp	r3, #128	; 0x80
 800556c:	d107      	bne.n	800557e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005576:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005578:	6878      	ldr	r0, [r7, #4]
 800557a:	f000 fe97 	bl	80062ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005588:	2b40      	cmp	r3, #64	; 0x40
 800558a:	d10e      	bne.n	80055aa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	68db      	ldr	r3, [r3, #12]
 8005592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005596:	2b40      	cmp	r3, #64	; 0x40
 8005598:	d107      	bne.n	80055aa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80055a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f000 fa17 	bl	80059d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	f003 0320 	and.w	r3, r3, #32
 80055b4:	2b20      	cmp	r3, #32
 80055b6:	d10e      	bne.n	80055d6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	68db      	ldr	r3, [r3, #12]
 80055be:	f003 0320 	and.w	r3, r3, #32
 80055c2:	2b20      	cmp	r3, #32
 80055c4:	d107      	bne.n	80055d6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f06f 0220 	mvn.w	r2, #32
 80055ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f000 fe57 	bl	8006284 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055d6:	bf00      	nop
 80055d8:	3708      	adds	r7, #8
 80055da:	46bd      	mov	sp, r7
 80055dc:	bd80      	pop	{r7, pc}
	...

080055e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b086      	sub	sp, #24
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	60f8      	str	r0, [r7, #12]
 80055e8:	60b9      	str	r1, [r7, #8]
 80055ea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80055ec:	2300      	movs	r3, #0
 80055ee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d101      	bne.n	80055fe <HAL_TIM_PWM_ConfigChannel+0x1e>
 80055fa:	2302      	movs	r3, #2
 80055fc:	e0ff      	b.n	80057fe <HAL_TIM_PWM_ConfigChannel+0x21e>
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2201      	movs	r2, #1
 8005602:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	2b14      	cmp	r3, #20
 800560a:	f200 80f0 	bhi.w	80057ee <HAL_TIM_PWM_ConfigChannel+0x20e>
 800560e:	a201      	add	r2, pc, #4	; (adr r2, 8005614 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005610:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005614:	08005669 	.word	0x08005669
 8005618:	080057ef 	.word	0x080057ef
 800561c:	080057ef 	.word	0x080057ef
 8005620:	080057ef 	.word	0x080057ef
 8005624:	080056a9 	.word	0x080056a9
 8005628:	080057ef 	.word	0x080057ef
 800562c:	080057ef 	.word	0x080057ef
 8005630:	080057ef 	.word	0x080057ef
 8005634:	080056eb 	.word	0x080056eb
 8005638:	080057ef 	.word	0x080057ef
 800563c:	080057ef 	.word	0x080057ef
 8005640:	080057ef 	.word	0x080057ef
 8005644:	0800572b 	.word	0x0800572b
 8005648:	080057ef 	.word	0x080057ef
 800564c:	080057ef 	.word	0x080057ef
 8005650:	080057ef 	.word	0x080057ef
 8005654:	0800576d 	.word	0x0800576d
 8005658:	080057ef 	.word	0x080057ef
 800565c:	080057ef 	.word	0x080057ef
 8005660:	080057ef 	.word	0x080057ef
 8005664:	080057ad 	.word	0x080057ad
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	68b9      	ldr	r1, [r7, #8]
 800566e:	4618      	mov	r0, r3
 8005670:	f000 fa5c 	bl	8005b2c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	699a      	ldr	r2, [r3, #24]
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f042 0208 	orr.w	r2, r2, #8
 8005682:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	699a      	ldr	r2, [r3, #24]
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	f022 0204 	bic.w	r2, r2, #4
 8005692:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	6999      	ldr	r1, [r3, #24]
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	691a      	ldr	r2, [r3, #16]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	430a      	orrs	r2, r1
 80056a4:	619a      	str	r2, [r3, #24]
      break;
 80056a6:	e0a5      	b.n	80057f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	68b9      	ldr	r1, [r7, #8]
 80056ae:	4618      	mov	r0, r3
 80056b0:	f000 faae 	bl	8005c10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	699a      	ldr	r2, [r3, #24]
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	699a      	ldr	r2, [r3, #24]
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056d4:	68fb      	ldr	r3, [r7, #12]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	6999      	ldr	r1, [r3, #24]
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	691b      	ldr	r3, [r3, #16]
 80056de:	021a      	lsls	r2, r3, #8
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	430a      	orrs	r2, r1
 80056e6:	619a      	str	r2, [r3, #24]
      break;
 80056e8:	e084      	b.n	80057f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68b9      	ldr	r1, [r7, #8]
 80056f0:	4618      	mov	r0, r3
 80056f2:	f000 fb05 	bl	8005d00 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	69da      	ldr	r2, [r3, #28]
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f042 0208 	orr.w	r2, r2, #8
 8005704:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	69da      	ldr	r2, [r3, #28]
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f022 0204 	bic.w	r2, r2, #4
 8005714:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	69d9      	ldr	r1, [r3, #28]
 800571c:	68bb      	ldr	r3, [r7, #8]
 800571e:	691a      	ldr	r2, [r3, #16]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	430a      	orrs	r2, r1
 8005726:	61da      	str	r2, [r3, #28]
      break;
 8005728:	e064      	b.n	80057f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	68b9      	ldr	r1, [r7, #8]
 8005730:	4618      	mov	r0, r3
 8005732:	f000 fb5b 	bl	8005dec <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	69da      	ldr	r2, [r3, #28]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005744:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	69da      	ldr	r2, [r3, #28]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005754:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	69d9      	ldr	r1, [r3, #28]
 800575c:	68bb      	ldr	r3, [r7, #8]
 800575e:	691b      	ldr	r3, [r3, #16]
 8005760:	021a      	lsls	r2, r3, #8
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	430a      	orrs	r2, r1
 8005768:	61da      	str	r2, [r3, #28]
      break;
 800576a:	e043      	b.n	80057f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	68b9      	ldr	r1, [r7, #8]
 8005772:	4618      	mov	r0, r3
 8005774:	f000 fb92 	bl	8005e9c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f042 0208 	orr.w	r2, r2, #8
 8005786:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f022 0204 	bic.w	r2, r2, #4
 8005796:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800579e:	68bb      	ldr	r3, [r7, #8]
 80057a0:	691a      	ldr	r2, [r3, #16]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	430a      	orrs	r2, r1
 80057a8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80057aa:	e023      	b.n	80057f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	68b9      	ldr	r1, [r7, #8]
 80057b2:	4618      	mov	r0, r3
 80057b4:	f000 fbc4 	bl	8005f40 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80057c6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057d6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80057de:	68bb      	ldr	r3, [r7, #8]
 80057e0:	691b      	ldr	r3, [r3, #16]
 80057e2:	021a      	lsls	r2, r3, #8
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	430a      	orrs	r2, r1
 80057ea:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80057ec:	e002      	b.n	80057f4 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80057ee:	2301      	movs	r3, #1
 80057f0:	75fb      	strb	r3, [r7, #23]
      break;
 80057f2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	2200      	movs	r2, #0
 80057f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80057fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3718      	adds	r7, #24
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop

08005808 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b084      	sub	sp, #16
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005812:	2300      	movs	r3, #0
 8005814:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800581c:	2b01      	cmp	r3, #1
 800581e:	d101      	bne.n	8005824 <HAL_TIM_ConfigClockSource+0x1c>
 8005820:	2302      	movs	r3, #2
 8005822:	e0b4      	b.n	800598e <HAL_TIM_ConfigClockSource+0x186>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2201      	movs	r2, #1
 8005828:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	2202      	movs	r2, #2
 8005830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800583c:	68ba      	ldr	r2, [r7, #8]
 800583e:	4b56      	ldr	r3, [pc, #344]	; (8005998 <HAL_TIM_ConfigClockSource+0x190>)
 8005840:	4013      	ands	r3, r2
 8005842:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005844:	68bb      	ldr	r3, [r7, #8]
 8005846:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800584a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	68ba      	ldr	r2, [r7, #8]
 8005852:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800585c:	d03e      	beq.n	80058dc <HAL_TIM_ConfigClockSource+0xd4>
 800585e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005862:	f200 8087 	bhi.w	8005974 <HAL_TIM_ConfigClockSource+0x16c>
 8005866:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800586a:	f000 8086 	beq.w	800597a <HAL_TIM_ConfigClockSource+0x172>
 800586e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005872:	d87f      	bhi.n	8005974 <HAL_TIM_ConfigClockSource+0x16c>
 8005874:	2b70      	cmp	r3, #112	; 0x70
 8005876:	d01a      	beq.n	80058ae <HAL_TIM_ConfigClockSource+0xa6>
 8005878:	2b70      	cmp	r3, #112	; 0x70
 800587a:	d87b      	bhi.n	8005974 <HAL_TIM_ConfigClockSource+0x16c>
 800587c:	2b60      	cmp	r3, #96	; 0x60
 800587e:	d050      	beq.n	8005922 <HAL_TIM_ConfigClockSource+0x11a>
 8005880:	2b60      	cmp	r3, #96	; 0x60
 8005882:	d877      	bhi.n	8005974 <HAL_TIM_ConfigClockSource+0x16c>
 8005884:	2b50      	cmp	r3, #80	; 0x50
 8005886:	d03c      	beq.n	8005902 <HAL_TIM_ConfigClockSource+0xfa>
 8005888:	2b50      	cmp	r3, #80	; 0x50
 800588a:	d873      	bhi.n	8005974 <HAL_TIM_ConfigClockSource+0x16c>
 800588c:	2b40      	cmp	r3, #64	; 0x40
 800588e:	d058      	beq.n	8005942 <HAL_TIM_ConfigClockSource+0x13a>
 8005890:	2b40      	cmp	r3, #64	; 0x40
 8005892:	d86f      	bhi.n	8005974 <HAL_TIM_ConfigClockSource+0x16c>
 8005894:	2b30      	cmp	r3, #48	; 0x30
 8005896:	d064      	beq.n	8005962 <HAL_TIM_ConfigClockSource+0x15a>
 8005898:	2b30      	cmp	r3, #48	; 0x30
 800589a:	d86b      	bhi.n	8005974 <HAL_TIM_ConfigClockSource+0x16c>
 800589c:	2b20      	cmp	r3, #32
 800589e:	d060      	beq.n	8005962 <HAL_TIM_ConfigClockSource+0x15a>
 80058a0:	2b20      	cmp	r3, #32
 80058a2:	d867      	bhi.n	8005974 <HAL_TIM_ConfigClockSource+0x16c>
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d05c      	beq.n	8005962 <HAL_TIM_ConfigClockSource+0x15a>
 80058a8:	2b10      	cmp	r3, #16
 80058aa:	d05a      	beq.n	8005962 <HAL_TIM_ConfigClockSource+0x15a>
 80058ac:	e062      	b.n	8005974 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	6818      	ldr	r0, [r3, #0]
 80058b2:	683b      	ldr	r3, [r7, #0]
 80058b4:	6899      	ldr	r1, [r3, #8]
 80058b6:	683b      	ldr	r3, [r7, #0]
 80058b8:	685a      	ldr	r2, [r3, #4]
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	68db      	ldr	r3, [r3, #12]
 80058be:	f000 fc0d 	bl	80060dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80058d0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	68ba      	ldr	r2, [r7, #8]
 80058d8:	609a      	str	r2, [r3, #8]
      break;
 80058da:	e04f      	b.n	800597c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6818      	ldr	r0, [r3, #0]
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	6899      	ldr	r1, [r3, #8]
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	685a      	ldr	r2, [r3, #4]
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	f000 fbf6 	bl	80060dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	689a      	ldr	r2, [r3, #8]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80058fe:	609a      	str	r2, [r3, #8]
      break;
 8005900:	e03c      	b.n	800597c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6818      	ldr	r0, [r3, #0]
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	6859      	ldr	r1, [r3, #4]
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	68db      	ldr	r3, [r3, #12]
 800590e:	461a      	mov	r2, r3
 8005910:	f000 fb6a 	bl	8005fe8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2150      	movs	r1, #80	; 0x50
 800591a:	4618      	mov	r0, r3
 800591c:	f000 fbc3 	bl	80060a6 <TIM_ITRx_SetConfig>
      break;
 8005920:	e02c      	b.n	800597c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6818      	ldr	r0, [r3, #0]
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	6859      	ldr	r1, [r3, #4]
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	461a      	mov	r2, r3
 8005930:	f000 fb89 	bl	8006046 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	2160      	movs	r1, #96	; 0x60
 800593a:	4618      	mov	r0, r3
 800593c:	f000 fbb3 	bl	80060a6 <TIM_ITRx_SetConfig>
      break;
 8005940:	e01c      	b.n	800597c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6818      	ldr	r0, [r3, #0]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	6859      	ldr	r1, [r3, #4]
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	68db      	ldr	r3, [r3, #12]
 800594e:	461a      	mov	r2, r3
 8005950:	f000 fb4a 	bl	8005fe8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	2140      	movs	r1, #64	; 0x40
 800595a:	4618      	mov	r0, r3
 800595c:	f000 fba3 	bl	80060a6 <TIM_ITRx_SetConfig>
      break;
 8005960:	e00c      	b.n	800597c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4619      	mov	r1, r3
 800596c:	4610      	mov	r0, r2
 800596e:	f000 fb9a 	bl	80060a6 <TIM_ITRx_SetConfig>
      break;
 8005972:	e003      	b.n	800597c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005974:	2301      	movs	r3, #1
 8005976:	73fb      	strb	r3, [r7, #15]
      break;
 8005978:	e000      	b.n	800597c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800597a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800598c:	7bfb      	ldrb	r3, [r7, #15]
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	fffeff88 	.word	0xfffeff88

0800599c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80059b8:	bf00      	nop
 80059ba:	370c      	adds	r7, #12
 80059bc:	46bd      	mov	sp, r7
 80059be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c2:	4770      	bx	lr

080059c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059cc:	bf00      	nop
 80059ce:	370c      	adds	r7, #12
 80059d0:	46bd      	mov	sp, r7
 80059d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d6:	4770      	bx	lr

080059d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059d8:	b480      	push	{r7}
 80059da:	b083      	sub	sp, #12
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80059ec:	b480      	push	{r7}
 80059ee:	b085      	sub	sp, #20
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
 80059f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	4a40      	ldr	r2, [pc, #256]	; (8005b00 <TIM_Base_SetConfig+0x114>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d013      	beq.n	8005a2c <TIM_Base_SetConfig+0x40>
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a0a:	d00f      	beq.n	8005a2c <TIM_Base_SetConfig+0x40>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a3d      	ldr	r2, [pc, #244]	; (8005b04 <TIM_Base_SetConfig+0x118>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d00b      	beq.n	8005a2c <TIM_Base_SetConfig+0x40>
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a3c      	ldr	r2, [pc, #240]	; (8005b08 <TIM_Base_SetConfig+0x11c>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d007      	beq.n	8005a2c <TIM_Base_SetConfig+0x40>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a3b      	ldr	r2, [pc, #236]	; (8005b0c <TIM_Base_SetConfig+0x120>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d003      	beq.n	8005a2c <TIM_Base_SetConfig+0x40>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a3a      	ldr	r2, [pc, #232]	; (8005b10 <TIM_Base_SetConfig+0x124>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d108      	bne.n	8005a3e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a32:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	68fa      	ldr	r2, [r7, #12]
 8005a3a:	4313      	orrs	r3, r2
 8005a3c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	4a2f      	ldr	r2, [pc, #188]	; (8005b00 <TIM_Base_SetConfig+0x114>)
 8005a42:	4293      	cmp	r3, r2
 8005a44:	d02b      	beq.n	8005a9e <TIM_Base_SetConfig+0xb2>
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a4c:	d027      	beq.n	8005a9e <TIM_Base_SetConfig+0xb2>
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	4a2c      	ldr	r2, [pc, #176]	; (8005b04 <TIM_Base_SetConfig+0x118>)
 8005a52:	4293      	cmp	r3, r2
 8005a54:	d023      	beq.n	8005a9e <TIM_Base_SetConfig+0xb2>
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	4a2b      	ldr	r2, [pc, #172]	; (8005b08 <TIM_Base_SetConfig+0x11c>)
 8005a5a:	4293      	cmp	r3, r2
 8005a5c:	d01f      	beq.n	8005a9e <TIM_Base_SetConfig+0xb2>
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	4a2a      	ldr	r2, [pc, #168]	; (8005b0c <TIM_Base_SetConfig+0x120>)
 8005a62:	4293      	cmp	r3, r2
 8005a64:	d01b      	beq.n	8005a9e <TIM_Base_SetConfig+0xb2>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4a29      	ldr	r2, [pc, #164]	; (8005b10 <TIM_Base_SetConfig+0x124>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d017      	beq.n	8005a9e <TIM_Base_SetConfig+0xb2>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4a28      	ldr	r2, [pc, #160]	; (8005b14 <TIM_Base_SetConfig+0x128>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d013      	beq.n	8005a9e <TIM_Base_SetConfig+0xb2>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	4a27      	ldr	r2, [pc, #156]	; (8005b18 <TIM_Base_SetConfig+0x12c>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d00f      	beq.n	8005a9e <TIM_Base_SetConfig+0xb2>
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4a26      	ldr	r2, [pc, #152]	; (8005b1c <TIM_Base_SetConfig+0x130>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d00b      	beq.n	8005a9e <TIM_Base_SetConfig+0xb2>
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	4a25      	ldr	r2, [pc, #148]	; (8005b20 <TIM_Base_SetConfig+0x134>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d007      	beq.n	8005a9e <TIM_Base_SetConfig+0xb2>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	4a24      	ldr	r2, [pc, #144]	; (8005b24 <TIM_Base_SetConfig+0x138>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d003      	beq.n	8005a9e <TIM_Base_SetConfig+0xb2>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a23      	ldr	r2, [pc, #140]	; (8005b28 <TIM_Base_SetConfig+0x13c>)
 8005a9a:	4293      	cmp	r3, r2
 8005a9c:	d108      	bne.n	8005ab0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005aa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005aa6:	683b      	ldr	r3, [r7, #0]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	68fa      	ldr	r2, [r7, #12]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	4313      	orrs	r3, r2
 8005abc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ac4:	683b      	ldr	r3, [r7, #0]
 8005ac6:	689a      	ldr	r2, [r3, #8]
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	681a      	ldr	r2, [r3, #0]
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a0a      	ldr	r2, [pc, #40]	; (8005b00 <TIM_Base_SetConfig+0x114>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d003      	beq.n	8005ae4 <TIM_Base_SetConfig+0xf8>
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	4a0c      	ldr	r2, [pc, #48]	; (8005b10 <TIM_Base_SetConfig+0x124>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d103      	bne.n	8005aec <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	691a      	ldr	r2, [r3, #16]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2201      	movs	r2, #1
 8005af0:	615a      	str	r2, [r3, #20]
}
 8005af2:	bf00      	nop
 8005af4:	3714      	adds	r7, #20
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
 8005afe:	bf00      	nop
 8005b00:	40010000 	.word	0x40010000
 8005b04:	40000400 	.word	0x40000400
 8005b08:	40000800 	.word	0x40000800
 8005b0c:	40000c00 	.word	0x40000c00
 8005b10:	40010400 	.word	0x40010400
 8005b14:	40014000 	.word	0x40014000
 8005b18:	40014400 	.word	0x40014400
 8005b1c:	40014800 	.word	0x40014800
 8005b20:	40001800 	.word	0x40001800
 8005b24:	40001c00 	.word	0x40001c00
 8005b28:	40002000 	.word	0x40002000

08005b2c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b2c:	b480      	push	{r7}
 8005b2e:	b087      	sub	sp, #28
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
 8005b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	f023 0201 	bic.w	r2, r3, #1
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	685b      	ldr	r3, [r3, #4]
 8005b4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	699b      	ldr	r3, [r3, #24]
 8005b52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	4b2b      	ldr	r3, [pc, #172]	; (8005c04 <TIM_OC1_SetConfig+0xd8>)
 8005b58:	4013      	ands	r3, r2
 8005b5a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	f023 0303 	bic.w	r3, r3, #3
 8005b62:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b64:	683b      	ldr	r3, [r7, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005b6e:	697b      	ldr	r3, [r7, #20]
 8005b70:	f023 0302 	bic.w	r3, r3, #2
 8005b74:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	697a      	ldr	r2, [r7, #20]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	4a21      	ldr	r2, [pc, #132]	; (8005c08 <TIM_OC1_SetConfig+0xdc>)
 8005b84:	4293      	cmp	r3, r2
 8005b86:	d003      	beq.n	8005b90 <TIM_OC1_SetConfig+0x64>
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4a20      	ldr	r2, [pc, #128]	; (8005c0c <TIM_OC1_SetConfig+0xe0>)
 8005b8c:	4293      	cmp	r3, r2
 8005b8e:	d10c      	bne.n	8005baa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	f023 0308 	bic.w	r3, r3, #8
 8005b96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	697a      	ldr	r2, [r7, #20]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	f023 0304 	bic.w	r3, r3, #4
 8005ba8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a16      	ldr	r2, [pc, #88]	; (8005c08 <TIM_OC1_SetConfig+0xdc>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d003      	beq.n	8005bba <TIM_OC1_SetConfig+0x8e>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	4a15      	ldr	r2, [pc, #84]	; (8005c0c <TIM_OC1_SetConfig+0xe0>)
 8005bb6:	4293      	cmp	r3, r2
 8005bb8:	d111      	bne.n	8005bde <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005bc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005bc2:	693b      	ldr	r3, [r7, #16]
 8005bc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	695b      	ldr	r3, [r3, #20]
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	4313      	orrs	r3, r2
 8005bd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	693a      	ldr	r2, [r7, #16]
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	693a      	ldr	r2, [r7, #16]
 8005be2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	68fa      	ldr	r2, [r7, #12]
 8005be8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	685a      	ldr	r2, [r3, #4]
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	697a      	ldr	r2, [r7, #20]
 8005bf6:	621a      	str	r2, [r3, #32]
}
 8005bf8:	bf00      	nop
 8005bfa:	371c      	adds	r7, #28
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr
 8005c04:	fffeff8f 	.word	0xfffeff8f
 8005c08:	40010000 	.word	0x40010000
 8005c0c:	40010400 	.word	0x40010400

08005c10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b087      	sub	sp, #28
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	f023 0210 	bic.w	r2, r3, #16
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6a1b      	ldr	r3, [r3, #32]
 8005c2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	699b      	ldr	r3, [r3, #24]
 8005c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005c38:	68fa      	ldr	r2, [r7, #12]
 8005c3a:	4b2e      	ldr	r3, [pc, #184]	; (8005cf4 <TIM_OC2_SetConfig+0xe4>)
 8005c3c:	4013      	ands	r3, r2
 8005c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c46:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	021b      	lsls	r3, r3, #8
 8005c4e:	68fa      	ldr	r2, [r7, #12]
 8005c50:	4313      	orrs	r3, r2
 8005c52:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005c54:	697b      	ldr	r3, [r7, #20]
 8005c56:	f023 0320 	bic.w	r3, r3, #32
 8005c5a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	011b      	lsls	r3, r3, #4
 8005c62:	697a      	ldr	r2, [r7, #20]
 8005c64:	4313      	orrs	r3, r2
 8005c66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	4a23      	ldr	r2, [pc, #140]	; (8005cf8 <TIM_OC2_SetConfig+0xe8>)
 8005c6c:	4293      	cmp	r3, r2
 8005c6e:	d003      	beq.n	8005c78 <TIM_OC2_SetConfig+0x68>
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	4a22      	ldr	r2, [pc, #136]	; (8005cfc <TIM_OC2_SetConfig+0xec>)
 8005c74:	4293      	cmp	r3, r2
 8005c76:	d10d      	bne.n	8005c94 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	011b      	lsls	r3, r3, #4
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005c8c:	697b      	ldr	r3, [r7, #20]
 8005c8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005c92:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	4a18      	ldr	r2, [pc, #96]	; (8005cf8 <TIM_OC2_SetConfig+0xe8>)
 8005c98:	4293      	cmp	r3, r2
 8005c9a:	d003      	beq.n	8005ca4 <TIM_OC2_SetConfig+0x94>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	4a17      	ldr	r2, [pc, #92]	; (8005cfc <TIM_OC2_SetConfig+0xec>)
 8005ca0:	4293      	cmp	r3, r2
 8005ca2:	d113      	bne.n	8005ccc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005caa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005cb2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	695b      	ldr	r3, [r3, #20]
 8005cb8:	009b      	lsls	r3, r3, #2
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	699b      	ldr	r3, [r3, #24]
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	693a      	ldr	r2, [r7, #16]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	693a      	ldr	r2, [r7, #16]
 8005cd0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	685a      	ldr	r2, [r3, #4]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	621a      	str	r2, [r3, #32]
}
 8005ce6:	bf00      	nop
 8005ce8:	371c      	adds	r7, #28
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
 8005cf2:	bf00      	nop
 8005cf4:	feff8fff 	.word	0xfeff8fff
 8005cf8:	40010000 	.word	0x40010000
 8005cfc:	40010400 	.word	0x40010400

08005d00 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b087      	sub	sp, #28
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6a1b      	ldr	r3, [r3, #32]
 8005d0e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6a1b      	ldr	r3, [r3, #32]
 8005d1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	685b      	ldr	r3, [r3, #4]
 8005d20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	69db      	ldr	r3, [r3, #28]
 8005d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	4b2d      	ldr	r3, [pc, #180]	; (8005de0 <TIM_OC3_SetConfig+0xe0>)
 8005d2c:	4013      	ands	r3, r2
 8005d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f023 0303 	bic.w	r3, r3, #3
 8005d36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005d48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	021b      	lsls	r3, r3, #8
 8005d50:	697a      	ldr	r2, [r7, #20]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a22      	ldr	r2, [pc, #136]	; (8005de4 <TIM_OC3_SetConfig+0xe4>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d003      	beq.n	8005d66 <TIM_OC3_SetConfig+0x66>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a21      	ldr	r2, [pc, #132]	; (8005de8 <TIM_OC3_SetConfig+0xe8>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d10d      	bne.n	8005d82 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005d6c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	021b      	lsls	r3, r3, #8
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005d7a:	697b      	ldr	r3, [r7, #20]
 8005d7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005d80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	4a17      	ldr	r2, [pc, #92]	; (8005de4 <TIM_OC3_SetConfig+0xe4>)
 8005d86:	4293      	cmp	r3, r2
 8005d88:	d003      	beq.n	8005d92 <TIM_OC3_SetConfig+0x92>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	4a16      	ldr	r2, [pc, #88]	; (8005de8 <TIM_OC3_SetConfig+0xe8>)
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	d113      	bne.n	8005dba <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005d98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005d9a:	693b      	ldr	r3, [r7, #16]
 8005d9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005da0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	695b      	ldr	r3, [r3, #20]
 8005da6:	011b      	lsls	r3, r3, #4
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	4313      	orrs	r3, r2
 8005dac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	011b      	lsls	r3, r3, #4
 8005db4:	693a      	ldr	r2, [r7, #16]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	68fa      	ldr	r2, [r7, #12]
 8005dc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005dc6:	683b      	ldr	r3, [r7, #0]
 8005dc8:	685a      	ldr	r2, [r3, #4]
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	697a      	ldr	r2, [r7, #20]
 8005dd2:	621a      	str	r2, [r3, #32]
}
 8005dd4:	bf00      	nop
 8005dd6:	371c      	adds	r7, #28
 8005dd8:	46bd      	mov	sp, r7
 8005dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dde:	4770      	bx	lr
 8005de0:	fffeff8f 	.word	0xfffeff8f
 8005de4:	40010000 	.word	0x40010000
 8005de8:	40010400 	.word	0x40010400

08005dec <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b087      	sub	sp, #28
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	69db      	ldr	r3, [r3, #28]
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005e14:	68fa      	ldr	r2, [r7, #12]
 8005e16:	4b1e      	ldr	r3, [pc, #120]	; (8005e90 <TIM_OC4_SetConfig+0xa4>)
 8005e18:	4013      	ands	r3, r2
 8005e1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	021b      	lsls	r3, r3, #8
 8005e2a:	68fa      	ldr	r2, [r7, #12]
 8005e2c:	4313      	orrs	r3, r2
 8005e2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005e30:	693b      	ldr	r3, [r7, #16]
 8005e32:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005e36:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	689b      	ldr	r3, [r3, #8]
 8005e3c:	031b      	lsls	r3, r3, #12
 8005e3e:	693a      	ldr	r2, [r7, #16]
 8005e40:	4313      	orrs	r3, r2
 8005e42:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	4a13      	ldr	r2, [pc, #76]	; (8005e94 <TIM_OC4_SetConfig+0xa8>)
 8005e48:	4293      	cmp	r3, r2
 8005e4a:	d003      	beq.n	8005e54 <TIM_OC4_SetConfig+0x68>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4a12      	ldr	r2, [pc, #72]	; (8005e98 <TIM_OC4_SetConfig+0xac>)
 8005e50:	4293      	cmp	r3, r2
 8005e52:	d109      	bne.n	8005e68 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005e54:	697b      	ldr	r3, [r7, #20]
 8005e56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005e5a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	695b      	ldr	r3, [r3, #20]
 8005e60:	019b      	lsls	r3, r3, #6
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	4313      	orrs	r3, r2
 8005e66:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	697a      	ldr	r2, [r7, #20]
 8005e6c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	68fa      	ldr	r2, [r7, #12]
 8005e72:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	685a      	ldr	r2, [r3, #4]
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	693a      	ldr	r2, [r7, #16]
 8005e80:	621a      	str	r2, [r3, #32]
}
 8005e82:	bf00      	nop
 8005e84:	371c      	adds	r7, #28
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
 8005e8e:	bf00      	nop
 8005e90:	feff8fff 	.word	0xfeff8fff
 8005e94:	40010000 	.word	0x40010000
 8005e98:	40010400 	.word	0x40010400

08005e9c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b087      	sub	sp, #28
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
 8005ea4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6a1b      	ldr	r3, [r3, #32]
 8005eaa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6a1b      	ldr	r3, [r3, #32]
 8005eb6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	685b      	ldr	r3, [r3, #4]
 8005ebc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ec2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005ec4:	68fa      	ldr	r2, [r7, #12]
 8005ec6:	4b1b      	ldr	r3, [pc, #108]	; (8005f34 <TIM_OC5_SetConfig+0x98>)
 8005ec8:	4013      	ands	r3, r2
 8005eca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005ecc:	683b      	ldr	r3, [r7, #0]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005edc:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	041b      	lsls	r3, r3, #16
 8005ee4:	693a      	ldr	r2, [r7, #16]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4a12      	ldr	r2, [pc, #72]	; (8005f38 <TIM_OC5_SetConfig+0x9c>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d003      	beq.n	8005efa <TIM_OC5_SetConfig+0x5e>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	4a11      	ldr	r2, [pc, #68]	; (8005f3c <TIM_OC5_SetConfig+0xa0>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d109      	bne.n	8005f0e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005efa:	697b      	ldr	r3, [r7, #20]
 8005efc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f00:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	695b      	ldr	r3, [r3, #20]
 8005f06:	021b      	lsls	r3, r3, #8
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	697a      	ldr	r2, [r7, #20]
 8005f12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	68fa      	ldr	r2, [r7, #12]
 8005f18:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	685a      	ldr	r2, [r3, #4]
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	621a      	str	r2, [r3, #32]
}
 8005f28:	bf00      	nop
 8005f2a:	371c      	adds	r7, #28
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr
 8005f34:	fffeff8f 	.word	0xfffeff8f
 8005f38:	40010000 	.word	0x40010000
 8005f3c:	40010400 	.word	0x40010400

08005f40 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005f40:	b480      	push	{r7}
 8005f42:	b087      	sub	sp, #28
 8005f44:	af00      	add	r7, sp, #0
 8005f46:	6078      	str	r0, [r7, #4]
 8005f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	685b      	ldr	r3, [r3, #4]
 8005f60:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005f68:	68fa      	ldr	r2, [r7, #12]
 8005f6a:	4b1c      	ldr	r3, [pc, #112]	; (8005fdc <TIM_OC6_SetConfig+0x9c>)
 8005f6c:	4013      	ands	r3, r2
 8005f6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	021b      	lsls	r3, r3, #8
 8005f76:	68fa      	ldr	r2, [r7, #12]
 8005f78:	4313      	orrs	r3, r2
 8005f7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005f7c:	693b      	ldr	r3, [r7, #16]
 8005f7e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005f82:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	051b      	lsls	r3, r3, #20
 8005f8a:	693a      	ldr	r2, [r7, #16]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	4a13      	ldr	r2, [pc, #76]	; (8005fe0 <TIM_OC6_SetConfig+0xa0>)
 8005f94:	4293      	cmp	r3, r2
 8005f96:	d003      	beq.n	8005fa0 <TIM_OC6_SetConfig+0x60>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	4a12      	ldr	r2, [pc, #72]	; (8005fe4 <TIM_OC6_SetConfig+0xa4>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d109      	bne.n	8005fb4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005fa0:	697b      	ldr	r3, [r7, #20]
 8005fa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005fa6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	695b      	ldr	r3, [r3, #20]
 8005fac:	029b      	lsls	r3, r3, #10
 8005fae:	697a      	ldr	r2, [r7, #20]
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	697a      	ldr	r2, [r7, #20]
 8005fb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	685a      	ldr	r2, [r3, #4]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	693a      	ldr	r2, [r7, #16]
 8005fcc:	621a      	str	r2, [r3, #32]
}
 8005fce:	bf00      	nop
 8005fd0:	371c      	adds	r7, #28
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	feff8fff 	.word	0xfeff8fff
 8005fe0:	40010000 	.word	0x40010000
 8005fe4:	40010400 	.word	0x40010400

08005fe8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b087      	sub	sp, #28
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	6a1b      	ldr	r3, [r3, #32]
 8005ff8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6a1b      	ldr	r3, [r3, #32]
 8005ffe:	f023 0201 	bic.w	r2, r3, #1
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	699b      	ldr	r3, [r3, #24]
 800600a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800600c:	693b      	ldr	r3, [r7, #16]
 800600e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006012:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	011b      	lsls	r3, r3, #4
 8006018:	693a      	ldr	r2, [r7, #16]
 800601a:	4313      	orrs	r3, r2
 800601c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	f023 030a 	bic.w	r3, r3, #10
 8006024:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006026:	697a      	ldr	r2, [r7, #20]
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	4313      	orrs	r3, r2
 800602c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	697a      	ldr	r2, [r7, #20]
 8006038:	621a      	str	r2, [r3, #32]
}
 800603a:	bf00      	nop
 800603c:	371c      	adds	r7, #28
 800603e:	46bd      	mov	sp, r7
 8006040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006044:	4770      	bx	lr

08006046 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006046:	b480      	push	{r7}
 8006048:	b087      	sub	sp, #28
 800604a:	af00      	add	r7, sp, #0
 800604c:	60f8      	str	r0, [r7, #12]
 800604e:	60b9      	str	r1, [r7, #8]
 8006050:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6a1b      	ldr	r3, [r3, #32]
 8006056:	f023 0210 	bic.w	r2, r3, #16
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	699b      	ldr	r3, [r3, #24]
 8006062:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	6a1b      	ldr	r3, [r3, #32]
 8006068:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006070:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	031b      	lsls	r3, r3, #12
 8006076:	697a      	ldr	r2, [r7, #20]
 8006078:	4313      	orrs	r3, r2
 800607a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006082:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006084:	68bb      	ldr	r3, [r7, #8]
 8006086:	011b      	lsls	r3, r3, #4
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	4313      	orrs	r3, r2
 800608c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	697a      	ldr	r2, [r7, #20]
 8006092:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	693a      	ldr	r2, [r7, #16]
 8006098:	621a      	str	r2, [r3, #32]
}
 800609a:	bf00      	nop
 800609c:	371c      	adds	r7, #28
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80060a6:	b480      	push	{r7}
 80060a8:	b085      	sub	sp, #20
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
 80060ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80060bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80060be:	683a      	ldr	r2, [r7, #0]
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	4313      	orrs	r3, r2
 80060c4:	f043 0307 	orr.w	r3, r3, #7
 80060c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	68fa      	ldr	r2, [r7, #12]
 80060ce:	609a      	str	r2, [r3, #8]
}
 80060d0:	bf00      	nop
 80060d2:	3714      	adds	r7, #20
 80060d4:	46bd      	mov	sp, r7
 80060d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060da:	4770      	bx	lr

080060dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80060dc:	b480      	push	{r7}
 80060de:	b087      	sub	sp, #28
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	60f8      	str	r0, [r7, #12]
 80060e4:	60b9      	str	r1, [r7, #8]
 80060e6:	607a      	str	r2, [r7, #4]
 80060e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	689b      	ldr	r3, [r3, #8]
 80060ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060f0:	697b      	ldr	r3, [r7, #20]
 80060f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	021a      	lsls	r2, r3, #8
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	431a      	orrs	r2, r3
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	4313      	orrs	r3, r2
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	4313      	orrs	r3, r2
 8006108:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	697a      	ldr	r2, [r7, #20]
 800610e:	609a      	str	r2, [r3, #8]
}
 8006110:	bf00      	nop
 8006112:	371c      	adds	r7, #28
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800611c:	b480      	push	{r7}
 800611e:	b087      	sub	sp, #28
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006128:	68bb      	ldr	r3, [r7, #8]
 800612a:	f003 031f 	and.w	r3, r3, #31
 800612e:	2201      	movs	r2, #1
 8006130:	fa02 f303 	lsl.w	r3, r2, r3
 8006134:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	6a1a      	ldr	r2, [r3, #32]
 800613a:	697b      	ldr	r3, [r7, #20]
 800613c:	43db      	mvns	r3, r3
 800613e:	401a      	ands	r2, r3
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6a1a      	ldr	r2, [r3, #32]
 8006148:	68bb      	ldr	r3, [r7, #8]
 800614a:	f003 031f 	and.w	r3, r3, #31
 800614e:	6879      	ldr	r1, [r7, #4]
 8006150:	fa01 f303 	lsl.w	r3, r1, r3
 8006154:	431a      	orrs	r2, r3
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	621a      	str	r2, [r3, #32]
}
 800615a:	bf00      	nop
 800615c:	371c      	adds	r7, #28
 800615e:	46bd      	mov	sp, r7
 8006160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006164:	4770      	bx	lr
	...

08006168 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006178:	2b01      	cmp	r3, #1
 800617a:	d101      	bne.n	8006180 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800617c:	2302      	movs	r3, #2
 800617e:	e06d      	b.n	800625c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2202      	movs	r2, #2
 800618c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	689b      	ldr	r3, [r3, #8]
 800619e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4a30      	ldr	r2, [pc, #192]	; (8006268 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80061a6:	4293      	cmp	r3, r2
 80061a8:	d004      	beq.n	80061b4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	4a2f      	ldr	r2, [pc, #188]	; (800626c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80061b0:	4293      	cmp	r3, r2
 80061b2:	d108      	bne.n	80061c6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80061ba:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	68fa      	ldr	r2, [r7, #12]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80061cc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68fa      	ldr	r2, [r7, #12]
 80061d4:	4313      	orrs	r3, r2
 80061d6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a20      	ldr	r2, [pc, #128]	; (8006268 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80061e6:	4293      	cmp	r3, r2
 80061e8:	d022      	beq.n	8006230 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061f2:	d01d      	beq.n	8006230 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a1d      	ldr	r2, [pc, #116]	; (8006270 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d018      	beq.n	8006230 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	4a1c      	ldr	r2, [pc, #112]	; (8006274 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006204:	4293      	cmp	r3, r2
 8006206:	d013      	beq.n	8006230 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a1a      	ldr	r2, [pc, #104]	; (8006278 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d00e      	beq.n	8006230 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a15      	ldr	r2, [pc, #84]	; (800626c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d009      	beq.n	8006230 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a16      	ldr	r2, [pc, #88]	; (800627c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d004      	beq.n	8006230 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a15      	ldr	r2, [pc, #84]	; (8006280 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d10c      	bne.n	800624a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006236:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	689b      	ldr	r3, [r3, #8]
 800623c:	68ba      	ldr	r2, [r7, #8]
 800623e:	4313      	orrs	r3, r2
 8006240:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68ba      	ldr	r2, [r7, #8]
 8006248:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2201      	movs	r2, #1
 800624e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	2200      	movs	r2, #0
 8006256:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	3714      	adds	r7, #20
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr
 8006268:	40010000 	.word	0x40010000
 800626c:	40010400 	.word	0x40010400
 8006270:	40000400 	.word	0x40000400
 8006274:	40000800 	.word	0x40000800
 8006278:	40000c00 	.word	0x40000c00
 800627c:	40014000 	.word	0x40014000
 8006280:	40001800 	.word	0x40001800

08006284 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800628c:	bf00      	nop
 800628e:	370c      	adds	r7, #12
 8006290:	46bd      	mov	sp, r7
 8006292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006296:	4770      	bx	lr

08006298 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80062a0:	bf00      	nop
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80062b4:	bf00      	nop
 80062b6:	370c      	adds	r7, #12
 80062b8:	46bd      	mov	sp, r7
 80062ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062be:	4770      	bx	lr

080062c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b082      	sub	sp, #8
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d101      	bne.n	80062d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062ce:	2301      	movs	r3, #1
 80062d0:	e040      	b.n	8006354 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d106      	bne.n	80062e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2200      	movs	r2, #0
 80062de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f7fb f9e4 	bl	80016b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2224      	movs	r2, #36	; 0x24
 80062ec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f022 0201 	bic.w	r2, r2, #1
 80062fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	f000 fc18 	bl	8006b34 <UART_SetConfig>
 8006304:	4603      	mov	r3, r0
 8006306:	2b01      	cmp	r3, #1
 8006308:	d101      	bne.n	800630e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800630a:	2301      	movs	r3, #1
 800630c:	e022      	b.n	8006354 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006312:	2b00      	cmp	r3, #0
 8006314:	d002      	beq.n	800631c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006316:	6878      	ldr	r0, [r7, #4]
 8006318:	f000 fe6e 	bl	8006ff8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	685a      	ldr	r2, [r3, #4]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800632a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	689a      	ldr	r2, [r3, #8]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800633a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	681a      	ldr	r2, [r3, #0]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	f042 0201 	orr.w	r2, r2, #1
 800634a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 fef5 	bl	800713c <UART_CheckIdleState>
 8006352:	4603      	mov	r3, r0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3708      	adds	r7, #8
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800635c:	b580      	push	{r7, lr}
 800635e:	b08a      	sub	sp, #40	; 0x28
 8006360:	af02      	add	r7, sp, #8
 8006362:	60f8      	str	r0, [r7, #12]
 8006364:	60b9      	str	r1, [r7, #8]
 8006366:	603b      	str	r3, [r7, #0]
 8006368:	4613      	mov	r3, r2
 800636a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006370:	2b20      	cmp	r3, #32
 8006372:	f040 8081 	bne.w	8006478 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006376:	68bb      	ldr	r3, [r7, #8]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d002      	beq.n	8006382 <HAL_UART_Transmit+0x26>
 800637c:	88fb      	ldrh	r3, [r7, #6]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d101      	bne.n	8006386 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006382:	2301      	movs	r3, #1
 8006384:	e079      	b.n	800647a <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800638c:	2b01      	cmp	r3, #1
 800638e:	d101      	bne.n	8006394 <HAL_UART_Transmit+0x38>
 8006390:	2302      	movs	r3, #2
 8006392:	e072      	b.n	800647a <HAL_UART_Transmit+0x11e>
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	2201      	movs	r2, #1
 8006398:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	2200      	movs	r2, #0
 80063a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	2221      	movs	r2, #33	; 0x21
 80063a8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80063aa:	f7fb fa47 	bl	800183c <HAL_GetTick>
 80063ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	88fa      	ldrh	r2, [r7, #6]
 80063b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	88fa      	ldrh	r2, [r7, #6]
 80063bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063c8:	d108      	bne.n	80063dc <HAL_UART_Transmit+0x80>
 80063ca:	68fb      	ldr	r3, [r7, #12]
 80063cc:	691b      	ldr	r3, [r3, #16]
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d104      	bne.n	80063dc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80063d2:	2300      	movs	r3, #0
 80063d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80063d6:	68bb      	ldr	r3, [r7, #8]
 80063d8:	61bb      	str	r3, [r7, #24]
 80063da:	e003      	b.n	80063e4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80063e0:	2300      	movs	r3, #0
 80063e2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	2200      	movs	r2, #0
 80063e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80063ec:	e02c      	b.n	8006448 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	9300      	str	r3, [sp, #0]
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	2200      	movs	r2, #0
 80063f6:	2180      	movs	r1, #128	; 0x80
 80063f8:	68f8      	ldr	r0, [r7, #12]
 80063fa:	f000 fee8 	bl	80071ce <UART_WaitOnFlagUntilTimeout>
 80063fe:	4603      	mov	r3, r0
 8006400:	2b00      	cmp	r3, #0
 8006402:	d001      	beq.n	8006408 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006404:	2303      	movs	r3, #3
 8006406:	e038      	b.n	800647a <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d10b      	bne.n	8006426 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800640e:	69bb      	ldr	r3, [r7, #24]
 8006410:	881b      	ldrh	r3, [r3, #0]
 8006412:	461a      	mov	r2, r3
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800641c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	3302      	adds	r3, #2
 8006422:	61bb      	str	r3, [r7, #24]
 8006424:	e007      	b.n	8006436 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006426:	69fb      	ldr	r3, [r7, #28]
 8006428:	781a      	ldrb	r2, [r3, #0]
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006430:	69fb      	ldr	r3, [r7, #28]
 8006432:	3301      	adds	r3, #1
 8006434:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800643c:	b29b      	uxth	r3, r3
 800643e:	3b01      	subs	r3, #1
 8006440:	b29a      	uxth	r2, r3
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800644e:	b29b      	uxth	r3, r3
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1cc      	bne.n	80063ee <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	9300      	str	r3, [sp, #0]
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	2200      	movs	r2, #0
 800645c:	2140      	movs	r1, #64	; 0x40
 800645e:	68f8      	ldr	r0, [r7, #12]
 8006460:	f000 feb5 	bl	80071ce <UART_WaitOnFlagUntilTimeout>
 8006464:	4603      	mov	r3, r0
 8006466:	2b00      	cmp	r3, #0
 8006468:	d001      	beq.n	800646e <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 800646a:	2303      	movs	r3, #3
 800646c:	e005      	b.n	800647a <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	2220      	movs	r2, #32
 8006472:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8006474:	2300      	movs	r3, #0
 8006476:	e000      	b.n	800647a <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8006478:	2302      	movs	r3, #2
  }
}
 800647a:	4618      	mov	r0, r3
 800647c:	3720      	adds	r7, #32
 800647e:	46bd      	mov	sp, r7
 8006480:	bd80      	pop	{r7, pc}

08006482 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006482:	b580      	push	{r7, lr}
 8006484:	b08a      	sub	sp, #40	; 0x28
 8006486:	af00      	add	r7, sp, #0
 8006488:	60f8      	str	r0, [r7, #12]
 800648a:	60b9      	str	r1, [r7, #8]
 800648c:	4613      	mov	r3, r2
 800648e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006494:	2b20      	cmp	r3, #32
 8006496:	d13d      	bne.n	8006514 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d002      	beq.n	80064a4 <HAL_UART_Receive_IT+0x22>
 800649e:	88fb      	ldrh	r3, [r7, #6]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d101      	bne.n	80064a8 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80064a4:	2301      	movs	r3, #1
 80064a6:	e036      	b.n	8006516 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d101      	bne.n	80064b6 <HAL_UART_Receive_IT+0x34>
 80064b2:	2302      	movs	r3, #2
 80064b4:	e02f      	b.n	8006516 <HAL_UART_Receive_IT+0x94>
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2201      	movs	r2, #1
 80064ba:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d018      	beq.n	8006504 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064d8:	697b      	ldr	r3, [r7, #20]
 80064da:	e853 3f00 	ldrex	r3, [r3]
 80064de:	613b      	str	r3, [r7, #16]
   return(result);
 80064e0:	693b      	ldr	r3, [r7, #16]
 80064e2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80064e6:	627b      	str	r3, [r7, #36]	; 0x24
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	461a      	mov	r2, r3
 80064ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f0:	623b      	str	r3, [r7, #32]
 80064f2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064f4:	69f9      	ldr	r1, [r7, #28]
 80064f6:	6a3a      	ldr	r2, [r7, #32]
 80064f8:	e841 2300 	strex	r3, r2, [r1]
 80064fc:	61bb      	str	r3, [r7, #24]
   return(result);
 80064fe:	69bb      	ldr	r3, [r7, #24]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d1e6      	bne.n	80064d2 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006504:	88fb      	ldrh	r3, [r7, #6]
 8006506:	461a      	mov	r2, r3
 8006508:	68b9      	ldr	r1, [r7, #8]
 800650a:	68f8      	ldr	r0, [r7, #12]
 800650c:	f000 ff24 	bl	8007358 <UART_Start_Receive_IT>
 8006510:	4603      	mov	r3, r0
 8006512:	e000      	b.n	8006516 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006514:	2302      	movs	r3, #2
  }
}
 8006516:	4618      	mov	r0, r3
 8006518:	3728      	adds	r7, #40	; 0x28
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
	...

08006520 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b0ba      	sub	sp, #232	; 0xe8
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	69db      	ldr	r3, [r3, #28]
 800652e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006546:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800654a:	f640 030f 	movw	r3, #2063	; 0x80f
 800654e:	4013      	ands	r3, r2
 8006550:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006554:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006558:	2b00      	cmp	r3, #0
 800655a:	d115      	bne.n	8006588 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800655c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006560:	f003 0320 	and.w	r3, r3, #32
 8006564:	2b00      	cmp	r3, #0
 8006566:	d00f      	beq.n	8006588 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800656c:	f003 0320 	and.w	r3, r3, #32
 8006570:	2b00      	cmp	r3, #0
 8006572:	d009      	beq.n	8006588 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006578:	2b00      	cmp	r3, #0
 800657a:	f000 82a4 	beq.w	8006ac6 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	4798      	blx	r3
      }
      return;
 8006586:	e29e      	b.n	8006ac6 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006588:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800658c:	2b00      	cmp	r3, #0
 800658e:	f000 8117 	beq.w	80067c0 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006592:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006596:	f003 0301 	and.w	r3, r3, #1
 800659a:	2b00      	cmp	r3, #0
 800659c:	d106      	bne.n	80065ac <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800659e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80065a2:	4b85      	ldr	r3, [pc, #532]	; (80067b8 <HAL_UART_IRQHandler+0x298>)
 80065a4:	4013      	ands	r3, r2
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	f000 810a 	beq.w	80067c0 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80065ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065b0:	f003 0301 	and.w	r3, r3, #1
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d011      	beq.n	80065dc <HAL_UART_IRQHandler+0xbc>
 80065b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80065bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	d00b      	beq.n	80065dc <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	2201      	movs	r2, #1
 80065ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80065d2:	f043 0201 	orr.w	r2, r3, #1
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80065dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80065e0:	f003 0302 	and.w	r3, r3, #2
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d011      	beq.n	800660c <HAL_UART_IRQHandler+0xec>
 80065e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80065ec:	f003 0301 	and.w	r3, r3, #1
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d00b      	beq.n	800660c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2202      	movs	r2, #2
 80065fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006602:	f043 0204 	orr.w	r2, r3, #4
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800660c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006610:	f003 0304 	and.w	r3, r3, #4
 8006614:	2b00      	cmp	r3, #0
 8006616:	d011      	beq.n	800663c <HAL_UART_IRQHandler+0x11c>
 8006618:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800661c:	f003 0301 	and.w	r3, r3, #1
 8006620:	2b00      	cmp	r3, #0
 8006622:	d00b      	beq.n	800663c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	2204      	movs	r2, #4
 800662a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006632:	f043 0202 	orr.w	r2, r3, #2
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800663c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006640:	f003 0308 	and.w	r3, r3, #8
 8006644:	2b00      	cmp	r3, #0
 8006646:	d017      	beq.n	8006678 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006648:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800664c:	f003 0320 	and.w	r3, r3, #32
 8006650:	2b00      	cmp	r3, #0
 8006652:	d105      	bne.n	8006660 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006654:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006658:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800665c:	2b00      	cmp	r3, #0
 800665e:	d00b      	beq.n	8006678 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	2208      	movs	r2, #8
 8006666:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800666e:	f043 0208 	orr.w	r2, r3, #8
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800667c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006680:	2b00      	cmp	r3, #0
 8006682:	d012      	beq.n	80066aa <HAL_UART_IRQHandler+0x18a>
 8006684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006688:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800668c:	2b00      	cmp	r3, #0
 800668e:	d00c      	beq.n	80066aa <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006698:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066a0:	f043 0220 	orr.w	r2, r3, #32
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	f000 820a 	beq.w	8006aca <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80066b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066ba:	f003 0320 	and.w	r3, r3, #32
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d00d      	beq.n	80066de <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80066c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80066c6:	f003 0320 	and.w	r3, r3, #32
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d007      	beq.n	80066de <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d003      	beq.n	80066de <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80066da:	6878      	ldr	r0, [r7, #4]
 80066dc:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80066e4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	689b      	ldr	r3, [r3, #8]
 80066ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066f2:	2b40      	cmp	r3, #64	; 0x40
 80066f4:	d005      	beq.n	8006702 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80066f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80066fa:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d04f      	beq.n	80067a2 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 fef2 	bl	80074ec <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006712:	2b40      	cmp	r3, #64	; 0x40
 8006714:	d141      	bne.n	800679a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	3308      	adds	r3, #8
 800671c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006720:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006724:	e853 3f00 	ldrex	r3, [r3]
 8006728:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800672c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006730:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006734:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	3308      	adds	r3, #8
 800673e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006742:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006746:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800674a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800674e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006752:	e841 2300 	strex	r3, r2, [r1]
 8006756:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800675a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1d9      	bne.n	8006716 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006766:	2b00      	cmp	r3, #0
 8006768:	d013      	beq.n	8006792 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800676e:	4a13      	ldr	r2, [pc, #76]	; (80067bc <HAL_UART_IRQHandler+0x29c>)
 8006770:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006776:	4618      	mov	r0, r3
 8006778:	f7fb fdb9 	bl	80022ee <HAL_DMA_Abort_IT>
 800677c:	4603      	mov	r3, r0
 800677e:	2b00      	cmp	r3, #0
 8006780:	d017      	beq.n	80067b2 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006786:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006788:	687a      	ldr	r2, [r7, #4]
 800678a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800678c:	4610      	mov	r0, r2
 800678e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006790:	e00f      	b.n	80067b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006792:	6878      	ldr	r0, [r7, #4]
 8006794:	f000 f9ae 	bl	8006af4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006798:	e00b      	b.n	80067b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800679a:	6878      	ldr	r0, [r7, #4]
 800679c:	f000 f9aa 	bl	8006af4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067a0:	e007      	b.n	80067b2 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80067a2:	6878      	ldr	r0, [r7, #4]
 80067a4:	f000 f9a6 	bl	8006af4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80067b0:	e18b      	b.n	8006aca <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067b2:	bf00      	nop
    return;
 80067b4:	e189      	b.n	8006aca <HAL_UART_IRQHandler+0x5aa>
 80067b6:	bf00      	nop
 80067b8:	04000120 	.word	0x04000120
 80067bc:	080075b3 	.word	0x080075b3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067c4:	2b01      	cmp	r3, #1
 80067c6:	f040 8144 	bne.w	8006a52 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80067ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ce:	f003 0310 	and.w	r3, r3, #16
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	f000 813d 	beq.w	8006a52 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80067d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067dc:	f003 0310 	and.w	r3, r3, #16
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	f000 8136 	beq.w	8006a52 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	2210      	movs	r2, #16
 80067ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067f8:	2b40      	cmp	r3, #64	; 0x40
 80067fa:	f040 80b2 	bne.w	8006962 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800680a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800680e:	2b00      	cmp	r3, #0
 8006810:	f000 815d 	beq.w	8006ace <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800681a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800681e:	429a      	cmp	r2, r3
 8006820:	f080 8155 	bcs.w	8006ace <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800682a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006832:	69db      	ldr	r3, [r3, #28]
 8006834:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006838:	f000 8085 	beq.w	8006946 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006844:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006848:	e853 3f00 	ldrex	r3, [r3]
 800684c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006850:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006854:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006858:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	461a      	mov	r2, r3
 8006862:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006866:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800686a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800686e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006872:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006876:	e841 2300 	strex	r3, r2, [r1]
 800687a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800687e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006882:	2b00      	cmp	r3, #0
 8006884:	d1da      	bne.n	800683c <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	3308      	adds	r3, #8
 800688c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800688e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006890:	e853 3f00 	ldrex	r3, [r3]
 8006894:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006896:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006898:	f023 0301 	bic.w	r3, r3, #1
 800689c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	3308      	adds	r3, #8
 80068a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80068aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80068ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80068b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80068b6:	e841 2300 	strex	r3, r2, [r1]
 80068ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80068bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d1e1      	bne.n	8006886 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	3308      	adds	r3, #8
 80068c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068cc:	e853 3f00 	ldrex	r3, [r3]
 80068d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80068d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80068d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	3308      	adds	r3, #8
 80068e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80068e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80068e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80068ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80068ee:	e841 2300 	strex	r3, r2, [r1]
 80068f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80068f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d1e3      	bne.n	80068c2 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2220      	movs	r2, #32
 80068fe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	2200      	movs	r2, #0
 8006904:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800690c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800690e:	e853 3f00 	ldrex	r3, [r3]
 8006912:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006914:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006916:	f023 0310 	bic.w	r3, r3, #16
 800691a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	461a      	mov	r2, r3
 8006924:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006928:	65bb      	str	r3, [r7, #88]	; 0x58
 800692a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800692c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800692e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006930:	e841 2300 	strex	r3, r2, [r1]
 8006934:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006936:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006938:	2b00      	cmp	r3, #0
 800693a:	d1e4      	bne.n	8006906 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006940:	4618      	mov	r0, r3
 8006942:	f7fb fc64 	bl	800220e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006952:	b29b      	uxth	r3, r3
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	b29b      	uxth	r3, r3
 8006958:	4619      	mov	r1, r3
 800695a:	6878      	ldr	r0, [r7, #4]
 800695c:	f000 f8d4 	bl	8006b08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006960:	e0b5      	b.n	8006ace <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800696e:	b29b      	uxth	r3, r3
 8006970:	1ad3      	subs	r3, r2, r3
 8006972:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800697c:	b29b      	uxth	r3, r3
 800697e:	2b00      	cmp	r3, #0
 8006980:	f000 80a7 	beq.w	8006ad2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8006984:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006988:	2b00      	cmp	r3, #0
 800698a:	f000 80a2 	beq.w	8006ad2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006996:	e853 3f00 	ldrex	r3, [r3]
 800699a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800699c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800699e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80069a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	461a      	mov	r2, r3
 80069ac:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80069b0:	647b      	str	r3, [r7, #68]	; 0x44
 80069b2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069b4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80069b6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069b8:	e841 2300 	strex	r3, r2, [r1]
 80069bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80069be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d1e4      	bne.n	800698e <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	3308      	adds	r3, #8
 80069ca:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ce:	e853 3f00 	ldrex	r3, [r3]
 80069d2:	623b      	str	r3, [r7, #32]
   return(result);
 80069d4:	6a3b      	ldr	r3, [r7, #32]
 80069d6:	f023 0301 	bic.w	r3, r3, #1
 80069da:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	3308      	adds	r3, #8
 80069e4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80069e8:	633a      	str	r2, [r7, #48]	; 0x30
 80069ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80069ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80069f0:	e841 2300 	strex	r3, r2, [r1]
 80069f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80069f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d1e3      	bne.n	80069c4 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2220      	movs	r2, #32
 8006a00:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2200      	movs	r2, #0
 8006a06:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	e853 3f00 	ldrex	r3, [r3]
 8006a1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f023 0310 	bic.w	r3, r3, #16
 8006a22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006a30:	61fb      	str	r3, [r7, #28]
 8006a32:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a34:	69b9      	ldr	r1, [r7, #24]
 8006a36:	69fa      	ldr	r2, [r7, #28]
 8006a38:	e841 2300 	strex	r3, r2, [r1]
 8006a3c:	617b      	str	r3, [r7, #20]
   return(result);
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d1e4      	bne.n	8006a0e <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006a44:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006a48:	4619      	mov	r1, r3
 8006a4a:	6878      	ldr	r0, [r7, #4]
 8006a4c:	f000 f85c 	bl	8006b08 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006a50:	e03f      	b.n	8006ad2 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006a52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d00e      	beq.n	8006a7c <HAL_UART_IRQHandler+0x55c>
 8006a5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006a62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d008      	beq.n	8006a7c <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006a72:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006a74:	6878      	ldr	r0, [r7, #4]
 8006a76:	f000 f853 	bl	8006b20 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006a7a:	e02d      	b.n	8006ad8 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006a7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d00e      	beq.n	8006aa6 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8006a88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d008      	beq.n	8006aa6 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d01c      	beq.n	8006ad6 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	4798      	blx	r3
    }
    return;
 8006aa4:	e017      	b.n	8006ad6 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aaa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d012      	beq.n	8006ad8 <HAL_UART_IRQHandler+0x5b8>
 8006ab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ab6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d00c      	beq.n	8006ad8 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 8006abe:	6878      	ldr	r0, [r7, #4]
 8006ac0:	f000 fd8d 	bl	80075de <UART_EndTransmit_IT>
    return;
 8006ac4:	e008      	b.n	8006ad8 <HAL_UART_IRQHandler+0x5b8>
      return;
 8006ac6:	bf00      	nop
 8006ac8:	e006      	b.n	8006ad8 <HAL_UART_IRQHandler+0x5b8>
    return;
 8006aca:	bf00      	nop
 8006acc:	e004      	b.n	8006ad8 <HAL_UART_IRQHandler+0x5b8>
      return;
 8006ace:	bf00      	nop
 8006ad0:	e002      	b.n	8006ad8 <HAL_UART_IRQHandler+0x5b8>
      return;
 8006ad2:	bf00      	nop
 8006ad4:	e000      	b.n	8006ad8 <HAL_UART_IRQHandler+0x5b8>
    return;
 8006ad6:	bf00      	nop
  }

}
 8006ad8:	37e8      	adds	r7, #232	; 0xe8
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop

08006ae0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006afc:	bf00      	nop
 8006afe:	370c      	adds	r7, #12
 8006b00:	46bd      	mov	sp, r7
 8006b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b06:	4770      	bx	lr

08006b08 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006b08:	b480      	push	{r7}
 8006b0a:	b083      	sub	sp, #12
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	6078      	str	r0, [r7, #4]
 8006b10:	460b      	mov	r3, r1
 8006b12:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006b14:	bf00      	nop
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8006b28:	bf00      	nop
 8006b2a:	370c      	adds	r7, #12
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b088      	sub	sp, #32
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b3c:	2300      	movs	r3, #0
 8006b3e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	689a      	ldr	r2, [r3, #8]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	431a      	orrs	r2, r3
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	695b      	ldr	r3, [r3, #20]
 8006b4e:	431a      	orrs	r2, r3
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	69db      	ldr	r3, [r3, #28]
 8006b54:	4313      	orrs	r3, r2
 8006b56:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	681a      	ldr	r2, [r3, #0]
 8006b5e:	4ba7      	ldr	r3, [pc, #668]	; (8006dfc <UART_SetConfig+0x2c8>)
 8006b60:	4013      	ands	r3, r2
 8006b62:	687a      	ldr	r2, [r7, #4]
 8006b64:	6812      	ldr	r2, [r2, #0]
 8006b66:	6979      	ldr	r1, [r7, #20]
 8006b68:	430b      	orrs	r3, r1
 8006b6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	68da      	ldr	r2, [r3, #12]
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	430a      	orrs	r2, r1
 8006b80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6a1b      	ldr	r3, [r3, #32]
 8006b8c:	697a      	ldr	r2, [r7, #20]
 8006b8e:	4313      	orrs	r3, r2
 8006b90:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	689b      	ldr	r3, [r3, #8]
 8006b98:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	697a      	ldr	r2, [r7, #20]
 8006ba2:	430a      	orrs	r2, r1
 8006ba4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4a95      	ldr	r2, [pc, #596]	; (8006e00 <UART_SetConfig+0x2cc>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d120      	bne.n	8006bf2 <UART_SetConfig+0xbe>
 8006bb0:	4b94      	ldr	r3, [pc, #592]	; (8006e04 <UART_SetConfig+0x2d0>)
 8006bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006bb6:	f003 0303 	and.w	r3, r3, #3
 8006bba:	2b03      	cmp	r3, #3
 8006bbc:	d816      	bhi.n	8006bec <UART_SetConfig+0xb8>
 8006bbe:	a201      	add	r2, pc, #4	; (adr r2, 8006bc4 <UART_SetConfig+0x90>)
 8006bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc4:	08006bd5 	.word	0x08006bd5
 8006bc8:	08006be1 	.word	0x08006be1
 8006bcc:	08006bdb 	.word	0x08006bdb
 8006bd0:	08006be7 	.word	0x08006be7
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	77fb      	strb	r3, [r7, #31]
 8006bd8:	e14f      	b.n	8006e7a <UART_SetConfig+0x346>
 8006bda:	2302      	movs	r3, #2
 8006bdc:	77fb      	strb	r3, [r7, #31]
 8006bde:	e14c      	b.n	8006e7a <UART_SetConfig+0x346>
 8006be0:	2304      	movs	r3, #4
 8006be2:	77fb      	strb	r3, [r7, #31]
 8006be4:	e149      	b.n	8006e7a <UART_SetConfig+0x346>
 8006be6:	2308      	movs	r3, #8
 8006be8:	77fb      	strb	r3, [r7, #31]
 8006bea:	e146      	b.n	8006e7a <UART_SetConfig+0x346>
 8006bec:	2310      	movs	r3, #16
 8006bee:	77fb      	strb	r3, [r7, #31]
 8006bf0:	e143      	b.n	8006e7a <UART_SetConfig+0x346>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	4a84      	ldr	r2, [pc, #528]	; (8006e08 <UART_SetConfig+0x2d4>)
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d132      	bne.n	8006c62 <UART_SetConfig+0x12e>
 8006bfc:	4b81      	ldr	r3, [pc, #516]	; (8006e04 <UART_SetConfig+0x2d0>)
 8006bfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c02:	f003 030c 	and.w	r3, r3, #12
 8006c06:	2b0c      	cmp	r3, #12
 8006c08:	d828      	bhi.n	8006c5c <UART_SetConfig+0x128>
 8006c0a:	a201      	add	r2, pc, #4	; (adr r2, 8006c10 <UART_SetConfig+0xdc>)
 8006c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c10:	08006c45 	.word	0x08006c45
 8006c14:	08006c5d 	.word	0x08006c5d
 8006c18:	08006c5d 	.word	0x08006c5d
 8006c1c:	08006c5d 	.word	0x08006c5d
 8006c20:	08006c51 	.word	0x08006c51
 8006c24:	08006c5d 	.word	0x08006c5d
 8006c28:	08006c5d 	.word	0x08006c5d
 8006c2c:	08006c5d 	.word	0x08006c5d
 8006c30:	08006c4b 	.word	0x08006c4b
 8006c34:	08006c5d 	.word	0x08006c5d
 8006c38:	08006c5d 	.word	0x08006c5d
 8006c3c:	08006c5d 	.word	0x08006c5d
 8006c40:	08006c57 	.word	0x08006c57
 8006c44:	2300      	movs	r3, #0
 8006c46:	77fb      	strb	r3, [r7, #31]
 8006c48:	e117      	b.n	8006e7a <UART_SetConfig+0x346>
 8006c4a:	2302      	movs	r3, #2
 8006c4c:	77fb      	strb	r3, [r7, #31]
 8006c4e:	e114      	b.n	8006e7a <UART_SetConfig+0x346>
 8006c50:	2304      	movs	r3, #4
 8006c52:	77fb      	strb	r3, [r7, #31]
 8006c54:	e111      	b.n	8006e7a <UART_SetConfig+0x346>
 8006c56:	2308      	movs	r3, #8
 8006c58:	77fb      	strb	r3, [r7, #31]
 8006c5a:	e10e      	b.n	8006e7a <UART_SetConfig+0x346>
 8006c5c:	2310      	movs	r3, #16
 8006c5e:	77fb      	strb	r3, [r7, #31]
 8006c60:	e10b      	b.n	8006e7a <UART_SetConfig+0x346>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	4a69      	ldr	r2, [pc, #420]	; (8006e0c <UART_SetConfig+0x2d8>)
 8006c68:	4293      	cmp	r3, r2
 8006c6a:	d120      	bne.n	8006cae <UART_SetConfig+0x17a>
 8006c6c:	4b65      	ldr	r3, [pc, #404]	; (8006e04 <UART_SetConfig+0x2d0>)
 8006c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006c72:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006c76:	2b30      	cmp	r3, #48	; 0x30
 8006c78:	d013      	beq.n	8006ca2 <UART_SetConfig+0x16e>
 8006c7a:	2b30      	cmp	r3, #48	; 0x30
 8006c7c:	d814      	bhi.n	8006ca8 <UART_SetConfig+0x174>
 8006c7e:	2b20      	cmp	r3, #32
 8006c80:	d009      	beq.n	8006c96 <UART_SetConfig+0x162>
 8006c82:	2b20      	cmp	r3, #32
 8006c84:	d810      	bhi.n	8006ca8 <UART_SetConfig+0x174>
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d002      	beq.n	8006c90 <UART_SetConfig+0x15c>
 8006c8a:	2b10      	cmp	r3, #16
 8006c8c:	d006      	beq.n	8006c9c <UART_SetConfig+0x168>
 8006c8e:	e00b      	b.n	8006ca8 <UART_SetConfig+0x174>
 8006c90:	2300      	movs	r3, #0
 8006c92:	77fb      	strb	r3, [r7, #31]
 8006c94:	e0f1      	b.n	8006e7a <UART_SetConfig+0x346>
 8006c96:	2302      	movs	r3, #2
 8006c98:	77fb      	strb	r3, [r7, #31]
 8006c9a:	e0ee      	b.n	8006e7a <UART_SetConfig+0x346>
 8006c9c:	2304      	movs	r3, #4
 8006c9e:	77fb      	strb	r3, [r7, #31]
 8006ca0:	e0eb      	b.n	8006e7a <UART_SetConfig+0x346>
 8006ca2:	2308      	movs	r3, #8
 8006ca4:	77fb      	strb	r3, [r7, #31]
 8006ca6:	e0e8      	b.n	8006e7a <UART_SetConfig+0x346>
 8006ca8:	2310      	movs	r3, #16
 8006caa:	77fb      	strb	r3, [r7, #31]
 8006cac:	e0e5      	b.n	8006e7a <UART_SetConfig+0x346>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a57      	ldr	r2, [pc, #348]	; (8006e10 <UART_SetConfig+0x2dc>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d120      	bne.n	8006cfa <UART_SetConfig+0x1c6>
 8006cb8:	4b52      	ldr	r3, [pc, #328]	; (8006e04 <UART_SetConfig+0x2d0>)
 8006cba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cbe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006cc2:	2bc0      	cmp	r3, #192	; 0xc0
 8006cc4:	d013      	beq.n	8006cee <UART_SetConfig+0x1ba>
 8006cc6:	2bc0      	cmp	r3, #192	; 0xc0
 8006cc8:	d814      	bhi.n	8006cf4 <UART_SetConfig+0x1c0>
 8006cca:	2b80      	cmp	r3, #128	; 0x80
 8006ccc:	d009      	beq.n	8006ce2 <UART_SetConfig+0x1ae>
 8006cce:	2b80      	cmp	r3, #128	; 0x80
 8006cd0:	d810      	bhi.n	8006cf4 <UART_SetConfig+0x1c0>
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d002      	beq.n	8006cdc <UART_SetConfig+0x1a8>
 8006cd6:	2b40      	cmp	r3, #64	; 0x40
 8006cd8:	d006      	beq.n	8006ce8 <UART_SetConfig+0x1b4>
 8006cda:	e00b      	b.n	8006cf4 <UART_SetConfig+0x1c0>
 8006cdc:	2300      	movs	r3, #0
 8006cde:	77fb      	strb	r3, [r7, #31]
 8006ce0:	e0cb      	b.n	8006e7a <UART_SetConfig+0x346>
 8006ce2:	2302      	movs	r3, #2
 8006ce4:	77fb      	strb	r3, [r7, #31]
 8006ce6:	e0c8      	b.n	8006e7a <UART_SetConfig+0x346>
 8006ce8:	2304      	movs	r3, #4
 8006cea:	77fb      	strb	r3, [r7, #31]
 8006cec:	e0c5      	b.n	8006e7a <UART_SetConfig+0x346>
 8006cee:	2308      	movs	r3, #8
 8006cf0:	77fb      	strb	r3, [r7, #31]
 8006cf2:	e0c2      	b.n	8006e7a <UART_SetConfig+0x346>
 8006cf4:	2310      	movs	r3, #16
 8006cf6:	77fb      	strb	r3, [r7, #31]
 8006cf8:	e0bf      	b.n	8006e7a <UART_SetConfig+0x346>
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	4a45      	ldr	r2, [pc, #276]	; (8006e14 <UART_SetConfig+0x2e0>)
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d125      	bne.n	8006d50 <UART_SetConfig+0x21c>
 8006d04:	4b3f      	ldr	r3, [pc, #252]	; (8006e04 <UART_SetConfig+0x2d0>)
 8006d06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d0e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d12:	d017      	beq.n	8006d44 <UART_SetConfig+0x210>
 8006d14:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006d18:	d817      	bhi.n	8006d4a <UART_SetConfig+0x216>
 8006d1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d1e:	d00b      	beq.n	8006d38 <UART_SetConfig+0x204>
 8006d20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006d24:	d811      	bhi.n	8006d4a <UART_SetConfig+0x216>
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d003      	beq.n	8006d32 <UART_SetConfig+0x1fe>
 8006d2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d2e:	d006      	beq.n	8006d3e <UART_SetConfig+0x20a>
 8006d30:	e00b      	b.n	8006d4a <UART_SetConfig+0x216>
 8006d32:	2300      	movs	r3, #0
 8006d34:	77fb      	strb	r3, [r7, #31]
 8006d36:	e0a0      	b.n	8006e7a <UART_SetConfig+0x346>
 8006d38:	2302      	movs	r3, #2
 8006d3a:	77fb      	strb	r3, [r7, #31]
 8006d3c:	e09d      	b.n	8006e7a <UART_SetConfig+0x346>
 8006d3e:	2304      	movs	r3, #4
 8006d40:	77fb      	strb	r3, [r7, #31]
 8006d42:	e09a      	b.n	8006e7a <UART_SetConfig+0x346>
 8006d44:	2308      	movs	r3, #8
 8006d46:	77fb      	strb	r3, [r7, #31]
 8006d48:	e097      	b.n	8006e7a <UART_SetConfig+0x346>
 8006d4a:	2310      	movs	r3, #16
 8006d4c:	77fb      	strb	r3, [r7, #31]
 8006d4e:	e094      	b.n	8006e7a <UART_SetConfig+0x346>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a30      	ldr	r2, [pc, #192]	; (8006e18 <UART_SetConfig+0x2e4>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d125      	bne.n	8006da6 <UART_SetConfig+0x272>
 8006d5a:	4b2a      	ldr	r3, [pc, #168]	; (8006e04 <UART_SetConfig+0x2d0>)
 8006d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d60:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006d64:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d68:	d017      	beq.n	8006d9a <UART_SetConfig+0x266>
 8006d6a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006d6e:	d817      	bhi.n	8006da0 <UART_SetConfig+0x26c>
 8006d70:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d74:	d00b      	beq.n	8006d8e <UART_SetConfig+0x25a>
 8006d76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d7a:	d811      	bhi.n	8006da0 <UART_SetConfig+0x26c>
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d003      	beq.n	8006d88 <UART_SetConfig+0x254>
 8006d80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006d84:	d006      	beq.n	8006d94 <UART_SetConfig+0x260>
 8006d86:	e00b      	b.n	8006da0 <UART_SetConfig+0x26c>
 8006d88:	2301      	movs	r3, #1
 8006d8a:	77fb      	strb	r3, [r7, #31]
 8006d8c:	e075      	b.n	8006e7a <UART_SetConfig+0x346>
 8006d8e:	2302      	movs	r3, #2
 8006d90:	77fb      	strb	r3, [r7, #31]
 8006d92:	e072      	b.n	8006e7a <UART_SetConfig+0x346>
 8006d94:	2304      	movs	r3, #4
 8006d96:	77fb      	strb	r3, [r7, #31]
 8006d98:	e06f      	b.n	8006e7a <UART_SetConfig+0x346>
 8006d9a:	2308      	movs	r3, #8
 8006d9c:	77fb      	strb	r3, [r7, #31]
 8006d9e:	e06c      	b.n	8006e7a <UART_SetConfig+0x346>
 8006da0:	2310      	movs	r3, #16
 8006da2:	77fb      	strb	r3, [r7, #31]
 8006da4:	e069      	b.n	8006e7a <UART_SetConfig+0x346>
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4a1c      	ldr	r2, [pc, #112]	; (8006e1c <UART_SetConfig+0x2e8>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d137      	bne.n	8006e20 <UART_SetConfig+0x2ec>
 8006db0:	4b14      	ldr	r3, [pc, #80]	; (8006e04 <UART_SetConfig+0x2d0>)
 8006db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006db6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006dba:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006dbe:	d017      	beq.n	8006df0 <UART_SetConfig+0x2bc>
 8006dc0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006dc4:	d817      	bhi.n	8006df6 <UART_SetConfig+0x2c2>
 8006dc6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dca:	d00b      	beq.n	8006de4 <UART_SetConfig+0x2b0>
 8006dcc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006dd0:	d811      	bhi.n	8006df6 <UART_SetConfig+0x2c2>
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d003      	beq.n	8006dde <UART_SetConfig+0x2aa>
 8006dd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006dda:	d006      	beq.n	8006dea <UART_SetConfig+0x2b6>
 8006ddc:	e00b      	b.n	8006df6 <UART_SetConfig+0x2c2>
 8006dde:	2300      	movs	r3, #0
 8006de0:	77fb      	strb	r3, [r7, #31]
 8006de2:	e04a      	b.n	8006e7a <UART_SetConfig+0x346>
 8006de4:	2302      	movs	r3, #2
 8006de6:	77fb      	strb	r3, [r7, #31]
 8006de8:	e047      	b.n	8006e7a <UART_SetConfig+0x346>
 8006dea:	2304      	movs	r3, #4
 8006dec:	77fb      	strb	r3, [r7, #31]
 8006dee:	e044      	b.n	8006e7a <UART_SetConfig+0x346>
 8006df0:	2308      	movs	r3, #8
 8006df2:	77fb      	strb	r3, [r7, #31]
 8006df4:	e041      	b.n	8006e7a <UART_SetConfig+0x346>
 8006df6:	2310      	movs	r3, #16
 8006df8:	77fb      	strb	r3, [r7, #31]
 8006dfa:	e03e      	b.n	8006e7a <UART_SetConfig+0x346>
 8006dfc:	efff69f3 	.word	0xefff69f3
 8006e00:	40011000 	.word	0x40011000
 8006e04:	40023800 	.word	0x40023800
 8006e08:	40004400 	.word	0x40004400
 8006e0c:	40004800 	.word	0x40004800
 8006e10:	40004c00 	.word	0x40004c00
 8006e14:	40005000 	.word	0x40005000
 8006e18:	40011400 	.word	0x40011400
 8006e1c:	40007800 	.word	0x40007800
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	4a71      	ldr	r2, [pc, #452]	; (8006fec <UART_SetConfig+0x4b8>)
 8006e26:	4293      	cmp	r3, r2
 8006e28:	d125      	bne.n	8006e76 <UART_SetConfig+0x342>
 8006e2a:	4b71      	ldr	r3, [pc, #452]	; (8006ff0 <UART_SetConfig+0x4bc>)
 8006e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006e30:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006e34:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006e38:	d017      	beq.n	8006e6a <UART_SetConfig+0x336>
 8006e3a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006e3e:	d817      	bhi.n	8006e70 <UART_SetConfig+0x33c>
 8006e40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e44:	d00b      	beq.n	8006e5e <UART_SetConfig+0x32a>
 8006e46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e4a:	d811      	bhi.n	8006e70 <UART_SetConfig+0x33c>
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d003      	beq.n	8006e58 <UART_SetConfig+0x324>
 8006e50:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006e54:	d006      	beq.n	8006e64 <UART_SetConfig+0x330>
 8006e56:	e00b      	b.n	8006e70 <UART_SetConfig+0x33c>
 8006e58:	2300      	movs	r3, #0
 8006e5a:	77fb      	strb	r3, [r7, #31]
 8006e5c:	e00d      	b.n	8006e7a <UART_SetConfig+0x346>
 8006e5e:	2302      	movs	r3, #2
 8006e60:	77fb      	strb	r3, [r7, #31]
 8006e62:	e00a      	b.n	8006e7a <UART_SetConfig+0x346>
 8006e64:	2304      	movs	r3, #4
 8006e66:	77fb      	strb	r3, [r7, #31]
 8006e68:	e007      	b.n	8006e7a <UART_SetConfig+0x346>
 8006e6a:	2308      	movs	r3, #8
 8006e6c:	77fb      	strb	r3, [r7, #31]
 8006e6e:	e004      	b.n	8006e7a <UART_SetConfig+0x346>
 8006e70:	2310      	movs	r3, #16
 8006e72:	77fb      	strb	r3, [r7, #31]
 8006e74:	e001      	b.n	8006e7a <UART_SetConfig+0x346>
 8006e76:	2310      	movs	r3, #16
 8006e78:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	69db      	ldr	r3, [r3, #28]
 8006e7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e82:	d15a      	bne.n	8006f3a <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8006e84:	7ffb      	ldrb	r3, [r7, #31]
 8006e86:	2b08      	cmp	r3, #8
 8006e88:	d827      	bhi.n	8006eda <UART_SetConfig+0x3a6>
 8006e8a:	a201      	add	r2, pc, #4	; (adr r2, 8006e90 <UART_SetConfig+0x35c>)
 8006e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e90:	08006eb5 	.word	0x08006eb5
 8006e94:	08006ebd 	.word	0x08006ebd
 8006e98:	08006ec5 	.word	0x08006ec5
 8006e9c:	08006edb 	.word	0x08006edb
 8006ea0:	08006ecb 	.word	0x08006ecb
 8006ea4:	08006edb 	.word	0x08006edb
 8006ea8:	08006edb 	.word	0x08006edb
 8006eac:	08006edb 	.word	0x08006edb
 8006eb0:	08006ed3 	.word	0x08006ed3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006eb4:	f7fd fbf8 	bl	80046a8 <HAL_RCC_GetPCLK1Freq>
 8006eb8:	61b8      	str	r0, [r7, #24]
        break;
 8006eba:	e013      	b.n	8006ee4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006ebc:	f7fd fc08 	bl	80046d0 <HAL_RCC_GetPCLK2Freq>
 8006ec0:	61b8      	str	r0, [r7, #24]
        break;
 8006ec2:	e00f      	b.n	8006ee4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006ec4:	4b4b      	ldr	r3, [pc, #300]	; (8006ff4 <UART_SetConfig+0x4c0>)
 8006ec6:	61bb      	str	r3, [r7, #24]
        break;
 8006ec8:	e00c      	b.n	8006ee4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006eca:	f7fd faff 	bl	80044cc <HAL_RCC_GetSysClockFreq>
 8006ece:	61b8      	str	r0, [r7, #24]
        break;
 8006ed0:	e008      	b.n	8006ee4 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006ed2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006ed6:	61bb      	str	r3, [r7, #24]
        break;
 8006ed8:	e004      	b.n	8006ee4 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8006eda:	2300      	movs	r3, #0
 8006edc:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	77bb      	strb	r3, [r7, #30]
        break;
 8006ee2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006ee4:	69bb      	ldr	r3, [r7, #24]
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d074      	beq.n	8006fd4 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006eea:	69bb      	ldr	r3, [r7, #24]
 8006eec:	005a      	lsls	r2, r3, #1
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	685b      	ldr	r3, [r3, #4]
 8006ef2:	085b      	lsrs	r3, r3, #1
 8006ef4:	441a      	add	r2, r3
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	685b      	ldr	r3, [r3, #4]
 8006efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8006efe:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006f00:	693b      	ldr	r3, [r7, #16]
 8006f02:	2b0f      	cmp	r3, #15
 8006f04:	d916      	bls.n	8006f34 <UART_SetConfig+0x400>
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006f0c:	d212      	bcs.n	8006f34 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006f0e:	693b      	ldr	r3, [r7, #16]
 8006f10:	b29b      	uxth	r3, r3
 8006f12:	f023 030f 	bic.w	r3, r3, #15
 8006f16:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	085b      	lsrs	r3, r3, #1
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	f003 0307 	and.w	r3, r3, #7
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	89fb      	ldrh	r3, [r7, #14]
 8006f26:	4313      	orrs	r3, r2
 8006f28:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	89fa      	ldrh	r2, [r7, #14]
 8006f30:	60da      	str	r2, [r3, #12]
 8006f32:	e04f      	b.n	8006fd4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006f34:	2301      	movs	r3, #1
 8006f36:	77bb      	strb	r3, [r7, #30]
 8006f38:	e04c      	b.n	8006fd4 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006f3a:	7ffb      	ldrb	r3, [r7, #31]
 8006f3c:	2b08      	cmp	r3, #8
 8006f3e:	d828      	bhi.n	8006f92 <UART_SetConfig+0x45e>
 8006f40:	a201      	add	r2, pc, #4	; (adr r2, 8006f48 <UART_SetConfig+0x414>)
 8006f42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f46:	bf00      	nop
 8006f48:	08006f6d 	.word	0x08006f6d
 8006f4c:	08006f75 	.word	0x08006f75
 8006f50:	08006f7d 	.word	0x08006f7d
 8006f54:	08006f93 	.word	0x08006f93
 8006f58:	08006f83 	.word	0x08006f83
 8006f5c:	08006f93 	.word	0x08006f93
 8006f60:	08006f93 	.word	0x08006f93
 8006f64:	08006f93 	.word	0x08006f93
 8006f68:	08006f8b 	.word	0x08006f8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006f6c:	f7fd fb9c 	bl	80046a8 <HAL_RCC_GetPCLK1Freq>
 8006f70:	61b8      	str	r0, [r7, #24]
        break;
 8006f72:	e013      	b.n	8006f9c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006f74:	f7fd fbac 	bl	80046d0 <HAL_RCC_GetPCLK2Freq>
 8006f78:	61b8      	str	r0, [r7, #24]
        break;
 8006f7a:	e00f      	b.n	8006f9c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006f7c:	4b1d      	ldr	r3, [pc, #116]	; (8006ff4 <UART_SetConfig+0x4c0>)
 8006f7e:	61bb      	str	r3, [r7, #24]
        break;
 8006f80:	e00c      	b.n	8006f9c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006f82:	f7fd faa3 	bl	80044cc <HAL_RCC_GetSysClockFreq>
 8006f86:	61b8      	str	r0, [r7, #24]
        break;
 8006f88:	e008      	b.n	8006f9c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006f8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f8e:	61bb      	str	r3, [r7, #24]
        break;
 8006f90:	e004      	b.n	8006f9c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8006f92:	2300      	movs	r3, #0
 8006f94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006f96:	2301      	movs	r3, #1
 8006f98:	77bb      	strb	r3, [r7, #30]
        break;
 8006f9a:	bf00      	nop
    }

    if (pclk != 0U)
 8006f9c:	69bb      	ldr	r3, [r7, #24]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d018      	beq.n	8006fd4 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	085a      	lsrs	r2, r3, #1
 8006fa8:	69bb      	ldr	r3, [r7, #24]
 8006faa:	441a      	add	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fb4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006fb6:	693b      	ldr	r3, [r7, #16]
 8006fb8:	2b0f      	cmp	r3, #15
 8006fba:	d909      	bls.n	8006fd0 <UART_SetConfig+0x49c>
 8006fbc:	693b      	ldr	r3, [r7, #16]
 8006fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006fc2:	d205      	bcs.n	8006fd0 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006fc4:	693b      	ldr	r3, [r7, #16]
 8006fc6:	b29a      	uxth	r2, r3
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	60da      	str	r2, [r3, #12]
 8006fce:	e001      	b.n	8006fd4 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006fe0:	7fbb      	ldrb	r3, [r7, #30]
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3720      	adds	r7, #32
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	40007c00 	.word	0x40007c00
 8006ff0:	40023800 	.word	0x40023800
 8006ff4:	00f42400 	.word	0x00f42400

08006ff8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ff8:	b480      	push	{r7}
 8006ffa:	b083      	sub	sp, #12
 8006ffc:	af00      	add	r7, sp, #0
 8006ffe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007004:	f003 0301 	and.w	r3, r3, #1
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00a      	beq.n	8007022 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	430a      	orrs	r2, r1
 8007020:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007026:	f003 0302 	and.w	r3, r3, #2
 800702a:	2b00      	cmp	r3, #0
 800702c:	d00a      	beq.n	8007044 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	685b      	ldr	r3, [r3, #4]
 8007034:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	430a      	orrs	r2, r1
 8007042:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007048:	f003 0304 	and.w	r3, r3, #4
 800704c:	2b00      	cmp	r3, #0
 800704e:	d00a      	beq.n	8007066 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	685b      	ldr	r3, [r3, #4]
 8007056:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	430a      	orrs	r2, r1
 8007064:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800706a:	f003 0308 	and.w	r3, r3, #8
 800706e:	2b00      	cmp	r3, #0
 8007070:	d00a      	beq.n	8007088 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	430a      	orrs	r2, r1
 8007086:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800708c:	f003 0310 	and.w	r3, r3, #16
 8007090:	2b00      	cmp	r3, #0
 8007092:	d00a      	beq.n	80070aa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	681b      	ldr	r3, [r3, #0]
 8007098:	689b      	ldr	r3, [r3, #8]
 800709a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	430a      	orrs	r2, r1
 80070a8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ae:	f003 0320 	and.w	r3, r3, #32
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d00a      	beq.n	80070cc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	430a      	orrs	r2, r1
 80070ca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d01a      	beq.n	800710e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	430a      	orrs	r2, r1
 80070ec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80070f6:	d10a      	bne.n	800710e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	685b      	ldr	r3, [r3, #4]
 80070fe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	430a      	orrs	r2, r1
 800710c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007116:	2b00      	cmp	r3, #0
 8007118:	d00a      	beq.n	8007130 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	430a      	orrs	r2, r1
 800712e:	605a      	str	r2, [r3, #4]
  }
}
 8007130:	bf00      	nop
 8007132:	370c      	adds	r7, #12
 8007134:	46bd      	mov	sp, r7
 8007136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713a:	4770      	bx	lr

0800713c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b086      	sub	sp, #24
 8007140:	af02      	add	r7, sp, #8
 8007142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2200      	movs	r2, #0
 8007148:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800714c:	f7fa fb76 	bl	800183c <HAL_GetTick>
 8007150:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 0308 	and.w	r3, r3, #8
 800715c:	2b08      	cmp	r3, #8
 800715e:	d10e      	bne.n	800717e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007160:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007164:	9300      	str	r3, [sp, #0]
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	2200      	movs	r2, #0
 800716a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 f82d 	bl	80071ce <UART_WaitOnFlagUntilTimeout>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d001      	beq.n	800717e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800717a:	2303      	movs	r3, #3
 800717c:	e023      	b.n	80071c6 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f003 0304 	and.w	r3, r3, #4
 8007188:	2b04      	cmp	r3, #4
 800718a:	d10e      	bne.n	80071aa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800718c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007190:	9300      	str	r3, [sp, #0]
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2200      	movs	r2, #0
 8007196:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 f817 	bl	80071ce <UART_WaitOnFlagUntilTimeout>
 80071a0:	4603      	mov	r3, r0
 80071a2:	2b00      	cmp	r3, #0
 80071a4:	d001      	beq.n	80071aa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80071a6:	2303      	movs	r3, #3
 80071a8:	e00d      	b.n	80071c6 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	2220      	movs	r2, #32
 80071ae:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2220      	movs	r2, #32
 80071b4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2200      	movs	r2, #0
 80071ba:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2200      	movs	r2, #0
 80071c0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80071c4:	2300      	movs	r3, #0
}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3710      	adds	r7, #16
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b09c      	sub	sp, #112	; 0x70
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	60f8      	str	r0, [r7, #12]
 80071d6:	60b9      	str	r1, [r7, #8]
 80071d8:	603b      	str	r3, [r7, #0]
 80071da:	4613      	mov	r3, r2
 80071dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80071de:	e0a5      	b.n	800732c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071e6:	f000 80a1 	beq.w	800732c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071ea:	f7fa fb27 	bl	800183c <HAL_GetTick>
 80071ee:	4602      	mov	r2, r0
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	1ad3      	subs	r3, r2, r3
 80071f4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80071f6:	429a      	cmp	r2, r3
 80071f8:	d302      	bcc.n	8007200 <UART_WaitOnFlagUntilTimeout+0x32>
 80071fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d13e      	bne.n	800727e <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007208:	e853 3f00 	ldrex	r3, [r3]
 800720c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800720e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007210:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007214:	667b      	str	r3, [r7, #100]	; 0x64
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	461a      	mov	r2, r3
 800721c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800721e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007220:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007222:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007224:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007226:	e841 2300 	strex	r3, r2, [r1]
 800722a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800722c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800722e:	2b00      	cmp	r3, #0
 8007230:	d1e6      	bne.n	8007200 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	3308      	adds	r3, #8
 8007238:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800723a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800723c:	e853 3f00 	ldrex	r3, [r3]
 8007240:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007242:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007244:	f023 0301 	bic.w	r3, r3, #1
 8007248:	663b      	str	r3, [r7, #96]	; 0x60
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	3308      	adds	r3, #8
 8007250:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007252:	64ba      	str	r2, [r7, #72]	; 0x48
 8007254:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007256:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007258:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800725a:	e841 2300 	strex	r3, r2, [r1]
 800725e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007260:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007262:	2b00      	cmp	r3, #0
 8007264:	d1e5      	bne.n	8007232 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2220      	movs	r2, #32
 800726a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2220      	movs	r2, #32
 8007270:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	2200      	movs	r2, #0
 8007276:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800727a:	2303      	movs	r3, #3
 800727c:	e067      	b.n	800734e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f003 0304 	and.w	r3, r3, #4
 8007288:	2b00      	cmp	r3, #0
 800728a:	d04f      	beq.n	800732c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	69db      	ldr	r3, [r3, #28]
 8007292:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007296:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800729a:	d147      	bne.n	800732c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80072a4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072ae:	e853 3f00 	ldrex	r3, [r3]
 80072b2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80072b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072b6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80072ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	461a      	mov	r2, r3
 80072c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072c4:	637b      	str	r3, [r7, #52]	; 0x34
 80072c6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80072ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80072cc:	e841 2300 	strex	r3, r2, [r1]
 80072d0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80072d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d1e6      	bne.n	80072a6 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	3308      	adds	r3, #8
 80072de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	e853 3f00 	ldrex	r3, [r3]
 80072e6:	613b      	str	r3, [r7, #16]
   return(result);
 80072e8:	693b      	ldr	r3, [r7, #16]
 80072ea:	f023 0301 	bic.w	r3, r3, #1
 80072ee:	66bb      	str	r3, [r7, #104]	; 0x68
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	3308      	adds	r3, #8
 80072f6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80072f8:	623a      	str	r2, [r7, #32]
 80072fa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072fc:	69f9      	ldr	r1, [r7, #28]
 80072fe:	6a3a      	ldr	r2, [r7, #32]
 8007300:	e841 2300 	strex	r3, r2, [r1]
 8007304:	61bb      	str	r3, [r7, #24]
   return(result);
 8007306:	69bb      	ldr	r3, [r7, #24]
 8007308:	2b00      	cmp	r3, #0
 800730a:	d1e5      	bne.n	80072d8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	2220      	movs	r2, #32
 8007310:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2220      	movs	r2, #32
 8007316:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2220      	movs	r2, #32
 800731c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2200      	movs	r2, #0
 8007324:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007328:	2303      	movs	r3, #3
 800732a:	e010      	b.n	800734e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	69da      	ldr	r2, [r3, #28]
 8007332:	68bb      	ldr	r3, [r7, #8]
 8007334:	4013      	ands	r3, r2
 8007336:	68ba      	ldr	r2, [r7, #8]
 8007338:	429a      	cmp	r2, r3
 800733a:	bf0c      	ite	eq
 800733c:	2301      	moveq	r3, #1
 800733e:	2300      	movne	r3, #0
 8007340:	b2db      	uxtb	r3, r3
 8007342:	461a      	mov	r2, r3
 8007344:	79fb      	ldrb	r3, [r7, #7]
 8007346:	429a      	cmp	r2, r3
 8007348:	f43f af4a 	beq.w	80071e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800734c:	2300      	movs	r3, #0
}
 800734e:	4618      	mov	r0, r3
 8007350:	3770      	adds	r7, #112	; 0x70
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}
	...

08007358 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007358:	b480      	push	{r7}
 800735a:	b097      	sub	sp, #92	; 0x5c
 800735c:	af00      	add	r7, sp, #0
 800735e:	60f8      	str	r0, [r7, #12]
 8007360:	60b9      	str	r1, [r7, #8]
 8007362:	4613      	mov	r3, r2
 8007364:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	68ba      	ldr	r2, [r7, #8]
 800736a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	88fa      	ldrh	r2, [r7, #6]
 8007370:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	88fa      	ldrh	r2, [r7, #6]
 8007378:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	2200      	movs	r2, #0
 8007380:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800738a:	d10e      	bne.n	80073aa <UART_Start_Receive_IT+0x52>
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	691b      	ldr	r3, [r3, #16]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d105      	bne.n	80073a0 <UART_Start_Receive_IT+0x48>
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	f240 12ff 	movw	r2, #511	; 0x1ff
 800739a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800739e:	e02d      	b.n	80073fc <UART_Start_Receive_IT+0xa4>
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	22ff      	movs	r2, #255	; 0xff
 80073a4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80073a8:	e028      	b.n	80073fc <UART_Start_Receive_IT+0xa4>
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	689b      	ldr	r3, [r3, #8]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d10d      	bne.n	80073ce <UART_Start_Receive_IT+0x76>
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	691b      	ldr	r3, [r3, #16]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d104      	bne.n	80073c4 <UART_Start_Receive_IT+0x6c>
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	22ff      	movs	r2, #255	; 0xff
 80073be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80073c2:	e01b      	b.n	80073fc <UART_Start_Receive_IT+0xa4>
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	227f      	movs	r2, #127	; 0x7f
 80073c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80073cc:	e016      	b.n	80073fc <UART_Start_Receive_IT+0xa4>
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80073d6:	d10d      	bne.n	80073f4 <UART_Start_Receive_IT+0x9c>
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	691b      	ldr	r3, [r3, #16]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d104      	bne.n	80073ea <UART_Start_Receive_IT+0x92>
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	227f      	movs	r2, #127	; 0x7f
 80073e4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80073e8:	e008      	b.n	80073fc <UART_Start_Receive_IT+0xa4>
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	223f      	movs	r2, #63	; 0x3f
 80073ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80073f2:	e003      	b.n	80073fc <UART_Start_Receive_IT+0xa4>
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2200      	movs	r2, #0
 80073f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	2200      	movs	r2, #0
 8007400:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	2222      	movs	r2, #34	; 0x22
 8007408:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	3308      	adds	r3, #8
 8007410:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007412:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007414:	e853 3f00 	ldrex	r3, [r3]
 8007418:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800741a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800741c:	f043 0301 	orr.w	r3, r3, #1
 8007420:	657b      	str	r3, [r7, #84]	; 0x54
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	3308      	adds	r3, #8
 8007428:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800742a:	64ba      	str	r2, [r7, #72]	; 0x48
 800742c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800742e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007430:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007432:	e841 2300 	strex	r3, r2, [r1]
 8007436:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007438:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800743a:	2b00      	cmp	r3, #0
 800743c:	d1e5      	bne.n	800740a <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	689b      	ldr	r3, [r3, #8]
 8007442:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007446:	d107      	bne.n	8007458 <UART_Start_Receive_IT+0x100>
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	691b      	ldr	r3, [r3, #16]
 800744c:	2b00      	cmp	r3, #0
 800744e:	d103      	bne.n	8007458 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	4a24      	ldr	r2, [pc, #144]	; (80074e4 <UART_Start_Receive_IT+0x18c>)
 8007454:	665a      	str	r2, [r3, #100]	; 0x64
 8007456:	e002      	b.n	800745e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	4a23      	ldr	r2, [pc, #140]	; (80074e8 <UART_Start_Receive_IT+0x190>)
 800745c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2200      	movs	r2, #0
 8007462:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	691b      	ldr	r3, [r3, #16]
 800746a:	2b00      	cmp	r3, #0
 800746c:	d019      	beq.n	80074a2 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800746e:	68fb      	ldr	r3, [r7, #12]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007476:	e853 3f00 	ldrex	r3, [r3]
 800747a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800747c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007482:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	461a      	mov	r2, r3
 800748a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800748c:	637b      	str	r3, [r7, #52]	; 0x34
 800748e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007490:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007492:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007494:	e841 2300 	strex	r3, r2, [r1]
 8007498:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800749a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800749c:	2b00      	cmp	r3, #0
 800749e:	d1e6      	bne.n	800746e <UART_Start_Receive_IT+0x116>
 80074a0:	e018      	b.n	80074d4 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074a8:	697b      	ldr	r3, [r7, #20]
 80074aa:	e853 3f00 	ldrex	r3, [r3]
 80074ae:	613b      	str	r3, [r7, #16]
   return(result);
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	f043 0320 	orr.w	r3, r3, #32
 80074b6:	653b      	str	r3, [r7, #80]	; 0x50
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	461a      	mov	r2, r3
 80074be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074c0:	623b      	str	r3, [r7, #32]
 80074c2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074c4:	69f9      	ldr	r1, [r7, #28]
 80074c6:	6a3a      	ldr	r2, [r7, #32]
 80074c8:	e841 2300 	strex	r3, r2, [r1]
 80074cc:	61bb      	str	r3, [r7, #24]
   return(result);
 80074ce:	69bb      	ldr	r3, [r7, #24]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d1e6      	bne.n	80074a2 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 80074d4:	2300      	movs	r3, #0
}
 80074d6:	4618      	mov	r0, r3
 80074d8:	375c      	adds	r7, #92	; 0x5c
 80074da:	46bd      	mov	sp, r7
 80074dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e0:	4770      	bx	lr
 80074e2:	bf00      	nop
 80074e4:	0800778f 	.word	0x0800778f
 80074e8:	08007633 	.word	0x08007633

080074ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80074ec:	b480      	push	{r7}
 80074ee:	b095      	sub	sp, #84	; 0x54
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074fc:	e853 3f00 	ldrex	r3, [r3]
 8007500:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007504:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007508:	64fb      	str	r3, [r7, #76]	; 0x4c
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	461a      	mov	r2, r3
 8007510:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007512:	643b      	str	r3, [r7, #64]	; 0x40
 8007514:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007516:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007518:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800751a:	e841 2300 	strex	r3, r2, [r1]
 800751e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007522:	2b00      	cmp	r3, #0
 8007524:	d1e6      	bne.n	80074f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	3308      	adds	r3, #8
 800752c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800752e:	6a3b      	ldr	r3, [r7, #32]
 8007530:	e853 3f00 	ldrex	r3, [r3]
 8007534:	61fb      	str	r3, [r7, #28]
   return(result);
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	f023 0301 	bic.w	r3, r3, #1
 800753c:	64bb      	str	r3, [r7, #72]	; 0x48
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	3308      	adds	r3, #8
 8007544:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007546:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007548:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800754a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800754c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800754e:	e841 2300 	strex	r3, r2, [r1]
 8007552:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007556:	2b00      	cmp	r3, #0
 8007558:	d1e5      	bne.n	8007526 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800755e:	2b01      	cmp	r3, #1
 8007560:	d118      	bne.n	8007594 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	e853 3f00 	ldrex	r3, [r3]
 800756e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007570:	68bb      	ldr	r3, [r7, #8]
 8007572:	f023 0310 	bic.w	r3, r3, #16
 8007576:	647b      	str	r3, [r7, #68]	; 0x44
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	461a      	mov	r2, r3
 800757e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007580:	61bb      	str	r3, [r7, #24]
 8007582:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007584:	6979      	ldr	r1, [r7, #20]
 8007586:	69ba      	ldr	r2, [r7, #24]
 8007588:	e841 2300 	strex	r3, r2, [r1]
 800758c:	613b      	str	r3, [r7, #16]
   return(result);
 800758e:	693b      	ldr	r3, [r7, #16]
 8007590:	2b00      	cmp	r3, #0
 8007592:	d1e6      	bne.n	8007562 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	2220      	movs	r2, #32
 8007598:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	2200      	movs	r2, #0
 800759e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	2200      	movs	r2, #0
 80075a4:	665a      	str	r2, [r3, #100]	; 0x64
}
 80075a6:	bf00      	nop
 80075a8:	3754      	adds	r7, #84	; 0x54
 80075aa:	46bd      	mov	sp, r7
 80075ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b0:	4770      	bx	lr

080075b2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80075b2:	b580      	push	{r7, lr}
 80075b4:	b084      	sub	sp, #16
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	2200      	movs	r2, #0
 80075c4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	2200      	movs	r2, #0
 80075cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	f7ff fa8f 	bl	8006af4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075d6:	bf00      	nop
 80075d8:	3710      	adds	r7, #16
 80075da:	46bd      	mov	sp, r7
 80075dc:	bd80      	pop	{r7, pc}

080075de <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80075de:	b580      	push	{r7, lr}
 80075e0:	b088      	sub	sp, #32
 80075e2:	af00      	add	r7, sp, #0
 80075e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	e853 3f00 	ldrex	r3, [r3]
 80075f2:	60bb      	str	r3, [r7, #8]
   return(result);
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075fa:	61fb      	str	r3, [r7, #28]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	461a      	mov	r2, r3
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	61bb      	str	r3, [r7, #24]
 8007606:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007608:	6979      	ldr	r1, [r7, #20]
 800760a:	69ba      	ldr	r2, [r7, #24]
 800760c:	e841 2300 	strex	r3, r2, [r1]
 8007610:	613b      	str	r3, [r7, #16]
   return(result);
 8007612:	693b      	ldr	r3, [r7, #16]
 8007614:	2b00      	cmp	r3, #0
 8007616:	d1e6      	bne.n	80075e6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	2220      	movs	r2, #32
 800761c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	2200      	movs	r2, #0
 8007622:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f7ff fa5b 	bl	8006ae0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800762a:	bf00      	nop
 800762c:	3720      	adds	r7, #32
 800762e:	46bd      	mov	sp, r7
 8007630:	bd80      	pop	{r7, pc}

08007632 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007632:	b580      	push	{r7, lr}
 8007634:	b096      	sub	sp, #88	; 0x58
 8007636:	af00      	add	r7, sp, #0
 8007638:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007640:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007648:	2b22      	cmp	r3, #34	; 0x22
 800764a:	f040 8094 	bne.w	8007776 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007654:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007658:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800765c:	b2d9      	uxtb	r1, r3
 800765e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007662:	b2da      	uxtb	r2, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007668:	400a      	ands	r2, r1
 800766a:	b2d2      	uxtb	r2, r2
 800766c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007672:	1c5a      	adds	r2, r3, #1
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800767e:	b29b      	uxth	r3, r3
 8007680:	3b01      	subs	r3, #1
 8007682:	b29a      	uxth	r2, r3
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007690:	b29b      	uxth	r3, r3
 8007692:	2b00      	cmp	r3, #0
 8007694:	d177      	bne.n	8007786 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800769e:	e853 3f00 	ldrex	r3, [r3]
 80076a2:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80076a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80076a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80076aa:	653b      	str	r3, [r7, #80]	; 0x50
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	461a      	mov	r2, r3
 80076b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076b4:	647b      	str	r3, [r7, #68]	; 0x44
 80076b6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80076ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80076bc:	e841 2300 	strex	r3, r2, [r1]
 80076c0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80076c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d1e6      	bne.n	8007696 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	3308      	adds	r3, #8
 80076ce:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d2:	e853 3f00 	ldrex	r3, [r3]
 80076d6:	623b      	str	r3, [r7, #32]
   return(result);
 80076d8:	6a3b      	ldr	r3, [r7, #32]
 80076da:	f023 0301 	bic.w	r3, r3, #1
 80076de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	3308      	adds	r3, #8
 80076e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80076e8:	633a      	str	r2, [r7, #48]	; 0x30
 80076ea:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076ec:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80076ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076f0:	e841 2300 	strex	r3, r2, [r1]
 80076f4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80076f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d1e5      	bne.n	80076c8 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	2220      	movs	r2, #32
 8007700:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	2200      	movs	r2, #0
 8007706:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800770c:	2b01      	cmp	r3, #1
 800770e:	d12e      	bne.n	800776e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2200      	movs	r2, #0
 8007714:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800771c:	693b      	ldr	r3, [r7, #16]
 800771e:	e853 3f00 	ldrex	r3, [r3]
 8007722:	60fb      	str	r3, [r7, #12]
   return(result);
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f023 0310 	bic.w	r3, r3, #16
 800772a:	64bb      	str	r3, [r7, #72]	; 0x48
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	461a      	mov	r2, r3
 8007732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007734:	61fb      	str	r3, [r7, #28]
 8007736:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007738:	69b9      	ldr	r1, [r7, #24]
 800773a:	69fa      	ldr	r2, [r7, #28]
 800773c:	e841 2300 	strex	r3, r2, [r1]
 8007740:	617b      	str	r3, [r7, #20]
   return(result);
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	2b00      	cmp	r3, #0
 8007746:	d1e6      	bne.n	8007716 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	69db      	ldr	r3, [r3, #28]
 800774e:	f003 0310 	and.w	r3, r3, #16
 8007752:	2b10      	cmp	r3, #16
 8007754:	d103      	bne.n	800775e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	2210      	movs	r2, #16
 800775c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007764:	4619      	mov	r1, r3
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f7ff f9ce 	bl	8006b08 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800776c:	e00b      	b.n	8007786 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 800776e:	6878      	ldr	r0, [r7, #4]
 8007770:	f7f9 f9ec 	bl	8000b4c <HAL_UART_RxCpltCallback>
}
 8007774:	e007      	b.n	8007786 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	699a      	ldr	r2, [r3, #24]
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	f042 0208 	orr.w	r2, r2, #8
 8007784:	619a      	str	r2, [r3, #24]
}
 8007786:	bf00      	nop
 8007788:	3758      	adds	r7, #88	; 0x58
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800778e:	b580      	push	{r7, lr}
 8007790:	b096      	sub	sp, #88	; 0x58
 8007792:	af00      	add	r7, sp, #0
 8007794:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800779c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80077a4:	2b22      	cmp	r3, #34	; 0x22
 80077a6:	f040 8094 	bne.w	80078d2 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b0:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077b8:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80077ba:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80077be:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80077c2:	4013      	ands	r3, r2
 80077c4:	b29a      	uxth	r2, r3
 80077c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077c8:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80077ce:	1c9a      	adds	r2, r3, #2
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80077da:	b29b      	uxth	r3, r3
 80077dc:	3b01      	subs	r3, #1
 80077de:	b29a      	uxth	r2, r3
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80077ec:	b29b      	uxth	r3, r3
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d177      	bne.n	80078e2 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077fa:	e853 3f00 	ldrex	r3, [r3]
 80077fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007802:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007806:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	461a      	mov	r2, r3
 800780e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007810:	643b      	str	r3, [r7, #64]	; 0x40
 8007812:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007814:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007816:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007818:	e841 2300 	strex	r3, r2, [r1]
 800781c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800781e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007820:	2b00      	cmp	r3, #0
 8007822:	d1e6      	bne.n	80077f2 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	3308      	adds	r3, #8
 800782a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800782c:	6a3b      	ldr	r3, [r7, #32]
 800782e:	e853 3f00 	ldrex	r3, [r3]
 8007832:	61fb      	str	r3, [r7, #28]
   return(result);
 8007834:	69fb      	ldr	r3, [r7, #28]
 8007836:	f023 0301 	bic.w	r3, r3, #1
 800783a:	64bb      	str	r3, [r7, #72]	; 0x48
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	3308      	adds	r3, #8
 8007842:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007844:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007846:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007848:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800784a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800784c:	e841 2300 	strex	r3, r2, [r1]
 8007850:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007854:	2b00      	cmp	r3, #0
 8007856:	d1e5      	bne.n	8007824 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2220      	movs	r2, #32
 800785c:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007868:	2b01      	cmp	r3, #1
 800786a:	d12e      	bne.n	80078ca <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	2200      	movs	r2, #0
 8007870:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	e853 3f00 	ldrex	r3, [r3]
 800787e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	f023 0310 	bic.w	r3, r3, #16
 8007886:	647b      	str	r3, [r7, #68]	; 0x44
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	461a      	mov	r2, r3
 800788e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007890:	61bb      	str	r3, [r7, #24]
 8007892:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007894:	6979      	ldr	r1, [r7, #20]
 8007896:	69ba      	ldr	r2, [r7, #24]
 8007898:	e841 2300 	strex	r3, r2, [r1]
 800789c:	613b      	str	r3, [r7, #16]
   return(result);
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d1e6      	bne.n	8007872 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	69db      	ldr	r3, [r3, #28]
 80078aa:	f003 0310 	and.w	r3, r3, #16
 80078ae:	2b10      	cmp	r3, #16
 80078b0:	d103      	bne.n	80078ba <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2210      	movs	r2, #16
 80078b8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80078c0:	4619      	mov	r1, r3
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f7ff f920 	bl	8006b08 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80078c8:	e00b      	b.n	80078e2 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 80078ca:	6878      	ldr	r0, [r7, #4]
 80078cc:	f7f9 f93e 	bl	8000b4c <HAL_UART_RxCpltCallback>
}
 80078d0:	e007      	b.n	80078e2 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	699a      	ldr	r2, [r3, #24]
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f042 0208 	orr.w	r2, r2, #8
 80078e0:	619a      	str	r2, [r3, #24]
}
 80078e2:	bf00      	nop
 80078e4:	3758      	adds	r7, #88	; 0x58
 80078e6:	46bd      	mov	sp, r7
 80078e8:	bd80      	pop	{r7, pc}
	...

080078ec <arm_fir_init_f32>:
 80078ec:	b538      	push	{r3, r4, r5, lr}
 80078ee:	9c04      	ldr	r4, [sp, #16]
 80078f0:	8001      	strh	r1, [r0, #0]
 80078f2:	1e65      	subs	r5, r4, #1
 80078f4:	4604      	mov	r4, r0
 80078f6:	4618      	mov	r0, r3
 80078f8:	440d      	add	r5, r1
 80078fa:	60a2      	str	r2, [r4, #8]
 80078fc:	2100      	movs	r1, #0
 80078fe:	00aa      	lsls	r2, r5, #2
 8007900:	f000 face 	bl	8007ea0 <memset>
 8007904:	6060      	str	r0, [r4, #4]
 8007906:	bd38      	pop	{r3, r4, r5, pc}

08007908 <arm_fir_f32>:
 8007908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800790c:	f06f 4440 	mvn.w	r4, #3221225472	; 0xc0000000
 8007910:	ed2d 8b10 	vpush	{d8-d15}
 8007914:	f8b0 c000 	ldrh.w	ip, [r0]
 8007918:	b08b      	sub	sp, #44	; 0x2c
 800791a:	f8d0 a004 	ldr.w	sl, [r0, #4]
 800791e:	4464      	add	r4, ip
 8007920:	e9cd 0303 	strd	r0, r3, [sp, #12]
 8007924:	eb0a 0584 	add.w	r5, sl, r4, lsl #2
 8007928:	6880      	ldr	r0, [r0, #8]
 800792a:	08db      	lsrs	r3, r3, #3
 800792c:	9000      	str	r0, [sp, #0]
 800792e:	9501      	str	r5, [sp, #4]
 8007930:	9302      	str	r3, [sp, #8]
 8007932:	f000 81f2 	beq.w	8007d1a <arm_fir_f32+0x412>
 8007936:	469e      	mov	lr, r3
 8007938:	ea4f 03dc 	mov.w	r3, ip, lsr #3
 800793c:	f100 0720 	add.w	r7, r0, #32
 8007940:	9800      	ldr	r0, [sp, #0]
 8007942:	015c      	lsls	r4, r3, #5
 8007944:	f00c 0907 	and.w	r9, ip, #7
 8007948:	9707      	str	r7, [sp, #28]
 800794a:	eb00 1043 	add.w	r0, r0, r3, lsl #5
 800794e:	9405      	str	r4, [sp, #20]
 8007950:	f10a 0b1c 	add.w	fp, sl, #28
 8007954:	f8cd c020 	str.w	ip, [sp, #32]
 8007958:	f101 0620 	add.w	r6, r1, #32
 800795c:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8007960:	3520      	adds	r5, #32
 8007962:	eb07 1743 	add.w	r7, r7, r3, lsl #5
 8007966:	f102 0420 	add.w	r4, r2, #32
 800796a:	469c      	mov	ip, r3
 800796c:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8007970:	9006      	str	r0, [sp, #24]
 8007972:	4648      	mov	r0, r9
 8007974:	e9dd 8905 	ldrd	r8, r9, [sp, #20]
 8007978:	e9cd 1205 	strd	r1, r2, [sp, #20]
 800797c:	f856 3c20 	ldr.w	r3, [r6, #-32]
 8007980:	465a      	mov	r2, fp
 8007982:	f845 3c20 	str.w	r3, [r5, #-32]
 8007986:	f856 3c1c 	ldr.w	r3, [r6, #-28]
 800798a:	f845 3c1c 	str.w	r3, [r5, #-28]
 800798e:	f856 3c18 	ldr.w	r3, [r6, #-24]
 8007992:	f845 3c18 	str.w	r3, [r5, #-24]
 8007996:	f856 3c14 	ldr.w	r3, [r6, #-20]
 800799a:	f845 3c14 	str.w	r3, [r5, #-20]
 800799e:	f856 3c10 	ldr.w	r3, [r6, #-16]
 80079a2:	f845 3c10 	str.w	r3, [r5, #-16]
 80079a6:	f856 3c0c 	ldr.w	r3, [r6, #-12]
 80079aa:	f845 3c0c 	str.w	r3, [r5, #-12]
 80079ae:	f856 3c08 	ldr.w	r3, [r6, #-8]
 80079b2:	f845 3c08 	str.w	r3, [r5, #-8]
 80079b6:	f856 3c04 	ldr.w	r3, [r6, #-4]
 80079ba:	f845 3c04 	str.w	r3, [r5, #-4]
 80079be:	ed1b 9a07 	vldr	s18, [fp, #-28]	; 0xffffffe4
 80079c2:	ed5b 0a06 	vldr	s1, [fp, #-24]	; 0xffffffe8
 80079c6:	ed1b 0a05 	vldr	s0, [fp, #-20]	; 0xffffffec
 80079ca:	ed1b 8a04 	vldr	s16, [fp, #-16]
 80079ce:	ed5b 8a03 	vldr	s17, [fp, #-12]
 80079d2:	ed5b 1a02 	vldr	s3, [fp, #-8]
 80079d6:	ed1b 1a01 	vldr	s2, [fp, #-4]
 80079da:	f1bc 0f00 	cmp.w	ip, #0
 80079de:	f000 8208 	beq.w	8007df2 <arm_fir_f32+0x4ea>
 80079e2:	eddf 6ae3 	vldr	s13, [pc, #908]	; 8007d70 <arm_fir_f32+0x468>
 80079e6:	f10b 0120 	add.w	r1, fp, #32
 80079ea:	4653      	mov	r3, sl
 80079ec:	eeb0 ca66 	vmov.f32	s24, s13
 80079f0:	460a      	mov	r2, r1
 80079f2:	eeb0 6a66 	vmov.f32	s12, s13
 80079f6:	eef0 9a66 	vmov.f32	s19, s13
 80079fa:	eeb0 aa66 	vmov.f32	s20, s13
 80079fe:	eef0 aa66 	vmov.f32	s21, s13
 8007a02:	eeb0 ba66 	vmov.f32	s22, s13
 8007a06:	eef0 ba66 	vmov.f32	s23, s13
 8007a0a:	ed13 7a08 	vldr	s14, [r3, #-32]	; 0xffffffe0
 8007a0e:	3320      	adds	r3, #32
 8007a10:	ed52 4a08 	vldr	s9, [r2, #-32]	; 0xffffffe0
 8007a14:	3220      	adds	r2, #32
 8007a16:	ee67 fa09 	vmul.f32	s31, s14, s18
 8007a1a:	ed53 ea0f 	vldr	s29, [r3, #-60]	; 0xffffffc4
 8007a1e:	ee27 da20 	vmul.f32	s26, s14, s1
 8007a22:	ed12 9a0f 	vldr	s18, [r2, #-60]	; 0xffffffc4
 8007a26:	ee27 2a00 	vmul.f32	s4, s14, s0
 8007a2a:	ed13 ea0e 	vldr	s28, [r3, #-56]	; 0xffffffc8
 8007a2e:	ee27 3a08 	vmul.f32	s6, s14, s16
 8007a32:	ed53 da0d 	vldr	s27, [r3, #-52]	; 0xffffffcc
 8007a36:	ee67 3a28 	vmul.f32	s7, s14, s17
 8007a3a:	ed53 ca0c 	vldr	s25, [r3, #-48]	; 0xffffffd0
 8007a3e:	ee67 5a21 	vmul.f32	s11, s14, s3
 8007a42:	ed53 2a0b 	vldr	s5, [r3, #-44]	; 0xffffffd4
 8007a46:	ee27 fa01 	vmul.f32	s30, s14, s2
 8007a4a:	ed13 4a0a 	vldr	s8, [r3, #-40]	; 0xffffffd8
 8007a4e:	ee67 7a24 	vmul.f32	s15, s14, s9
 8007a52:	ed13 5a09 	vldr	s10, [r3, #-36]	; 0xffffffdc
 8007a56:	ee7f baab 	vadd.f32	s23, s31, s23
 8007a5a:	429f      	cmp	r7, r3
 8007a5c:	ee6e faa0 	vmul.f32	s31, s29, s1
 8007a60:	ed52 0a0e 	vldr	s1, [r2, #-56]	; 0xffffffc8
 8007a64:	ee3d ba0b 	vadd.f32	s22, s26, s22
 8007a68:	ee72 aa2a 	vadd.f32	s21, s4, s21
 8007a6c:	ee2e da80 	vmul.f32	s26, s29, s0
 8007a70:	ee2e 2a88 	vmul.f32	s4, s29, s16
 8007a74:	ee33 aa0a 	vadd.f32	s20, s6, s20
 8007a78:	ee73 9aa9 	vadd.f32	s19, s7, s19
 8007a7c:	ee2e 3aa8 	vmul.f32	s6, s29, s17
 8007a80:	ee6e 3aa1 	vmul.f32	s7, s29, s3
 8007a84:	ee35 6a86 	vadd.f32	s12, s11, s12
 8007a88:	ee3f ca0c 	vadd.f32	s24, s30, s24
 8007a8c:	ee6e 5a81 	vmul.f32	s11, s29, s2
 8007a90:	ee24 faae 	vmul.f32	s30, s9, s29
 8007a94:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8007a98:	ee6e ea89 	vmul.f32	s29, s29, s18
 8007a9c:	ee2e 7a00 	vmul.f32	s14, s28, s0
 8007aa0:	ed12 0a0d 	vldr	s0, [r2, #-52]	; 0xffffffcc
 8007aa4:	ee7f baab 	vadd.f32	s23, s31, s23
 8007aa8:	ee3d ba0b 	vadd.f32	s22, s26, s22
 8007aac:	ee72 aa2a 	vadd.f32	s21, s4, s21
 8007ab0:	ee2e da08 	vmul.f32	s26, s28, s16
 8007ab4:	ee2e 2a28 	vmul.f32	s4, s28, s17
 8007ab8:	ee33 aa0a 	vadd.f32	s20, s6, s20
 8007abc:	ee73 9aa9 	vadd.f32	s19, s7, s19
 8007ac0:	ee2e 3a21 	vmul.f32	s6, s28, s3
 8007ac4:	ee6e 3a01 	vmul.f32	s7, s28, s2
 8007ac8:	ee35 6a86 	vadd.f32	s12, s11, s12
 8007acc:	ee3f ca0c 	vadd.f32	s24, s30, s24
 8007ad0:	ee64 5a8e 	vmul.f32	s11, s9, s28
 8007ad4:	ee29 fa0e 	vmul.f32	s30, s18, s28
 8007ad8:	ee7e 7aa7 	vadd.f32	s15, s29, s15
 8007adc:	ee2e ea20 	vmul.f32	s28, s28, s1
 8007ae0:	ee6d 6a88 	vmul.f32	s13, s27, s16
 8007ae4:	ed12 8a0c 	vldr	s16, [r2, #-48]	; 0xffffffd0
 8007ae8:	ee3d ba0b 	vadd.f32	s22, s26, s22
 8007aec:	ee77 ba2b 	vadd.f32	s23, s14, s23
 8007af0:	ee2d daa8 	vmul.f32	s26, s27, s17
 8007af4:	ee72 aa2a 	vadd.f32	s21, s4, s21
 8007af8:	ee33 aa0a 	vadd.f32	s20, s6, s20
 8007afc:	ee2d 2aa1 	vmul.f32	s4, s27, s3
 8007b00:	ee2d 3a81 	vmul.f32	s6, s27, s2
 8007b04:	ee73 9aa9 	vadd.f32	s19, s7, s19
 8007b08:	ee35 6a86 	vadd.f32	s12, s11, s12
 8007b0c:	ee64 3aad 	vmul.f32	s7, s9, s27
 8007b10:	ee69 5a2d 	vmul.f32	s11, s18, s27
 8007b14:	ee3f ca0c 	vadd.f32	s24, s30, s24
 8007b18:	ee7e 7a27 	vadd.f32	s15, s28, s15
 8007b1c:	ee20 faad 	vmul.f32	s30, s1, s27
 8007b20:	ee6d da80 	vmul.f32	s27, s27, s0
 8007b24:	ee6c faa8 	vmul.f32	s31, s25, s17
 8007b28:	ed52 8a0b 	vldr	s17, [r2, #-44]	; 0xffffffd4
 8007b2c:	ee76 baab 	vadd.f32	s23, s13, s23
 8007b30:	ee3d da0b 	vadd.f32	s26, s26, s22
 8007b34:	ee72 aa2a 	vadd.f32	s21, s4, s21
 8007b38:	ee2c baa1 	vmul.f32	s22, s25, s3
 8007b3c:	ee2c 2a81 	vmul.f32	s4, s25, s2
 8007b40:	ee33 aa0a 	vadd.f32	s20, s6, s20
 8007b44:	ee73 9aa9 	vadd.f32	s19, s7, s19
 8007b48:	ee24 3aac 	vmul.f32	s6, s9, s25
 8007b4c:	ee69 3a2c 	vmul.f32	s7, s18, s25
 8007b50:	ee35 6a86 	vadd.f32	s12, s11, s12
 8007b54:	ee3f ca0c 	vadd.f32	s24, s30, s24
 8007b58:	ee60 5aac 	vmul.f32	s11, s1, s25
 8007b5c:	ee20 fa2c 	vmul.f32	s30, s0, s25
 8007b60:	ee7d 7aa7 	vadd.f32	s15, s27, s15
 8007b64:	ee6c ca88 	vmul.f32	s25, s25, s16
 8007b68:	ee62 eaa1 	vmul.f32	s29, s5, s3
 8007b6c:	ed52 1a0a 	vldr	s3, [r2, #-40]	; 0xffffffd8
 8007b70:	ee3b da0d 	vadd.f32	s26, s22, s26
 8007b74:	ee7f baab 	vadd.f32	s23, s31, s23
 8007b78:	ee22 ba81 	vmul.f32	s22, s5, s2
 8007b7c:	ee72 aa2a 	vadd.f32	s21, s4, s21
 8007b80:	ee33 aa0a 	vadd.f32	s20, s6, s20
 8007b84:	ee24 2aa2 	vmul.f32	s4, s9, s5
 8007b88:	ee29 3a22 	vmul.f32	s6, s18, s5
 8007b8c:	ee73 9aa9 	vadd.f32	s19, s7, s19
 8007b90:	ee35 6a86 	vadd.f32	s12, s11, s12
 8007b94:	ee60 3aa2 	vmul.f32	s7, s1, s5
 8007b98:	ee60 5a22 	vmul.f32	s11, s0, s5
 8007b9c:	ee3f ca0c 	vadd.f32	s24, s30, s24
 8007ba0:	ee7c 7aa7 	vadd.f32	s15, s25, s15
 8007ba4:	ee28 fa22 	vmul.f32	s30, s16, s5
 8007ba8:	ee62 2aa8 	vmul.f32	s5, s5, s17
 8007bac:	ee7e faab 	vadd.f32	s31, s29, s23
 8007bb0:	ee3b ba0d 	vadd.f32	s22, s22, s26
 8007bb4:	ee64 ba01 	vmul.f32	s23, s8, s2
 8007bb8:	ed12 1a09 	vldr	s2, [r2, #-36]	; 0xffffffdc
 8007bbc:	ee24 da84 	vmul.f32	s26, s9, s8
 8007bc0:	ee72 7aa7 	vadd.f32	s15, s5, s15
 8007bc4:	ee72 aa2a 	vadd.f32	s21, s4, s21
 8007bc8:	ee33 aa0a 	vadd.f32	s20, s6, s20
 8007bcc:	ee29 2a04 	vmul.f32	s4, s18, s8
 8007bd0:	ee20 3a84 	vmul.f32	s6, s1, s8
 8007bd4:	ee73 9aa9 	vadd.f32	s19, s7, s19
 8007bd8:	ee35 6a86 	vadd.f32	s12, s11, s12
 8007bdc:	ee60 3a04 	vmul.f32	s7, s0, s8
 8007be0:	ee68 5a04 	vmul.f32	s11, s16, s8
 8007be4:	ee3f ca0c 	vadd.f32	s24, s30, s24
 8007be8:	ee28 7a84 	vmul.f32	s14, s17, s8
 8007bec:	ee64 6a21 	vmul.f32	s13, s8, s3
 8007bf0:	ee33 aa0a 	vadd.f32	s20, s6, s20
 8007bf4:	ee73 9aa9 	vadd.f32	s19, s7, s19
 8007bf8:	ee35 6a86 	vadd.f32	s12, s11, s12
 8007bfc:	ee37 7a0c 	vadd.f32	s14, s14, s24
 8007c00:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8007c04:	ee7b baaf 	vadd.f32	s23, s23, s31
 8007c08:	ee64 4a85 	vmul.f32	s9, s9, s10
 8007c0c:	ee3d ba0b 	vadd.f32	s22, s26, s22
 8007c10:	ee29 4a05 	vmul.f32	s8, s18, s10
 8007c14:	ee72 aa2a 	vadd.f32	s21, s4, s21
 8007c18:	ee60 2a85 	vmul.f32	s5, s1, s10
 8007c1c:	ee20 3a05 	vmul.f32	s6, s0, s10
 8007c20:	ee68 3a05 	vmul.f32	s7, s16, s10
 8007c24:	ee68 5a85 	vmul.f32	s11, s17, s10
 8007c28:	ee21 ca85 	vmul.f32	s24, s3, s10
 8007c2c:	ee65 7a01 	vmul.f32	s15, s10, s2
 8007c30:	ee74 baab 	vadd.f32	s23, s9, s23
 8007c34:	ee34 ba0b 	vadd.f32	s22, s8, s22
 8007c38:	ee72 aaaa 	vadd.f32	s21, s5, s21
 8007c3c:	ee33 aa0a 	vadd.f32	s20, s6, s20
 8007c40:	ee73 9aa9 	vadd.f32	s19, s7, s19
 8007c44:	ee35 6a86 	vadd.f32	s12, s11, s12
 8007c48:	ee3c ca07 	vadd.f32	s24, s24, s14
 8007c4c:	ee77 6aa6 	vadd.f32	s13, s15, s13
 8007c50:	f47f aedb 	bne.w	8007a0a <arm_fir_f32+0x102>
 8007c54:	eb0b 0208 	add.w	r2, fp, r8
 8007c58:	46cb      	mov	fp, r9
 8007c5a:	b3a0      	cbz	r0, 8007cc6 <arm_fir_f32+0x3be>
 8007c5c:	4603      	mov	r3, r0
 8007c5e:	ecfb 7a01 	vldmia	fp!, {s15}
 8007c62:	3b01      	subs	r3, #1
 8007c64:	ecf2 5a01 	vldmia	r2!, {s11}
 8007c68:	ee27 2a89 	vmul.f32	s4, s15, s18
 8007c6c:	ee67 2aa0 	vmul.f32	s5, s15, s1
 8007c70:	ee27 3a80 	vmul.f32	s6, s15, s0
 8007c74:	ee67 3a88 	vmul.f32	s7, s15, s16
 8007c78:	ee27 4aa8 	vmul.f32	s8, s15, s17
 8007c7c:	ee67 4aa1 	vmul.f32	s9, s15, s3
 8007c80:	ee21 5a27 	vmul.f32	s10, s2, s15
 8007c84:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007c88:	eeb0 9a60 	vmov.f32	s18, s1
 8007c8c:	ee7b ba82 	vadd.f32	s23, s23, s4
 8007c90:	eef0 0a40 	vmov.f32	s1, s0
 8007c94:	ee3b ba22 	vadd.f32	s22, s22, s5
 8007c98:	eeb0 0a48 	vmov.f32	s0, s16
 8007c9c:	ee7a aa83 	vadd.f32	s21, s21, s6
 8007ca0:	eeb0 8a68 	vmov.f32	s16, s17
 8007ca4:	ee3a aa23 	vadd.f32	s20, s20, s7
 8007ca8:	eef0 8a61 	vmov.f32	s17, s3
 8007cac:	ee79 9a84 	vadd.f32	s19, s19, s8
 8007cb0:	eef0 1a41 	vmov.f32	s3, s2
 8007cb4:	ee36 6a24 	vadd.f32	s12, s12, s9
 8007cb8:	eeb0 1a65 	vmov.f32	s2, s11
 8007cbc:	ee3c ca05 	vadd.f32	s24, s24, s10
 8007cc0:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8007cc4:	d1cb      	bne.n	8007c5e <arm_fir_f32+0x356>
 8007cc6:	f1be 0e01 	subs.w	lr, lr, #1
 8007cca:	ed44 ba08 	vstr	s23, [r4, #-32]	; 0xffffffe0
 8007cce:	ed04 ba07 	vstr	s22, [r4, #-28]	; 0xffffffe4
 8007cd2:	f106 0620 	add.w	r6, r6, #32
 8007cd6:	ed44 aa06 	vstr	s21, [r4, #-24]	; 0xffffffe8
 8007cda:	f105 0520 	add.w	r5, r5, #32
 8007cde:	ed04 aa05 	vstr	s20, [r4, #-20]	; 0xffffffec
 8007ce2:	468b      	mov	fp, r1
 8007ce4:	ed44 9a04 	vstr	s19, [r4, #-16]
 8007ce8:	f104 0420 	add.w	r4, r4, #32
 8007cec:	ed04 6a0b 	vstr	s12, [r4, #-44]	; 0xffffffd4
 8007cf0:	ed04 ca0a 	vstr	s24, [r4, #-40]	; 0xffffffd8
 8007cf4:	ed44 6a09 	vstr	s13, [r4, #-36]	; 0xffffffdc
 8007cf8:	f47f ae40 	bne.w	800797c <arm_fir_f32+0x74>
 8007cfc:	9b02      	ldr	r3, [sp, #8]
 8007cfe:	9801      	ldr	r0, [sp, #4]
 8007d00:	e9dd 1205 	ldrd	r1, r2, [sp, #20]
 8007d04:	e9dd ca08 	ldrd	ip, sl, [sp, #32]
 8007d08:	eb01 1143 	add.w	r1, r1, r3, lsl #5
 8007d0c:	eb02 1243 	add.w	r2, r2, r3, lsl #5
 8007d10:	eb0a 1a43 	add.w	sl, sl, r3, lsl #5
 8007d14:	eb00 1343 	add.w	r3, r0, r3, lsl #5
 8007d18:	9301      	str	r3, [sp, #4]
 8007d1a:	9b04      	ldr	r3, [sp, #16]
 8007d1c:	f013 0607 	ands.w	r6, r3, #7
 8007d20:	d02a      	beq.n	8007d78 <arm_fir_f32+0x470>
 8007d22:	ea4f 0e86 	mov.w	lr, r6, lsl #2
 8007d26:	9f01      	ldr	r7, [sp, #4]
 8007d28:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8007d2c:	4655      	mov	r5, sl
 8007d2e:	f8dd 8000 	ldr.w	r8, [sp]
 8007d32:	4633      	mov	r3, r6
 8007d34:	4666      	mov	r6, ip
 8007d36:	469c      	mov	ip, r3
 8007d38:	f851 3b04 	ldr.w	r3, [r1], #4
 8007d3c:	f847 3b04 	str.w	r3, [r7], #4
 8007d40:	2e00      	cmp	r6, #0
 8007d42:	d06b      	beq.n	8007e1c <arm_fir_f32+0x514>
 8007d44:	4633      	mov	r3, r6
 8007d46:	4644      	mov	r4, r8
 8007d48:	4628      	mov	r0, r5
 8007d4a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8007d70 <arm_fir_f32+0x468>
 8007d4e:	ecf0 7a01 	vldmia	r0!, {s15}
 8007d52:	3b01      	subs	r3, #1
 8007d54:	ecf4 6a01 	vldmia	r4!, {s13}
 8007d58:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8007d5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007d60:	d1f5      	bne.n	8007d4e <arm_fir_f32+0x446>
 8007d62:	4561      	cmp	r1, ip
 8007d64:	f105 0504 	add.w	r5, r5, #4
 8007d68:	eca2 7a01 	vstmia	r2!, {s14}
 8007d6c:	d1e4      	bne.n	8007d38 <arm_fir_f32+0x430>
 8007d6e:	e001      	b.n	8007d74 <arm_fir_f32+0x46c>
 8007d70:	00000000 	.word	0x00000000
 8007d74:	46b4      	mov	ip, r6
 8007d76:	44f2      	add	sl, lr
 8007d78:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007d7c:	9b03      	ldr	r3, [sp, #12]
 8007d7e:	ea5f 059c 	movs.w	r5, ip, lsr #2
 8007d82:	685c      	ldr	r4, [r3, #4]
 8007d84:	d01e      	beq.n	8007dc4 <arm_fir_f32+0x4bc>
 8007d86:	f10a 0210 	add.w	r2, sl, #16
 8007d8a:	f104 0310 	add.w	r3, r4, #16
 8007d8e:	4629      	mov	r1, r5
 8007d90:	f852 0c10 	ldr.w	r0, [r2, #-16]
 8007d94:	3901      	subs	r1, #1
 8007d96:	f102 0210 	add.w	r2, r2, #16
 8007d9a:	f103 0310 	add.w	r3, r3, #16
 8007d9e:	f843 0c20 	str.w	r0, [r3, #-32]
 8007da2:	f852 0c1c 	ldr.w	r0, [r2, #-28]
 8007da6:	f843 0c1c 	str.w	r0, [r3, #-28]
 8007daa:	f852 0c18 	ldr.w	r0, [r2, #-24]
 8007dae:	f843 0c18 	str.w	r0, [r3, #-24]
 8007db2:	f852 0c14 	ldr.w	r0, [r2, #-20]
 8007db6:	f843 0c14 	str.w	r0, [r3, #-20]
 8007dba:	d1e9      	bne.n	8007d90 <arm_fir_f32+0x488>
 8007dbc:	eb0a 1a05 	add.w	sl, sl, r5, lsl #4
 8007dc0:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 8007dc4:	f01c 0c03 	ands.w	ip, ip, #3
 8007dc8:	d00e      	beq.n	8007de8 <arm_fir_f32+0x4e0>
 8007dca:	f8da 3000 	ldr.w	r3, [sl]
 8007dce:	f1bc 0c01 	subs.w	ip, ip, #1
 8007dd2:	6023      	str	r3, [r4, #0]
 8007dd4:	d008      	beq.n	8007de8 <arm_fir_f32+0x4e0>
 8007dd6:	f8da 3004 	ldr.w	r3, [sl, #4]
 8007dda:	f1bc 0f01 	cmp.w	ip, #1
 8007dde:	6063      	str	r3, [r4, #4]
 8007de0:	d002      	beq.n	8007de8 <arm_fir_f32+0x4e0>
 8007de2:	f8da 3008 	ldr.w	r3, [sl, #8]
 8007de6:	60a3      	str	r3, [r4, #8]
 8007de8:	b00b      	add	sp, #44	; 0x2c
 8007dea:	ecbd 8b10 	vpop	{d8-d15}
 8007dee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007df2:	ed5f 6a21 	vldr	s13, [pc, #-132]	; 8007d70 <arm_fir_f32+0x468>
 8007df6:	f102 0120 	add.w	r1, r2, #32
 8007dfa:	f8dd b000 	ldr.w	fp, [sp]
 8007dfe:	eeb0 ca66 	vmov.f32	s24, s13
 8007e02:	eeb0 6a66 	vmov.f32	s12, s13
 8007e06:	eef0 9a66 	vmov.f32	s19, s13
 8007e0a:	eeb0 aa66 	vmov.f32	s20, s13
 8007e0e:	eef0 aa66 	vmov.f32	s21, s13
 8007e12:	eeb0 ba66 	vmov.f32	s22, s13
 8007e16:	eef0 ba66 	vmov.f32	s23, s13
 8007e1a:	e71e      	b.n	8007c5a <arm_fir_f32+0x352>
 8007e1c:	ed1f 7a2c 	vldr	s14, [pc, #-176]	; 8007d70 <arm_fir_f32+0x468>
 8007e20:	4561      	cmp	r1, ip
 8007e22:	f105 0504 	add.w	r5, r5, #4
 8007e26:	eca2 7a01 	vstmia	r2!, {s14}
 8007e2a:	d185      	bne.n	8007d38 <arm_fir_f32+0x430>
 8007e2c:	e7a2      	b.n	8007d74 <arm_fir_f32+0x46c>
 8007e2e:	bf00      	nop

08007e30 <__errno>:
 8007e30:	4b01      	ldr	r3, [pc, #4]	; (8007e38 <__errno+0x8>)
 8007e32:	6818      	ldr	r0, [r3, #0]
 8007e34:	4770      	bx	lr
 8007e36:	bf00      	nop
 8007e38:	20000180 	.word	0x20000180

08007e3c <__libc_init_array>:
 8007e3c:	b570      	push	{r4, r5, r6, lr}
 8007e3e:	4d0d      	ldr	r5, [pc, #52]	; (8007e74 <__libc_init_array+0x38>)
 8007e40:	4c0d      	ldr	r4, [pc, #52]	; (8007e78 <__libc_init_array+0x3c>)
 8007e42:	1b64      	subs	r4, r4, r5
 8007e44:	10a4      	asrs	r4, r4, #2
 8007e46:	2600      	movs	r6, #0
 8007e48:	42a6      	cmp	r6, r4
 8007e4a:	d109      	bne.n	8007e60 <__libc_init_array+0x24>
 8007e4c:	4d0b      	ldr	r5, [pc, #44]	; (8007e7c <__libc_init_array+0x40>)
 8007e4e:	4c0c      	ldr	r4, [pc, #48]	; (8007e80 <__libc_init_array+0x44>)
 8007e50:	f001 f912 	bl	8009078 <_init>
 8007e54:	1b64      	subs	r4, r4, r5
 8007e56:	10a4      	asrs	r4, r4, #2
 8007e58:	2600      	movs	r6, #0
 8007e5a:	42a6      	cmp	r6, r4
 8007e5c:	d105      	bne.n	8007e6a <__libc_init_array+0x2e>
 8007e5e:	bd70      	pop	{r4, r5, r6, pc}
 8007e60:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e64:	4798      	blx	r3
 8007e66:	3601      	adds	r6, #1
 8007e68:	e7ee      	b.n	8007e48 <__libc_init_array+0xc>
 8007e6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e6e:	4798      	blx	r3
 8007e70:	3601      	adds	r6, #1
 8007e72:	e7f2      	b.n	8007e5a <__libc_init_array+0x1e>
 8007e74:	08009300 	.word	0x08009300
 8007e78:	08009300 	.word	0x08009300
 8007e7c:	08009300 	.word	0x08009300
 8007e80:	08009304 	.word	0x08009304

08007e84 <memcpy>:
 8007e84:	440a      	add	r2, r1
 8007e86:	4291      	cmp	r1, r2
 8007e88:	f100 33ff 	add.w	r3, r0, #4294967295
 8007e8c:	d100      	bne.n	8007e90 <memcpy+0xc>
 8007e8e:	4770      	bx	lr
 8007e90:	b510      	push	{r4, lr}
 8007e92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e96:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e9a:	4291      	cmp	r1, r2
 8007e9c:	d1f9      	bne.n	8007e92 <memcpy+0xe>
 8007e9e:	bd10      	pop	{r4, pc}

08007ea0 <memset>:
 8007ea0:	4402      	add	r2, r0
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	4293      	cmp	r3, r2
 8007ea6:	d100      	bne.n	8007eaa <memset+0xa>
 8007ea8:	4770      	bx	lr
 8007eaa:	f803 1b01 	strb.w	r1, [r3], #1
 8007eae:	e7f9      	b.n	8007ea4 <memset+0x4>

08007eb0 <siprintf>:
 8007eb0:	b40e      	push	{r1, r2, r3}
 8007eb2:	b500      	push	{lr}
 8007eb4:	b09c      	sub	sp, #112	; 0x70
 8007eb6:	ab1d      	add	r3, sp, #116	; 0x74
 8007eb8:	9002      	str	r0, [sp, #8]
 8007eba:	9006      	str	r0, [sp, #24]
 8007ebc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007ec0:	4809      	ldr	r0, [pc, #36]	; (8007ee8 <siprintf+0x38>)
 8007ec2:	9107      	str	r1, [sp, #28]
 8007ec4:	9104      	str	r1, [sp, #16]
 8007ec6:	4909      	ldr	r1, [pc, #36]	; (8007eec <siprintf+0x3c>)
 8007ec8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ecc:	9105      	str	r1, [sp, #20]
 8007ece:	6800      	ldr	r0, [r0, #0]
 8007ed0:	9301      	str	r3, [sp, #4]
 8007ed2:	a902      	add	r1, sp, #8
 8007ed4:	f000 f896 	bl	8008004 <_svfiprintf_r>
 8007ed8:	9b02      	ldr	r3, [sp, #8]
 8007eda:	2200      	movs	r2, #0
 8007edc:	701a      	strb	r2, [r3, #0]
 8007ede:	b01c      	add	sp, #112	; 0x70
 8007ee0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ee4:	b003      	add	sp, #12
 8007ee6:	4770      	bx	lr
 8007ee8:	20000180 	.word	0x20000180
 8007eec:	ffff0208 	.word	0xffff0208

08007ef0 <siscanf>:
 8007ef0:	b40e      	push	{r1, r2, r3}
 8007ef2:	b510      	push	{r4, lr}
 8007ef4:	b09f      	sub	sp, #124	; 0x7c
 8007ef6:	ac21      	add	r4, sp, #132	; 0x84
 8007ef8:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007efc:	f854 2b04 	ldr.w	r2, [r4], #4
 8007f00:	9201      	str	r2, [sp, #4]
 8007f02:	f8ad 101c 	strh.w	r1, [sp, #28]
 8007f06:	9004      	str	r0, [sp, #16]
 8007f08:	9008      	str	r0, [sp, #32]
 8007f0a:	f7f8 f999 	bl	8000240 <strlen>
 8007f0e:	4b0c      	ldr	r3, [pc, #48]	; (8007f40 <siscanf+0x50>)
 8007f10:	9005      	str	r0, [sp, #20]
 8007f12:	9009      	str	r0, [sp, #36]	; 0x24
 8007f14:	930d      	str	r3, [sp, #52]	; 0x34
 8007f16:	480b      	ldr	r0, [pc, #44]	; (8007f44 <siscanf+0x54>)
 8007f18:	9a01      	ldr	r2, [sp, #4]
 8007f1a:	6800      	ldr	r0, [r0, #0]
 8007f1c:	9403      	str	r4, [sp, #12]
 8007f1e:	2300      	movs	r3, #0
 8007f20:	9311      	str	r3, [sp, #68]	; 0x44
 8007f22:	9316      	str	r3, [sp, #88]	; 0x58
 8007f24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007f28:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007f2c:	a904      	add	r1, sp, #16
 8007f2e:	4623      	mov	r3, r4
 8007f30:	f000 f9c2 	bl	80082b8 <__ssvfiscanf_r>
 8007f34:	b01f      	add	sp, #124	; 0x7c
 8007f36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f3a:	b003      	add	sp, #12
 8007f3c:	4770      	bx	lr
 8007f3e:	bf00      	nop
 8007f40:	08007f49 	.word	0x08007f49
 8007f44:	20000180 	.word	0x20000180

08007f48 <__seofread>:
 8007f48:	2000      	movs	r0, #0
 8007f4a:	4770      	bx	lr

08007f4c <__ssputs_r>:
 8007f4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f50:	688e      	ldr	r6, [r1, #8]
 8007f52:	429e      	cmp	r6, r3
 8007f54:	4682      	mov	sl, r0
 8007f56:	460c      	mov	r4, r1
 8007f58:	4690      	mov	r8, r2
 8007f5a:	461f      	mov	r7, r3
 8007f5c:	d838      	bhi.n	8007fd0 <__ssputs_r+0x84>
 8007f5e:	898a      	ldrh	r2, [r1, #12]
 8007f60:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007f64:	d032      	beq.n	8007fcc <__ssputs_r+0x80>
 8007f66:	6825      	ldr	r5, [r4, #0]
 8007f68:	6909      	ldr	r1, [r1, #16]
 8007f6a:	eba5 0901 	sub.w	r9, r5, r1
 8007f6e:	6965      	ldr	r5, [r4, #20]
 8007f70:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f78:	3301      	adds	r3, #1
 8007f7a:	444b      	add	r3, r9
 8007f7c:	106d      	asrs	r5, r5, #1
 8007f7e:	429d      	cmp	r5, r3
 8007f80:	bf38      	it	cc
 8007f82:	461d      	movcc	r5, r3
 8007f84:	0553      	lsls	r3, r2, #21
 8007f86:	d531      	bpl.n	8007fec <__ssputs_r+0xa0>
 8007f88:	4629      	mov	r1, r5
 8007f8a:	f000 ffd1 	bl	8008f30 <_malloc_r>
 8007f8e:	4606      	mov	r6, r0
 8007f90:	b950      	cbnz	r0, 8007fa8 <__ssputs_r+0x5c>
 8007f92:	230c      	movs	r3, #12
 8007f94:	f8ca 3000 	str.w	r3, [sl]
 8007f98:	89a3      	ldrh	r3, [r4, #12]
 8007f9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f9e:	81a3      	strh	r3, [r4, #12]
 8007fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fa8:	6921      	ldr	r1, [r4, #16]
 8007faa:	464a      	mov	r2, r9
 8007fac:	f7ff ff6a 	bl	8007e84 <memcpy>
 8007fb0:	89a3      	ldrh	r3, [r4, #12]
 8007fb2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007fb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fba:	81a3      	strh	r3, [r4, #12]
 8007fbc:	6126      	str	r6, [r4, #16]
 8007fbe:	6165      	str	r5, [r4, #20]
 8007fc0:	444e      	add	r6, r9
 8007fc2:	eba5 0509 	sub.w	r5, r5, r9
 8007fc6:	6026      	str	r6, [r4, #0]
 8007fc8:	60a5      	str	r5, [r4, #8]
 8007fca:	463e      	mov	r6, r7
 8007fcc:	42be      	cmp	r6, r7
 8007fce:	d900      	bls.n	8007fd2 <__ssputs_r+0x86>
 8007fd0:	463e      	mov	r6, r7
 8007fd2:	4632      	mov	r2, r6
 8007fd4:	6820      	ldr	r0, [r4, #0]
 8007fd6:	4641      	mov	r1, r8
 8007fd8:	f000 ff40 	bl	8008e5c <memmove>
 8007fdc:	68a3      	ldr	r3, [r4, #8]
 8007fde:	6822      	ldr	r2, [r4, #0]
 8007fe0:	1b9b      	subs	r3, r3, r6
 8007fe2:	4432      	add	r2, r6
 8007fe4:	60a3      	str	r3, [r4, #8]
 8007fe6:	6022      	str	r2, [r4, #0]
 8007fe8:	2000      	movs	r0, #0
 8007fea:	e7db      	b.n	8007fa4 <__ssputs_r+0x58>
 8007fec:	462a      	mov	r2, r5
 8007fee:	f000 fff9 	bl	8008fe4 <_realloc_r>
 8007ff2:	4606      	mov	r6, r0
 8007ff4:	2800      	cmp	r0, #0
 8007ff6:	d1e1      	bne.n	8007fbc <__ssputs_r+0x70>
 8007ff8:	6921      	ldr	r1, [r4, #16]
 8007ffa:	4650      	mov	r0, sl
 8007ffc:	f000 ff48 	bl	8008e90 <_free_r>
 8008000:	e7c7      	b.n	8007f92 <__ssputs_r+0x46>
	...

08008004 <_svfiprintf_r>:
 8008004:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008008:	4698      	mov	r8, r3
 800800a:	898b      	ldrh	r3, [r1, #12]
 800800c:	061b      	lsls	r3, r3, #24
 800800e:	b09d      	sub	sp, #116	; 0x74
 8008010:	4607      	mov	r7, r0
 8008012:	460d      	mov	r5, r1
 8008014:	4614      	mov	r4, r2
 8008016:	d50e      	bpl.n	8008036 <_svfiprintf_r+0x32>
 8008018:	690b      	ldr	r3, [r1, #16]
 800801a:	b963      	cbnz	r3, 8008036 <_svfiprintf_r+0x32>
 800801c:	2140      	movs	r1, #64	; 0x40
 800801e:	f000 ff87 	bl	8008f30 <_malloc_r>
 8008022:	6028      	str	r0, [r5, #0]
 8008024:	6128      	str	r0, [r5, #16]
 8008026:	b920      	cbnz	r0, 8008032 <_svfiprintf_r+0x2e>
 8008028:	230c      	movs	r3, #12
 800802a:	603b      	str	r3, [r7, #0]
 800802c:	f04f 30ff 	mov.w	r0, #4294967295
 8008030:	e0d1      	b.n	80081d6 <_svfiprintf_r+0x1d2>
 8008032:	2340      	movs	r3, #64	; 0x40
 8008034:	616b      	str	r3, [r5, #20]
 8008036:	2300      	movs	r3, #0
 8008038:	9309      	str	r3, [sp, #36]	; 0x24
 800803a:	2320      	movs	r3, #32
 800803c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008040:	f8cd 800c 	str.w	r8, [sp, #12]
 8008044:	2330      	movs	r3, #48	; 0x30
 8008046:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80081f0 <_svfiprintf_r+0x1ec>
 800804a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800804e:	f04f 0901 	mov.w	r9, #1
 8008052:	4623      	mov	r3, r4
 8008054:	469a      	mov	sl, r3
 8008056:	f813 2b01 	ldrb.w	r2, [r3], #1
 800805a:	b10a      	cbz	r2, 8008060 <_svfiprintf_r+0x5c>
 800805c:	2a25      	cmp	r2, #37	; 0x25
 800805e:	d1f9      	bne.n	8008054 <_svfiprintf_r+0x50>
 8008060:	ebba 0b04 	subs.w	fp, sl, r4
 8008064:	d00b      	beq.n	800807e <_svfiprintf_r+0x7a>
 8008066:	465b      	mov	r3, fp
 8008068:	4622      	mov	r2, r4
 800806a:	4629      	mov	r1, r5
 800806c:	4638      	mov	r0, r7
 800806e:	f7ff ff6d 	bl	8007f4c <__ssputs_r>
 8008072:	3001      	adds	r0, #1
 8008074:	f000 80aa 	beq.w	80081cc <_svfiprintf_r+0x1c8>
 8008078:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800807a:	445a      	add	r2, fp
 800807c:	9209      	str	r2, [sp, #36]	; 0x24
 800807e:	f89a 3000 	ldrb.w	r3, [sl]
 8008082:	2b00      	cmp	r3, #0
 8008084:	f000 80a2 	beq.w	80081cc <_svfiprintf_r+0x1c8>
 8008088:	2300      	movs	r3, #0
 800808a:	f04f 32ff 	mov.w	r2, #4294967295
 800808e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008092:	f10a 0a01 	add.w	sl, sl, #1
 8008096:	9304      	str	r3, [sp, #16]
 8008098:	9307      	str	r3, [sp, #28]
 800809a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800809e:	931a      	str	r3, [sp, #104]	; 0x68
 80080a0:	4654      	mov	r4, sl
 80080a2:	2205      	movs	r2, #5
 80080a4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080a8:	4851      	ldr	r0, [pc, #324]	; (80081f0 <_svfiprintf_r+0x1ec>)
 80080aa:	f7f8 f8d1 	bl	8000250 <memchr>
 80080ae:	9a04      	ldr	r2, [sp, #16]
 80080b0:	b9d8      	cbnz	r0, 80080ea <_svfiprintf_r+0xe6>
 80080b2:	06d0      	lsls	r0, r2, #27
 80080b4:	bf44      	itt	mi
 80080b6:	2320      	movmi	r3, #32
 80080b8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080bc:	0711      	lsls	r1, r2, #28
 80080be:	bf44      	itt	mi
 80080c0:	232b      	movmi	r3, #43	; 0x2b
 80080c2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080c6:	f89a 3000 	ldrb.w	r3, [sl]
 80080ca:	2b2a      	cmp	r3, #42	; 0x2a
 80080cc:	d015      	beq.n	80080fa <_svfiprintf_r+0xf6>
 80080ce:	9a07      	ldr	r2, [sp, #28]
 80080d0:	4654      	mov	r4, sl
 80080d2:	2000      	movs	r0, #0
 80080d4:	f04f 0c0a 	mov.w	ip, #10
 80080d8:	4621      	mov	r1, r4
 80080da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080de:	3b30      	subs	r3, #48	; 0x30
 80080e0:	2b09      	cmp	r3, #9
 80080e2:	d94e      	bls.n	8008182 <_svfiprintf_r+0x17e>
 80080e4:	b1b0      	cbz	r0, 8008114 <_svfiprintf_r+0x110>
 80080e6:	9207      	str	r2, [sp, #28]
 80080e8:	e014      	b.n	8008114 <_svfiprintf_r+0x110>
 80080ea:	eba0 0308 	sub.w	r3, r0, r8
 80080ee:	fa09 f303 	lsl.w	r3, r9, r3
 80080f2:	4313      	orrs	r3, r2
 80080f4:	9304      	str	r3, [sp, #16]
 80080f6:	46a2      	mov	sl, r4
 80080f8:	e7d2      	b.n	80080a0 <_svfiprintf_r+0x9c>
 80080fa:	9b03      	ldr	r3, [sp, #12]
 80080fc:	1d19      	adds	r1, r3, #4
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	9103      	str	r1, [sp, #12]
 8008102:	2b00      	cmp	r3, #0
 8008104:	bfbb      	ittet	lt
 8008106:	425b      	neglt	r3, r3
 8008108:	f042 0202 	orrlt.w	r2, r2, #2
 800810c:	9307      	strge	r3, [sp, #28]
 800810e:	9307      	strlt	r3, [sp, #28]
 8008110:	bfb8      	it	lt
 8008112:	9204      	strlt	r2, [sp, #16]
 8008114:	7823      	ldrb	r3, [r4, #0]
 8008116:	2b2e      	cmp	r3, #46	; 0x2e
 8008118:	d10c      	bne.n	8008134 <_svfiprintf_r+0x130>
 800811a:	7863      	ldrb	r3, [r4, #1]
 800811c:	2b2a      	cmp	r3, #42	; 0x2a
 800811e:	d135      	bne.n	800818c <_svfiprintf_r+0x188>
 8008120:	9b03      	ldr	r3, [sp, #12]
 8008122:	1d1a      	adds	r2, r3, #4
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	9203      	str	r2, [sp, #12]
 8008128:	2b00      	cmp	r3, #0
 800812a:	bfb8      	it	lt
 800812c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008130:	3402      	adds	r4, #2
 8008132:	9305      	str	r3, [sp, #20]
 8008134:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008200 <_svfiprintf_r+0x1fc>
 8008138:	7821      	ldrb	r1, [r4, #0]
 800813a:	2203      	movs	r2, #3
 800813c:	4650      	mov	r0, sl
 800813e:	f7f8 f887 	bl	8000250 <memchr>
 8008142:	b140      	cbz	r0, 8008156 <_svfiprintf_r+0x152>
 8008144:	2340      	movs	r3, #64	; 0x40
 8008146:	eba0 000a 	sub.w	r0, r0, sl
 800814a:	fa03 f000 	lsl.w	r0, r3, r0
 800814e:	9b04      	ldr	r3, [sp, #16]
 8008150:	4303      	orrs	r3, r0
 8008152:	3401      	adds	r4, #1
 8008154:	9304      	str	r3, [sp, #16]
 8008156:	f814 1b01 	ldrb.w	r1, [r4], #1
 800815a:	4826      	ldr	r0, [pc, #152]	; (80081f4 <_svfiprintf_r+0x1f0>)
 800815c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008160:	2206      	movs	r2, #6
 8008162:	f7f8 f875 	bl	8000250 <memchr>
 8008166:	2800      	cmp	r0, #0
 8008168:	d038      	beq.n	80081dc <_svfiprintf_r+0x1d8>
 800816a:	4b23      	ldr	r3, [pc, #140]	; (80081f8 <_svfiprintf_r+0x1f4>)
 800816c:	bb1b      	cbnz	r3, 80081b6 <_svfiprintf_r+0x1b2>
 800816e:	9b03      	ldr	r3, [sp, #12]
 8008170:	3307      	adds	r3, #7
 8008172:	f023 0307 	bic.w	r3, r3, #7
 8008176:	3308      	adds	r3, #8
 8008178:	9303      	str	r3, [sp, #12]
 800817a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800817c:	4433      	add	r3, r6
 800817e:	9309      	str	r3, [sp, #36]	; 0x24
 8008180:	e767      	b.n	8008052 <_svfiprintf_r+0x4e>
 8008182:	fb0c 3202 	mla	r2, ip, r2, r3
 8008186:	460c      	mov	r4, r1
 8008188:	2001      	movs	r0, #1
 800818a:	e7a5      	b.n	80080d8 <_svfiprintf_r+0xd4>
 800818c:	2300      	movs	r3, #0
 800818e:	3401      	adds	r4, #1
 8008190:	9305      	str	r3, [sp, #20]
 8008192:	4619      	mov	r1, r3
 8008194:	f04f 0c0a 	mov.w	ip, #10
 8008198:	4620      	mov	r0, r4
 800819a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800819e:	3a30      	subs	r2, #48	; 0x30
 80081a0:	2a09      	cmp	r2, #9
 80081a2:	d903      	bls.n	80081ac <_svfiprintf_r+0x1a8>
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d0c5      	beq.n	8008134 <_svfiprintf_r+0x130>
 80081a8:	9105      	str	r1, [sp, #20]
 80081aa:	e7c3      	b.n	8008134 <_svfiprintf_r+0x130>
 80081ac:	fb0c 2101 	mla	r1, ip, r1, r2
 80081b0:	4604      	mov	r4, r0
 80081b2:	2301      	movs	r3, #1
 80081b4:	e7f0      	b.n	8008198 <_svfiprintf_r+0x194>
 80081b6:	ab03      	add	r3, sp, #12
 80081b8:	9300      	str	r3, [sp, #0]
 80081ba:	462a      	mov	r2, r5
 80081bc:	4b0f      	ldr	r3, [pc, #60]	; (80081fc <_svfiprintf_r+0x1f8>)
 80081be:	a904      	add	r1, sp, #16
 80081c0:	4638      	mov	r0, r7
 80081c2:	f3af 8000 	nop.w
 80081c6:	1c42      	adds	r2, r0, #1
 80081c8:	4606      	mov	r6, r0
 80081ca:	d1d6      	bne.n	800817a <_svfiprintf_r+0x176>
 80081cc:	89ab      	ldrh	r3, [r5, #12]
 80081ce:	065b      	lsls	r3, r3, #25
 80081d0:	f53f af2c 	bmi.w	800802c <_svfiprintf_r+0x28>
 80081d4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081d6:	b01d      	add	sp, #116	; 0x74
 80081d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081dc:	ab03      	add	r3, sp, #12
 80081de:	9300      	str	r3, [sp, #0]
 80081e0:	462a      	mov	r2, r5
 80081e2:	4b06      	ldr	r3, [pc, #24]	; (80081fc <_svfiprintf_r+0x1f8>)
 80081e4:	a904      	add	r1, sp, #16
 80081e6:	4638      	mov	r0, r7
 80081e8:	f000 fa4c 	bl	8008684 <_printf_i>
 80081ec:	e7eb      	b.n	80081c6 <_svfiprintf_r+0x1c2>
 80081ee:	bf00      	nop
 80081f0:	08009148 	.word	0x08009148
 80081f4:	08009152 	.word	0x08009152
 80081f8:	00000000 	.word	0x00000000
 80081fc:	08007f4d 	.word	0x08007f4d
 8008200:	0800914e 	.word	0x0800914e

08008204 <_sungetc_r>:
 8008204:	b538      	push	{r3, r4, r5, lr}
 8008206:	1c4b      	adds	r3, r1, #1
 8008208:	4614      	mov	r4, r2
 800820a:	d103      	bne.n	8008214 <_sungetc_r+0x10>
 800820c:	f04f 35ff 	mov.w	r5, #4294967295
 8008210:	4628      	mov	r0, r5
 8008212:	bd38      	pop	{r3, r4, r5, pc}
 8008214:	8993      	ldrh	r3, [r2, #12]
 8008216:	f023 0320 	bic.w	r3, r3, #32
 800821a:	8193      	strh	r3, [r2, #12]
 800821c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800821e:	6852      	ldr	r2, [r2, #4]
 8008220:	b2cd      	uxtb	r5, r1
 8008222:	b18b      	cbz	r3, 8008248 <_sungetc_r+0x44>
 8008224:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008226:	4293      	cmp	r3, r2
 8008228:	dd08      	ble.n	800823c <_sungetc_r+0x38>
 800822a:	6823      	ldr	r3, [r4, #0]
 800822c:	1e5a      	subs	r2, r3, #1
 800822e:	6022      	str	r2, [r4, #0]
 8008230:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008234:	6863      	ldr	r3, [r4, #4]
 8008236:	3301      	adds	r3, #1
 8008238:	6063      	str	r3, [r4, #4]
 800823a:	e7e9      	b.n	8008210 <_sungetc_r+0xc>
 800823c:	4621      	mov	r1, r4
 800823e:	f000 fdd1 	bl	8008de4 <__submore>
 8008242:	2800      	cmp	r0, #0
 8008244:	d0f1      	beq.n	800822a <_sungetc_r+0x26>
 8008246:	e7e1      	b.n	800820c <_sungetc_r+0x8>
 8008248:	6921      	ldr	r1, [r4, #16]
 800824a:	6823      	ldr	r3, [r4, #0]
 800824c:	b151      	cbz	r1, 8008264 <_sungetc_r+0x60>
 800824e:	4299      	cmp	r1, r3
 8008250:	d208      	bcs.n	8008264 <_sungetc_r+0x60>
 8008252:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008256:	42a9      	cmp	r1, r5
 8008258:	d104      	bne.n	8008264 <_sungetc_r+0x60>
 800825a:	3b01      	subs	r3, #1
 800825c:	3201      	adds	r2, #1
 800825e:	6023      	str	r3, [r4, #0]
 8008260:	6062      	str	r2, [r4, #4]
 8008262:	e7d5      	b.n	8008210 <_sungetc_r+0xc>
 8008264:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008268:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800826c:	6363      	str	r3, [r4, #52]	; 0x34
 800826e:	2303      	movs	r3, #3
 8008270:	63a3      	str	r3, [r4, #56]	; 0x38
 8008272:	4623      	mov	r3, r4
 8008274:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008278:	6023      	str	r3, [r4, #0]
 800827a:	2301      	movs	r3, #1
 800827c:	e7dc      	b.n	8008238 <_sungetc_r+0x34>

0800827e <__ssrefill_r>:
 800827e:	b510      	push	{r4, lr}
 8008280:	460c      	mov	r4, r1
 8008282:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008284:	b169      	cbz	r1, 80082a2 <__ssrefill_r+0x24>
 8008286:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800828a:	4299      	cmp	r1, r3
 800828c:	d001      	beq.n	8008292 <__ssrefill_r+0x14>
 800828e:	f000 fdff 	bl	8008e90 <_free_r>
 8008292:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008294:	6063      	str	r3, [r4, #4]
 8008296:	2000      	movs	r0, #0
 8008298:	6360      	str	r0, [r4, #52]	; 0x34
 800829a:	b113      	cbz	r3, 80082a2 <__ssrefill_r+0x24>
 800829c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800829e:	6023      	str	r3, [r4, #0]
 80082a0:	bd10      	pop	{r4, pc}
 80082a2:	6923      	ldr	r3, [r4, #16]
 80082a4:	6023      	str	r3, [r4, #0]
 80082a6:	2300      	movs	r3, #0
 80082a8:	6063      	str	r3, [r4, #4]
 80082aa:	89a3      	ldrh	r3, [r4, #12]
 80082ac:	f043 0320 	orr.w	r3, r3, #32
 80082b0:	81a3      	strh	r3, [r4, #12]
 80082b2:	f04f 30ff 	mov.w	r0, #4294967295
 80082b6:	e7f3      	b.n	80082a0 <__ssrefill_r+0x22>

080082b8 <__ssvfiscanf_r>:
 80082b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082bc:	460c      	mov	r4, r1
 80082be:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80082c2:	2100      	movs	r1, #0
 80082c4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80082c8:	49b2      	ldr	r1, [pc, #712]	; (8008594 <__ssvfiscanf_r+0x2dc>)
 80082ca:	91a0      	str	r1, [sp, #640]	; 0x280
 80082cc:	f10d 0804 	add.w	r8, sp, #4
 80082d0:	49b1      	ldr	r1, [pc, #708]	; (8008598 <__ssvfiscanf_r+0x2e0>)
 80082d2:	4fb2      	ldr	r7, [pc, #712]	; (800859c <__ssvfiscanf_r+0x2e4>)
 80082d4:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 80085a0 <__ssvfiscanf_r+0x2e8>
 80082d8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80082dc:	4606      	mov	r6, r0
 80082de:	91a1      	str	r1, [sp, #644]	; 0x284
 80082e0:	9300      	str	r3, [sp, #0]
 80082e2:	f892 a000 	ldrb.w	sl, [r2]
 80082e6:	f1ba 0f00 	cmp.w	sl, #0
 80082ea:	f000 8151 	beq.w	8008590 <__ssvfiscanf_r+0x2d8>
 80082ee:	f81a 3007 	ldrb.w	r3, [sl, r7]
 80082f2:	f013 0308 	ands.w	r3, r3, #8
 80082f6:	f102 0501 	add.w	r5, r2, #1
 80082fa:	d019      	beq.n	8008330 <__ssvfiscanf_r+0x78>
 80082fc:	6863      	ldr	r3, [r4, #4]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	dd0f      	ble.n	8008322 <__ssvfiscanf_r+0x6a>
 8008302:	6823      	ldr	r3, [r4, #0]
 8008304:	781a      	ldrb	r2, [r3, #0]
 8008306:	5cba      	ldrb	r2, [r7, r2]
 8008308:	0712      	lsls	r2, r2, #28
 800830a:	d401      	bmi.n	8008310 <__ssvfiscanf_r+0x58>
 800830c:	462a      	mov	r2, r5
 800830e:	e7e8      	b.n	80082e2 <__ssvfiscanf_r+0x2a>
 8008310:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008312:	3201      	adds	r2, #1
 8008314:	9245      	str	r2, [sp, #276]	; 0x114
 8008316:	6862      	ldr	r2, [r4, #4]
 8008318:	3301      	adds	r3, #1
 800831a:	3a01      	subs	r2, #1
 800831c:	6062      	str	r2, [r4, #4]
 800831e:	6023      	str	r3, [r4, #0]
 8008320:	e7ec      	b.n	80082fc <__ssvfiscanf_r+0x44>
 8008322:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008324:	4621      	mov	r1, r4
 8008326:	4630      	mov	r0, r6
 8008328:	4798      	blx	r3
 800832a:	2800      	cmp	r0, #0
 800832c:	d0e9      	beq.n	8008302 <__ssvfiscanf_r+0x4a>
 800832e:	e7ed      	b.n	800830c <__ssvfiscanf_r+0x54>
 8008330:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8008334:	f040 8083 	bne.w	800843e <__ssvfiscanf_r+0x186>
 8008338:	9341      	str	r3, [sp, #260]	; 0x104
 800833a:	9343      	str	r3, [sp, #268]	; 0x10c
 800833c:	7853      	ldrb	r3, [r2, #1]
 800833e:	2b2a      	cmp	r3, #42	; 0x2a
 8008340:	bf02      	ittt	eq
 8008342:	2310      	moveq	r3, #16
 8008344:	1c95      	addeq	r5, r2, #2
 8008346:	9341      	streq	r3, [sp, #260]	; 0x104
 8008348:	220a      	movs	r2, #10
 800834a:	46ab      	mov	fp, r5
 800834c:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8008350:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8008354:	2b09      	cmp	r3, #9
 8008356:	d91d      	bls.n	8008394 <__ssvfiscanf_r+0xdc>
 8008358:	4891      	ldr	r0, [pc, #580]	; (80085a0 <__ssvfiscanf_r+0x2e8>)
 800835a:	2203      	movs	r2, #3
 800835c:	f7f7 ff78 	bl	8000250 <memchr>
 8008360:	b140      	cbz	r0, 8008374 <__ssvfiscanf_r+0xbc>
 8008362:	2301      	movs	r3, #1
 8008364:	eba0 0009 	sub.w	r0, r0, r9
 8008368:	fa03 f000 	lsl.w	r0, r3, r0
 800836c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800836e:	4318      	orrs	r0, r3
 8008370:	9041      	str	r0, [sp, #260]	; 0x104
 8008372:	465d      	mov	r5, fp
 8008374:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008378:	2b78      	cmp	r3, #120	; 0x78
 800837a:	d806      	bhi.n	800838a <__ssvfiscanf_r+0xd2>
 800837c:	2b57      	cmp	r3, #87	; 0x57
 800837e:	d810      	bhi.n	80083a2 <__ssvfiscanf_r+0xea>
 8008380:	2b25      	cmp	r3, #37	; 0x25
 8008382:	d05c      	beq.n	800843e <__ssvfiscanf_r+0x186>
 8008384:	d856      	bhi.n	8008434 <__ssvfiscanf_r+0x17c>
 8008386:	2b00      	cmp	r3, #0
 8008388:	d074      	beq.n	8008474 <__ssvfiscanf_r+0x1bc>
 800838a:	2303      	movs	r3, #3
 800838c:	9347      	str	r3, [sp, #284]	; 0x11c
 800838e:	230a      	movs	r3, #10
 8008390:	9342      	str	r3, [sp, #264]	; 0x108
 8008392:	e081      	b.n	8008498 <__ssvfiscanf_r+0x1e0>
 8008394:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008396:	fb02 1303 	mla	r3, r2, r3, r1
 800839a:	3b30      	subs	r3, #48	; 0x30
 800839c:	9343      	str	r3, [sp, #268]	; 0x10c
 800839e:	465d      	mov	r5, fp
 80083a0:	e7d3      	b.n	800834a <__ssvfiscanf_r+0x92>
 80083a2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80083a6:	2a20      	cmp	r2, #32
 80083a8:	d8ef      	bhi.n	800838a <__ssvfiscanf_r+0xd2>
 80083aa:	a101      	add	r1, pc, #4	; (adr r1, 80083b0 <__ssvfiscanf_r+0xf8>)
 80083ac:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80083b0:	08008483 	.word	0x08008483
 80083b4:	0800838b 	.word	0x0800838b
 80083b8:	0800838b 	.word	0x0800838b
 80083bc:	080084e1 	.word	0x080084e1
 80083c0:	0800838b 	.word	0x0800838b
 80083c4:	0800838b 	.word	0x0800838b
 80083c8:	0800838b 	.word	0x0800838b
 80083cc:	0800838b 	.word	0x0800838b
 80083d0:	0800838b 	.word	0x0800838b
 80083d4:	0800838b 	.word	0x0800838b
 80083d8:	0800838b 	.word	0x0800838b
 80083dc:	080084f7 	.word	0x080084f7
 80083e0:	080084cd 	.word	0x080084cd
 80083e4:	0800843b 	.word	0x0800843b
 80083e8:	0800843b 	.word	0x0800843b
 80083ec:	0800843b 	.word	0x0800843b
 80083f0:	0800838b 	.word	0x0800838b
 80083f4:	080084d1 	.word	0x080084d1
 80083f8:	0800838b 	.word	0x0800838b
 80083fc:	0800838b 	.word	0x0800838b
 8008400:	0800838b 	.word	0x0800838b
 8008404:	0800838b 	.word	0x0800838b
 8008408:	08008507 	.word	0x08008507
 800840c:	080084d9 	.word	0x080084d9
 8008410:	0800847b 	.word	0x0800847b
 8008414:	0800838b 	.word	0x0800838b
 8008418:	0800838b 	.word	0x0800838b
 800841c:	08008503 	.word	0x08008503
 8008420:	0800838b 	.word	0x0800838b
 8008424:	080084cd 	.word	0x080084cd
 8008428:	0800838b 	.word	0x0800838b
 800842c:	0800838b 	.word	0x0800838b
 8008430:	08008483 	.word	0x08008483
 8008434:	3b45      	subs	r3, #69	; 0x45
 8008436:	2b02      	cmp	r3, #2
 8008438:	d8a7      	bhi.n	800838a <__ssvfiscanf_r+0xd2>
 800843a:	2305      	movs	r3, #5
 800843c:	e02b      	b.n	8008496 <__ssvfiscanf_r+0x1de>
 800843e:	6863      	ldr	r3, [r4, #4]
 8008440:	2b00      	cmp	r3, #0
 8008442:	dd0d      	ble.n	8008460 <__ssvfiscanf_r+0x1a8>
 8008444:	6823      	ldr	r3, [r4, #0]
 8008446:	781a      	ldrb	r2, [r3, #0]
 8008448:	4552      	cmp	r2, sl
 800844a:	f040 80a1 	bne.w	8008590 <__ssvfiscanf_r+0x2d8>
 800844e:	3301      	adds	r3, #1
 8008450:	6862      	ldr	r2, [r4, #4]
 8008452:	6023      	str	r3, [r4, #0]
 8008454:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008456:	3a01      	subs	r2, #1
 8008458:	3301      	adds	r3, #1
 800845a:	6062      	str	r2, [r4, #4]
 800845c:	9345      	str	r3, [sp, #276]	; 0x114
 800845e:	e755      	b.n	800830c <__ssvfiscanf_r+0x54>
 8008460:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008462:	4621      	mov	r1, r4
 8008464:	4630      	mov	r0, r6
 8008466:	4798      	blx	r3
 8008468:	2800      	cmp	r0, #0
 800846a:	d0eb      	beq.n	8008444 <__ssvfiscanf_r+0x18c>
 800846c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800846e:	2800      	cmp	r0, #0
 8008470:	f040 8084 	bne.w	800857c <__ssvfiscanf_r+0x2c4>
 8008474:	f04f 30ff 	mov.w	r0, #4294967295
 8008478:	e086      	b.n	8008588 <__ssvfiscanf_r+0x2d0>
 800847a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800847c:	f042 0220 	orr.w	r2, r2, #32
 8008480:	9241      	str	r2, [sp, #260]	; 0x104
 8008482:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008484:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008488:	9241      	str	r2, [sp, #260]	; 0x104
 800848a:	2210      	movs	r2, #16
 800848c:	2b6f      	cmp	r3, #111	; 0x6f
 800848e:	9242      	str	r2, [sp, #264]	; 0x108
 8008490:	bf34      	ite	cc
 8008492:	2303      	movcc	r3, #3
 8008494:	2304      	movcs	r3, #4
 8008496:	9347      	str	r3, [sp, #284]	; 0x11c
 8008498:	6863      	ldr	r3, [r4, #4]
 800849a:	2b00      	cmp	r3, #0
 800849c:	dd41      	ble.n	8008522 <__ssvfiscanf_r+0x26a>
 800849e:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80084a0:	0659      	lsls	r1, r3, #25
 80084a2:	d404      	bmi.n	80084ae <__ssvfiscanf_r+0x1f6>
 80084a4:	6823      	ldr	r3, [r4, #0]
 80084a6:	781a      	ldrb	r2, [r3, #0]
 80084a8:	5cba      	ldrb	r2, [r7, r2]
 80084aa:	0712      	lsls	r2, r2, #28
 80084ac:	d440      	bmi.n	8008530 <__ssvfiscanf_r+0x278>
 80084ae:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80084b0:	2b02      	cmp	r3, #2
 80084b2:	dc4f      	bgt.n	8008554 <__ssvfiscanf_r+0x29c>
 80084b4:	466b      	mov	r3, sp
 80084b6:	4622      	mov	r2, r4
 80084b8:	a941      	add	r1, sp, #260	; 0x104
 80084ba:	4630      	mov	r0, r6
 80084bc:	f000 fa08 	bl	80088d0 <_scanf_chars>
 80084c0:	2801      	cmp	r0, #1
 80084c2:	d065      	beq.n	8008590 <__ssvfiscanf_r+0x2d8>
 80084c4:	2802      	cmp	r0, #2
 80084c6:	f47f af21 	bne.w	800830c <__ssvfiscanf_r+0x54>
 80084ca:	e7cf      	b.n	800846c <__ssvfiscanf_r+0x1b4>
 80084cc:	220a      	movs	r2, #10
 80084ce:	e7dd      	b.n	800848c <__ssvfiscanf_r+0x1d4>
 80084d0:	2300      	movs	r3, #0
 80084d2:	9342      	str	r3, [sp, #264]	; 0x108
 80084d4:	2303      	movs	r3, #3
 80084d6:	e7de      	b.n	8008496 <__ssvfiscanf_r+0x1de>
 80084d8:	2308      	movs	r3, #8
 80084da:	9342      	str	r3, [sp, #264]	; 0x108
 80084dc:	2304      	movs	r3, #4
 80084de:	e7da      	b.n	8008496 <__ssvfiscanf_r+0x1de>
 80084e0:	4629      	mov	r1, r5
 80084e2:	4640      	mov	r0, r8
 80084e4:	f000 fb40 	bl	8008b68 <__sccl>
 80084e8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80084ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084ee:	9341      	str	r3, [sp, #260]	; 0x104
 80084f0:	4605      	mov	r5, r0
 80084f2:	2301      	movs	r3, #1
 80084f4:	e7cf      	b.n	8008496 <__ssvfiscanf_r+0x1de>
 80084f6:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80084f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084fc:	9341      	str	r3, [sp, #260]	; 0x104
 80084fe:	2300      	movs	r3, #0
 8008500:	e7c9      	b.n	8008496 <__ssvfiscanf_r+0x1de>
 8008502:	2302      	movs	r3, #2
 8008504:	e7c7      	b.n	8008496 <__ssvfiscanf_r+0x1de>
 8008506:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008508:	06c3      	lsls	r3, r0, #27
 800850a:	f53f aeff 	bmi.w	800830c <__ssvfiscanf_r+0x54>
 800850e:	9b00      	ldr	r3, [sp, #0]
 8008510:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008512:	1d19      	adds	r1, r3, #4
 8008514:	9100      	str	r1, [sp, #0]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	07c0      	lsls	r0, r0, #31
 800851a:	bf4c      	ite	mi
 800851c:	801a      	strhmi	r2, [r3, #0]
 800851e:	601a      	strpl	r2, [r3, #0]
 8008520:	e6f4      	b.n	800830c <__ssvfiscanf_r+0x54>
 8008522:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008524:	4621      	mov	r1, r4
 8008526:	4630      	mov	r0, r6
 8008528:	4798      	blx	r3
 800852a:	2800      	cmp	r0, #0
 800852c:	d0b7      	beq.n	800849e <__ssvfiscanf_r+0x1e6>
 800852e:	e79d      	b.n	800846c <__ssvfiscanf_r+0x1b4>
 8008530:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008532:	3201      	adds	r2, #1
 8008534:	9245      	str	r2, [sp, #276]	; 0x114
 8008536:	6862      	ldr	r2, [r4, #4]
 8008538:	3a01      	subs	r2, #1
 800853a:	2a00      	cmp	r2, #0
 800853c:	6062      	str	r2, [r4, #4]
 800853e:	dd02      	ble.n	8008546 <__ssvfiscanf_r+0x28e>
 8008540:	3301      	adds	r3, #1
 8008542:	6023      	str	r3, [r4, #0]
 8008544:	e7ae      	b.n	80084a4 <__ssvfiscanf_r+0x1ec>
 8008546:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008548:	4621      	mov	r1, r4
 800854a:	4630      	mov	r0, r6
 800854c:	4798      	blx	r3
 800854e:	2800      	cmp	r0, #0
 8008550:	d0a8      	beq.n	80084a4 <__ssvfiscanf_r+0x1ec>
 8008552:	e78b      	b.n	800846c <__ssvfiscanf_r+0x1b4>
 8008554:	2b04      	cmp	r3, #4
 8008556:	dc06      	bgt.n	8008566 <__ssvfiscanf_r+0x2ae>
 8008558:	466b      	mov	r3, sp
 800855a:	4622      	mov	r2, r4
 800855c:	a941      	add	r1, sp, #260	; 0x104
 800855e:	4630      	mov	r0, r6
 8008560:	f000 fa0e 	bl	8008980 <_scanf_i>
 8008564:	e7ac      	b.n	80084c0 <__ssvfiscanf_r+0x208>
 8008566:	4b0f      	ldr	r3, [pc, #60]	; (80085a4 <__ssvfiscanf_r+0x2ec>)
 8008568:	2b00      	cmp	r3, #0
 800856a:	f43f aecf 	beq.w	800830c <__ssvfiscanf_r+0x54>
 800856e:	466b      	mov	r3, sp
 8008570:	4622      	mov	r2, r4
 8008572:	a941      	add	r1, sp, #260	; 0x104
 8008574:	4630      	mov	r0, r6
 8008576:	f3af 8000 	nop.w
 800857a:	e7a1      	b.n	80084c0 <__ssvfiscanf_r+0x208>
 800857c:	89a3      	ldrh	r3, [r4, #12]
 800857e:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008582:	bf18      	it	ne
 8008584:	f04f 30ff 	movne.w	r0, #4294967295
 8008588:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800858c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008590:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008592:	e7f9      	b.n	8008588 <__ssvfiscanf_r+0x2d0>
 8008594:	08008205 	.word	0x08008205
 8008598:	0800827f 	.word	0x0800827f
 800859c:	08009197 	.word	0x08009197
 80085a0:	0800914e 	.word	0x0800914e
 80085a4:	00000000 	.word	0x00000000

080085a8 <_printf_common>:
 80085a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085ac:	4616      	mov	r6, r2
 80085ae:	4699      	mov	r9, r3
 80085b0:	688a      	ldr	r2, [r1, #8]
 80085b2:	690b      	ldr	r3, [r1, #16]
 80085b4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80085b8:	4293      	cmp	r3, r2
 80085ba:	bfb8      	it	lt
 80085bc:	4613      	movlt	r3, r2
 80085be:	6033      	str	r3, [r6, #0]
 80085c0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80085c4:	4607      	mov	r7, r0
 80085c6:	460c      	mov	r4, r1
 80085c8:	b10a      	cbz	r2, 80085ce <_printf_common+0x26>
 80085ca:	3301      	adds	r3, #1
 80085cc:	6033      	str	r3, [r6, #0]
 80085ce:	6823      	ldr	r3, [r4, #0]
 80085d0:	0699      	lsls	r1, r3, #26
 80085d2:	bf42      	ittt	mi
 80085d4:	6833      	ldrmi	r3, [r6, #0]
 80085d6:	3302      	addmi	r3, #2
 80085d8:	6033      	strmi	r3, [r6, #0]
 80085da:	6825      	ldr	r5, [r4, #0]
 80085dc:	f015 0506 	ands.w	r5, r5, #6
 80085e0:	d106      	bne.n	80085f0 <_printf_common+0x48>
 80085e2:	f104 0a19 	add.w	sl, r4, #25
 80085e6:	68e3      	ldr	r3, [r4, #12]
 80085e8:	6832      	ldr	r2, [r6, #0]
 80085ea:	1a9b      	subs	r3, r3, r2
 80085ec:	42ab      	cmp	r3, r5
 80085ee:	dc26      	bgt.n	800863e <_printf_common+0x96>
 80085f0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80085f4:	1e13      	subs	r3, r2, #0
 80085f6:	6822      	ldr	r2, [r4, #0]
 80085f8:	bf18      	it	ne
 80085fa:	2301      	movne	r3, #1
 80085fc:	0692      	lsls	r2, r2, #26
 80085fe:	d42b      	bmi.n	8008658 <_printf_common+0xb0>
 8008600:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008604:	4649      	mov	r1, r9
 8008606:	4638      	mov	r0, r7
 8008608:	47c0      	blx	r8
 800860a:	3001      	adds	r0, #1
 800860c:	d01e      	beq.n	800864c <_printf_common+0xa4>
 800860e:	6823      	ldr	r3, [r4, #0]
 8008610:	68e5      	ldr	r5, [r4, #12]
 8008612:	6832      	ldr	r2, [r6, #0]
 8008614:	f003 0306 	and.w	r3, r3, #6
 8008618:	2b04      	cmp	r3, #4
 800861a:	bf08      	it	eq
 800861c:	1aad      	subeq	r5, r5, r2
 800861e:	68a3      	ldr	r3, [r4, #8]
 8008620:	6922      	ldr	r2, [r4, #16]
 8008622:	bf0c      	ite	eq
 8008624:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008628:	2500      	movne	r5, #0
 800862a:	4293      	cmp	r3, r2
 800862c:	bfc4      	itt	gt
 800862e:	1a9b      	subgt	r3, r3, r2
 8008630:	18ed      	addgt	r5, r5, r3
 8008632:	2600      	movs	r6, #0
 8008634:	341a      	adds	r4, #26
 8008636:	42b5      	cmp	r5, r6
 8008638:	d11a      	bne.n	8008670 <_printf_common+0xc8>
 800863a:	2000      	movs	r0, #0
 800863c:	e008      	b.n	8008650 <_printf_common+0xa8>
 800863e:	2301      	movs	r3, #1
 8008640:	4652      	mov	r2, sl
 8008642:	4649      	mov	r1, r9
 8008644:	4638      	mov	r0, r7
 8008646:	47c0      	blx	r8
 8008648:	3001      	adds	r0, #1
 800864a:	d103      	bne.n	8008654 <_printf_common+0xac>
 800864c:	f04f 30ff 	mov.w	r0, #4294967295
 8008650:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008654:	3501      	adds	r5, #1
 8008656:	e7c6      	b.n	80085e6 <_printf_common+0x3e>
 8008658:	18e1      	adds	r1, r4, r3
 800865a:	1c5a      	adds	r2, r3, #1
 800865c:	2030      	movs	r0, #48	; 0x30
 800865e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008662:	4422      	add	r2, r4
 8008664:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008668:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800866c:	3302      	adds	r3, #2
 800866e:	e7c7      	b.n	8008600 <_printf_common+0x58>
 8008670:	2301      	movs	r3, #1
 8008672:	4622      	mov	r2, r4
 8008674:	4649      	mov	r1, r9
 8008676:	4638      	mov	r0, r7
 8008678:	47c0      	blx	r8
 800867a:	3001      	adds	r0, #1
 800867c:	d0e6      	beq.n	800864c <_printf_common+0xa4>
 800867e:	3601      	adds	r6, #1
 8008680:	e7d9      	b.n	8008636 <_printf_common+0x8e>
	...

08008684 <_printf_i>:
 8008684:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008688:	460c      	mov	r4, r1
 800868a:	4691      	mov	r9, r2
 800868c:	7e27      	ldrb	r7, [r4, #24]
 800868e:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008690:	2f78      	cmp	r7, #120	; 0x78
 8008692:	4680      	mov	r8, r0
 8008694:	469a      	mov	sl, r3
 8008696:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800869a:	d807      	bhi.n	80086ac <_printf_i+0x28>
 800869c:	2f62      	cmp	r7, #98	; 0x62
 800869e:	d80a      	bhi.n	80086b6 <_printf_i+0x32>
 80086a0:	2f00      	cmp	r7, #0
 80086a2:	f000 80d8 	beq.w	8008856 <_printf_i+0x1d2>
 80086a6:	2f58      	cmp	r7, #88	; 0x58
 80086a8:	f000 80a3 	beq.w	80087f2 <_printf_i+0x16e>
 80086ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80086b0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80086b4:	e03a      	b.n	800872c <_printf_i+0xa8>
 80086b6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80086ba:	2b15      	cmp	r3, #21
 80086bc:	d8f6      	bhi.n	80086ac <_printf_i+0x28>
 80086be:	a001      	add	r0, pc, #4	; (adr r0, 80086c4 <_printf_i+0x40>)
 80086c0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80086c4:	0800871d 	.word	0x0800871d
 80086c8:	08008731 	.word	0x08008731
 80086cc:	080086ad 	.word	0x080086ad
 80086d0:	080086ad 	.word	0x080086ad
 80086d4:	080086ad 	.word	0x080086ad
 80086d8:	080086ad 	.word	0x080086ad
 80086dc:	08008731 	.word	0x08008731
 80086e0:	080086ad 	.word	0x080086ad
 80086e4:	080086ad 	.word	0x080086ad
 80086e8:	080086ad 	.word	0x080086ad
 80086ec:	080086ad 	.word	0x080086ad
 80086f0:	0800883d 	.word	0x0800883d
 80086f4:	08008761 	.word	0x08008761
 80086f8:	0800881f 	.word	0x0800881f
 80086fc:	080086ad 	.word	0x080086ad
 8008700:	080086ad 	.word	0x080086ad
 8008704:	0800885f 	.word	0x0800885f
 8008708:	080086ad 	.word	0x080086ad
 800870c:	08008761 	.word	0x08008761
 8008710:	080086ad 	.word	0x080086ad
 8008714:	080086ad 	.word	0x080086ad
 8008718:	08008827 	.word	0x08008827
 800871c:	680b      	ldr	r3, [r1, #0]
 800871e:	1d1a      	adds	r2, r3, #4
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	600a      	str	r2, [r1, #0]
 8008724:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008728:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800872c:	2301      	movs	r3, #1
 800872e:	e0a3      	b.n	8008878 <_printf_i+0x1f4>
 8008730:	6825      	ldr	r5, [r4, #0]
 8008732:	6808      	ldr	r0, [r1, #0]
 8008734:	062e      	lsls	r6, r5, #24
 8008736:	f100 0304 	add.w	r3, r0, #4
 800873a:	d50a      	bpl.n	8008752 <_printf_i+0xce>
 800873c:	6805      	ldr	r5, [r0, #0]
 800873e:	600b      	str	r3, [r1, #0]
 8008740:	2d00      	cmp	r5, #0
 8008742:	da03      	bge.n	800874c <_printf_i+0xc8>
 8008744:	232d      	movs	r3, #45	; 0x2d
 8008746:	426d      	negs	r5, r5
 8008748:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800874c:	485e      	ldr	r0, [pc, #376]	; (80088c8 <_printf_i+0x244>)
 800874e:	230a      	movs	r3, #10
 8008750:	e019      	b.n	8008786 <_printf_i+0x102>
 8008752:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008756:	6805      	ldr	r5, [r0, #0]
 8008758:	600b      	str	r3, [r1, #0]
 800875a:	bf18      	it	ne
 800875c:	b22d      	sxthne	r5, r5
 800875e:	e7ef      	b.n	8008740 <_printf_i+0xbc>
 8008760:	680b      	ldr	r3, [r1, #0]
 8008762:	6825      	ldr	r5, [r4, #0]
 8008764:	1d18      	adds	r0, r3, #4
 8008766:	6008      	str	r0, [r1, #0]
 8008768:	0628      	lsls	r0, r5, #24
 800876a:	d501      	bpl.n	8008770 <_printf_i+0xec>
 800876c:	681d      	ldr	r5, [r3, #0]
 800876e:	e002      	b.n	8008776 <_printf_i+0xf2>
 8008770:	0669      	lsls	r1, r5, #25
 8008772:	d5fb      	bpl.n	800876c <_printf_i+0xe8>
 8008774:	881d      	ldrh	r5, [r3, #0]
 8008776:	4854      	ldr	r0, [pc, #336]	; (80088c8 <_printf_i+0x244>)
 8008778:	2f6f      	cmp	r7, #111	; 0x6f
 800877a:	bf0c      	ite	eq
 800877c:	2308      	moveq	r3, #8
 800877e:	230a      	movne	r3, #10
 8008780:	2100      	movs	r1, #0
 8008782:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008786:	6866      	ldr	r6, [r4, #4]
 8008788:	60a6      	str	r6, [r4, #8]
 800878a:	2e00      	cmp	r6, #0
 800878c:	bfa2      	ittt	ge
 800878e:	6821      	ldrge	r1, [r4, #0]
 8008790:	f021 0104 	bicge.w	r1, r1, #4
 8008794:	6021      	strge	r1, [r4, #0]
 8008796:	b90d      	cbnz	r5, 800879c <_printf_i+0x118>
 8008798:	2e00      	cmp	r6, #0
 800879a:	d04d      	beq.n	8008838 <_printf_i+0x1b4>
 800879c:	4616      	mov	r6, r2
 800879e:	fbb5 f1f3 	udiv	r1, r5, r3
 80087a2:	fb03 5711 	mls	r7, r3, r1, r5
 80087a6:	5dc7      	ldrb	r7, [r0, r7]
 80087a8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80087ac:	462f      	mov	r7, r5
 80087ae:	42bb      	cmp	r3, r7
 80087b0:	460d      	mov	r5, r1
 80087b2:	d9f4      	bls.n	800879e <_printf_i+0x11a>
 80087b4:	2b08      	cmp	r3, #8
 80087b6:	d10b      	bne.n	80087d0 <_printf_i+0x14c>
 80087b8:	6823      	ldr	r3, [r4, #0]
 80087ba:	07df      	lsls	r7, r3, #31
 80087bc:	d508      	bpl.n	80087d0 <_printf_i+0x14c>
 80087be:	6923      	ldr	r3, [r4, #16]
 80087c0:	6861      	ldr	r1, [r4, #4]
 80087c2:	4299      	cmp	r1, r3
 80087c4:	bfde      	ittt	le
 80087c6:	2330      	movle	r3, #48	; 0x30
 80087c8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80087cc:	f106 36ff 	addle.w	r6, r6, #4294967295
 80087d0:	1b92      	subs	r2, r2, r6
 80087d2:	6122      	str	r2, [r4, #16]
 80087d4:	f8cd a000 	str.w	sl, [sp]
 80087d8:	464b      	mov	r3, r9
 80087da:	aa03      	add	r2, sp, #12
 80087dc:	4621      	mov	r1, r4
 80087de:	4640      	mov	r0, r8
 80087e0:	f7ff fee2 	bl	80085a8 <_printf_common>
 80087e4:	3001      	adds	r0, #1
 80087e6:	d14c      	bne.n	8008882 <_printf_i+0x1fe>
 80087e8:	f04f 30ff 	mov.w	r0, #4294967295
 80087ec:	b004      	add	sp, #16
 80087ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087f2:	4835      	ldr	r0, [pc, #212]	; (80088c8 <_printf_i+0x244>)
 80087f4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80087f8:	6823      	ldr	r3, [r4, #0]
 80087fa:	680e      	ldr	r6, [r1, #0]
 80087fc:	061f      	lsls	r7, r3, #24
 80087fe:	f856 5b04 	ldr.w	r5, [r6], #4
 8008802:	600e      	str	r6, [r1, #0]
 8008804:	d514      	bpl.n	8008830 <_printf_i+0x1ac>
 8008806:	07d9      	lsls	r1, r3, #31
 8008808:	bf44      	itt	mi
 800880a:	f043 0320 	orrmi.w	r3, r3, #32
 800880e:	6023      	strmi	r3, [r4, #0]
 8008810:	b91d      	cbnz	r5, 800881a <_printf_i+0x196>
 8008812:	6823      	ldr	r3, [r4, #0]
 8008814:	f023 0320 	bic.w	r3, r3, #32
 8008818:	6023      	str	r3, [r4, #0]
 800881a:	2310      	movs	r3, #16
 800881c:	e7b0      	b.n	8008780 <_printf_i+0xfc>
 800881e:	6823      	ldr	r3, [r4, #0]
 8008820:	f043 0320 	orr.w	r3, r3, #32
 8008824:	6023      	str	r3, [r4, #0]
 8008826:	2378      	movs	r3, #120	; 0x78
 8008828:	4828      	ldr	r0, [pc, #160]	; (80088cc <_printf_i+0x248>)
 800882a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800882e:	e7e3      	b.n	80087f8 <_printf_i+0x174>
 8008830:	065e      	lsls	r6, r3, #25
 8008832:	bf48      	it	mi
 8008834:	b2ad      	uxthmi	r5, r5
 8008836:	e7e6      	b.n	8008806 <_printf_i+0x182>
 8008838:	4616      	mov	r6, r2
 800883a:	e7bb      	b.n	80087b4 <_printf_i+0x130>
 800883c:	680b      	ldr	r3, [r1, #0]
 800883e:	6826      	ldr	r6, [r4, #0]
 8008840:	6960      	ldr	r0, [r4, #20]
 8008842:	1d1d      	adds	r5, r3, #4
 8008844:	600d      	str	r5, [r1, #0]
 8008846:	0635      	lsls	r5, r6, #24
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	d501      	bpl.n	8008850 <_printf_i+0x1cc>
 800884c:	6018      	str	r0, [r3, #0]
 800884e:	e002      	b.n	8008856 <_printf_i+0x1d2>
 8008850:	0671      	lsls	r1, r6, #25
 8008852:	d5fb      	bpl.n	800884c <_printf_i+0x1c8>
 8008854:	8018      	strh	r0, [r3, #0]
 8008856:	2300      	movs	r3, #0
 8008858:	6123      	str	r3, [r4, #16]
 800885a:	4616      	mov	r6, r2
 800885c:	e7ba      	b.n	80087d4 <_printf_i+0x150>
 800885e:	680b      	ldr	r3, [r1, #0]
 8008860:	1d1a      	adds	r2, r3, #4
 8008862:	600a      	str	r2, [r1, #0]
 8008864:	681e      	ldr	r6, [r3, #0]
 8008866:	6862      	ldr	r2, [r4, #4]
 8008868:	2100      	movs	r1, #0
 800886a:	4630      	mov	r0, r6
 800886c:	f7f7 fcf0 	bl	8000250 <memchr>
 8008870:	b108      	cbz	r0, 8008876 <_printf_i+0x1f2>
 8008872:	1b80      	subs	r0, r0, r6
 8008874:	6060      	str	r0, [r4, #4]
 8008876:	6863      	ldr	r3, [r4, #4]
 8008878:	6123      	str	r3, [r4, #16]
 800887a:	2300      	movs	r3, #0
 800887c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008880:	e7a8      	b.n	80087d4 <_printf_i+0x150>
 8008882:	6923      	ldr	r3, [r4, #16]
 8008884:	4632      	mov	r2, r6
 8008886:	4649      	mov	r1, r9
 8008888:	4640      	mov	r0, r8
 800888a:	47d0      	blx	sl
 800888c:	3001      	adds	r0, #1
 800888e:	d0ab      	beq.n	80087e8 <_printf_i+0x164>
 8008890:	6823      	ldr	r3, [r4, #0]
 8008892:	079b      	lsls	r3, r3, #30
 8008894:	d413      	bmi.n	80088be <_printf_i+0x23a>
 8008896:	68e0      	ldr	r0, [r4, #12]
 8008898:	9b03      	ldr	r3, [sp, #12]
 800889a:	4298      	cmp	r0, r3
 800889c:	bfb8      	it	lt
 800889e:	4618      	movlt	r0, r3
 80088a0:	e7a4      	b.n	80087ec <_printf_i+0x168>
 80088a2:	2301      	movs	r3, #1
 80088a4:	4632      	mov	r2, r6
 80088a6:	4649      	mov	r1, r9
 80088a8:	4640      	mov	r0, r8
 80088aa:	47d0      	blx	sl
 80088ac:	3001      	adds	r0, #1
 80088ae:	d09b      	beq.n	80087e8 <_printf_i+0x164>
 80088b0:	3501      	adds	r5, #1
 80088b2:	68e3      	ldr	r3, [r4, #12]
 80088b4:	9903      	ldr	r1, [sp, #12]
 80088b6:	1a5b      	subs	r3, r3, r1
 80088b8:	42ab      	cmp	r3, r5
 80088ba:	dcf2      	bgt.n	80088a2 <_printf_i+0x21e>
 80088bc:	e7eb      	b.n	8008896 <_printf_i+0x212>
 80088be:	2500      	movs	r5, #0
 80088c0:	f104 0619 	add.w	r6, r4, #25
 80088c4:	e7f5      	b.n	80088b2 <_printf_i+0x22e>
 80088c6:	bf00      	nop
 80088c8:	08009159 	.word	0x08009159
 80088cc:	0800916a 	.word	0x0800916a

080088d0 <_scanf_chars>:
 80088d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088d4:	4615      	mov	r5, r2
 80088d6:	688a      	ldr	r2, [r1, #8]
 80088d8:	4680      	mov	r8, r0
 80088da:	460c      	mov	r4, r1
 80088dc:	b932      	cbnz	r2, 80088ec <_scanf_chars+0x1c>
 80088de:	698a      	ldr	r2, [r1, #24]
 80088e0:	2a00      	cmp	r2, #0
 80088e2:	bf0c      	ite	eq
 80088e4:	2201      	moveq	r2, #1
 80088e6:	f04f 32ff 	movne.w	r2, #4294967295
 80088ea:	608a      	str	r2, [r1, #8]
 80088ec:	6822      	ldr	r2, [r4, #0]
 80088ee:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800897c <_scanf_chars+0xac>
 80088f2:	06d1      	lsls	r1, r2, #27
 80088f4:	bf5f      	itttt	pl
 80088f6:	681a      	ldrpl	r2, [r3, #0]
 80088f8:	1d11      	addpl	r1, r2, #4
 80088fa:	6019      	strpl	r1, [r3, #0]
 80088fc:	6816      	ldrpl	r6, [r2, #0]
 80088fe:	2700      	movs	r7, #0
 8008900:	69a0      	ldr	r0, [r4, #24]
 8008902:	b188      	cbz	r0, 8008928 <_scanf_chars+0x58>
 8008904:	2801      	cmp	r0, #1
 8008906:	d107      	bne.n	8008918 <_scanf_chars+0x48>
 8008908:	682b      	ldr	r3, [r5, #0]
 800890a:	781a      	ldrb	r2, [r3, #0]
 800890c:	6963      	ldr	r3, [r4, #20]
 800890e:	5c9b      	ldrb	r3, [r3, r2]
 8008910:	b953      	cbnz	r3, 8008928 <_scanf_chars+0x58>
 8008912:	bb27      	cbnz	r7, 800895e <_scanf_chars+0x8e>
 8008914:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008918:	2802      	cmp	r0, #2
 800891a:	d120      	bne.n	800895e <_scanf_chars+0x8e>
 800891c:	682b      	ldr	r3, [r5, #0]
 800891e:	781b      	ldrb	r3, [r3, #0]
 8008920:	f813 3009 	ldrb.w	r3, [r3, r9]
 8008924:	071b      	lsls	r3, r3, #28
 8008926:	d41a      	bmi.n	800895e <_scanf_chars+0x8e>
 8008928:	6823      	ldr	r3, [r4, #0]
 800892a:	06da      	lsls	r2, r3, #27
 800892c:	bf5e      	ittt	pl
 800892e:	682b      	ldrpl	r3, [r5, #0]
 8008930:	781b      	ldrbpl	r3, [r3, #0]
 8008932:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008936:	682a      	ldr	r2, [r5, #0]
 8008938:	686b      	ldr	r3, [r5, #4]
 800893a:	3201      	adds	r2, #1
 800893c:	602a      	str	r2, [r5, #0]
 800893e:	68a2      	ldr	r2, [r4, #8]
 8008940:	3b01      	subs	r3, #1
 8008942:	3a01      	subs	r2, #1
 8008944:	606b      	str	r3, [r5, #4]
 8008946:	3701      	adds	r7, #1
 8008948:	60a2      	str	r2, [r4, #8]
 800894a:	b142      	cbz	r2, 800895e <_scanf_chars+0x8e>
 800894c:	2b00      	cmp	r3, #0
 800894e:	dcd7      	bgt.n	8008900 <_scanf_chars+0x30>
 8008950:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008954:	4629      	mov	r1, r5
 8008956:	4640      	mov	r0, r8
 8008958:	4798      	blx	r3
 800895a:	2800      	cmp	r0, #0
 800895c:	d0d0      	beq.n	8008900 <_scanf_chars+0x30>
 800895e:	6823      	ldr	r3, [r4, #0]
 8008960:	f013 0310 	ands.w	r3, r3, #16
 8008964:	d105      	bne.n	8008972 <_scanf_chars+0xa2>
 8008966:	68e2      	ldr	r2, [r4, #12]
 8008968:	3201      	adds	r2, #1
 800896a:	60e2      	str	r2, [r4, #12]
 800896c:	69a2      	ldr	r2, [r4, #24]
 800896e:	b102      	cbz	r2, 8008972 <_scanf_chars+0xa2>
 8008970:	7033      	strb	r3, [r6, #0]
 8008972:	6923      	ldr	r3, [r4, #16]
 8008974:	441f      	add	r7, r3
 8008976:	6127      	str	r7, [r4, #16]
 8008978:	2000      	movs	r0, #0
 800897a:	e7cb      	b.n	8008914 <_scanf_chars+0x44>
 800897c:	08009197 	.word	0x08009197

08008980 <_scanf_i>:
 8008980:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008984:	4698      	mov	r8, r3
 8008986:	4b74      	ldr	r3, [pc, #464]	; (8008b58 <_scanf_i+0x1d8>)
 8008988:	460c      	mov	r4, r1
 800898a:	4682      	mov	sl, r0
 800898c:	4616      	mov	r6, r2
 800898e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008992:	b087      	sub	sp, #28
 8008994:	ab03      	add	r3, sp, #12
 8008996:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800899a:	4b70      	ldr	r3, [pc, #448]	; (8008b5c <_scanf_i+0x1dc>)
 800899c:	69a1      	ldr	r1, [r4, #24]
 800899e:	4a70      	ldr	r2, [pc, #448]	; (8008b60 <_scanf_i+0x1e0>)
 80089a0:	2903      	cmp	r1, #3
 80089a2:	bf18      	it	ne
 80089a4:	461a      	movne	r2, r3
 80089a6:	68a3      	ldr	r3, [r4, #8]
 80089a8:	9201      	str	r2, [sp, #4]
 80089aa:	1e5a      	subs	r2, r3, #1
 80089ac:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80089b0:	bf88      	it	hi
 80089b2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80089b6:	4627      	mov	r7, r4
 80089b8:	bf82      	ittt	hi
 80089ba:	eb03 0905 	addhi.w	r9, r3, r5
 80089be:	f240 135d 	movwhi	r3, #349	; 0x15d
 80089c2:	60a3      	strhi	r3, [r4, #8]
 80089c4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80089c8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80089cc:	bf98      	it	ls
 80089ce:	f04f 0900 	movls.w	r9, #0
 80089d2:	6023      	str	r3, [r4, #0]
 80089d4:	463d      	mov	r5, r7
 80089d6:	f04f 0b00 	mov.w	fp, #0
 80089da:	6831      	ldr	r1, [r6, #0]
 80089dc:	ab03      	add	r3, sp, #12
 80089de:	7809      	ldrb	r1, [r1, #0]
 80089e0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80089e4:	2202      	movs	r2, #2
 80089e6:	f7f7 fc33 	bl	8000250 <memchr>
 80089ea:	b328      	cbz	r0, 8008a38 <_scanf_i+0xb8>
 80089ec:	f1bb 0f01 	cmp.w	fp, #1
 80089f0:	d159      	bne.n	8008aa6 <_scanf_i+0x126>
 80089f2:	6862      	ldr	r2, [r4, #4]
 80089f4:	b92a      	cbnz	r2, 8008a02 <_scanf_i+0x82>
 80089f6:	6822      	ldr	r2, [r4, #0]
 80089f8:	2308      	movs	r3, #8
 80089fa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80089fe:	6063      	str	r3, [r4, #4]
 8008a00:	6022      	str	r2, [r4, #0]
 8008a02:	6822      	ldr	r2, [r4, #0]
 8008a04:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008a08:	6022      	str	r2, [r4, #0]
 8008a0a:	68a2      	ldr	r2, [r4, #8]
 8008a0c:	1e51      	subs	r1, r2, #1
 8008a0e:	60a1      	str	r1, [r4, #8]
 8008a10:	b192      	cbz	r2, 8008a38 <_scanf_i+0xb8>
 8008a12:	6832      	ldr	r2, [r6, #0]
 8008a14:	1c51      	adds	r1, r2, #1
 8008a16:	6031      	str	r1, [r6, #0]
 8008a18:	7812      	ldrb	r2, [r2, #0]
 8008a1a:	f805 2b01 	strb.w	r2, [r5], #1
 8008a1e:	6872      	ldr	r2, [r6, #4]
 8008a20:	3a01      	subs	r2, #1
 8008a22:	2a00      	cmp	r2, #0
 8008a24:	6072      	str	r2, [r6, #4]
 8008a26:	dc07      	bgt.n	8008a38 <_scanf_i+0xb8>
 8008a28:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8008a2c:	4631      	mov	r1, r6
 8008a2e:	4650      	mov	r0, sl
 8008a30:	4790      	blx	r2
 8008a32:	2800      	cmp	r0, #0
 8008a34:	f040 8085 	bne.w	8008b42 <_scanf_i+0x1c2>
 8008a38:	f10b 0b01 	add.w	fp, fp, #1
 8008a3c:	f1bb 0f03 	cmp.w	fp, #3
 8008a40:	d1cb      	bne.n	80089da <_scanf_i+0x5a>
 8008a42:	6863      	ldr	r3, [r4, #4]
 8008a44:	b90b      	cbnz	r3, 8008a4a <_scanf_i+0xca>
 8008a46:	230a      	movs	r3, #10
 8008a48:	6063      	str	r3, [r4, #4]
 8008a4a:	6863      	ldr	r3, [r4, #4]
 8008a4c:	4945      	ldr	r1, [pc, #276]	; (8008b64 <_scanf_i+0x1e4>)
 8008a4e:	6960      	ldr	r0, [r4, #20]
 8008a50:	1ac9      	subs	r1, r1, r3
 8008a52:	f000 f889 	bl	8008b68 <__sccl>
 8008a56:	f04f 0b00 	mov.w	fp, #0
 8008a5a:	68a3      	ldr	r3, [r4, #8]
 8008a5c:	6822      	ldr	r2, [r4, #0]
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d03d      	beq.n	8008ade <_scanf_i+0x15e>
 8008a62:	6831      	ldr	r1, [r6, #0]
 8008a64:	6960      	ldr	r0, [r4, #20]
 8008a66:	f891 c000 	ldrb.w	ip, [r1]
 8008a6a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008a6e:	2800      	cmp	r0, #0
 8008a70:	d035      	beq.n	8008ade <_scanf_i+0x15e>
 8008a72:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008a76:	d124      	bne.n	8008ac2 <_scanf_i+0x142>
 8008a78:	0510      	lsls	r0, r2, #20
 8008a7a:	d522      	bpl.n	8008ac2 <_scanf_i+0x142>
 8008a7c:	f10b 0b01 	add.w	fp, fp, #1
 8008a80:	f1b9 0f00 	cmp.w	r9, #0
 8008a84:	d003      	beq.n	8008a8e <_scanf_i+0x10e>
 8008a86:	3301      	adds	r3, #1
 8008a88:	f109 39ff 	add.w	r9, r9, #4294967295
 8008a8c:	60a3      	str	r3, [r4, #8]
 8008a8e:	6873      	ldr	r3, [r6, #4]
 8008a90:	3b01      	subs	r3, #1
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	6073      	str	r3, [r6, #4]
 8008a96:	dd1b      	ble.n	8008ad0 <_scanf_i+0x150>
 8008a98:	6833      	ldr	r3, [r6, #0]
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	6033      	str	r3, [r6, #0]
 8008a9e:	68a3      	ldr	r3, [r4, #8]
 8008aa0:	3b01      	subs	r3, #1
 8008aa2:	60a3      	str	r3, [r4, #8]
 8008aa4:	e7d9      	b.n	8008a5a <_scanf_i+0xda>
 8008aa6:	f1bb 0f02 	cmp.w	fp, #2
 8008aaa:	d1ae      	bne.n	8008a0a <_scanf_i+0x8a>
 8008aac:	6822      	ldr	r2, [r4, #0]
 8008aae:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008ab2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008ab6:	d1bf      	bne.n	8008a38 <_scanf_i+0xb8>
 8008ab8:	2310      	movs	r3, #16
 8008aba:	6063      	str	r3, [r4, #4]
 8008abc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ac0:	e7a2      	b.n	8008a08 <_scanf_i+0x88>
 8008ac2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008ac6:	6022      	str	r2, [r4, #0]
 8008ac8:	780b      	ldrb	r3, [r1, #0]
 8008aca:	f805 3b01 	strb.w	r3, [r5], #1
 8008ace:	e7de      	b.n	8008a8e <_scanf_i+0x10e>
 8008ad0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008ad4:	4631      	mov	r1, r6
 8008ad6:	4650      	mov	r0, sl
 8008ad8:	4798      	blx	r3
 8008ada:	2800      	cmp	r0, #0
 8008adc:	d0df      	beq.n	8008a9e <_scanf_i+0x11e>
 8008ade:	6823      	ldr	r3, [r4, #0]
 8008ae0:	05d9      	lsls	r1, r3, #23
 8008ae2:	d50d      	bpl.n	8008b00 <_scanf_i+0x180>
 8008ae4:	42bd      	cmp	r5, r7
 8008ae6:	d909      	bls.n	8008afc <_scanf_i+0x17c>
 8008ae8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008aec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008af0:	4632      	mov	r2, r6
 8008af2:	4650      	mov	r0, sl
 8008af4:	4798      	blx	r3
 8008af6:	f105 39ff 	add.w	r9, r5, #4294967295
 8008afa:	464d      	mov	r5, r9
 8008afc:	42bd      	cmp	r5, r7
 8008afe:	d028      	beq.n	8008b52 <_scanf_i+0x1d2>
 8008b00:	6822      	ldr	r2, [r4, #0]
 8008b02:	f012 0210 	ands.w	r2, r2, #16
 8008b06:	d113      	bne.n	8008b30 <_scanf_i+0x1b0>
 8008b08:	702a      	strb	r2, [r5, #0]
 8008b0a:	6863      	ldr	r3, [r4, #4]
 8008b0c:	9e01      	ldr	r6, [sp, #4]
 8008b0e:	4639      	mov	r1, r7
 8008b10:	4650      	mov	r0, sl
 8008b12:	47b0      	blx	r6
 8008b14:	f8d8 3000 	ldr.w	r3, [r8]
 8008b18:	6821      	ldr	r1, [r4, #0]
 8008b1a:	1d1a      	adds	r2, r3, #4
 8008b1c:	f8c8 2000 	str.w	r2, [r8]
 8008b20:	f011 0f20 	tst.w	r1, #32
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	d00f      	beq.n	8008b48 <_scanf_i+0x1c8>
 8008b28:	6018      	str	r0, [r3, #0]
 8008b2a:	68e3      	ldr	r3, [r4, #12]
 8008b2c:	3301      	adds	r3, #1
 8008b2e:	60e3      	str	r3, [r4, #12]
 8008b30:	1bed      	subs	r5, r5, r7
 8008b32:	44ab      	add	fp, r5
 8008b34:	6925      	ldr	r5, [r4, #16]
 8008b36:	445d      	add	r5, fp
 8008b38:	6125      	str	r5, [r4, #16]
 8008b3a:	2000      	movs	r0, #0
 8008b3c:	b007      	add	sp, #28
 8008b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b42:	f04f 0b00 	mov.w	fp, #0
 8008b46:	e7ca      	b.n	8008ade <_scanf_i+0x15e>
 8008b48:	07ca      	lsls	r2, r1, #31
 8008b4a:	bf4c      	ite	mi
 8008b4c:	8018      	strhmi	r0, [r3, #0]
 8008b4e:	6018      	strpl	r0, [r3, #0]
 8008b50:	e7eb      	b.n	8008b2a <_scanf_i+0x1aa>
 8008b52:	2001      	movs	r0, #1
 8008b54:	e7f2      	b.n	8008b3c <_scanf_i+0x1bc>
 8008b56:	bf00      	nop
 8008b58:	08009124 	.word	0x08009124
 8008b5c:	08008de1 	.word	0x08008de1
 8008b60:	08008ce5 	.word	0x08008ce5
 8008b64:	08009194 	.word	0x08009194

08008b68 <__sccl>:
 8008b68:	b570      	push	{r4, r5, r6, lr}
 8008b6a:	780b      	ldrb	r3, [r1, #0]
 8008b6c:	4604      	mov	r4, r0
 8008b6e:	2b5e      	cmp	r3, #94	; 0x5e
 8008b70:	bf0b      	itete	eq
 8008b72:	784b      	ldrbeq	r3, [r1, #1]
 8008b74:	1c48      	addne	r0, r1, #1
 8008b76:	1c88      	addeq	r0, r1, #2
 8008b78:	2200      	movne	r2, #0
 8008b7a:	bf08      	it	eq
 8008b7c:	2201      	moveq	r2, #1
 8008b7e:	1e61      	subs	r1, r4, #1
 8008b80:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008b84:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008b88:	42a9      	cmp	r1, r5
 8008b8a:	d1fb      	bne.n	8008b84 <__sccl+0x1c>
 8008b8c:	b90b      	cbnz	r3, 8008b92 <__sccl+0x2a>
 8008b8e:	3801      	subs	r0, #1
 8008b90:	bd70      	pop	{r4, r5, r6, pc}
 8008b92:	f082 0101 	eor.w	r1, r2, #1
 8008b96:	54e1      	strb	r1, [r4, r3]
 8008b98:	1c42      	adds	r2, r0, #1
 8008b9a:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8008b9e:	2d2d      	cmp	r5, #45	; 0x2d
 8008ba0:	f102 36ff 	add.w	r6, r2, #4294967295
 8008ba4:	4610      	mov	r0, r2
 8008ba6:	d006      	beq.n	8008bb6 <__sccl+0x4e>
 8008ba8:	2d5d      	cmp	r5, #93	; 0x5d
 8008baa:	d0f1      	beq.n	8008b90 <__sccl+0x28>
 8008bac:	b90d      	cbnz	r5, 8008bb2 <__sccl+0x4a>
 8008bae:	4630      	mov	r0, r6
 8008bb0:	e7ee      	b.n	8008b90 <__sccl+0x28>
 8008bb2:	462b      	mov	r3, r5
 8008bb4:	e7ef      	b.n	8008b96 <__sccl+0x2e>
 8008bb6:	7816      	ldrb	r6, [r2, #0]
 8008bb8:	2e5d      	cmp	r6, #93	; 0x5d
 8008bba:	d0fa      	beq.n	8008bb2 <__sccl+0x4a>
 8008bbc:	42b3      	cmp	r3, r6
 8008bbe:	dcf8      	bgt.n	8008bb2 <__sccl+0x4a>
 8008bc0:	4618      	mov	r0, r3
 8008bc2:	3001      	adds	r0, #1
 8008bc4:	4286      	cmp	r6, r0
 8008bc6:	5421      	strb	r1, [r4, r0]
 8008bc8:	dcfb      	bgt.n	8008bc2 <__sccl+0x5a>
 8008bca:	43d8      	mvns	r0, r3
 8008bcc:	4430      	add	r0, r6
 8008bce:	1c5d      	adds	r5, r3, #1
 8008bd0:	42b3      	cmp	r3, r6
 8008bd2:	bfa8      	it	ge
 8008bd4:	2000      	movge	r0, #0
 8008bd6:	182b      	adds	r3, r5, r0
 8008bd8:	3202      	adds	r2, #2
 8008bda:	e7de      	b.n	8008b9a <__sccl+0x32>

08008bdc <_strtol_l.isra.0>:
 8008bdc:	2b01      	cmp	r3, #1
 8008bde:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008be2:	d001      	beq.n	8008be8 <_strtol_l.isra.0+0xc>
 8008be4:	2b24      	cmp	r3, #36	; 0x24
 8008be6:	d906      	bls.n	8008bf6 <_strtol_l.isra.0+0x1a>
 8008be8:	f7ff f922 	bl	8007e30 <__errno>
 8008bec:	2316      	movs	r3, #22
 8008bee:	6003      	str	r3, [r0, #0]
 8008bf0:	2000      	movs	r0, #0
 8008bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bf6:	4f3a      	ldr	r7, [pc, #232]	; (8008ce0 <_strtol_l.isra.0+0x104>)
 8008bf8:	468e      	mov	lr, r1
 8008bfa:	4676      	mov	r6, lr
 8008bfc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008c00:	5de5      	ldrb	r5, [r4, r7]
 8008c02:	f015 0508 	ands.w	r5, r5, #8
 8008c06:	d1f8      	bne.n	8008bfa <_strtol_l.isra.0+0x1e>
 8008c08:	2c2d      	cmp	r4, #45	; 0x2d
 8008c0a:	d134      	bne.n	8008c76 <_strtol_l.isra.0+0x9a>
 8008c0c:	f89e 4000 	ldrb.w	r4, [lr]
 8008c10:	f04f 0801 	mov.w	r8, #1
 8008c14:	f106 0e02 	add.w	lr, r6, #2
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d05c      	beq.n	8008cd6 <_strtol_l.isra.0+0xfa>
 8008c1c:	2b10      	cmp	r3, #16
 8008c1e:	d10c      	bne.n	8008c3a <_strtol_l.isra.0+0x5e>
 8008c20:	2c30      	cmp	r4, #48	; 0x30
 8008c22:	d10a      	bne.n	8008c3a <_strtol_l.isra.0+0x5e>
 8008c24:	f89e 4000 	ldrb.w	r4, [lr]
 8008c28:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008c2c:	2c58      	cmp	r4, #88	; 0x58
 8008c2e:	d14d      	bne.n	8008ccc <_strtol_l.isra.0+0xf0>
 8008c30:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008c34:	2310      	movs	r3, #16
 8008c36:	f10e 0e02 	add.w	lr, lr, #2
 8008c3a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8008c3e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008c42:	2600      	movs	r6, #0
 8008c44:	fbbc f9f3 	udiv	r9, ip, r3
 8008c48:	4635      	mov	r5, r6
 8008c4a:	fb03 ca19 	mls	sl, r3, r9, ip
 8008c4e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008c52:	2f09      	cmp	r7, #9
 8008c54:	d818      	bhi.n	8008c88 <_strtol_l.isra.0+0xac>
 8008c56:	463c      	mov	r4, r7
 8008c58:	42a3      	cmp	r3, r4
 8008c5a:	dd24      	ble.n	8008ca6 <_strtol_l.isra.0+0xca>
 8008c5c:	2e00      	cmp	r6, #0
 8008c5e:	db1f      	blt.n	8008ca0 <_strtol_l.isra.0+0xc4>
 8008c60:	45a9      	cmp	r9, r5
 8008c62:	d31d      	bcc.n	8008ca0 <_strtol_l.isra.0+0xc4>
 8008c64:	d101      	bne.n	8008c6a <_strtol_l.isra.0+0x8e>
 8008c66:	45a2      	cmp	sl, r4
 8008c68:	db1a      	blt.n	8008ca0 <_strtol_l.isra.0+0xc4>
 8008c6a:	fb05 4503 	mla	r5, r5, r3, r4
 8008c6e:	2601      	movs	r6, #1
 8008c70:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008c74:	e7eb      	b.n	8008c4e <_strtol_l.isra.0+0x72>
 8008c76:	2c2b      	cmp	r4, #43	; 0x2b
 8008c78:	bf08      	it	eq
 8008c7a:	f89e 4000 	ldrbeq.w	r4, [lr]
 8008c7e:	46a8      	mov	r8, r5
 8008c80:	bf08      	it	eq
 8008c82:	f106 0e02 	addeq.w	lr, r6, #2
 8008c86:	e7c7      	b.n	8008c18 <_strtol_l.isra.0+0x3c>
 8008c88:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008c8c:	2f19      	cmp	r7, #25
 8008c8e:	d801      	bhi.n	8008c94 <_strtol_l.isra.0+0xb8>
 8008c90:	3c37      	subs	r4, #55	; 0x37
 8008c92:	e7e1      	b.n	8008c58 <_strtol_l.isra.0+0x7c>
 8008c94:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008c98:	2f19      	cmp	r7, #25
 8008c9a:	d804      	bhi.n	8008ca6 <_strtol_l.isra.0+0xca>
 8008c9c:	3c57      	subs	r4, #87	; 0x57
 8008c9e:	e7db      	b.n	8008c58 <_strtol_l.isra.0+0x7c>
 8008ca0:	f04f 36ff 	mov.w	r6, #4294967295
 8008ca4:	e7e4      	b.n	8008c70 <_strtol_l.isra.0+0x94>
 8008ca6:	2e00      	cmp	r6, #0
 8008ca8:	da05      	bge.n	8008cb6 <_strtol_l.isra.0+0xda>
 8008caa:	2322      	movs	r3, #34	; 0x22
 8008cac:	6003      	str	r3, [r0, #0]
 8008cae:	4665      	mov	r5, ip
 8008cb0:	b942      	cbnz	r2, 8008cc4 <_strtol_l.isra.0+0xe8>
 8008cb2:	4628      	mov	r0, r5
 8008cb4:	e79d      	b.n	8008bf2 <_strtol_l.isra.0+0x16>
 8008cb6:	f1b8 0f00 	cmp.w	r8, #0
 8008cba:	d000      	beq.n	8008cbe <_strtol_l.isra.0+0xe2>
 8008cbc:	426d      	negs	r5, r5
 8008cbe:	2a00      	cmp	r2, #0
 8008cc0:	d0f7      	beq.n	8008cb2 <_strtol_l.isra.0+0xd6>
 8008cc2:	b10e      	cbz	r6, 8008cc8 <_strtol_l.isra.0+0xec>
 8008cc4:	f10e 31ff 	add.w	r1, lr, #4294967295
 8008cc8:	6011      	str	r1, [r2, #0]
 8008cca:	e7f2      	b.n	8008cb2 <_strtol_l.isra.0+0xd6>
 8008ccc:	2430      	movs	r4, #48	; 0x30
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d1b3      	bne.n	8008c3a <_strtol_l.isra.0+0x5e>
 8008cd2:	2308      	movs	r3, #8
 8008cd4:	e7b1      	b.n	8008c3a <_strtol_l.isra.0+0x5e>
 8008cd6:	2c30      	cmp	r4, #48	; 0x30
 8008cd8:	d0a4      	beq.n	8008c24 <_strtol_l.isra.0+0x48>
 8008cda:	230a      	movs	r3, #10
 8008cdc:	e7ad      	b.n	8008c3a <_strtol_l.isra.0+0x5e>
 8008cde:	bf00      	nop
 8008ce0:	08009197 	.word	0x08009197

08008ce4 <_strtol_r>:
 8008ce4:	f7ff bf7a 	b.w	8008bdc <_strtol_l.isra.0>

08008ce8 <_strtoul_l.isra.0>:
 8008ce8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008cec:	4e3b      	ldr	r6, [pc, #236]	; (8008ddc <_strtoul_l.isra.0+0xf4>)
 8008cee:	4686      	mov	lr, r0
 8008cf0:	468c      	mov	ip, r1
 8008cf2:	4660      	mov	r0, ip
 8008cf4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8008cf8:	5da5      	ldrb	r5, [r4, r6]
 8008cfa:	f015 0508 	ands.w	r5, r5, #8
 8008cfe:	d1f8      	bne.n	8008cf2 <_strtoul_l.isra.0+0xa>
 8008d00:	2c2d      	cmp	r4, #45	; 0x2d
 8008d02:	d134      	bne.n	8008d6e <_strtoul_l.isra.0+0x86>
 8008d04:	f89c 4000 	ldrb.w	r4, [ip]
 8008d08:	f04f 0801 	mov.w	r8, #1
 8008d0c:	f100 0c02 	add.w	ip, r0, #2
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d05e      	beq.n	8008dd2 <_strtoul_l.isra.0+0xea>
 8008d14:	2b10      	cmp	r3, #16
 8008d16:	d10c      	bne.n	8008d32 <_strtoul_l.isra.0+0x4a>
 8008d18:	2c30      	cmp	r4, #48	; 0x30
 8008d1a:	d10a      	bne.n	8008d32 <_strtoul_l.isra.0+0x4a>
 8008d1c:	f89c 0000 	ldrb.w	r0, [ip]
 8008d20:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008d24:	2858      	cmp	r0, #88	; 0x58
 8008d26:	d14f      	bne.n	8008dc8 <_strtoul_l.isra.0+0xe0>
 8008d28:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8008d2c:	2310      	movs	r3, #16
 8008d2e:	f10c 0c02 	add.w	ip, ip, #2
 8008d32:	f04f 37ff 	mov.w	r7, #4294967295
 8008d36:	2500      	movs	r5, #0
 8008d38:	fbb7 f7f3 	udiv	r7, r7, r3
 8008d3c:	fb03 f907 	mul.w	r9, r3, r7
 8008d40:	ea6f 0909 	mvn.w	r9, r9
 8008d44:	4628      	mov	r0, r5
 8008d46:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8008d4a:	2e09      	cmp	r6, #9
 8008d4c:	d818      	bhi.n	8008d80 <_strtoul_l.isra.0+0x98>
 8008d4e:	4634      	mov	r4, r6
 8008d50:	42a3      	cmp	r3, r4
 8008d52:	dd24      	ble.n	8008d9e <_strtoul_l.isra.0+0xb6>
 8008d54:	2d00      	cmp	r5, #0
 8008d56:	db1f      	blt.n	8008d98 <_strtoul_l.isra.0+0xb0>
 8008d58:	4287      	cmp	r7, r0
 8008d5a:	d31d      	bcc.n	8008d98 <_strtoul_l.isra.0+0xb0>
 8008d5c:	d101      	bne.n	8008d62 <_strtoul_l.isra.0+0x7a>
 8008d5e:	45a1      	cmp	r9, r4
 8008d60:	db1a      	blt.n	8008d98 <_strtoul_l.isra.0+0xb0>
 8008d62:	fb00 4003 	mla	r0, r0, r3, r4
 8008d66:	2501      	movs	r5, #1
 8008d68:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8008d6c:	e7eb      	b.n	8008d46 <_strtoul_l.isra.0+0x5e>
 8008d6e:	2c2b      	cmp	r4, #43	; 0x2b
 8008d70:	bf08      	it	eq
 8008d72:	f89c 4000 	ldrbeq.w	r4, [ip]
 8008d76:	46a8      	mov	r8, r5
 8008d78:	bf08      	it	eq
 8008d7a:	f100 0c02 	addeq.w	ip, r0, #2
 8008d7e:	e7c7      	b.n	8008d10 <_strtoul_l.isra.0+0x28>
 8008d80:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8008d84:	2e19      	cmp	r6, #25
 8008d86:	d801      	bhi.n	8008d8c <_strtoul_l.isra.0+0xa4>
 8008d88:	3c37      	subs	r4, #55	; 0x37
 8008d8a:	e7e1      	b.n	8008d50 <_strtoul_l.isra.0+0x68>
 8008d8c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8008d90:	2e19      	cmp	r6, #25
 8008d92:	d804      	bhi.n	8008d9e <_strtoul_l.isra.0+0xb6>
 8008d94:	3c57      	subs	r4, #87	; 0x57
 8008d96:	e7db      	b.n	8008d50 <_strtoul_l.isra.0+0x68>
 8008d98:	f04f 35ff 	mov.w	r5, #4294967295
 8008d9c:	e7e4      	b.n	8008d68 <_strtoul_l.isra.0+0x80>
 8008d9e:	2d00      	cmp	r5, #0
 8008da0:	da07      	bge.n	8008db2 <_strtoul_l.isra.0+0xca>
 8008da2:	2322      	movs	r3, #34	; 0x22
 8008da4:	f8ce 3000 	str.w	r3, [lr]
 8008da8:	f04f 30ff 	mov.w	r0, #4294967295
 8008dac:	b942      	cbnz	r2, 8008dc0 <_strtoul_l.isra.0+0xd8>
 8008dae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008db2:	f1b8 0f00 	cmp.w	r8, #0
 8008db6:	d000      	beq.n	8008dba <_strtoul_l.isra.0+0xd2>
 8008db8:	4240      	negs	r0, r0
 8008dba:	2a00      	cmp	r2, #0
 8008dbc:	d0f7      	beq.n	8008dae <_strtoul_l.isra.0+0xc6>
 8008dbe:	b10d      	cbz	r5, 8008dc4 <_strtoul_l.isra.0+0xdc>
 8008dc0:	f10c 31ff 	add.w	r1, ip, #4294967295
 8008dc4:	6011      	str	r1, [r2, #0]
 8008dc6:	e7f2      	b.n	8008dae <_strtoul_l.isra.0+0xc6>
 8008dc8:	2430      	movs	r4, #48	; 0x30
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d1b1      	bne.n	8008d32 <_strtoul_l.isra.0+0x4a>
 8008dce:	2308      	movs	r3, #8
 8008dd0:	e7af      	b.n	8008d32 <_strtoul_l.isra.0+0x4a>
 8008dd2:	2c30      	cmp	r4, #48	; 0x30
 8008dd4:	d0a2      	beq.n	8008d1c <_strtoul_l.isra.0+0x34>
 8008dd6:	230a      	movs	r3, #10
 8008dd8:	e7ab      	b.n	8008d32 <_strtoul_l.isra.0+0x4a>
 8008dda:	bf00      	nop
 8008ddc:	08009197 	.word	0x08009197

08008de0 <_strtoul_r>:
 8008de0:	f7ff bf82 	b.w	8008ce8 <_strtoul_l.isra.0>

08008de4 <__submore>:
 8008de4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008de8:	460c      	mov	r4, r1
 8008dea:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008dec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008df0:	4299      	cmp	r1, r3
 8008df2:	d11d      	bne.n	8008e30 <__submore+0x4c>
 8008df4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008df8:	f000 f89a 	bl	8008f30 <_malloc_r>
 8008dfc:	b918      	cbnz	r0, 8008e06 <__submore+0x22>
 8008dfe:	f04f 30ff 	mov.w	r0, #4294967295
 8008e02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e06:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e0a:	63a3      	str	r3, [r4, #56]	; 0x38
 8008e0c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008e10:	6360      	str	r0, [r4, #52]	; 0x34
 8008e12:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8008e16:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008e1a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8008e1e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008e22:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8008e26:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8008e2a:	6020      	str	r0, [r4, #0]
 8008e2c:	2000      	movs	r0, #0
 8008e2e:	e7e8      	b.n	8008e02 <__submore+0x1e>
 8008e30:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8008e32:	0077      	lsls	r7, r6, #1
 8008e34:	463a      	mov	r2, r7
 8008e36:	f000 f8d5 	bl	8008fe4 <_realloc_r>
 8008e3a:	4605      	mov	r5, r0
 8008e3c:	2800      	cmp	r0, #0
 8008e3e:	d0de      	beq.n	8008dfe <__submore+0x1a>
 8008e40:	eb00 0806 	add.w	r8, r0, r6
 8008e44:	4601      	mov	r1, r0
 8008e46:	4632      	mov	r2, r6
 8008e48:	4640      	mov	r0, r8
 8008e4a:	f7ff f81b 	bl	8007e84 <memcpy>
 8008e4e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8008e52:	f8c4 8000 	str.w	r8, [r4]
 8008e56:	e7e9      	b.n	8008e2c <__submore+0x48>

08008e58 <__retarget_lock_acquire_recursive>:
 8008e58:	4770      	bx	lr

08008e5a <__retarget_lock_release_recursive>:
 8008e5a:	4770      	bx	lr

08008e5c <memmove>:
 8008e5c:	4288      	cmp	r0, r1
 8008e5e:	b510      	push	{r4, lr}
 8008e60:	eb01 0402 	add.w	r4, r1, r2
 8008e64:	d902      	bls.n	8008e6c <memmove+0x10>
 8008e66:	4284      	cmp	r4, r0
 8008e68:	4623      	mov	r3, r4
 8008e6a:	d807      	bhi.n	8008e7c <memmove+0x20>
 8008e6c:	1e43      	subs	r3, r0, #1
 8008e6e:	42a1      	cmp	r1, r4
 8008e70:	d008      	beq.n	8008e84 <memmove+0x28>
 8008e72:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008e76:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008e7a:	e7f8      	b.n	8008e6e <memmove+0x12>
 8008e7c:	4402      	add	r2, r0
 8008e7e:	4601      	mov	r1, r0
 8008e80:	428a      	cmp	r2, r1
 8008e82:	d100      	bne.n	8008e86 <memmove+0x2a>
 8008e84:	bd10      	pop	{r4, pc}
 8008e86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008e8a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008e8e:	e7f7      	b.n	8008e80 <memmove+0x24>

08008e90 <_free_r>:
 8008e90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e92:	2900      	cmp	r1, #0
 8008e94:	d048      	beq.n	8008f28 <_free_r+0x98>
 8008e96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e9a:	9001      	str	r0, [sp, #4]
 8008e9c:	2b00      	cmp	r3, #0
 8008e9e:	f1a1 0404 	sub.w	r4, r1, #4
 8008ea2:	bfb8      	it	lt
 8008ea4:	18e4      	addlt	r4, r4, r3
 8008ea6:	f000 f8d3 	bl	8009050 <__malloc_lock>
 8008eaa:	4a20      	ldr	r2, [pc, #128]	; (8008f2c <_free_r+0x9c>)
 8008eac:	9801      	ldr	r0, [sp, #4]
 8008eae:	6813      	ldr	r3, [r2, #0]
 8008eb0:	4615      	mov	r5, r2
 8008eb2:	b933      	cbnz	r3, 8008ec2 <_free_r+0x32>
 8008eb4:	6063      	str	r3, [r4, #4]
 8008eb6:	6014      	str	r4, [r2, #0]
 8008eb8:	b003      	add	sp, #12
 8008eba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008ebe:	f000 b8cd 	b.w	800905c <__malloc_unlock>
 8008ec2:	42a3      	cmp	r3, r4
 8008ec4:	d90b      	bls.n	8008ede <_free_r+0x4e>
 8008ec6:	6821      	ldr	r1, [r4, #0]
 8008ec8:	1862      	adds	r2, r4, r1
 8008eca:	4293      	cmp	r3, r2
 8008ecc:	bf04      	itt	eq
 8008ece:	681a      	ldreq	r2, [r3, #0]
 8008ed0:	685b      	ldreq	r3, [r3, #4]
 8008ed2:	6063      	str	r3, [r4, #4]
 8008ed4:	bf04      	itt	eq
 8008ed6:	1852      	addeq	r2, r2, r1
 8008ed8:	6022      	streq	r2, [r4, #0]
 8008eda:	602c      	str	r4, [r5, #0]
 8008edc:	e7ec      	b.n	8008eb8 <_free_r+0x28>
 8008ede:	461a      	mov	r2, r3
 8008ee0:	685b      	ldr	r3, [r3, #4]
 8008ee2:	b10b      	cbz	r3, 8008ee8 <_free_r+0x58>
 8008ee4:	42a3      	cmp	r3, r4
 8008ee6:	d9fa      	bls.n	8008ede <_free_r+0x4e>
 8008ee8:	6811      	ldr	r1, [r2, #0]
 8008eea:	1855      	adds	r5, r2, r1
 8008eec:	42a5      	cmp	r5, r4
 8008eee:	d10b      	bne.n	8008f08 <_free_r+0x78>
 8008ef0:	6824      	ldr	r4, [r4, #0]
 8008ef2:	4421      	add	r1, r4
 8008ef4:	1854      	adds	r4, r2, r1
 8008ef6:	42a3      	cmp	r3, r4
 8008ef8:	6011      	str	r1, [r2, #0]
 8008efa:	d1dd      	bne.n	8008eb8 <_free_r+0x28>
 8008efc:	681c      	ldr	r4, [r3, #0]
 8008efe:	685b      	ldr	r3, [r3, #4]
 8008f00:	6053      	str	r3, [r2, #4]
 8008f02:	4421      	add	r1, r4
 8008f04:	6011      	str	r1, [r2, #0]
 8008f06:	e7d7      	b.n	8008eb8 <_free_r+0x28>
 8008f08:	d902      	bls.n	8008f10 <_free_r+0x80>
 8008f0a:	230c      	movs	r3, #12
 8008f0c:	6003      	str	r3, [r0, #0]
 8008f0e:	e7d3      	b.n	8008eb8 <_free_r+0x28>
 8008f10:	6825      	ldr	r5, [r4, #0]
 8008f12:	1961      	adds	r1, r4, r5
 8008f14:	428b      	cmp	r3, r1
 8008f16:	bf04      	itt	eq
 8008f18:	6819      	ldreq	r1, [r3, #0]
 8008f1a:	685b      	ldreq	r3, [r3, #4]
 8008f1c:	6063      	str	r3, [r4, #4]
 8008f1e:	bf04      	itt	eq
 8008f20:	1949      	addeq	r1, r1, r5
 8008f22:	6021      	streq	r1, [r4, #0]
 8008f24:	6054      	str	r4, [r2, #4]
 8008f26:	e7c7      	b.n	8008eb8 <_free_r+0x28>
 8008f28:	b003      	add	sp, #12
 8008f2a:	bd30      	pop	{r4, r5, pc}
 8008f2c:	20000300 	.word	0x20000300

08008f30 <_malloc_r>:
 8008f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f32:	1ccd      	adds	r5, r1, #3
 8008f34:	f025 0503 	bic.w	r5, r5, #3
 8008f38:	3508      	adds	r5, #8
 8008f3a:	2d0c      	cmp	r5, #12
 8008f3c:	bf38      	it	cc
 8008f3e:	250c      	movcc	r5, #12
 8008f40:	2d00      	cmp	r5, #0
 8008f42:	4606      	mov	r6, r0
 8008f44:	db01      	blt.n	8008f4a <_malloc_r+0x1a>
 8008f46:	42a9      	cmp	r1, r5
 8008f48:	d903      	bls.n	8008f52 <_malloc_r+0x22>
 8008f4a:	230c      	movs	r3, #12
 8008f4c:	6033      	str	r3, [r6, #0]
 8008f4e:	2000      	movs	r0, #0
 8008f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f52:	f000 f87d 	bl	8009050 <__malloc_lock>
 8008f56:	4921      	ldr	r1, [pc, #132]	; (8008fdc <_malloc_r+0xac>)
 8008f58:	680a      	ldr	r2, [r1, #0]
 8008f5a:	4614      	mov	r4, r2
 8008f5c:	b99c      	cbnz	r4, 8008f86 <_malloc_r+0x56>
 8008f5e:	4f20      	ldr	r7, [pc, #128]	; (8008fe0 <_malloc_r+0xb0>)
 8008f60:	683b      	ldr	r3, [r7, #0]
 8008f62:	b923      	cbnz	r3, 8008f6e <_malloc_r+0x3e>
 8008f64:	4621      	mov	r1, r4
 8008f66:	4630      	mov	r0, r6
 8008f68:	f000 f862 	bl	8009030 <_sbrk_r>
 8008f6c:	6038      	str	r0, [r7, #0]
 8008f6e:	4629      	mov	r1, r5
 8008f70:	4630      	mov	r0, r6
 8008f72:	f000 f85d 	bl	8009030 <_sbrk_r>
 8008f76:	1c43      	adds	r3, r0, #1
 8008f78:	d123      	bne.n	8008fc2 <_malloc_r+0x92>
 8008f7a:	230c      	movs	r3, #12
 8008f7c:	6033      	str	r3, [r6, #0]
 8008f7e:	4630      	mov	r0, r6
 8008f80:	f000 f86c 	bl	800905c <__malloc_unlock>
 8008f84:	e7e3      	b.n	8008f4e <_malloc_r+0x1e>
 8008f86:	6823      	ldr	r3, [r4, #0]
 8008f88:	1b5b      	subs	r3, r3, r5
 8008f8a:	d417      	bmi.n	8008fbc <_malloc_r+0x8c>
 8008f8c:	2b0b      	cmp	r3, #11
 8008f8e:	d903      	bls.n	8008f98 <_malloc_r+0x68>
 8008f90:	6023      	str	r3, [r4, #0]
 8008f92:	441c      	add	r4, r3
 8008f94:	6025      	str	r5, [r4, #0]
 8008f96:	e004      	b.n	8008fa2 <_malloc_r+0x72>
 8008f98:	6863      	ldr	r3, [r4, #4]
 8008f9a:	42a2      	cmp	r2, r4
 8008f9c:	bf0c      	ite	eq
 8008f9e:	600b      	streq	r3, [r1, #0]
 8008fa0:	6053      	strne	r3, [r2, #4]
 8008fa2:	4630      	mov	r0, r6
 8008fa4:	f000 f85a 	bl	800905c <__malloc_unlock>
 8008fa8:	f104 000b 	add.w	r0, r4, #11
 8008fac:	1d23      	adds	r3, r4, #4
 8008fae:	f020 0007 	bic.w	r0, r0, #7
 8008fb2:	1ac2      	subs	r2, r0, r3
 8008fb4:	d0cc      	beq.n	8008f50 <_malloc_r+0x20>
 8008fb6:	1a1b      	subs	r3, r3, r0
 8008fb8:	50a3      	str	r3, [r4, r2]
 8008fba:	e7c9      	b.n	8008f50 <_malloc_r+0x20>
 8008fbc:	4622      	mov	r2, r4
 8008fbe:	6864      	ldr	r4, [r4, #4]
 8008fc0:	e7cc      	b.n	8008f5c <_malloc_r+0x2c>
 8008fc2:	1cc4      	adds	r4, r0, #3
 8008fc4:	f024 0403 	bic.w	r4, r4, #3
 8008fc8:	42a0      	cmp	r0, r4
 8008fca:	d0e3      	beq.n	8008f94 <_malloc_r+0x64>
 8008fcc:	1a21      	subs	r1, r4, r0
 8008fce:	4630      	mov	r0, r6
 8008fd0:	f000 f82e 	bl	8009030 <_sbrk_r>
 8008fd4:	3001      	adds	r0, #1
 8008fd6:	d1dd      	bne.n	8008f94 <_malloc_r+0x64>
 8008fd8:	e7cf      	b.n	8008f7a <_malloc_r+0x4a>
 8008fda:	bf00      	nop
 8008fdc:	20000300 	.word	0x20000300
 8008fe0:	20000304 	.word	0x20000304

08008fe4 <_realloc_r>:
 8008fe4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fe6:	4607      	mov	r7, r0
 8008fe8:	4614      	mov	r4, r2
 8008fea:	460e      	mov	r6, r1
 8008fec:	b921      	cbnz	r1, 8008ff8 <_realloc_r+0x14>
 8008fee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008ff2:	4611      	mov	r1, r2
 8008ff4:	f7ff bf9c 	b.w	8008f30 <_malloc_r>
 8008ff8:	b922      	cbnz	r2, 8009004 <_realloc_r+0x20>
 8008ffa:	f7ff ff49 	bl	8008e90 <_free_r>
 8008ffe:	4625      	mov	r5, r4
 8009000:	4628      	mov	r0, r5
 8009002:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009004:	f000 f830 	bl	8009068 <_malloc_usable_size_r>
 8009008:	42a0      	cmp	r0, r4
 800900a:	d20f      	bcs.n	800902c <_realloc_r+0x48>
 800900c:	4621      	mov	r1, r4
 800900e:	4638      	mov	r0, r7
 8009010:	f7ff ff8e 	bl	8008f30 <_malloc_r>
 8009014:	4605      	mov	r5, r0
 8009016:	2800      	cmp	r0, #0
 8009018:	d0f2      	beq.n	8009000 <_realloc_r+0x1c>
 800901a:	4631      	mov	r1, r6
 800901c:	4622      	mov	r2, r4
 800901e:	f7fe ff31 	bl	8007e84 <memcpy>
 8009022:	4631      	mov	r1, r6
 8009024:	4638      	mov	r0, r7
 8009026:	f7ff ff33 	bl	8008e90 <_free_r>
 800902a:	e7e9      	b.n	8009000 <_realloc_r+0x1c>
 800902c:	4635      	mov	r5, r6
 800902e:	e7e7      	b.n	8009000 <_realloc_r+0x1c>

08009030 <_sbrk_r>:
 8009030:	b538      	push	{r3, r4, r5, lr}
 8009032:	4d06      	ldr	r5, [pc, #24]	; (800904c <_sbrk_r+0x1c>)
 8009034:	2300      	movs	r3, #0
 8009036:	4604      	mov	r4, r0
 8009038:	4608      	mov	r0, r1
 800903a:	602b      	str	r3, [r5, #0]
 800903c:	f7f8 f94e 	bl	80012dc <_sbrk>
 8009040:	1c43      	adds	r3, r0, #1
 8009042:	d102      	bne.n	800904a <_sbrk_r+0x1a>
 8009044:	682b      	ldr	r3, [r5, #0]
 8009046:	b103      	cbz	r3, 800904a <_sbrk_r+0x1a>
 8009048:	6023      	str	r3, [r4, #0]
 800904a:	bd38      	pop	{r3, r4, r5, pc}
 800904c:	200004f8 	.word	0x200004f8

08009050 <__malloc_lock>:
 8009050:	4801      	ldr	r0, [pc, #4]	; (8009058 <__malloc_lock+0x8>)
 8009052:	f7ff bf01 	b.w	8008e58 <__retarget_lock_acquire_recursive>
 8009056:	bf00      	nop
 8009058:	20000500 	.word	0x20000500

0800905c <__malloc_unlock>:
 800905c:	4801      	ldr	r0, [pc, #4]	; (8009064 <__malloc_unlock+0x8>)
 800905e:	f7ff befc 	b.w	8008e5a <__retarget_lock_release_recursive>
 8009062:	bf00      	nop
 8009064:	20000500 	.word	0x20000500

08009068 <_malloc_usable_size_r>:
 8009068:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800906c:	1f18      	subs	r0, r3, #4
 800906e:	2b00      	cmp	r3, #0
 8009070:	bfbc      	itt	lt
 8009072:	580b      	ldrlt	r3, [r1, r0]
 8009074:	18c0      	addlt	r0, r0, r3
 8009076:	4770      	bx	lr

08009078 <_init>:
 8009078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800907a:	bf00      	nop
 800907c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800907e:	bc08      	pop	{r3}
 8009080:	469e      	mov	lr, r3
 8009082:	4770      	bx	lr

08009084 <_fini>:
 8009084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009086:	bf00      	nop
 8009088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800908a:	bc08      	pop	{r3}
 800908c:	469e      	mov	lr, r3
 800908e:	4770      	bx	lr
