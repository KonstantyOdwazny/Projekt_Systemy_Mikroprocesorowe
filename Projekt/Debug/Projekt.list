
Projekt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ecc  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000298  080090cc  080090cc  000190cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009364  08009364  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  08009364  08009364  00019364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800936c  0800936c  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800936c  0800936c  0001936c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009370  08009370  00019370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08009374  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  20000100  08009474  00020100  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000410  08009474  00020410  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bec2  00000000  00000000  0002012e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037ed  00000000  00000000  0003bff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001400  00000000  00000000  0003f7e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001258  00000000  00000000  00040be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a3c4  00000000  00000000  00041e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ab7d  00000000  00000000  0006c1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00102f69  00000000  00000000  00086d79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00189ce2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005a00  00000000  00000000  00189d38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	20000100 	.word	0x20000100
 800021c:	00000000 	.word	0x00000000
 8000220:	080090b4 	.word	0x080090b4

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	20000104 	.word	0x20000104
 800023c:	080090b4 	.word	0x080090b4

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96e 	b.w	80005e4 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468c      	mov	ip, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8083 	bne.w	8000436 <__udivmoddi4+0x116>
 8000330:	428a      	cmp	r2, r1
 8000332:	4617      	mov	r7, r2
 8000334:	d947      	bls.n	80003c6 <__udivmoddi4+0xa6>
 8000336:	fab2 f282 	clz	r2, r2
 800033a:	b142      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033c:	f1c2 0020 	rsb	r0, r2, #32
 8000340:	fa24 f000 	lsr.w	r0, r4, r0
 8000344:	4091      	lsls	r1, r2
 8000346:	4097      	lsls	r7, r2
 8000348:	ea40 0c01 	orr.w	ip, r0, r1
 800034c:	4094      	lsls	r4, r2
 800034e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000352:	0c23      	lsrs	r3, r4, #16
 8000354:	fbbc f6f8 	udiv	r6, ip, r8
 8000358:	fa1f fe87 	uxth.w	lr, r7
 800035c:	fb08 c116 	mls	r1, r8, r6, ip
 8000360:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000364:	fb06 f10e 	mul.w	r1, r6, lr
 8000368:	4299      	cmp	r1, r3
 800036a:	d909      	bls.n	8000380 <__udivmoddi4+0x60>
 800036c:	18fb      	adds	r3, r7, r3
 800036e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000372:	f080 8119 	bcs.w	80005a8 <__udivmoddi4+0x288>
 8000376:	4299      	cmp	r1, r3
 8000378:	f240 8116 	bls.w	80005a8 <__udivmoddi4+0x288>
 800037c:	3e02      	subs	r6, #2
 800037e:	443b      	add	r3, r7
 8000380:	1a5b      	subs	r3, r3, r1
 8000382:	b2a4      	uxth	r4, r4
 8000384:	fbb3 f0f8 	udiv	r0, r3, r8
 8000388:	fb08 3310 	mls	r3, r8, r0, r3
 800038c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000390:	fb00 fe0e 	mul.w	lr, r0, lr
 8000394:	45a6      	cmp	lr, r4
 8000396:	d909      	bls.n	80003ac <__udivmoddi4+0x8c>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f100 33ff 	add.w	r3, r0, #4294967295
 800039e:	f080 8105 	bcs.w	80005ac <__udivmoddi4+0x28c>
 80003a2:	45a6      	cmp	lr, r4
 80003a4:	f240 8102 	bls.w	80005ac <__udivmoddi4+0x28c>
 80003a8:	3802      	subs	r0, #2
 80003aa:	443c      	add	r4, r7
 80003ac:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b0:	eba4 040e 	sub.w	r4, r4, lr
 80003b4:	2600      	movs	r6, #0
 80003b6:	b11d      	cbz	r5, 80003c0 <__udivmoddi4+0xa0>
 80003b8:	40d4      	lsrs	r4, r2
 80003ba:	2300      	movs	r3, #0
 80003bc:	e9c5 4300 	strd	r4, r3, [r5]
 80003c0:	4631      	mov	r1, r6
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	b902      	cbnz	r2, 80003ca <__udivmoddi4+0xaa>
 80003c8:	deff      	udf	#255	; 0xff
 80003ca:	fab2 f282 	clz	r2, r2
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	d150      	bne.n	8000474 <__udivmoddi4+0x154>
 80003d2:	1bcb      	subs	r3, r1, r7
 80003d4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d8:	fa1f f887 	uxth.w	r8, r7
 80003dc:	2601      	movs	r6, #1
 80003de:	fbb3 fcfe 	udiv	ip, r3, lr
 80003e2:	0c21      	lsrs	r1, r4, #16
 80003e4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb08 f30c 	mul.w	r3, r8, ip
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0xe4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0xe2>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	f200 80e9 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 8000402:	4684      	mov	ip, r0
 8000404:	1ac9      	subs	r1, r1, r3
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000410:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x10c>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x10a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80d9 	bhi.w	80005dc <__udivmoddi4+0x2bc>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e7bf      	b.n	80003b6 <__udivmoddi4+0x96>
 8000436:	428b      	cmp	r3, r1
 8000438:	d909      	bls.n	800044e <__udivmoddi4+0x12e>
 800043a:	2d00      	cmp	r5, #0
 800043c:	f000 80b1 	beq.w	80005a2 <__udivmoddi4+0x282>
 8000440:	2600      	movs	r6, #0
 8000442:	e9c5 0100 	strd	r0, r1, [r5]
 8000446:	4630      	mov	r0, r6
 8000448:	4631      	mov	r1, r6
 800044a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800044e:	fab3 f683 	clz	r6, r3
 8000452:	2e00      	cmp	r6, #0
 8000454:	d14a      	bne.n	80004ec <__udivmoddi4+0x1cc>
 8000456:	428b      	cmp	r3, r1
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x140>
 800045a:	4282      	cmp	r2, r0
 800045c:	f200 80b8 	bhi.w	80005d0 <__udivmoddi4+0x2b0>
 8000460:	1a84      	subs	r4, r0, r2
 8000462:	eb61 0103 	sbc.w	r1, r1, r3
 8000466:	2001      	movs	r0, #1
 8000468:	468c      	mov	ip, r1
 800046a:	2d00      	cmp	r5, #0
 800046c:	d0a8      	beq.n	80003c0 <__udivmoddi4+0xa0>
 800046e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000472:	e7a5      	b.n	80003c0 <__udivmoddi4+0xa0>
 8000474:	f1c2 0320 	rsb	r3, r2, #32
 8000478:	fa20 f603 	lsr.w	r6, r0, r3
 800047c:	4097      	lsls	r7, r2
 800047e:	fa01 f002 	lsl.w	r0, r1, r2
 8000482:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000486:	40d9      	lsrs	r1, r3
 8000488:	4330      	orrs	r0, r6
 800048a:	0c03      	lsrs	r3, r0, #16
 800048c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000490:	fa1f f887 	uxth.w	r8, r7
 8000494:	fb0e 1116 	mls	r1, lr, r6, r1
 8000498:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800049c:	fb06 f108 	mul.w	r1, r6, r8
 80004a0:	4299      	cmp	r1, r3
 80004a2:	fa04 f402 	lsl.w	r4, r4, r2
 80004a6:	d909      	bls.n	80004bc <__udivmoddi4+0x19c>
 80004a8:	18fb      	adds	r3, r7, r3
 80004aa:	f106 3cff 	add.w	ip, r6, #4294967295
 80004ae:	f080 808d 	bcs.w	80005cc <__udivmoddi4+0x2ac>
 80004b2:	4299      	cmp	r1, r3
 80004b4:	f240 808a 	bls.w	80005cc <__udivmoddi4+0x2ac>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	443b      	add	r3, r7
 80004bc:	1a5b      	subs	r3, r3, r1
 80004be:	b281      	uxth	r1, r0
 80004c0:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c4:	fb0e 3310 	mls	r3, lr, r0, r3
 80004c8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004cc:	fb00 f308 	mul.w	r3, r0, r8
 80004d0:	428b      	cmp	r3, r1
 80004d2:	d907      	bls.n	80004e4 <__udivmoddi4+0x1c4>
 80004d4:	1879      	adds	r1, r7, r1
 80004d6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004da:	d273      	bcs.n	80005c4 <__udivmoddi4+0x2a4>
 80004dc:	428b      	cmp	r3, r1
 80004de:	d971      	bls.n	80005c4 <__udivmoddi4+0x2a4>
 80004e0:	3802      	subs	r0, #2
 80004e2:	4439      	add	r1, r7
 80004e4:	1acb      	subs	r3, r1, r3
 80004e6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ea:	e778      	b.n	80003de <__udivmoddi4+0xbe>
 80004ec:	f1c6 0c20 	rsb	ip, r6, #32
 80004f0:	fa03 f406 	lsl.w	r4, r3, r6
 80004f4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004f8:	431c      	orrs	r4, r3
 80004fa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004fe:	fa01 f306 	lsl.w	r3, r1, r6
 8000502:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000506:	fa21 f10c 	lsr.w	r1, r1, ip
 800050a:	431f      	orrs	r7, r3
 800050c:	0c3b      	lsrs	r3, r7, #16
 800050e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000512:	fa1f f884 	uxth.w	r8, r4
 8000516:	fb0e 1119 	mls	r1, lr, r9, r1
 800051a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800051e:	fb09 fa08 	mul.w	sl, r9, r8
 8000522:	458a      	cmp	sl, r1
 8000524:	fa02 f206 	lsl.w	r2, r2, r6
 8000528:	fa00 f306 	lsl.w	r3, r0, r6
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x220>
 800052e:	1861      	adds	r1, r4, r1
 8000530:	f109 30ff 	add.w	r0, r9, #4294967295
 8000534:	d248      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 8000536:	458a      	cmp	sl, r1
 8000538:	d946      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800053a:	f1a9 0902 	sub.w	r9, r9, #2
 800053e:	4421      	add	r1, r4
 8000540:	eba1 010a 	sub.w	r1, r1, sl
 8000544:	b2bf      	uxth	r7, r7
 8000546:	fbb1 f0fe 	udiv	r0, r1, lr
 800054a:	fb0e 1110 	mls	r1, lr, r0, r1
 800054e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000552:	fb00 f808 	mul.w	r8, r0, r8
 8000556:	45b8      	cmp	r8, r7
 8000558:	d907      	bls.n	800056a <__udivmoddi4+0x24a>
 800055a:	19e7      	adds	r7, r4, r7
 800055c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000560:	d22e      	bcs.n	80005c0 <__udivmoddi4+0x2a0>
 8000562:	45b8      	cmp	r8, r7
 8000564:	d92c      	bls.n	80005c0 <__udivmoddi4+0x2a0>
 8000566:	3802      	subs	r0, #2
 8000568:	4427      	add	r7, r4
 800056a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800056e:	eba7 0708 	sub.w	r7, r7, r8
 8000572:	fba0 8902 	umull	r8, r9, r0, r2
 8000576:	454f      	cmp	r7, r9
 8000578:	46c6      	mov	lr, r8
 800057a:	4649      	mov	r1, r9
 800057c:	d31a      	bcc.n	80005b4 <__udivmoddi4+0x294>
 800057e:	d017      	beq.n	80005b0 <__udivmoddi4+0x290>
 8000580:	b15d      	cbz	r5, 800059a <__udivmoddi4+0x27a>
 8000582:	ebb3 020e 	subs.w	r2, r3, lr
 8000586:	eb67 0701 	sbc.w	r7, r7, r1
 800058a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800058e:	40f2      	lsrs	r2, r6
 8000590:	ea4c 0202 	orr.w	r2, ip, r2
 8000594:	40f7      	lsrs	r7, r6
 8000596:	e9c5 2700 	strd	r2, r7, [r5]
 800059a:	2600      	movs	r6, #0
 800059c:	4631      	mov	r1, r6
 800059e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e70b      	b.n	80003c0 <__udivmoddi4+0xa0>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0x60>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6fd      	b.n	80003ac <__udivmoddi4+0x8c>
 80005b0:	4543      	cmp	r3, r8
 80005b2:	d2e5      	bcs.n	8000580 <__udivmoddi4+0x260>
 80005b4:	ebb8 0e02 	subs.w	lr, r8, r2
 80005b8:	eb69 0104 	sbc.w	r1, r9, r4
 80005bc:	3801      	subs	r0, #1
 80005be:	e7df      	b.n	8000580 <__udivmoddi4+0x260>
 80005c0:	4608      	mov	r0, r1
 80005c2:	e7d2      	b.n	800056a <__udivmoddi4+0x24a>
 80005c4:	4660      	mov	r0, ip
 80005c6:	e78d      	b.n	80004e4 <__udivmoddi4+0x1c4>
 80005c8:	4681      	mov	r9, r0
 80005ca:	e7b9      	b.n	8000540 <__udivmoddi4+0x220>
 80005cc:	4666      	mov	r6, ip
 80005ce:	e775      	b.n	80004bc <__udivmoddi4+0x19c>
 80005d0:	4630      	mov	r0, r6
 80005d2:	e74a      	b.n	800046a <__udivmoddi4+0x14a>
 80005d4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d8:	4439      	add	r1, r7
 80005da:	e713      	b.n	8000404 <__udivmoddi4+0xe4>
 80005dc:	3802      	subs	r0, #2
 80005de:	443c      	add	r4, r7
 80005e0:	e724      	b.n	800042c <__udivmoddi4+0x10c>
 80005e2:	bf00      	nop

080005e4 <__aeabi_idiv0>:
 80005e4:	4770      	bx	lr
 80005e6:	bf00      	nop

080005e8 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	b084      	sub	sp, #16
 80005ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ee:	463b      	mov	r3, r7
 80005f0:	2200      	movs	r2, #0
 80005f2:	601a      	str	r2, [r3, #0]
 80005f4:	605a      	str	r2, [r3, #4]
 80005f6:	609a      	str	r2, [r3, #8]
 80005f8:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005fa:	4b21      	ldr	r3, [pc, #132]	; (8000680 <MX_ADC1_Init+0x98>)
 80005fc:	4a21      	ldr	r2, [pc, #132]	; (8000684 <MX_ADC1_Init+0x9c>)
 80005fe:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000600:	4b1f      	ldr	r3, [pc, #124]	; (8000680 <MX_ADC1_Init+0x98>)
 8000602:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000606:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000608:	4b1d      	ldr	r3, [pc, #116]	; (8000680 <MX_ADC1_Init+0x98>)
 800060a:	2200      	movs	r2, #0
 800060c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800060e:	4b1c      	ldr	r3, [pc, #112]	; (8000680 <MX_ADC1_Init+0x98>)
 8000610:	2200      	movs	r2, #0
 8000612:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000614:	4b1a      	ldr	r3, [pc, #104]	; (8000680 <MX_ADC1_Init+0x98>)
 8000616:	2200      	movs	r2, #0
 8000618:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800061a:	4b19      	ldr	r3, [pc, #100]	; (8000680 <MX_ADC1_Init+0x98>)
 800061c:	2200      	movs	r2, #0
 800061e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000622:	4b17      	ldr	r3, [pc, #92]	; (8000680 <MX_ADC1_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000628:	4b15      	ldr	r3, [pc, #84]	; (8000680 <MX_ADC1_Init+0x98>)
 800062a:	4a17      	ldr	r2, [pc, #92]	; (8000688 <MX_ADC1_Init+0xa0>)
 800062c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800062e:	4b14      	ldr	r3, [pc, #80]	; (8000680 <MX_ADC1_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000634:	4b12      	ldr	r3, [pc, #72]	; (8000680 <MX_ADC1_Init+0x98>)
 8000636:	2201      	movs	r2, #1
 8000638:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800063a:	4b11      	ldr	r3, [pc, #68]	; (8000680 <MX_ADC1_Init+0x98>)
 800063c:	2200      	movs	r2, #0
 800063e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000642:	4b0f      	ldr	r3, [pc, #60]	; (8000680 <MX_ADC1_Init+0x98>)
 8000644:	2201      	movs	r2, #1
 8000646:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000648:	480d      	ldr	r0, [pc, #52]	; (8000680 <MX_ADC1_Init+0x98>)
 800064a:	f001 fb91 	bl	8001d70 <HAL_ADC_Init>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000654:	f000 fef6 	bl	8001444 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000658:	2303      	movs	r3, #3
 800065a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800065c:	2301      	movs	r3, #1
 800065e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 8000660:	2307      	movs	r3, #7
 8000662:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000664:	463b      	mov	r3, r7
 8000666:	4619      	mov	r1, r3
 8000668:	4805      	ldr	r0, [pc, #20]	; (8000680 <MX_ADC1_Init+0x98>)
 800066a:	f001 fcf3 	bl	8002054 <HAL_ADC_ConfigChannel>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000674:	f000 fee6 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000678:	bf00      	nop
 800067a:	3710      	adds	r7, #16
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000140 	.word	0x20000140
 8000684:	40012000 	.word	0x40012000
 8000688:	0f000001 	.word	0x0f000001

0800068c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b08a      	sub	sp, #40	; 0x28
 8000690:	af00      	add	r7, sp, #0
 8000692:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000694:	f107 0314 	add.w	r3, r7, #20
 8000698:	2200      	movs	r2, #0
 800069a:	601a      	str	r2, [r3, #0]
 800069c:	605a      	str	r2, [r3, #4]
 800069e:	609a      	str	r2, [r3, #8]
 80006a0:	60da      	str	r2, [r3, #12]
 80006a2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a19      	ldr	r2, [pc, #100]	; (8000710 <HAL_ADC_MspInit+0x84>)
 80006aa:	4293      	cmp	r3, r2
 80006ac:	d12b      	bne.n	8000706 <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006ae:	4b19      	ldr	r3, [pc, #100]	; (8000714 <HAL_ADC_MspInit+0x88>)
 80006b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006b2:	4a18      	ldr	r2, [pc, #96]	; (8000714 <HAL_ADC_MspInit+0x88>)
 80006b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006b8:	6453      	str	r3, [r2, #68]	; 0x44
 80006ba:	4b16      	ldr	r3, [pc, #88]	; (8000714 <HAL_ADC_MspInit+0x88>)
 80006bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006c2:	613b      	str	r3, [r7, #16]
 80006c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c6:	4b13      	ldr	r3, [pc, #76]	; (8000714 <HAL_ADC_MspInit+0x88>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a12      	ldr	r2, [pc, #72]	; (8000714 <HAL_ADC_MspInit+0x88>)
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <HAL_ADC_MspInit+0x88>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	60fb      	str	r3, [r7, #12]
 80006dc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006de:	2308      	movs	r3, #8
 80006e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006e2:	2303      	movs	r3, #3
 80006e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e6:	2300      	movs	r3, #0
 80006e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ea:	f107 0314 	add.w	r3, r7, #20
 80006ee:	4619      	mov	r1, r3
 80006f0:	4809      	ldr	r0, [pc, #36]	; (8000718 <HAL_ADC_MspInit+0x8c>)
 80006f2:	f002 f8bb 	bl	800286c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 80006f6:	2200      	movs	r2, #0
 80006f8:	2100      	movs	r1, #0
 80006fa:	2012      	movs	r0, #18
 80006fc:	f001 ffdf 	bl	80026be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000700:	2012      	movs	r0, #18
 8000702:	f001 fff8 	bl	80026f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000706:	bf00      	nop
 8000708:	3728      	adds	r7, #40	; 0x28
 800070a:	46bd      	mov	sp, r7
 800070c:	bd80      	pop	{r7, pc}
 800070e:	bf00      	nop
 8000710:	40012000 	.word	0x40012000
 8000714:	40023800 	.word	0x40023800
 8000718:	40020000 	.word	0x40020000

0800071c <BH1750_Init>:
 *  Created on: Nov 13, 2021
 *      Author: konst
 */
#include "bh1750.h"

void BH1750_Init(BH1750_HandleTypeDef* hbh1750, uint8_t command){
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af02      	add	r7, sp, #8
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	460b      	mov	r3, r1
 8000726:	70fb      	strb	r3, [r7, #3]
uint8_t start = BH1750_POWER_ON;
 8000728:	2301      	movs	r3, #1
 800072a:	73fb      	strb	r3, [r7, #15]
HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &start, 1, hbh1750->Timeout);
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	6818      	ldr	r0, [r3, #0]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	791b      	ldrb	r3, [r3, #4]
 8000734:	b299      	uxth	r1, r3
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	689b      	ldr	r3, [r3, #8]
 800073a:	f107 020f 	add.w	r2, r7, #15
 800073e:	9300      	str	r3, [sp, #0]
 8000740:	2301      	movs	r3, #1
 8000742:	f002 fb1b 	bl	8002d7c <HAL_I2C_Master_Transmit>
HAL_I2C_Master_Transmit(hbh1750->I2C, hbh1750->Address, &command, 1,hbh1750->Timeout);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	6818      	ldr	r0, [r3, #0]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	791b      	ldrb	r3, [r3, #4]
 800074e:	b299      	uxth	r1, r3
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	689b      	ldr	r3, [r3, #8]
 8000754:	1cfa      	adds	r2, r7, #3
 8000756:	9300      	str	r3, [sp, #0]
 8000758:	2301      	movs	r3, #1
 800075a:	f002 fb0f 	bl	8002d7c <HAL_I2C_Master_Transmit>
}
 800075e:	bf00      	nop
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
	...

08000768 <BH1750_ReadLux>:


float BH1750_ReadLux(BH1750_HandleTypeDef* hbh1750){
 8000768:	b580      	push	{r7, lr}
 800076a:	b086      	sub	sp, #24
 800076c:	af02      	add	r7, sp, #8
 800076e:	6078      	str	r0, [r7, #4]
float light = 0;
 8000770:	f04f 0300 	mov.w	r3, #0
 8000774:	60fb      	str	r3, [r7, #12]
uint8_t buff[2];
HAL_I2C_Master_Receive(hbh1750->I2C, hbh1750->Address, buff, 2, hbh1750->Timeout);
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	6818      	ldr	r0, [r3, #0]
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	791b      	ldrb	r3, [r3, #4]
 800077e:	b299      	uxth	r1, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	689b      	ldr	r3, [r3, #8]
 8000784:	f107 0208 	add.w	r2, r7, #8
 8000788:	9300      	str	r3, [sp, #0]
 800078a:	2302      	movs	r3, #2
 800078c:	f002 fbea 	bl	8002f64 <HAL_I2C_Master_Receive>
light = ((buff[0] << 8) | buff[1]) / 1.2;
 8000790:	7a3b      	ldrb	r3, [r7, #8]
 8000792:	021b      	lsls	r3, r3, #8
 8000794:	7a7a      	ldrb	r2, [r7, #9]
 8000796:	4313      	orrs	r3, r2
 8000798:	ee07 3a90 	vmov	s15, r3
 800079c:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80007a0:	ed9f 5b07 	vldr	d5, [pc, #28]	; 80007c0 <BH1750_ReadLux+0x58>
 80007a4:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80007a8:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80007ac:	edc7 7a03 	vstr	s15, [r7, #12]
return light;
 80007b0:	68fb      	ldr	r3, [r7, #12]
 80007b2:	ee07 3a90 	vmov	s15, r3
}
 80007b6:	eeb0 0a67 	vmov.f32	s0, s15
 80007ba:	3710      	adds	r7, #16
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	33333333 	.word	0x33333333
 80007c4:	3ff33333 	.word	0x3ff33333

080007c8 <MX_GPIO_Init>:
     PA12   ------> USB_OTG_FS_DP
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08c      	sub	sp, #48	; 0x30
 80007cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	f107 031c 	add.w	r3, r7, #28
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007de:	4b81      	ldr	r3, [pc, #516]	; (80009e4 <MX_GPIO_Init+0x21c>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	4a80      	ldr	r2, [pc, #512]	; (80009e4 <MX_GPIO_Init+0x21c>)
 80007e4:	f043 0304 	orr.w	r3, r3, #4
 80007e8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ea:	4b7e      	ldr	r3, [pc, #504]	; (80009e4 <MX_GPIO_Init+0x21c>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	f003 0304 	and.w	r3, r3, #4
 80007f2:	61bb      	str	r3, [r7, #24]
 80007f4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007f6:	4b7b      	ldr	r3, [pc, #492]	; (80009e4 <MX_GPIO_Init+0x21c>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	4a7a      	ldr	r2, [pc, #488]	; (80009e4 <MX_GPIO_Init+0x21c>)
 80007fc:	f043 0320 	orr.w	r3, r3, #32
 8000800:	6313      	str	r3, [r2, #48]	; 0x30
 8000802:	4b78      	ldr	r3, [pc, #480]	; (80009e4 <MX_GPIO_Init+0x21c>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	f003 0320 	and.w	r3, r3, #32
 800080a:	617b      	str	r3, [r7, #20]
 800080c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800080e:	4b75      	ldr	r3, [pc, #468]	; (80009e4 <MX_GPIO_Init+0x21c>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	4a74      	ldr	r2, [pc, #464]	; (80009e4 <MX_GPIO_Init+0x21c>)
 8000814:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000818:	6313      	str	r3, [r2, #48]	; 0x30
 800081a:	4b72      	ldr	r3, [pc, #456]	; (80009e4 <MX_GPIO_Init+0x21c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000822:	613b      	str	r3, [r7, #16]
 8000824:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000826:	4b6f      	ldr	r3, [pc, #444]	; (80009e4 <MX_GPIO_Init+0x21c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a6e      	ldr	r2, [pc, #440]	; (80009e4 <MX_GPIO_Init+0x21c>)
 800082c:	f043 0301 	orr.w	r3, r3, #1
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b6c      	ldr	r3, [pc, #432]	; (80009e4 <MX_GPIO_Init+0x21c>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0301 	and.w	r3, r3, #1
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800083e:	4b69      	ldr	r3, [pc, #420]	; (80009e4 <MX_GPIO_Init+0x21c>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	4a68      	ldr	r2, [pc, #416]	; (80009e4 <MX_GPIO_Init+0x21c>)
 8000844:	f043 0302 	orr.w	r3, r3, #2
 8000848:	6313      	str	r3, [r2, #48]	; 0x30
 800084a:	4b66      	ldr	r3, [pc, #408]	; (80009e4 <MX_GPIO_Init+0x21c>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	60bb      	str	r3, [r7, #8]
 8000854:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000856:	4b63      	ldr	r3, [pc, #396]	; (80009e4 <MX_GPIO_Init+0x21c>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	4a62      	ldr	r2, [pc, #392]	; (80009e4 <MX_GPIO_Init+0x21c>)
 800085c:	f043 0308 	orr.w	r3, r3, #8
 8000860:	6313      	str	r3, [r2, #48]	; 0x30
 8000862:	4b60      	ldr	r3, [pc, #384]	; (80009e4 <MX_GPIO_Init+0x21c>)
 8000864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000866:	f003 0308 	and.w	r3, r3, #8
 800086a:	607b      	str	r3, [r7, #4]
 800086c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800086e:	4b5d      	ldr	r3, [pc, #372]	; (80009e4 <MX_GPIO_Init+0x21c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a5c      	ldr	r2, [pc, #368]	; (80009e4 <MX_GPIO_Init+0x21c>)
 8000874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b5a      	ldr	r3, [pc, #360]	; (80009e4 <MX_GPIO_Init+0x21c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000882:	603b      	str	r3, [r7, #0]
 8000884:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000886:	2200      	movs	r2, #0
 8000888:	f244 0181 	movw	r1, #16513	; 0x4081
 800088c:	4856      	ldr	r0, [pc, #344]	; (80009e8 <MX_GPIO_Init+0x220>)
 800088e:	f002 f999 	bl	8002bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000892:	2200      	movs	r2, #0
 8000894:	2140      	movs	r1, #64	; 0x40
 8000896:	4855      	ldr	r0, [pc, #340]	; (80009ec <MX_GPIO_Init+0x224>)
 8000898:	f002 f994 	bl	8002bc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800089c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008a2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a8:	2300      	movs	r3, #0
 80008aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80008ac:	f107 031c 	add.w	r3, r7, #28
 80008b0:	4619      	mov	r1, r3
 80008b2:	484f      	ldr	r0, [pc, #316]	; (80009f0 <MX_GPIO_Init+0x228>)
 80008b4:	f001 ffda 	bl	800286c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80008b8:	2332      	movs	r3, #50	; 0x32
 80008ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008bc:	2302      	movs	r3, #2
 80008be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008c4:	2303      	movs	r3, #3
 80008c6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008c8:	230b      	movs	r3, #11
 80008ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008cc:	f107 031c 	add.w	r3, r7, #28
 80008d0:	4619      	mov	r1, r3
 80008d2:	4847      	ldr	r0, [pc, #284]	; (80009f0 <MX_GPIO_Init+0x228>)
 80008d4:	f001 ffca 	bl	800286c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80008d8:	2386      	movs	r3, #134	; 0x86
 80008da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008dc:	2302      	movs	r3, #2
 80008de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e4:	2303      	movs	r3, #3
 80008e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008e8:	230b      	movs	r3, #11
 80008ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008ec:	f107 031c 	add.w	r3, r7, #28
 80008f0:	4619      	mov	r1, r3
 80008f2:	4840      	ldr	r0, [pc, #256]	; (80009f4 <MX_GPIO_Init+0x22c>)
 80008f4:	f001 ffba 	bl	800286c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80008f8:	f244 0381 	movw	r3, #16513	; 0x4081
 80008fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fe:	2301      	movs	r3, #1
 8000900:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000906:	2300      	movs	r3, #0
 8000908:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090a:	f107 031c 	add.w	r3, r7, #28
 800090e:	4619      	mov	r1, r3
 8000910:	4835      	ldr	r0, [pc, #212]	; (80009e8 <MX_GPIO_Init+0x220>)
 8000912:	f001 ffab 	bl	800286c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000916:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800091a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091c:	2302      	movs	r3, #2
 800091e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000920:	2300      	movs	r3, #0
 8000922:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000924:	2303      	movs	r3, #3
 8000926:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000928:	230b      	movs	r3, #11
 800092a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800092c:	f107 031c 	add.w	r3, r7, #28
 8000930:	4619      	mov	r1, r3
 8000932:	482d      	ldr	r0, [pc, #180]	; (80009e8 <MX_GPIO_Init+0x220>)
 8000934:	f001 ff9a 	bl	800286c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000938:	2340      	movs	r3, #64	; 0x40
 800093a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093c:	2301      	movs	r3, #1
 800093e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000940:	2300      	movs	r3, #0
 8000942:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000944:	2300      	movs	r3, #0
 8000946:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 031c 	add.w	r3, r7, #28
 800094c:	4619      	mov	r1, r3
 800094e:	4827      	ldr	r0, [pc, #156]	; (80009ec <MX_GPIO_Init+0x224>)
 8000950:	f001 ff8c 	bl	800286c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000954:	2380      	movs	r3, #128	; 0x80
 8000956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000958:	2300      	movs	r3, #0
 800095a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095c:	2300      	movs	r3, #0
 800095e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	4821      	ldr	r0, [pc, #132]	; (80009ec <MX_GPIO_Init+0x224>)
 8000968:	f001 ff80 	bl	800286c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800096c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000970:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000972:	2302      	movs	r3, #2
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800097a:	2303      	movs	r3, #3
 800097c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800097e:	230a      	movs	r3, #10
 8000980:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000982:	f107 031c 	add.w	r3, r7, #28
 8000986:	4619      	mov	r1, r3
 8000988:	481a      	ldr	r0, [pc, #104]	; (80009f4 <MX_GPIO_Init+0x22c>)
 800098a:	f001 ff6f 	bl	800286c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800098e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000992:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000994:	2300      	movs	r3, #0
 8000996:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	4619      	mov	r1, r3
 80009a2:	4814      	ldr	r0, [pc, #80]	; (80009f4 <MX_GPIO_Init+0x22c>)
 80009a4:	f001 ff62 	bl	800286c <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80009a8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80009ac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ae:	2302      	movs	r3, #2
 80009b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b2:	2300      	movs	r3, #0
 80009b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009b6:	2303      	movs	r3, #3
 80009b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009ba:	230b      	movs	r3, #11
 80009bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009be:	f107 031c 	add.w	r3, r7, #28
 80009c2:	4619      	mov	r1, r3
 80009c4:	4809      	ldr	r0, [pc, #36]	; (80009ec <MX_GPIO_Init+0x224>)
 80009c6:	f001 ff51 	bl	800286c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009ca:	2200      	movs	r2, #0
 80009cc:	2100      	movs	r1, #0
 80009ce:	2028      	movs	r0, #40	; 0x28
 80009d0:	f001 fe75 	bl	80026be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009d4:	2028      	movs	r0, #40	; 0x28
 80009d6:	f001 fe8e 	bl	80026f6 <HAL_NVIC_EnableIRQ>

}
 80009da:	bf00      	nop
 80009dc:	3730      	adds	r7, #48	; 0x30
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40023800 	.word	0x40023800
 80009e8:	40020400 	.word	0x40020400
 80009ec:	40021800 	.word	0x40021800
 80009f0:	40020800 	.word	0x40020800
 80009f4:	40020000 	.word	0x40020000

080009f8 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
I2C_HandleTypeDef hi2c2;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009fc:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <MX_I2C1_Init+0x74>)
 80009fe:	4a1c      	ldr	r2, [pc, #112]	; (8000a70 <MX_I2C1_Init+0x78>)
 8000a00:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000a02:	4b1a      	ldr	r3, [pc, #104]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a04:	4a1b      	ldr	r2, [pc, #108]	; (8000a74 <MX_I2C1_Init+0x7c>)
 8000a06:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000a08:	4b18      	ldr	r3, [pc, #96]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a0e:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a10:	2201      	movs	r2, #1
 8000a12:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a14:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000a1a:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000a20:	4b12      	ldr	r3, [pc, #72]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a26:	4b11      	ldr	r3, [pc, #68]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a2c:	4b0f      	ldr	r3, [pc, #60]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a32:	480e      	ldr	r0, [pc, #56]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a34:	f002 f912 	bl	8002c5c <HAL_I2C_Init>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000a3e:	f000 fd01 	bl	8001444 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000a42:	2100      	movs	r1, #0
 8000a44:	4809      	ldr	r0, [pc, #36]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a46:	f003 fb6f 	bl	8004128 <HAL_I2CEx_ConfigAnalogFilter>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d001      	beq.n	8000a54 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000a50:	f000 fcf8 	bl	8001444 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000a54:	2100      	movs	r1, #0
 8000a56:	4805      	ldr	r0, [pc, #20]	; (8000a6c <MX_I2C1_Init+0x74>)
 8000a58:	f003 fbb1 	bl	80041be <HAL_I2CEx_ConfigDigitalFilter>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000a62:	f000 fcef 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a66:	bf00      	nop
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000188 	.word	0x20000188
 8000a70:	40005400 	.word	0x40005400
 8000a74:	20404768 	.word	0x20404768

08000a78 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000a7c:	4b1b      	ldr	r3, [pc, #108]	; (8000aec <MX_I2C2_Init+0x74>)
 8000a7e:	4a1c      	ldr	r2, [pc, #112]	; (8000af0 <MX_I2C2_Init+0x78>)
 8000a80:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 8000a82:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <MX_I2C2_Init+0x74>)
 8000a84:	4a1b      	ldr	r2, [pc, #108]	; (8000af4 <MX_I2C2_Init+0x7c>)
 8000a86:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000a88:	4b18      	ldr	r3, [pc, #96]	; (8000aec <MX_I2C2_Init+0x74>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a8e:	4b17      	ldr	r3, [pc, #92]	; (8000aec <MX_I2C2_Init+0x74>)
 8000a90:	2201      	movs	r2, #1
 8000a92:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a94:	4b15      	ldr	r3, [pc, #84]	; (8000aec <MX_I2C2_Init+0x74>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000a9a:	4b14      	ldr	r3, [pc, #80]	; (8000aec <MX_I2C2_Init+0x74>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000aa0:	4b12      	ldr	r3, [pc, #72]	; (8000aec <MX_I2C2_Init+0x74>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000aa6:	4b11      	ldr	r3, [pc, #68]	; (8000aec <MX_I2C2_Init+0x74>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000aac:	4b0f      	ldr	r3, [pc, #60]	; (8000aec <MX_I2C2_Init+0x74>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000ab2:	480e      	ldr	r0, [pc, #56]	; (8000aec <MX_I2C2_Init+0x74>)
 8000ab4:	f002 f8d2 	bl	8002c5c <HAL_I2C_Init>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000abe:	f000 fcc1 	bl	8001444 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4809      	ldr	r0, [pc, #36]	; (8000aec <MX_I2C2_Init+0x74>)
 8000ac6:	f003 fb2f 	bl	8004128 <HAL_I2CEx_ConfigAnalogFilter>
 8000aca:	4603      	mov	r3, r0
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d001      	beq.n	8000ad4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000ad0:	f000 fcb8 	bl	8001444 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000ad4:	2100      	movs	r1, #0
 8000ad6:	4805      	ldr	r0, [pc, #20]	; (8000aec <MX_I2C2_Init+0x74>)
 8000ad8:	f003 fb71 	bl	80041be <HAL_I2CEx_ConfigDigitalFilter>
 8000adc:	4603      	mov	r3, r0
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d001      	beq.n	8000ae6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000ae2:	f000 fcaf 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000ae6:	bf00      	nop
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	200001d4 	.word	0x200001d4
 8000af0:	40005800 	.word	0x40005800
 8000af4:	20404768 	.word	0x20404768

08000af8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08c      	sub	sp, #48	; 0x30
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 031c 	add.w	r3, r7, #28
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	4a36      	ldr	r2, [pc, #216]	; (8000bf0 <HAL_I2C_MspInit+0xf8>)
 8000b16:	4293      	cmp	r3, r2
 8000b18:	d139      	bne.n	8000b8e <HAL_I2C_MspInit+0x96>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b1a:	4b36      	ldr	r3, [pc, #216]	; (8000bf4 <HAL_I2C_MspInit+0xfc>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a35      	ldr	r2, [pc, #212]	; (8000bf4 <HAL_I2C_MspInit+0xfc>)
 8000b20:	f043 0302 	orr.w	r3, r3, #2
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b33      	ldr	r3, [pc, #204]	; (8000bf4 <HAL_I2C_MspInit+0xfc>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0302 	and.w	r3, r3, #2
 8000b2e:	61bb      	str	r3, [r7, #24]
 8000b30:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b32:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b38:	2312      	movs	r3, #18
 8000b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b40:	2303      	movs	r3, #3
 8000b42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b44:	2304      	movs	r3, #4
 8000b46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b48:	f107 031c 	add.w	r3, r7, #28
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	482a      	ldr	r0, [pc, #168]	; (8000bf8 <HAL_I2C_MspInit+0x100>)
 8000b50:	f001 fe8c 	bl	800286c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b54:	4b27      	ldr	r3, [pc, #156]	; (8000bf4 <HAL_I2C_MspInit+0xfc>)
 8000b56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b58:	4a26      	ldr	r2, [pc, #152]	; (8000bf4 <HAL_I2C_MspInit+0xfc>)
 8000b5a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b60:	4b24      	ldr	r3, [pc, #144]	; (8000bf4 <HAL_I2C_MspInit+0xfc>)
 8000b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b68:	617b      	str	r3, [r7, #20]
 8000b6a:	697b      	ldr	r3, [r7, #20]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2100      	movs	r1, #0
 8000b70:	201f      	movs	r0, #31
 8000b72:	f001 fda4 	bl	80026be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000b76:	201f      	movs	r0, #31
 8000b78:	f001 fdbd 	bl	80026f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2100      	movs	r1, #0
 8000b80:	2020      	movs	r0, #32
 8000b82:	f001 fd9c 	bl	80026be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000b86:	2020      	movs	r0, #32
 8000b88:	f001 fdb5 	bl	80026f6 <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8000b8c:	e02c      	b.n	8000be8 <HAL_I2C_MspInit+0xf0>
  else if(i2cHandle->Instance==I2C2)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a1a      	ldr	r2, [pc, #104]	; (8000bfc <HAL_I2C_MspInit+0x104>)
 8000b94:	4293      	cmp	r3, r2
 8000b96:	d127      	bne.n	8000be8 <HAL_I2C_MspInit+0xf0>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000b98:	4b16      	ldr	r3, [pc, #88]	; (8000bf4 <HAL_I2C_MspInit+0xfc>)
 8000b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9c:	4a15      	ldr	r2, [pc, #84]	; (8000bf4 <HAL_I2C_MspInit+0xfc>)
 8000b9e:	f043 0320 	orr.w	r3, r3, #32
 8000ba2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ba4:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <HAL_I2C_MspInit+0xfc>)
 8000ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba8:	f003 0320 	and.w	r3, r3, #32
 8000bac:	613b      	str	r3, [r7, #16]
 8000bae:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bb0:	2303      	movs	r3, #3
 8000bb2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bb4:	2312      	movs	r3, #18
 8000bb6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb8:	2300      	movs	r3, #0
 8000bba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bbc:	2303      	movs	r3, #3
 8000bbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8000bc0:	2304      	movs	r3, #4
 8000bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000bc4:	f107 031c 	add.w	r3, r7, #28
 8000bc8:	4619      	mov	r1, r3
 8000bca:	480d      	ldr	r0, [pc, #52]	; (8000c00 <HAL_I2C_MspInit+0x108>)
 8000bcc:	f001 fe4e 	bl	800286c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8000bd0:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <HAL_I2C_MspInit+0xfc>)
 8000bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd4:	4a07      	ldr	r2, [pc, #28]	; (8000bf4 <HAL_I2C_MspInit+0xfc>)
 8000bd6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bda:	6413      	str	r3, [r2, #64]	; 0x40
 8000bdc:	4b05      	ldr	r3, [pc, #20]	; (8000bf4 <HAL_I2C_MspInit+0xfc>)
 8000bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000be4:	60fb      	str	r3, [r7, #12]
 8000be6:	68fb      	ldr	r3, [r7, #12]
}
 8000be8:	bf00      	nop
 8000bea:	3730      	adds	r7, #48	; 0x30
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}
 8000bf0:	40005400 	.word	0x40005400
 8000bf4:	40023800 	.word	0x40023800
 8000bf8:	40020400 	.word	0x40020400
 8000bfc:	40005800 	.word	0x40005800
 8000c00:	40021400 	.word	0x40021400

08000c04 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c2;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af02      	add	r7, sp, #8
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000c0e:	79fb      	ldrb	r3, [r7, #7]
 8000c10:	f023 030f 	bic.w	r3, r3, #15
 8000c14:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000c16:	79fb      	ldrb	r3, [r7, #7]
 8000c18:	011b      	lsls	r3, r3, #4
 8000c1a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000c1c:	7bfb      	ldrb	r3, [r7, #15]
 8000c1e:	f043 030c 	orr.w	r3, r3, #12
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000c26:	7bfb      	ldrb	r3, [r7, #15]
 8000c28:	f043 0308 	orr.w	r3, r3, #8
 8000c2c:	b2db      	uxtb	r3, r3
 8000c2e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000c30:	7bbb      	ldrb	r3, [r7, #14]
 8000c32:	f043 030c 	orr.w	r3, r3, #12
 8000c36:	b2db      	uxtb	r3, r3
 8000c38:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000c3a:	7bbb      	ldrb	r3, [r7, #14]
 8000c3c:	f043 0308 	orr.w	r3, r3, #8
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *)data_t, 4, 100);
 8000c44:	f107 0208 	add.w	r2, r7, #8
 8000c48:	2364      	movs	r3, #100	; 0x64
 8000c4a:	9300      	str	r3, [sp, #0]
 8000c4c:	2304      	movs	r3, #4
 8000c4e:	214e      	movs	r1, #78	; 0x4e
 8000c50:	4803      	ldr	r0, [pc, #12]	; (8000c60 <lcd_send_cmd+0x5c>)
 8000c52:	f002 f893 	bl	8002d7c <HAL_I2C_Master_Transmit>

}
 8000c56:	bf00      	nop
 8000c58:	3710      	adds	r7, #16
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	200001d4 	.word	0x200001d4

08000c64 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b086      	sub	sp, #24
 8000c68:	af02      	add	r7, sp, #8
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000c6e:	79fb      	ldrb	r3, [r7, #7]
 8000c70:	f023 030f 	bic.w	r3, r3, #15
 8000c74:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000c76:	79fb      	ldrb	r3, [r7, #7]
 8000c78:	011b      	lsls	r3, r3, #4
 8000c7a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000c7c:	7bfb      	ldrb	r3, [r7, #15]
 8000c7e:	f043 030d 	orr.w	r3, r3, #13
 8000c82:	b2db      	uxtb	r3, r3
 8000c84:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000c86:	7bfb      	ldrb	r3, [r7, #15]
 8000c88:	f043 0309 	orr.w	r3, r3, #9
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000c90:	7bbb      	ldrb	r3, [r7, #14]
 8000c92:	f043 030d 	orr.w	r3, r3, #13
 8000c96:	b2db      	uxtb	r3, r3
 8000c98:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000c9a:	7bbb      	ldrb	r3, [r7, #14]
 8000c9c:	f043 0309 	orr.w	r3, r3, #9
 8000ca0:	b2db      	uxtb	r3, r3
 8000ca2:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit(&hi2c2, SLAVE_ADDRESS_LCD,(uint8_t *)data_t, 4, 100);
 8000ca4:	f107 0208 	add.w	r2, r7, #8
 8000ca8:	2364      	movs	r3, #100	; 0x64
 8000caa:	9300      	str	r3, [sp, #0]
 8000cac:	2304      	movs	r3, #4
 8000cae:	214e      	movs	r1, #78	; 0x4e
 8000cb0:	4803      	ldr	r0, [pc, #12]	; (8000cc0 <lcd_send_data+0x5c>)
 8000cb2:	f002 f863 	bl	8002d7c <HAL_I2C_Master_Transmit>

}
 8000cb6:	bf00      	nop
 8000cb8:	3710      	adds	r7, #16
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	200001d4 	.word	0x200001d4

08000cc4 <lcd_clear>:

void lcd_clear (void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x80);
 8000cca:	2080      	movs	r0, #128	; 0x80
 8000ccc:	f7ff ff9a 	bl	8000c04 <lcd_send_cmd>
	for (int i=0; i<70; i++)
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	607b      	str	r3, [r7, #4]
 8000cd4:	e005      	b.n	8000ce2 <lcd_clear+0x1e>
	{
		lcd_send_data (' ');
 8000cd6:	2020      	movs	r0, #32
 8000cd8:	f7ff ffc4 	bl	8000c64 <lcd_send_data>
	for (int i=0; i<70; i++)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	3301      	adds	r3, #1
 8000ce0:	607b      	str	r3, [r7, #4]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2b45      	cmp	r3, #69	; 0x45
 8000ce6:	ddf6      	ble.n	8000cd6 <lcd_clear+0x12>
	}
}
 8000ce8:	bf00      	nop
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <lcd_put_cur>:

void lcd_put_cur(int row, int col)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	6078      	str	r0, [r7, #4]
 8000cfa:	6039      	str	r1, [r7, #0]
    switch (row)
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d003      	beq.n	8000d0a <lcd_put_cur+0x18>
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d005      	beq.n	8000d14 <lcd_put_cur+0x22>
 8000d08:	e009      	b.n	8000d1e <lcd_put_cur+0x2c>
    {
        case 0:
            col |= 0x80;
 8000d0a:	683b      	ldr	r3, [r7, #0]
 8000d0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000d10:	603b      	str	r3, [r7, #0]
            break;
 8000d12:	e004      	b.n	8000d1e <lcd_put_cur+0x2c>
        case 1:
            col |= 0xC0;
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8000d1a:	603b      	str	r3, [r7, #0]
            break;
 8000d1c:	bf00      	nop
    }

    lcd_send_cmd (col);
 8000d1e:	683b      	ldr	r3, [r7, #0]
 8000d20:	b2db      	uxtb	r3, r3
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff ff6e 	bl	8000c04 <lcd_send_cmd>
}
 8000d28:	bf00      	nop
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}

08000d30 <lcd_init>:


void lcd_init (void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8000d34:	2032      	movs	r0, #50	; 0x32
 8000d36:	f000 fff7 	bl	8001d28 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000d3a:	2030      	movs	r0, #48	; 0x30
 8000d3c:	f7ff ff62 	bl	8000c04 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 8000d40:	2005      	movs	r0, #5
 8000d42:	f000 fff1 	bl	8001d28 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000d46:	2030      	movs	r0, #48	; 0x30
 8000d48:	f7ff ff5c 	bl	8000c04 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 8000d4c:	2001      	movs	r0, #1
 8000d4e:	f000 ffeb 	bl	8001d28 <HAL_Delay>
	lcd_send_cmd (0x30);
 8000d52:	2030      	movs	r0, #48	; 0x30
 8000d54:	f7ff ff56 	bl	8000c04 <lcd_send_cmd>
	HAL_Delay(10);
 8000d58:	200a      	movs	r0, #10
 8000d5a:	f000 ffe5 	bl	8001d28 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 8000d5e:	2020      	movs	r0, #32
 8000d60:	f7ff ff50 	bl	8000c04 <lcd_send_cmd>
	HAL_Delay(10);
 8000d64:	200a      	movs	r0, #10
 8000d66:	f000 ffdf 	bl	8001d28 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 8000d6a:	2028      	movs	r0, #40	; 0x28
 8000d6c:	f7ff ff4a 	bl	8000c04 <lcd_send_cmd>
	HAL_Delay(1);
 8000d70:	2001      	movs	r0, #1
 8000d72:	f000 ffd9 	bl	8001d28 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 8000d76:	2008      	movs	r0, #8
 8000d78:	f7ff ff44 	bl	8000c04 <lcd_send_cmd>
	HAL_Delay(1);
 8000d7c:	2001      	movs	r0, #1
 8000d7e:	f000 ffd3 	bl	8001d28 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 8000d82:	2001      	movs	r0, #1
 8000d84:	f7ff ff3e 	bl	8000c04 <lcd_send_cmd>
	HAL_Delay(1);
 8000d88:	2001      	movs	r0, #1
 8000d8a:	f000 ffcd 	bl	8001d28 <HAL_Delay>
	HAL_Delay(1);
 8000d8e:	2001      	movs	r0, #1
 8000d90:	f000 ffca 	bl	8001d28 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 8000d94:	2006      	movs	r0, #6
 8000d96:	f7ff ff35 	bl	8000c04 <lcd_send_cmd>
	HAL_Delay(1);
 8000d9a:	2001      	movs	r0, #1
 8000d9c:	f000 ffc4 	bl	8001d28 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8000da0:	200c      	movs	r0, #12
 8000da2:	f7ff ff2f 	bl	8000c04 <lcd_send_cmd>
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}

08000daa <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b082      	sub	sp, #8
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000db2:	e006      	b.n	8000dc2 <lcd_send_string+0x18>
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	1c5a      	adds	r2, r3, #1
 8000db8:	607a      	str	r2, [r7, #4]
 8000dba:	781b      	ldrb	r3, [r3, #0]
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff ff51 	bl	8000c64 <lcd_send_data>
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	781b      	ldrb	r3, [r3, #0]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d1f4      	bne.n	8000db4 <lcd_send_string+0xa>
}
 8000dca:	bf00      	nop
 8000dcc:	bf00      	nop
 8000dce:	3708      	adds	r7, #8
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}

08000dd4 <ColorsGenerator>:
 *      Author: Konstanty
 */
#include "led.h"


void ColorsGenerator(LED_HandleTypeDef* led, float rgb_duty){
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
 8000ddc:	ed87 0a00 	vstr	s0, [r7]
	led->duty_B = rgb_duty*led->B;
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	ed93 7a02 	vldr	s14, [r3, #8]
 8000de6:	edd7 7a00 	vldr	s15, [r7]
 8000dea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	edc3 7a05 	vstr	s15, [r3, #20]
	led->duty_G = rgb_duty*led->G;
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	ed93 7a01 	vldr	s14, [r3, #4]
 8000dfa:	edd7 7a00 	vldr	s15, [r7]
 8000dfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	edc3 7a04 	vstr	s15, [r3, #16]
	led->duty_R = rgb_duty*led->R;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	ed93 7a00 	vldr	s14, [r3]
 8000e0e:	edd7 7a00 	vldr	s15, [r7]
 8000e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	edc3 7a03 	vstr	s15, [r3, #12]
};
 8000e1c:	bf00      	nop
 8000e1e:	370c      	adds	r7, #12
 8000e20:	46bd      	mov	sp, r7
 8000e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e26:	4770      	bx	lr

08000e28 <HAL_UART_RxCpltCallback>:




void HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b084      	sub	sp, #16
 8000e2c:	af02      	add	r7, sp, #8
 8000e2e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3)
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	681b      	ldr	r3, [r3, #0]
 8000e34:	4a55      	ldr	r2, [pc, #340]	; (8000f8c <HAL_UART_RxCpltCallback+0x164>)
 8000e36:	4293      	cmp	r3, r2
 8000e38:	f040 80a4 	bne.w	8000f84 <HAL_UART_RxCpltCallback+0x15c>
	{

		if(wiadomosc[0] == 'K' && wiadomosc[1] == ':' && wiadomosc[2] == 'R' && wiadomosc[6] == 'G' && wiadomosc[10] == 'B' && wiadomosc[14] == ',' && wiadomosc[15] == 'Y' && wiadomosc[16] == ':' && wiadomosc[20] == ',' && wiadomosc[21] == 'O')
 8000e3c:	4b54      	ldr	r3, [pc, #336]	; (8000f90 <HAL_UART_RxCpltCallback+0x168>)
 8000e3e:	781b      	ldrb	r3, [r3, #0]
 8000e40:	2b4b      	cmp	r3, #75	; 0x4b
 8000e42:	f040 809a 	bne.w	8000f7a <HAL_UART_RxCpltCallback+0x152>
 8000e46:	4b52      	ldr	r3, [pc, #328]	; (8000f90 <HAL_UART_RxCpltCallback+0x168>)
 8000e48:	785b      	ldrb	r3, [r3, #1]
 8000e4a:	2b3a      	cmp	r3, #58	; 0x3a
 8000e4c:	f040 8095 	bne.w	8000f7a <HAL_UART_RxCpltCallback+0x152>
 8000e50:	4b4f      	ldr	r3, [pc, #316]	; (8000f90 <HAL_UART_RxCpltCallback+0x168>)
 8000e52:	789b      	ldrb	r3, [r3, #2]
 8000e54:	2b52      	cmp	r3, #82	; 0x52
 8000e56:	f040 8090 	bne.w	8000f7a <HAL_UART_RxCpltCallback+0x152>
 8000e5a:	4b4d      	ldr	r3, [pc, #308]	; (8000f90 <HAL_UART_RxCpltCallback+0x168>)
 8000e5c:	799b      	ldrb	r3, [r3, #6]
 8000e5e:	2b47      	cmp	r3, #71	; 0x47
 8000e60:	f040 808b 	bne.w	8000f7a <HAL_UART_RxCpltCallback+0x152>
 8000e64:	4b4a      	ldr	r3, [pc, #296]	; (8000f90 <HAL_UART_RxCpltCallback+0x168>)
 8000e66:	7a9b      	ldrb	r3, [r3, #10]
 8000e68:	2b42      	cmp	r3, #66	; 0x42
 8000e6a:	f040 8086 	bne.w	8000f7a <HAL_UART_RxCpltCallback+0x152>
 8000e6e:	4b48      	ldr	r3, [pc, #288]	; (8000f90 <HAL_UART_RxCpltCallback+0x168>)
 8000e70:	7b9b      	ldrb	r3, [r3, #14]
 8000e72:	2b2c      	cmp	r3, #44	; 0x2c
 8000e74:	f040 8081 	bne.w	8000f7a <HAL_UART_RxCpltCallback+0x152>
 8000e78:	4b45      	ldr	r3, [pc, #276]	; (8000f90 <HAL_UART_RxCpltCallback+0x168>)
 8000e7a:	7bdb      	ldrb	r3, [r3, #15]
 8000e7c:	2b59      	cmp	r3, #89	; 0x59
 8000e7e:	d17c      	bne.n	8000f7a <HAL_UART_RxCpltCallback+0x152>
 8000e80:	4b43      	ldr	r3, [pc, #268]	; (8000f90 <HAL_UART_RxCpltCallback+0x168>)
 8000e82:	7c1b      	ldrb	r3, [r3, #16]
 8000e84:	2b3a      	cmp	r3, #58	; 0x3a
 8000e86:	d178      	bne.n	8000f7a <HAL_UART_RxCpltCallback+0x152>
 8000e88:	4b41      	ldr	r3, [pc, #260]	; (8000f90 <HAL_UART_RxCpltCallback+0x168>)
 8000e8a:	7d1b      	ldrb	r3, [r3, #20]
 8000e8c:	2b2c      	cmp	r3, #44	; 0x2c
 8000e8e:	d174      	bne.n	8000f7a <HAL_UART_RxCpltCallback+0x152>
 8000e90:	4b3f      	ldr	r3, [pc, #252]	; (8000f90 <HAL_UART_RxCpltCallback+0x168>)
 8000e92:	7d5b      	ldrb	r3, [r3, #21]
 8000e94:	2b4f      	cmp	r3, #79	; 0x4f
 8000e96:	d170      	bne.n	8000f7a <HAL_UART_RxCpltCallback+0x152>
		{

			if(wiadomosc[22] == 'N')
 8000e98:	4b3d      	ldr	r3, [pc, #244]	; (8000f90 <HAL_UART_RxCpltCallback+0x168>)
 8000e9a:	7d9b      	ldrb	r3, [r3, #22]
 8000e9c:	2b4e      	cmp	r3, #78	; 0x4e
 8000e9e:	d159      	bne.n	8000f54 <HAL_UART_RxCpltCallback+0x12c>
			{
			sscanf(wiadomosc,"K:R%dG%dB%d,Y:%d,ON",&pulseR,&pulseG,&pulseB,&wartzad);
 8000ea0:	4b3c      	ldr	r3, [pc, #240]	; (8000f94 <HAL_UART_RxCpltCallback+0x16c>)
 8000ea2:	9301      	str	r3, [sp, #4]
 8000ea4:	4b3c      	ldr	r3, [pc, #240]	; (8000f98 <HAL_UART_RxCpltCallback+0x170>)
 8000ea6:	9300      	str	r3, [sp, #0]
 8000ea8:	4b3c      	ldr	r3, [pc, #240]	; (8000f9c <HAL_UART_RxCpltCallback+0x174>)
 8000eaa:	4a3d      	ldr	r2, [pc, #244]	; (8000fa0 <HAL_UART_RxCpltCallback+0x178>)
 8000eac:	493d      	ldr	r1, [pc, #244]	; (8000fa4 <HAL_UART_RxCpltCallback+0x17c>)
 8000eae:	4838      	ldr	r0, [pc, #224]	; (8000f90 <HAL_UART_RxCpltCallback+0x168>)
 8000eb0:	f007 f82e 	bl	8007f10 <siscanf>
			akcja = 1;
 8000eb4:	4b3c      	ldr	r3, [pc, #240]	; (8000fa8 <HAL_UART_RxCpltCallback+0x180>)
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	601a      	str	r2, [r3, #0]
			if(pulseR >=0 && pulseR <=100)
 8000eba:	4b39      	ldr	r3, [pc, #228]	; (8000fa0 <HAL_UART_RxCpltCallback+0x178>)
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	db10      	blt.n	8000ee4 <HAL_UART_RxCpltCallback+0xbc>
 8000ec2:	4b37      	ldr	r3, [pc, #220]	; (8000fa0 <HAL_UART_RxCpltCallback+0x178>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	2b64      	cmp	r3, #100	; 0x64
 8000ec8:	dc0c      	bgt.n	8000ee4 <HAL_UART_RxCpltCallback+0xbc>
			{
				led.R = (float)(pulseR/100.0f);
 8000eca:	4b35      	ldr	r3, [pc, #212]	; (8000fa0 <HAL_UART_RxCpltCallback+0x178>)
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	ee07 3a90 	vmov	s15, r3
 8000ed2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000ed6:	eddf 6a35 	vldr	s13, [pc, #212]	; 8000fac <HAL_UART_RxCpltCallback+0x184>
 8000eda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000ede:	4b34      	ldr	r3, [pc, #208]	; (8000fb0 <HAL_UART_RxCpltCallback+0x188>)
 8000ee0:	edc3 7a00 	vstr	s15, [r3]

			}
			if(pulseG >=0 && pulseG <=100)
 8000ee4:	4b2d      	ldr	r3, [pc, #180]	; (8000f9c <HAL_UART_RxCpltCallback+0x174>)
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	db10      	blt.n	8000f0e <HAL_UART_RxCpltCallback+0xe6>
 8000eec:	4b2b      	ldr	r3, [pc, #172]	; (8000f9c <HAL_UART_RxCpltCallback+0x174>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b64      	cmp	r3, #100	; 0x64
 8000ef2:	dc0c      	bgt.n	8000f0e <HAL_UART_RxCpltCallback+0xe6>
			{
				led.G = (float)(pulseG/100.0f);
 8000ef4:	4b29      	ldr	r3, [pc, #164]	; (8000f9c <HAL_UART_RxCpltCallback+0x174>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	ee07 3a90 	vmov	s15, r3
 8000efc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f00:	eddf 6a2a 	vldr	s13, [pc, #168]	; 8000fac <HAL_UART_RxCpltCallback+0x184>
 8000f04:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f08:	4b29      	ldr	r3, [pc, #164]	; (8000fb0 <HAL_UART_RxCpltCallback+0x188>)
 8000f0a:	edc3 7a01 	vstr	s15, [r3, #4]

			}
			if(pulseB >=0 && pulseB <=100)
 8000f0e:	4b22      	ldr	r3, [pc, #136]	; (8000f98 <HAL_UART_RxCpltCallback+0x170>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	db10      	blt.n	8000f38 <HAL_UART_RxCpltCallback+0x110>
 8000f16:	4b20      	ldr	r3, [pc, #128]	; (8000f98 <HAL_UART_RxCpltCallback+0x170>)
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	2b64      	cmp	r3, #100	; 0x64
 8000f1c:	dc0c      	bgt.n	8000f38 <HAL_UART_RxCpltCallback+0x110>
			{
				led.B = (float)(pulseB/100.0f);
 8000f1e:	4b1e      	ldr	r3, [pc, #120]	; (8000f98 <HAL_UART_RxCpltCallback+0x170>)
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	ee07 3a90 	vmov	s15, r3
 8000f26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f2a:	eddf 6a20 	vldr	s13, [pc, #128]	; 8000fac <HAL_UART_RxCpltCallback+0x184>
 8000f2e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f32:	4b1f      	ldr	r3, [pc, #124]	; (8000fb0 <HAL_UART_RxCpltCallback+0x188>)
 8000f34:	edc3 7a02 	vstr	s15, [r3, #8]

			}
			wartosc_zadana = (float)(wartzad*1.0f);
 8000f38:	4b16      	ldr	r3, [pc, #88]	; (8000f94 <HAL_UART_RxCpltCallback+0x16c>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	ee07 3a90 	vmov	s15, r3
 8000f40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000f44:	4b1b      	ldr	r3, [pc, #108]	; (8000fb4 <HAL_UART_RxCpltCallback+0x18c>)
 8000f46:	edc3 7a00 	vstr	s15, [r3]


			lcd_yr = wartzad;
 8000f4a:	4b12      	ldr	r3, [pc, #72]	; (8000f94 <HAL_UART_RxCpltCallback+0x16c>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4a1a      	ldr	r2, [pc, #104]	; (8000fb8 <HAL_UART_RxCpltCallback+0x190>)
 8000f50:	6013      	str	r3, [r2, #0]
 8000f52:	e012      	b.n	8000f7a <HAL_UART_RxCpltCallback+0x152>

			}
			else if(wiadomosc[22] == 'F')
 8000f54:	4b0e      	ldr	r3, [pc, #56]	; (8000f90 <HAL_UART_RxCpltCallback+0x168>)
 8000f56:	7d9b      	ldrb	r3, [r3, #22]
 8000f58:	2b46      	cmp	r3, #70	; 0x46
 8000f5a:	d103      	bne.n	8000f64 <HAL_UART_RxCpltCallback+0x13c>
			{
				akcja = 0;
 8000f5c:	4b12      	ldr	r3, [pc, #72]	; (8000fa8 <HAL_UART_RxCpltCallback+0x180>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	601a      	str	r2, [r3, #0]
 8000f62:	e00a      	b.n	8000f7a <HAL_UART_RxCpltCallback+0x152>

			}
			else
			{
				HAL_UART_Transmit(huart, (uint8_t*)errors, strlen(errors), 1000);
 8000f64:	4815      	ldr	r0, [pc, #84]	; (8000fbc <HAL_UART_RxCpltCallback+0x194>)
 8000f66:	f7ff f96b 	bl	8000240 <strlen>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	b29a      	uxth	r2, r3
 8000f6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f72:	4912      	ldr	r1, [pc, #72]	; (8000fbc <HAL_UART_RxCpltCallback+0x194>)
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f005 fcb1 	bl	80068dc <HAL_UART_Transmit>
			}
		}



		HAL_UART_Receive_IT(&huart3, (uint8_t*)wiadomosc, 23);
 8000f7a:	2217      	movs	r2, #23
 8000f7c:	4904      	ldr	r1, [pc, #16]	; (8000f90 <HAL_UART_RxCpltCallback+0x168>)
 8000f7e:	4810      	ldr	r0, [pc, #64]	; (8000fc0 <HAL_UART_RxCpltCallback+0x198>)
 8000f80:	f005 fd3f 	bl	8006a02 <HAL_UART_Receive_IT>

	}
}
 8000f84:	bf00      	nop
 8000f86:	3708      	adds	r7, #8
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}
 8000f8c:	40004800 	.word	0x40004800
 8000f90:	2000025c 	.word	0x2000025c
 8000f94:	20000120 	.word	0x20000120
 8000f98:	2000012c 	.word	0x2000012c
 8000f9c:	20000128 	.word	0x20000128
 8000fa0:	20000124 	.word	0x20000124
 8000fa4:	080090cc 	.word	0x080090cc
 8000fa8:	20000000 	.word	0x20000000
 8000fac:	42c80000 	.word	0x42c80000
 8000fb0:	20000038 	.word	0x20000038
 8000fb4:	20000004 	.word	0x20000004
 8000fb8:	20000130 	.word	0x20000130
 8000fbc:	20000058 	.word	0x20000058
 8000fc0:	20000378 	.word	0x20000378

08000fc4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM2)
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000fd4:	f040 80c4 	bne.w	8001160 <HAL_TIM_PeriodElapsedCallback+0x19c>
	{

		if(akcja == START)
 8000fd8:	4b63      	ldr	r3, [pc, #396]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	f040 8081 	bne.w	80010e4 <HAL_TIM_PeriodElapsedCallback+0x120>
		{
		LightIntensity = BH1750_ReadLux(&hbh1750_1);
 8000fe2:	4862      	ldr	r0, [pc, #392]	; (800116c <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8000fe4:	f7ff fbc0 	bl	8000768 <BH1750_ReadLux>
 8000fe8:	eef0 7a40 	vmov.f32	s15, s0
 8000fec:	4b60      	ldr	r3, [pc, #384]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000fee:	edc3 7a00 	vstr	s15, [r3]

		light = LightIntensity*100;
 8000ff2:	4b5f      	ldr	r3, [pc, #380]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8000ff4:	edd3 7a00 	vldr	s15, [r3]
 8000ff8:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 8001174 <HAL_TIM_PeriodElapsedCallback+0x1b0>
 8000ffc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001000:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001004:	ee17 2a90 	vmov	r2, s15
 8001008:	4b5b      	ldr	r3, [pc, #364]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 800100a:	601a      	str	r2, [r3, #0]

		lcd_light = LightIntensity*100;
 800100c:	4b58      	ldr	r3, [pc, #352]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 800100e:	edd3 7a00 	vldr	s15, [r3]
 8001012:	ed9f 7a58 	vldr	s14, [pc, #352]	; 8001174 <HAL_TIM_PeriodElapsedCallback+0x1b0>
 8001016:	ee67 7a87 	vmul.f32	s15, s15, s14
 800101a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800101e:	ee17 2a90 	vmov	r2, s15
 8001022:	4b56      	ldr	r3, [pc, #344]	; (800117c <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8001024:	601a      	str	r2, [r3, #0]

		sprintf(komunikat,"%d.%d\r\n",light/100,light%100);
 8001026:	4b54      	ldr	r3, [pc, #336]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4a55      	ldr	r2, [pc, #340]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 800102c:	fb82 1203 	smull	r1, r2, r2, r3
 8001030:	1152      	asrs	r2, r2, #5
 8001032:	17db      	asrs	r3, r3, #31
 8001034:	1ad0      	subs	r0, r2, r3
 8001036:	4b50      	ldr	r3, [pc, #320]	; (8001178 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a51      	ldr	r2, [pc, #324]	; (8001180 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 800103c:	fb82 1203 	smull	r1, r2, r2, r3
 8001040:	1151      	asrs	r1, r2, #5
 8001042:	17da      	asrs	r2, r3, #31
 8001044:	1a8a      	subs	r2, r1, r2
 8001046:	2164      	movs	r1, #100	; 0x64
 8001048:	fb01 f202 	mul.w	r2, r1, r2
 800104c:	1a9a      	subs	r2, r3, r2
 800104e:	4613      	mov	r3, r2
 8001050:	4602      	mov	r2, r0
 8001052:	494c      	ldr	r1, [pc, #304]	; (8001184 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8001054:	484c      	ldr	r0, [pc, #304]	; (8001188 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8001056:	f006 ff3b 	bl	8007ed0 <siprintf>

		//HAL_UART_Transmit(&huart3, komunikat, strlen(komunikat), 150);
		duty = Reg_SignalControl(&reg_I, wartosc_zadana, LightIntensity);
 800105a:	4b4c      	ldr	r3, [pc, #304]	; (800118c <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 800105c:	edd3 7a00 	vldr	s15, [r3]
 8001060:	4b43      	ldr	r3, [pc, #268]	; (8001170 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8001062:	ed93 7a00 	vldr	s14, [r3]
 8001066:	eef0 0a47 	vmov.f32	s1, s14
 800106a:	eeb0 0a67 	vmov.f32	s0, s15
 800106e:	4848      	ldr	r0, [pc, #288]	; (8001190 <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8001070:	f000 f9ee 	bl	8001450 <Reg_SignalControl>
 8001074:	eef0 7a40 	vmov.f32	s15, s0
 8001078:	4b46      	ldr	r3, [pc, #280]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 800107a:	edc3 7a00 	vstr	s15, [r3]
		ColorsGenerator(&led, duty);
 800107e:	4b45      	ldr	r3, [pc, #276]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001080:	edd3 7a00 	vldr	s15, [r3]
 8001084:	eeb0 0a67 	vmov.f32	s0, s15
 8001088:	4843      	ldr	r0, [pc, #268]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800108a:	f7ff fea3 	bl	8000dd4 <ColorsGenerator>



		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,(uint32_t)((led.duty_R)*10));
 800108e:	4b42      	ldr	r3, [pc, #264]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001090:	edd3 7a03 	vldr	s15, [r3, #12]
 8001094:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001098:	ee67 7a87 	vmul.f32	s15, s15, s14
 800109c:	4b3f      	ldr	r3, [pc, #252]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010a4:	ee17 2a90 	vmov	r2, s15
 80010a8:	635a      	str	r2, [r3, #52]	; 0x34
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,(uint32_t)((led.duty_G)*10));
 80010aa:	4b3b      	ldr	r3, [pc, #236]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80010ac:	edd3 7a04 	vldr	s15, [r3, #16]
 80010b0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80010b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010b8:	4b38      	ldr	r3, [pc, #224]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010c0:	ee17 2a90 	vmov	r2, s15
 80010c4:	639a      	str	r2, [r3, #56]	; 0x38
		__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,(uint32_t)((led.duty_B)*10));
 80010c6:	4b34      	ldr	r3, [pc, #208]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80010c8:	edd3 7a05 	vldr	s15, [r3, #20]
 80010cc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80010d0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010d4:	4b31      	ldr	r3, [pc, #196]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010dc:	ee17 2a90 	vmov	r2, s15
 80010e0:	63da      	str	r2, [r3, #60]	; 0x3c
		}


	}

}
 80010e2:	e03d      	b.n	8001160 <HAL_TIM_PeriodElapsedCallback+0x19c>
		else if(akcja == STOP)
 80010e4:	4b20      	ldr	r3, [pc, #128]	; (8001168 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d139      	bne.n	8001160 <HAL_TIM_PeriodElapsedCallback+0x19c>
			led.duty_R = 0.0f;
 80010ec:	4b2a      	ldr	r3, [pc, #168]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80010ee:	f04f 0200 	mov.w	r2, #0
 80010f2:	60da      	str	r2, [r3, #12]
			led.duty_G = 0.0f;
 80010f4:	4b28      	ldr	r3, [pc, #160]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80010f6:	f04f 0200 	mov.w	r2, #0
 80010fa:	611a      	str	r2, [r3, #16]
			led.duty_B = 0.0f;
 80010fc:	4b26      	ldr	r3, [pc, #152]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 80010fe:	f04f 0200 	mov.w	r2, #0
 8001102:	615a      	str	r2, [r3, #20]
			duty = 0.0f;
 8001104:	4b23      	ldr	r3, [pc, #140]	; (8001194 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8001106:	f04f 0200 	mov.w	r2, #0
 800110a:	601a      	str	r2, [r3, #0]
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1,(uint32_t)((led.duty_R)*10));
 800110c:	4b22      	ldr	r3, [pc, #136]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800110e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001112:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001116:	ee67 7a87 	vmul.f32	s15, s15, s14
 800111a:	4b20      	ldr	r3, [pc, #128]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001122:	ee17 2a90 	vmov	r2, s15
 8001126:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_2,(uint32_t)((led.duty_G)*10));
 8001128:	4b1b      	ldr	r3, [pc, #108]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 800112a:	edd3 7a04 	vldr	s15, [r3, #16]
 800112e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001132:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001136:	4b19      	ldr	r3, [pc, #100]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800113e:	ee17 2a90 	vmov	r2, s15
 8001142:	639a      	str	r2, [r3, #56]	; 0x38
			__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_3,(uint32_t)((led.duty_B)*10));
 8001144:	4b14      	ldr	r3, [pc, #80]	; (8001198 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8001146:	edd3 7a05 	vldr	s15, [r3, #20]
 800114a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800114e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001152:	4b12      	ldr	r3, [pc, #72]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800115a:	ee17 2a90 	vmov	r2, s15
 800115e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001160:	bf00      	nop
 8001162:	3708      	adds	r7, #8
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	20000000 	.word	0x20000000
 800116c:	20000008 	.word	0x20000008
 8001170:	20000050 	.word	0x20000050
 8001174:	42c80000 	.word	0x42c80000
 8001178:	20000054 	.word	0x20000054
 800117c:	2000008c 	.word	0x2000008c
 8001180:	51eb851f 	.word	0x51eb851f
 8001184:	080090e0 	.word	0x080090e0
 8001188:	20000224 	.word	0x20000224
 800118c:	20000004 	.word	0x20000004
 8001190:	20000014 	.word	0x20000014
 8001194:	2000011c 	.word	0x2000011c
 8001198:	20000038 	.word	0x20000038
 800119c:	200002e0 	.word	0x200002e0

080011a0 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	80fb      	strh	r3, [r7, #6]
  if(GPIO_Pin == USER_Btn_Pin)
 80011aa:	88fb      	ldrh	r3, [r7, #6]
 80011ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011b0:	d134      	bne.n	800121c <HAL_GPIO_EXTI_Callback+0x7c>
  {
	  HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
 80011b2:	2101      	movs	r1, #1
 80011b4:	481b      	ldr	r0, [pc, #108]	; (8001224 <HAL_GPIO_EXTI_Callback+0x84>)
 80011b6:	f001 fd1e 	bl	8002bf6 <HAL_GPIO_TogglePin>
	  sprintf(lcd_lightmess,"Y=%d.%d[lux]",lcd_light/100,lcd_light%100);
 80011ba:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <HAL_GPIO_EXTI_Callback+0x88>)
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a1b      	ldr	r2, [pc, #108]	; (800122c <HAL_GPIO_EXTI_Callback+0x8c>)
 80011c0:	fb82 1203 	smull	r1, r2, r2, r3
 80011c4:	1152      	asrs	r2, r2, #5
 80011c6:	17db      	asrs	r3, r3, #31
 80011c8:	1ad0      	subs	r0, r2, r3
 80011ca:	4b17      	ldr	r3, [pc, #92]	; (8001228 <HAL_GPIO_EXTI_Callback+0x88>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	4a17      	ldr	r2, [pc, #92]	; (800122c <HAL_GPIO_EXTI_Callback+0x8c>)
 80011d0:	fb82 1203 	smull	r1, r2, r2, r3
 80011d4:	1151      	asrs	r1, r2, #5
 80011d6:	17da      	asrs	r2, r3, #31
 80011d8:	1a8a      	subs	r2, r1, r2
 80011da:	2164      	movs	r1, #100	; 0x64
 80011dc:	fb01 f202 	mul.w	r2, r1, r2
 80011e0:	1a9a      	subs	r2, r3, r2
 80011e2:	4613      	mov	r3, r2
 80011e4:	4602      	mov	r2, r0
 80011e6:	4912      	ldr	r1, [pc, #72]	; (8001230 <HAL_GPIO_EXTI_Callback+0x90>)
 80011e8:	4812      	ldr	r0, [pc, #72]	; (8001234 <HAL_GPIO_EXTI_Callback+0x94>)
 80011ea:	f006 fe71 	bl	8007ed0 <siprintf>
	  sprintf(lcd_yrmess,"Yref=%d[lux]",lcd_yr);
 80011ee:	4b12      	ldr	r3, [pc, #72]	; (8001238 <HAL_GPIO_EXTI_Callback+0x98>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	461a      	mov	r2, r3
 80011f4:	4911      	ldr	r1, [pc, #68]	; (800123c <HAL_GPIO_EXTI_Callback+0x9c>)
 80011f6:	4812      	ldr	r0, [pc, #72]	; (8001240 <HAL_GPIO_EXTI_Callback+0xa0>)
 80011f8:	f006 fe6a 	bl	8007ed0 <siprintf>
	  lcd_clear();
 80011fc:	f7ff fd62 	bl	8000cc4 <lcd_clear>
	  lcd_put_cur(0,0);
 8001200:	2100      	movs	r1, #0
 8001202:	2000      	movs	r0, #0
 8001204:	f7ff fd75 	bl	8000cf2 <lcd_put_cur>
	  lcd_send_string(lcd_yrmess);
 8001208:	480d      	ldr	r0, [pc, #52]	; (8001240 <HAL_GPIO_EXTI_Callback+0xa0>)
 800120a:	f7ff fdce 	bl	8000daa <lcd_send_string>
	  lcd_put_cur(1,0);
 800120e:	2100      	movs	r1, #0
 8001210:	2001      	movs	r0, #1
 8001212:	f7ff fd6e 	bl	8000cf2 <lcd_put_cur>
	  lcd_send_string(lcd_lightmess);
 8001216:	4807      	ldr	r0, [pc, #28]	; (8001234 <HAL_GPIO_EXTI_Callback+0x94>)
 8001218:	f7ff fdc7 	bl	8000daa <lcd_send_string>
  }
}
 800121c:	bf00      	nop
 800121e:	3708      	adds	r7, #8
 8001220:	46bd      	mov	sp, r7
 8001222:	bd80      	pop	{r7, pc}
 8001224:	40020400 	.word	0x40020400
 8001228:	2000008c 	.word	0x2000008c
 800122c:	51eb851f 	.word	0x51eb851f
 8001230:	080090e8 	.word	0x080090e8
 8001234:	20000244 	.word	0x20000244
 8001238:	20000130 	.word	0x20000130
 800123c:	080090f8 	.word	0x080090f8
 8001240:	20000280 	.word	0x20000280

08001244 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001244:	b5b0      	push	{r4, r5, r7, lr}
 8001246:	b0a0      	sub	sp, #128	; 0x80
 8001248:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800124a:	f000 fd10 	bl	8001c6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800124e:	f000 f861 	bl	8001314 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001252:	f7ff fab9 	bl	80007c8 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8001256:	f000 fc65 	bl	8001b24 <MX_USART3_UART_Init>
  MX_ADC1_Init();
 800125a:	f7ff f9c5 	bl	80005e8 <MX_ADC1_Init>
  MX_TIM3_Init();
 800125e:	f000 fad1 	bl	8001804 <MX_TIM3_Init>
  MX_TIM2_Init();
 8001262:	f000 fa81 	bl	8001768 <MX_TIM2_Init>
  MX_I2C1_Init();
 8001266:	f7ff fbc7 	bl	80009f8 <MX_I2C1_Init>
  MX_I2C2_Init();
 800126a:	f7ff fc05 	bl	8000a78 <MX_I2C2_Init>
  MX_TIM5_Init();
 800126e:	f000 fb57 	bl	8001920 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */


   // Inicjalizacja czujnika cyfrowego
   uint8_t TrybPracy = BH1750_CONTINOUS_H_RES_MODE;
 8001272:	2310      	movs	r3, #16
 8001274:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
   BH1750_Init(&hbh1750_1, TrybPracy);
 8001278:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 800127c:	4619      	mov	r1, r3
 800127e:	481d      	ldr	r0, [pc, #116]	; (80012f4 <main+0xb0>)
 8001280:	f7ff fa4c 	bl	800071c <BH1750_Init>

   // Wystartowanie zegarow
   HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8001284:	2100      	movs	r1, #0
 8001286:	481c      	ldr	r0, [pc, #112]	; (80012f8 <main+0xb4>)
 8001288:	f004 fa50 	bl	800572c <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 800128c:	2104      	movs	r1, #4
 800128e:	481a      	ldr	r0, [pc, #104]	; (80012f8 <main+0xb4>)
 8001290:	f004 fa4c 	bl	800572c <HAL_TIM_PWM_Start>
   HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_3);
 8001294:	2108      	movs	r1, #8
 8001296:	4818      	ldr	r0, [pc, #96]	; (80012f8 <main+0xb4>)
 8001298:	f004 fa48 	bl	800572c <HAL_TIM_PWM_Start>
   HAL_TIM_Base_Start_IT(&htim2);
 800129c:	4817      	ldr	r0, [pc, #92]	; (80012fc <main+0xb8>)
 800129e:	f004 f96b 	bl	8005578 <HAL_TIM_Base_Start_IT>

   // Wiadomosc poczatkowa
   char witaj[120] = "Forma wiadomosci: K:RxxxGxxxBxxx,Y:xxx,ON lub OF\r\n";
 80012a2:	4b17      	ldr	r3, [pc, #92]	; (8001300 <main+0xbc>)
 80012a4:	1d3c      	adds	r4, r7, #4
 80012a6:	461d      	mov	r5, r3
 80012a8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012aa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80012b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80012b4:	682b      	ldr	r3, [r5, #0]
 80012b6:	461a      	mov	r2, r3
 80012b8:	8022      	strh	r2, [r4, #0]
 80012ba:	3402      	adds	r4, #2
 80012bc:	0c1b      	lsrs	r3, r3, #16
 80012be:	7023      	strb	r3, [r4, #0]
 80012c0:	f107 0337 	add.w	r3, r7, #55	; 0x37
 80012c4:	2245      	movs	r2, #69	; 0x45
 80012c6:	2100      	movs	r1, #0
 80012c8:	4618      	mov	r0, r3
 80012ca:	f006 fdf9 	bl	8007ec0 <memset>
   //HAL_UART_Transmit(&huart3,witaj,strlen(witaj),1000);
   HAL_UART_Receive_IT(&huart3, (uint8_t*)wiadomosc, 23);
 80012ce:	2217      	movs	r2, #23
 80012d0:	490c      	ldr	r1, [pc, #48]	; (8001304 <main+0xc0>)
 80012d2:	480d      	ldr	r0, [pc, #52]	; (8001308 <main+0xc4>)
 80012d4:	f005 fb95 	bl	8006a02 <HAL_UART_Receive_IT>

   //Inicjalizacja LCD
   lcd_init();
 80012d8:	f7ff fd2a 	bl	8000d30 <lcd_init>
   lcd_send_string("Witamy");
 80012dc:	480b      	ldr	r0, [pc, #44]	; (800130c <main+0xc8>)
 80012de:	f7ff fd64 	bl	8000daa <lcd_send_string>
   lcd_put_cur(1, 0);
 80012e2:	2100      	movs	r1, #0
 80012e4:	2001      	movs	r0, #1
 80012e6:	f7ff fd04 	bl	8000cf2 <lcd_put_cur>
   lcd_send_string("LED RGB");
 80012ea:	4809      	ldr	r0, [pc, #36]	; (8001310 <main+0xcc>)
 80012ec:	f7ff fd5d 	bl	8000daa <lcd_send_string>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80012f0:	e7fe      	b.n	80012f0 <main+0xac>
 80012f2:	bf00      	nop
 80012f4:	20000008 	.word	0x20000008
 80012f8:	200002e0 	.word	0x200002e0
 80012fc:	2000032c 	.word	0x2000032c
 8001300:	08009118 	.word	0x08009118
 8001304:	2000025c 	.word	0x2000025c
 8001308:	20000378 	.word	0x20000378
 800130c:	08009108 	.word	0x08009108
 8001310:	08009110 	.word	0x08009110

08001314 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b0b8      	sub	sp, #224	; 0xe0
 8001318:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800131a:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800131e:	2234      	movs	r2, #52	; 0x34
 8001320:	2100      	movs	r1, #0
 8001322:	4618      	mov	r0, r3
 8001324:	f006 fdcc 	bl	8007ec0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001328:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001338:	f107 0308 	add.w	r3, r7, #8
 800133c:	2290      	movs	r2, #144	; 0x90
 800133e:	2100      	movs	r1, #0
 8001340:	4618      	mov	r0, r3
 8001342:	f006 fdbd 	bl	8007ec0 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001346:	f002 ff87 	bl	8004258 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800134a:	4b3c      	ldr	r3, [pc, #240]	; (800143c <SystemClock_Config+0x128>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134e:	4a3b      	ldr	r2, [pc, #236]	; (800143c <SystemClock_Config+0x128>)
 8001350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001354:	6413      	str	r3, [r2, #64]	; 0x40
 8001356:	4b39      	ldr	r3, [pc, #228]	; (800143c <SystemClock_Config+0x128>)
 8001358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800135e:	607b      	str	r3, [r7, #4]
 8001360:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001362:	4b37      	ldr	r3, [pc, #220]	; (8001440 <SystemClock_Config+0x12c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a36      	ldr	r2, [pc, #216]	; (8001440 <SystemClock_Config+0x12c>)
 8001368:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800136c:	6013      	str	r3, [r2, #0]
 800136e:	4b34      	ldr	r3, [pc, #208]	; (8001440 <SystemClock_Config+0x12c>)
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001376:	603b      	str	r3, [r7, #0]
 8001378:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800137a:	2301      	movs	r3, #1
 800137c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001380:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001384:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001388:	2302      	movs	r3, #2
 800138a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800138e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001392:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001396:	2304      	movs	r3, #4
 8001398:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 216;
 800139c:	23d8      	movs	r3, #216	; 0xd8
 800139e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013a2:	2302      	movs	r3, #2
 80013a4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80013a8:	2304      	movs	r3, #4
 80013aa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013ae:	2302      	movs	r3, #2
 80013b0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80013b8:	4618      	mov	r0, r3
 80013ba:	f002 ffad 	bl	8004318 <HAL_RCC_OscConfig>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80013c4:	f000 f83e 	bl	8001444 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80013c8:	f002 ff56 	bl	8004278 <HAL_PWREx_EnableOverDrive>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80013d2:	f000 f837 	bl	8001444 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013d6:	230f      	movs	r3, #15
 80013d8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013dc:	2302      	movs	r3, #2
 80013de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013e2:	2300      	movs	r3, #0
 80013e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013f0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80013f8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80013fc:	2107      	movs	r1, #7
 80013fe:	4618      	mov	r0, r3
 8001400:	f003 fa38 	bl	8004874 <HAL_RCC_ClockConfig>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <SystemClock_Config+0xfa>
  {
    Error_Handler();
 800140a:	f000 f81b 	bl	8001444 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 800140e:	f44f 4341 	mov.w	r3, #49408	; 0xc100
 8001412:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_I2C2;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001414:	2300      	movs	r3, #0
 8001416:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001418:	2300      	movs	r3, #0
 800141a:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800141c:	2300      	movs	r3, #0
 800141e:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001420:	f107 0308 	add.w	r3, r7, #8
 8001424:	4618      	mov	r0, r3
 8001426:	f003 fc27 	bl	8004c78 <HAL_RCCEx_PeriphCLKConfig>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <SystemClock_Config+0x120>
  {
    Error_Handler();
 8001430:	f000 f808 	bl	8001444 <Error_Handler>
  }
}
 8001434:	bf00      	nop
 8001436:	37e0      	adds	r7, #224	; 0xe0
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	40023800 	.word	0x40023800
 8001440:	40007000 	.word	0x40007000

08001444 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001448:	b672      	cpsid	i
}
 800144a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800144c:	e7fe      	b.n	800144c <Error_Handler+0x8>
	...

08001450 <Reg_SignalControl>:
 *      Author: Konstanty
 */
#include "regulator.h"

float Reg_SignalControl(regulator_Handle_TypeDef* Reg,float y_ref, float pomiar)
{
 8001450:	b480      	push	{r7}
 8001452:	b089      	sub	sp, #36	; 0x24
 8001454:	af00      	add	r7, sp, #0
 8001456:	60f8      	str	r0, [r7, #12]
 8001458:	ed87 0a02 	vstr	s0, [r7, #8]
 800145c:	edc7 0a01 	vstr	s1, [r7, #4]
	float e;
	float u;
	float u_sat;
	float N=0.01f;
 8001460:	4b4e      	ldr	r3, [pc, #312]	; (800159c <Reg_SignalControl+0x14c>)
 8001462:	61bb      	str	r3, [r7, #24]
	e = y_ref - pomiar;
 8001464:	ed97 7a02 	vldr	s14, [r7, #8]
 8001468:	edd7 7a01 	vldr	s15, [r7, #4]
 800146c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001470:	edc7 7a05 	vstr	s15, [r7, #20]
			Reg->e_int += Reg->Ki*Reg->Ts*e;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	ed93 7a04 	vldr	s14, [r3, #16]
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	edd3 6a00 	vldr	s13, [r3]
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	edd3 7a03 	vldr	s15, [r3, #12]
 8001486:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800148a:	edd7 7a05 	vldr	s15, [r7, #20]
 800148e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001492:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	edc3 7a04 	vstr	s15, [r3, #16]
			Reg->e_der = (Reg->Kd*N)*(e-Reg->e_prev) + (1.0f - N*Reg->Ts)*Reg->e_der;
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	ed93 7a01 	vldr	s14, [r3, #4]
 80014a2:	edd7 7a06 	vldr	s15, [r7, #24]
 80014a6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	edd3 7a06 	vldr	s15, [r3, #24]
 80014b0:	edd7 6a05 	vldr	s13, [r7, #20]
 80014b4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80014b8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	edd3 6a03 	vldr	s13, [r3, #12]
 80014c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80014c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80014ce:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	edd3 7a05 	vldr	s15, [r3, #20]
 80014d8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	edc3 7a05 	vstr	s15, [r3, #20]
			Reg->e_prev = e;
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	697a      	ldr	r2, [r7, #20]
 80014ea:	619a      	str	r2, [r3, #24]

			u = Reg->e_int + Reg->e_der + (Reg->Kp*e);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	ed93 7a04 	vldr	s14, [r3, #16]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	edd3 7a05 	vldr	s15, [r3, #20]
 80014f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	edd3 6a02 	vldr	s13, [r3, #8]
 8001502:	edd7 7a05 	vldr	s15, [r7, #20]
 8001506:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800150a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800150e:	edc7 7a04 	vstr	s15, [r7, #16]

			if(u > Reg->limitup)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	edd3 7a08 	vldr	s15, [r3, #32]
 8001518:	ed97 7a04 	vldr	s14, [r7, #16]
 800151c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001520:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001524:	dd03      	ble.n	800152e <Reg_SignalControl+0xde>
			{
			  u_sat = Reg->limitup;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	6a1b      	ldr	r3, [r3, #32]
 800152a:	61fb      	str	r3, [r7, #28]
 800152c:	e00f      	b.n	800154e <Reg_SignalControl+0xfe>
			}
			else if(u < Reg->limitdown)
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	edd3 7a07 	vldr	s15, [r3, #28]
 8001534:	ed97 7a04 	vldr	s14, [r7, #16]
 8001538:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800153c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001540:	d503      	bpl.n	800154a <Reg_SignalControl+0xfa>
			{
			  u_sat = Reg->limitdown;
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	69db      	ldr	r3, [r3, #28]
 8001546:	61fb      	str	r3, [r7, #28]
 8001548:	e001      	b.n	800154e <Reg_SignalControl+0xfe>
			}
			else
			{
			  u_sat = u;
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	61fb      	str	r3, [r7, #28]
			}

			if(u!=u_sat)
 800154e:	ed97 7a04 	vldr	s14, [r7, #16]
 8001552:	edd7 7a07 	vldr	s15, [r7, #28]
 8001556:	eeb4 7a67 	vcmp.f32	s14, s15
 800155a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800155e:	d013      	beq.n	8001588 <Reg_SignalControl+0x138>
			{
			  Reg->e_int -=Reg->Ki*Reg->Ts*e;
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	ed93 7a04 	vldr	s14, [r3, #16]
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	edd3 6a00 	vldr	s13, [r3]
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001572:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001576:	edd7 7a05 	vldr	s15, [r7, #20]
 800157a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800157e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	edc3 7a04 	vstr	s15, [r3, #16]
			}
	return u_sat;
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	ee07 3a90 	vmov	s15, r3
};
 800158e:	eeb0 0a67 	vmov.f32	s0, s15
 8001592:	3724      	adds	r7, #36	; 0x24
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	3c23d70a 	.word	0x3c23d70a

080015a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80015a6:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <HAL_MspInit+0x44>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	4a0e      	ldr	r2, [pc, #56]	; (80015e4 <HAL_MspInit+0x44>)
 80015ac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b0:	6413      	str	r3, [r2, #64]	; 0x40
 80015b2:	4b0c      	ldr	r3, [pc, #48]	; (80015e4 <HAL_MspInit+0x44>)
 80015b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ba:	607b      	str	r3, [r7, #4]
 80015bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015be:	4b09      	ldr	r3, [pc, #36]	; (80015e4 <HAL_MspInit+0x44>)
 80015c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c2:	4a08      	ldr	r2, [pc, #32]	; (80015e4 <HAL_MspInit+0x44>)
 80015c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ca:	4b06      	ldr	r3, [pc, #24]	; (80015e4 <HAL_MspInit+0x44>)
 80015cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015d2:	603b      	str	r3, [r7, #0]
 80015d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d6:	bf00      	nop
 80015d8:	370c      	adds	r7, #12
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	40023800 	.word	0x40023800

080015e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015ec:	e7fe      	b.n	80015ec <NMI_Handler+0x4>

080015ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015f2:	e7fe      	b.n	80015f2 <HardFault_Handler+0x4>

080015f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <MemManage_Handler+0x4>

080015fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015fe:	e7fe      	b.n	80015fe <BusFault_Handler+0x4>

08001600 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001604:	e7fe      	b.n	8001604 <UsageFault_Handler+0x4>

08001606 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001618:	bf00      	nop
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr

08001622 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001622:	b480      	push	{r7}
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	46bd      	mov	sp, r7
 800162a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162e:	4770      	bx	lr

08001630 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001634:	f000 fb58 	bl	8001ce8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001638:	bf00      	nop
 800163a:	bd80      	pop	{r7, pc}

0800163c <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001640:	4802      	ldr	r0, [pc, #8]	; (800164c <ADC_IRQHandler+0x10>)
 8001642:	f000 fbd9 	bl	8001df8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	20000140 	.word	0x20000140

08001650 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001654:	4802      	ldr	r0, [pc, #8]	; (8001660 <TIM2_IRQHandler+0x10>)
 8001656:	f004 f963 	bl	8005920 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
 800165e:	bf00      	nop
 8001660:	2000032c 	.word	0x2000032c

08001664 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001668:	4802      	ldr	r0, [pc, #8]	; (8001674 <TIM3_IRQHandler+0x10>)
 800166a:	f004 f959 	bl	8005920 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800166e:	bf00      	nop
 8001670:	bd80      	pop	{r7, pc}
 8001672:	bf00      	nop
 8001674:	200002e0 	.word	0x200002e0

08001678 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800167c:	4802      	ldr	r0, [pc, #8]	; (8001688 <I2C1_EV_IRQHandler+0x10>)
 800167e:	f001 fd67 	bl	8003150 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	20000188 	.word	0x20000188

0800168c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001690:	4802      	ldr	r0, [pc, #8]	; (800169c <I2C1_ER_IRQHandler+0x10>)
 8001692:	f001 fd77 	bl	8003184 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001696:	bf00      	nop
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	20000188 	.word	0x20000188

080016a0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80016a4:	4802      	ldr	r0, [pc, #8]	; (80016b0 <USART3_IRQHandler+0x10>)
 80016a6:	f005 f9fb 	bl	8006aa0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	20000378 	.word	0x20000378

080016b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80016b8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80016bc:	f001 fab6 	bl	8002c2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80016c0:	bf00      	nop
 80016c2:	bd80      	pop	{r7, pc}

080016c4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80016c8:	4802      	ldr	r0, [pc, #8]	; (80016d4 <TIM5_IRQHandler+0x10>)
 80016ca:	f004 f929 	bl	8005920 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000294 	.word	0x20000294

080016d8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80016e0:	4a14      	ldr	r2, [pc, #80]	; (8001734 <_sbrk+0x5c>)
 80016e2:	4b15      	ldr	r3, [pc, #84]	; (8001738 <_sbrk+0x60>)
 80016e4:	1ad3      	subs	r3, r2, r3
 80016e6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80016ec:	4b13      	ldr	r3, [pc, #76]	; (800173c <_sbrk+0x64>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d102      	bne.n	80016fa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80016f4:	4b11      	ldr	r3, [pc, #68]	; (800173c <_sbrk+0x64>)
 80016f6:	4a12      	ldr	r2, [pc, #72]	; (8001740 <_sbrk+0x68>)
 80016f8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80016fa:	4b10      	ldr	r3, [pc, #64]	; (800173c <_sbrk+0x64>)
 80016fc:	681a      	ldr	r2, [r3, #0]
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4413      	add	r3, r2
 8001702:	693a      	ldr	r2, [r7, #16]
 8001704:	429a      	cmp	r2, r3
 8001706:	d207      	bcs.n	8001718 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001708:	f006 fbb0 	bl	8007e6c <__errno>
 800170c:	4603      	mov	r3, r0
 800170e:	220c      	movs	r2, #12
 8001710:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001712:	f04f 33ff 	mov.w	r3, #4294967295
 8001716:	e009      	b.n	800172c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001718:	4b08      	ldr	r3, [pc, #32]	; (800173c <_sbrk+0x64>)
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800171e:	4b07      	ldr	r3, [pc, #28]	; (800173c <_sbrk+0x64>)
 8001720:	681a      	ldr	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4413      	add	r3, r2
 8001726:	4a05      	ldr	r2, [pc, #20]	; (800173c <_sbrk+0x64>)
 8001728:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800172a:	68fb      	ldr	r3, [r7, #12]
}
 800172c:	4618      	mov	r0, r3
 800172e:	3718      	adds	r7, #24
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	20080000 	.word	0x20080000
 8001738:	00000400 	.word	0x00000400
 800173c:	20000134 	.word	0x20000134
 8001740:	20000410 	.word	0x20000410

08001744 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001744:	b480      	push	{r7}
 8001746:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001748:	4b06      	ldr	r3, [pc, #24]	; (8001764 <SystemInit+0x20>)
 800174a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800174e:	4a05      	ldr	r2, [pc, #20]	; (8001764 <SystemInit+0x20>)
 8001750:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001754:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001758:	bf00      	nop
 800175a:	46bd      	mov	sp, r7
 800175c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001760:	4770      	bx	lr
 8001762:	bf00      	nop
 8001764:	e000ed00 	.word	0xe000ed00

08001768 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim5;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b088      	sub	sp, #32
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800176e:	f107 0310 	add.w	r3, r7, #16
 8001772:	2200      	movs	r2, #0
 8001774:	601a      	str	r2, [r3, #0]
 8001776:	605a      	str	r2, [r3, #4]
 8001778:	609a      	str	r2, [r3, #8]
 800177a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800177c:	1d3b      	adds	r3, r7, #4
 800177e:	2200      	movs	r2, #0
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	605a      	str	r2, [r3, #4]
 8001784:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001786:	4b1d      	ldr	r3, [pc, #116]	; (80017fc <MX_TIM2_Init+0x94>)
 8001788:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800178c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 107;
 800178e:	4b1b      	ldr	r3, [pc, #108]	; (80017fc <MX_TIM2_Init+0x94>)
 8001790:	226b      	movs	r2, #107	; 0x6b
 8001792:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001794:	4b19      	ldr	r3, [pc, #100]	; (80017fc <MX_TIM2_Init+0x94>)
 8001796:	2200      	movs	r2, #0
 8001798:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 129869;
 800179a:	4b18      	ldr	r3, [pc, #96]	; (80017fc <MX_TIM2_Init+0x94>)
 800179c:	4a18      	ldr	r2, [pc, #96]	; (8001800 <MX_TIM2_Init+0x98>)
 800179e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a0:	4b16      	ldr	r3, [pc, #88]	; (80017fc <MX_TIM2_Init+0x94>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017a6:	4b15      	ldr	r3, [pc, #84]	; (80017fc <MX_TIM2_Init+0x94>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80017ac:	4813      	ldr	r0, [pc, #76]	; (80017fc <MX_TIM2_Init+0x94>)
 80017ae:	f003 fe8b 	bl	80054c8 <HAL_TIM_Base_Init>
 80017b2:	4603      	mov	r3, r0
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	d001      	beq.n	80017bc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80017b8:	f7ff fe44 	bl	8001444 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80017c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80017c2:	f107 0310 	add.w	r3, r7, #16
 80017c6:	4619      	mov	r1, r3
 80017c8:	480c      	ldr	r0, [pc, #48]	; (80017fc <MX_TIM2_Init+0x94>)
 80017ca:	f004 fadd 	bl	8005d88 <HAL_TIM_ConfigClockSource>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80017d4:	f7ff fe36 	bl	8001444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017d8:	2300      	movs	r3, #0
 80017da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017dc:	2300      	movs	r3, #0
 80017de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017e0:	1d3b      	adds	r3, r7, #4
 80017e2:	4619      	mov	r1, r3
 80017e4:	4805      	ldr	r0, [pc, #20]	; (80017fc <MX_TIM2_Init+0x94>)
 80017e6:	f004 ff7f 	bl	80066e8 <HAL_TIMEx_MasterConfigSynchronization>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d001      	beq.n	80017f4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80017f0:	f7ff fe28 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80017f4:	bf00      	nop
 80017f6:	3720      	adds	r7, #32
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	2000032c 	.word	0x2000032c
 8001800:	0001fb4d 	.word	0x0001fb4d

08001804 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b08e      	sub	sp, #56	; 0x38
 8001808:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800180a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]
 8001812:	605a      	str	r2, [r3, #4]
 8001814:	609a      	str	r2, [r3, #8]
 8001816:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001818:	f107 031c 	add.w	r3, r7, #28
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001824:	463b      	mov	r3, r7
 8001826:	2200      	movs	r2, #0
 8001828:	601a      	str	r2, [r3, #0]
 800182a:	605a      	str	r2, [r3, #4]
 800182c:	609a      	str	r2, [r3, #8]
 800182e:	60da      	str	r2, [r3, #12]
 8001830:	611a      	str	r2, [r3, #16]
 8001832:	615a      	str	r2, [r3, #20]
 8001834:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001836:	4b38      	ldr	r3, [pc, #224]	; (8001918 <MX_TIM3_Init+0x114>)
 8001838:	4a38      	ldr	r2, [pc, #224]	; (800191c <MX_TIM3_Init+0x118>)
 800183a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 107;
 800183c:	4b36      	ldr	r3, [pc, #216]	; (8001918 <MX_TIM3_Init+0x114>)
 800183e:	226b      	movs	r2, #107	; 0x6b
 8001840:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001842:	4b35      	ldr	r3, [pc, #212]	; (8001918 <MX_TIM3_Init+0x114>)
 8001844:	2200      	movs	r2, #0
 8001846:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8001848:	4b33      	ldr	r3, [pc, #204]	; (8001918 <MX_TIM3_Init+0x114>)
 800184a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800184e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001850:	4b31      	ldr	r3, [pc, #196]	; (8001918 <MX_TIM3_Init+0x114>)
 8001852:	2200      	movs	r2, #0
 8001854:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001856:	4b30      	ldr	r3, [pc, #192]	; (8001918 <MX_TIM3_Init+0x114>)
 8001858:	2200      	movs	r2, #0
 800185a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800185c:	482e      	ldr	r0, [pc, #184]	; (8001918 <MX_TIM3_Init+0x114>)
 800185e:	f003 fe33 	bl	80054c8 <HAL_TIM_Base_Init>
 8001862:	4603      	mov	r3, r0
 8001864:	2b00      	cmp	r3, #0
 8001866:	d001      	beq.n	800186c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001868:	f7ff fdec 	bl	8001444 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800186c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001870:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001872:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001876:	4619      	mov	r1, r3
 8001878:	4827      	ldr	r0, [pc, #156]	; (8001918 <MX_TIM3_Init+0x114>)
 800187a:	f004 fa85 	bl	8005d88 <HAL_TIM_ConfigClockSource>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001884:	f7ff fdde 	bl	8001444 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001888:	4823      	ldr	r0, [pc, #140]	; (8001918 <MX_TIM3_Init+0x114>)
 800188a:	f003 feed 	bl	8005668 <HAL_TIM_PWM_Init>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001894:	f7ff fdd6 	bl	8001444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001898:	2300      	movs	r3, #0
 800189a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800189c:	2300      	movs	r3, #0
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80018a0:	f107 031c 	add.w	r3, r7, #28
 80018a4:	4619      	mov	r1, r3
 80018a6:	481c      	ldr	r0, [pc, #112]	; (8001918 <MX_TIM3_Init+0x114>)
 80018a8:	f004 ff1e 	bl	80066e8 <HAL_TIMEx_MasterConfigSynchronization>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80018b2:	f7ff fdc7 	bl	8001444 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018b6:	2360      	movs	r3, #96	; 0x60
 80018b8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80018ba:	2300      	movs	r3, #0
 80018bc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018be:	2300      	movs	r3, #0
 80018c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018c2:	2300      	movs	r3, #0
 80018c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018c6:	463b      	mov	r3, r7
 80018c8:	2200      	movs	r2, #0
 80018ca:	4619      	mov	r1, r3
 80018cc:	4812      	ldr	r0, [pc, #72]	; (8001918 <MX_TIM3_Init+0x114>)
 80018ce:	f004 f947 	bl	8005b60 <HAL_TIM_PWM_ConfigChannel>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80018d8:	f7ff fdb4 	bl	8001444 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018dc:	463b      	mov	r3, r7
 80018de:	2204      	movs	r2, #4
 80018e0:	4619      	mov	r1, r3
 80018e2:	480d      	ldr	r0, [pc, #52]	; (8001918 <MX_TIM3_Init+0x114>)
 80018e4:	f004 f93c 	bl	8005b60 <HAL_TIM_PWM_ConfigChannel>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_TIM3_Init+0xee>
  {
    Error_Handler();
 80018ee:	f7ff fda9 	bl	8001444 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80018f2:	463b      	mov	r3, r7
 80018f4:	2208      	movs	r2, #8
 80018f6:	4619      	mov	r1, r3
 80018f8:	4807      	ldr	r0, [pc, #28]	; (8001918 <MX_TIM3_Init+0x114>)
 80018fa:	f004 f931 	bl	8005b60 <HAL_TIM_PWM_ConfigChannel>
 80018fe:	4603      	mov	r3, r0
 8001900:	2b00      	cmp	r3, #0
 8001902:	d001      	beq.n	8001908 <MX_TIM3_Init+0x104>
  {
    Error_Handler();
 8001904:	f7ff fd9e 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001908:	4803      	ldr	r0, [pc, #12]	; (8001918 <MX_TIM3_Init+0x114>)
 800190a:	f000 f8b5 	bl	8001a78 <HAL_TIM_MspPostInit>

}
 800190e:	bf00      	nop
 8001910:	3738      	adds	r7, #56	; 0x38
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	200002e0 	.word	0x200002e0
 800191c:	40000400 	.word	0x40000400

08001920 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b088      	sub	sp, #32
 8001924:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001926:	f107 0310 	add.w	r3, r7, #16
 800192a:	2200      	movs	r2, #0
 800192c:	601a      	str	r2, [r3, #0]
 800192e:	605a      	str	r2, [r3, #4]
 8001930:	609a      	str	r2, [r3, #8]
 8001932:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001934:	1d3b      	adds	r3, r7, #4
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	605a      	str	r2, [r3, #4]
 800193c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800193e:	4b1d      	ldr	r3, [pc, #116]	; (80019b4 <MX_TIM5_Init+0x94>)
 8001940:	4a1d      	ldr	r2, [pc, #116]	; (80019b8 <MX_TIM5_Init+0x98>)
 8001942:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 215;
 8001944:	4b1b      	ldr	r3, [pc, #108]	; (80019b4 <MX_TIM5_Init+0x94>)
 8001946:	22d7      	movs	r2, #215	; 0xd7
 8001948:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800194a:	4b1a      	ldr	r3, [pc, #104]	; (80019b4 <MX_TIM5_Init+0x94>)
 800194c:	2200      	movs	r2, #0
 800194e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999999;
 8001950:	4b18      	ldr	r3, [pc, #96]	; (80019b4 <MX_TIM5_Init+0x94>)
 8001952:	4a1a      	ldr	r2, [pc, #104]	; (80019bc <MX_TIM5_Init+0x9c>)
 8001954:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001956:	4b17      	ldr	r3, [pc, #92]	; (80019b4 <MX_TIM5_Init+0x94>)
 8001958:	2200      	movs	r2, #0
 800195a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800195c:	4b15      	ldr	r3, [pc, #84]	; (80019b4 <MX_TIM5_Init+0x94>)
 800195e:	2200      	movs	r2, #0
 8001960:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001962:	4814      	ldr	r0, [pc, #80]	; (80019b4 <MX_TIM5_Init+0x94>)
 8001964:	f003 fdb0 	bl	80054c8 <HAL_TIM_Base_Init>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d001      	beq.n	8001972 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 800196e:	f7ff fd69 	bl	8001444 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001972:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001976:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001978:	f107 0310 	add.w	r3, r7, #16
 800197c:	4619      	mov	r1, r3
 800197e:	480d      	ldr	r0, [pc, #52]	; (80019b4 <MX_TIM5_Init+0x94>)
 8001980:	f004 fa02 	bl	8005d88 <HAL_TIM_ConfigClockSource>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800198a:	f7ff fd5b 	bl	8001444 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800198e:	2300      	movs	r3, #0
 8001990:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001992:	2300      	movs	r3, #0
 8001994:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001996:	1d3b      	adds	r3, r7, #4
 8001998:	4619      	mov	r1, r3
 800199a:	4806      	ldr	r0, [pc, #24]	; (80019b4 <MX_TIM5_Init+0x94>)
 800199c:	f004 fea4 	bl	80066e8 <HAL_TIMEx_MasterConfigSynchronization>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80019a6:	f7ff fd4d 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80019aa:	bf00      	nop
 80019ac:	3720      	adds	r7, #32
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000294 	.word	0x20000294
 80019b8:	40000c00 	.word	0x40000c00
 80019bc:	000f423f 	.word	0x000f423f

080019c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b086      	sub	sp, #24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019d0:	d114      	bne.n	80019fc <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019d2:	4b26      	ldr	r3, [pc, #152]	; (8001a6c <HAL_TIM_Base_MspInit+0xac>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	4a25      	ldr	r2, [pc, #148]	; (8001a6c <HAL_TIM_Base_MspInit+0xac>)
 80019d8:	f043 0301 	orr.w	r3, r3, #1
 80019dc:	6413      	str	r3, [r2, #64]	; 0x40
 80019de:	4b23      	ldr	r3, [pc, #140]	; (8001a6c <HAL_TIM_Base_MspInit+0xac>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	f003 0301 	and.w	r3, r3, #1
 80019e6:	617b      	str	r3, [r7, #20]
 80019e8:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80019ea:	2200      	movs	r2, #0
 80019ec:	2100      	movs	r1, #0
 80019ee:	201c      	movs	r0, #28
 80019f0:	f000 fe65 	bl	80026be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80019f4:	201c      	movs	r0, #28
 80019f6:	f000 fe7e 	bl	80026f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80019fa:	e032      	b.n	8001a62 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM3)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a1b      	ldr	r2, [pc, #108]	; (8001a70 <HAL_TIM_Base_MspInit+0xb0>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d114      	bne.n	8001a30 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001a06:	4b19      	ldr	r3, [pc, #100]	; (8001a6c <HAL_TIM_Base_MspInit+0xac>)
 8001a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0a:	4a18      	ldr	r2, [pc, #96]	; (8001a6c <HAL_TIM_Base_MspInit+0xac>)
 8001a0c:	f043 0302 	orr.w	r3, r3, #2
 8001a10:	6413      	str	r3, [r2, #64]	; 0x40
 8001a12:	4b16      	ldr	r3, [pc, #88]	; (8001a6c <HAL_TIM_Base_MspInit+0xac>)
 8001a14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a16:	f003 0302 	and.w	r3, r3, #2
 8001a1a:	613b      	str	r3, [r7, #16]
 8001a1c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2100      	movs	r1, #0
 8001a22:	201d      	movs	r0, #29
 8001a24:	f000 fe4b 	bl	80026be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001a28:	201d      	movs	r0, #29
 8001a2a:	f000 fe64 	bl	80026f6 <HAL_NVIC_EnableIRQ>
}
 8001a2e:	e018      	b.n	8001a62 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM5)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a0f      	ldr	r2, [pc, #60]	; (8001a74 <HAL_TIM_Base_MspInit+0xb4>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d113      	bne.n	8001a62 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001a3a:	4b0c      	ldr	r3, [pc, #48]	; (8001a6c <HAL_TIM_Base_MspInit+0xac>)
 8001a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a3e:	4a0b      	ldr	r2, [pc, #44]	; (8001a6c <HAL_TIM_Base_MspInit+0xac>)
 8001a40:	f043 0308 	orr.w	r3, r3, #8
 8001a44:	6413      	str	r3, [r2, #64]	; 0x40
 8001a46:	4b09      	ldr	r3, [pc, #36]	; (8001a6c <HAL_TIM_Base_MspInit+0xac>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	f003 0308 	and.w	r3, r3, #8
 8001a4e:	60fb      	str	r3, [r7, #12]
 8001a50:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001a52:	2200      	movs	r2, #0
 8001a54:	2100      	movs	r1, #0
 8001a56:	2032      	movs	r0, #50	; 0x32
 8001a58:	f000 fe31 	bl	80026be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001a5c:	2032      	movs	r0, #50	; 0x32
 8001a5e:	f000 fe4a 	bl	80026f6 <HAL_NVIC_EnableIRQ>
}
 8001a62:	bf00      	nop
 8001a64:	3718      	adds	r7, #24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40000400 	.word	0x40000400
 8001a74:	40000c00 	.word	0x40000c00

08001a78 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08a      	sub	sp, #40	; 0x28
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
 8001a8e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a1f      	ldr	r2, [pc, #124]	; (8001b14 <HAL_TIM_MspPostInit+0x9c>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d138      	bne.n	8001b0c <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9a:	4b1f      	ldr	r3, [pc, #124]	; (8001b18 <HAL_TIM_MspPostInit+0xa0>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	4a1e      	ldr	r2, [pc, #120]	; (8001b18 <HAL_TIM_MspPostInit+0xa0>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa6:	4b1c      	ldr	r3, [pc, #112]	; (8001b18 <HAL_TIM_MspPostInit+0xa0>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab2:	4b19      	ldr	r3, [pc, #100]	; (8001b18 <HAL_TIM_MspPostInit+0xa0>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	4a18      	ldr	r2, [pc, #96]	; (8001b18 <HAL_TIM_MspPostInit+0xa0>)
 8001ab8:	f043 0304 	orr.w	r3, r3, #4
 8001abc:	6313      	str	r3, [r2, #48]	; 0x30
 8001abe:	4b16      	ldr	r3, [pc, #88]	; (8001b18 <HAL_TIM_MspPostInit+0xa0>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	f003 0304 	and.w	r3, r3, #4
 8001ac6:	60fb      	str	r3, [r7, #12]
 8001ac8:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PC7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001aca:	2340      	movs	r3, #64	; 0x40
 8001acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001ada:	2302      	movs	r3, #2
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ade:	f107 0314 	add.w	r3, r7, #20
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	480d      	ldr	r0, [pc, #52]	; (8001b1c <HAL_TIM_MspPostInit+0xa4>)
 8001ae6:	f000 fec1 	bl	800286c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001aea:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001aee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001af0:	2302      	movs	r3, #2
 8001af2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af4:	2300      	movs	r3, #0
 8001af6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001af8:	2300      	movs	r3, #0
 8001afa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001afc:	2302      	movs	r3, #2
 8001afe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b00:	f107 0314 	add.w	r3, r7, #20
 8001b04:	4619      	mov	r1, r3
 8001b06:	4806      	ldr	r0, [pc, #24]	; (8001b20 <HAL_TIM_MspPostInit+0xa8>)
 8001b08:	f000 feb0 	bl	800286c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001b0c:	bf00      	nop
 8001b0e:	3728      	adds	r7, #40	; 0x28
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}
 8001b14:	40000400 	.word	0x40000400
 8001b18:	40023800 	.word	0x40023800
 8001b1c:	40020000 	.word	0x40020000
 8001b20:	40020800 	.word	0x40020800

08001b24 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b28:	4b14      	ldr	r3, [pc, #80]	; (8001b7c <MX_USART3_UART_Init+0x58>)
 8001b2a:	4a15      	ldr	r2, [pc, #84]	; (8001b80 <MX_USART3_UART_Init+0x5c>)
 8001b2c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001b2e:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <MX_USART3_UART_Init+0x58>)
 8001b30:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b34:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b36:	4b11      	ldr	r3, [pc, #68]	; (8001b7c <MX_USART3_UART_Init+0x58>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b3c:	4b0f      	ldr	r3, [pc, #60]	; (8001b7c <MX_USART3_UART_Init+0x58>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b42:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <MX_USART3_UART_Init+0x58>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b48:	4b0c      	ldr	r3, [pc, #48]	; (8001b7c <MX_USART3_UART_Init+0x58>)
 8001b4a:	220c      	movs	r2, #12
 8001b4c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b4e:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <MX_USART3_UART_Init+0x58>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b54:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <MX_USART3_UART_Init+0x58>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b5a:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <MX_USART3_UART_Init+0x58>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b60:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <MX_USART3_UART_Init+0x58>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b66:	4805      	ldr	r0, [pc, #20]	; (8001b7c <MX_USART3_UART_Init+0x58>)
 8001b68:	f004 fe6a 	bl	8006840 <HAL_UART_Init>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d001      	beq.n	8001b76 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001b72:	f7ff fc67 	bl	8001444 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000378 	.word	0x20000378
 8001b80:	40004800 	.word	0x40004800

08001b84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08a      	sub	sp, #40	; 0x28
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 0314 	add.w	r3, r7, #20
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a1b      	ldr	r2, [pc, #108]	; (8001c10 <HAL_UART_MspInit+0x8c>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d130      	bne.n	8001c08 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ba6:	4b1b      	ldr	r3, [pc, #108]	; (8001c14 <HAL_UART_MspInit+0x90>)
 8001ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001baa:	4a1a      	ldr	r2, [pc, #104]	; (8001c14 <HAL_UART_MspInit+0x90>)
 8001bac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb2:	4b18      	ldr	r3, [pc, #96]	; (8001c14 <HAL_UART_MspInit+0x90>)
 8001bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001bba:	613b      	str	r3, [r7, #16]
 8001bbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bbe:	4b15      	ldr	r3, [pc, #84]	; (8001c14 <HAL_UART_MspInit+0x90>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	4a14      	ldr	r2, [pc, #80]	; (8001c14 <HAL_UART_MspInit+0x90>)
 8001bc4:	f043 0308 	orr.w	r3, r3, #8
 8001bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bca:	4b12      	ldr	r3, [pc, #72]	; (8001c14 <HAL_UART_MspInit+0x90>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f003 0308 	and.w	r3, r3, #8
 8001bd2:	60fb      	str	r3, [r7, #12]
 8001bd4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001bd6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001bda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bdc:	2302      	movs	r3, #2
 8001bde:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be0:	2300      	movs	r3, #0
 8001be2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001be4:	2303      	movs	r3, #3
 8001be6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001be8:	2307      	movs	r3, #7
 8001bea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001bec:	f107 0314 	add.w	r3, r7, #20
 8001bf0:	4619      	mov	r1, r3
 8001bf2:	4809      	ldr	r0, [pc, #36]	; (8001c18 <HAL_UART_MspInit+0x94>)
 8001bf4:	f000 fe3a 	bl	800286c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	2027      	movs	r0, #39	; 0x27
 8001bfe:	f000 fd5e 	bl	80026be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001c02:	2027      	movs	r0, #39	; 0x27
 8001c04:	f000 fd77 	bl	80026f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001c08:	bf00      	nop
 8001c0a:	3728      	adds	r7, #40	; 0x28
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40004800 	.word	0x40004800
 8001c14:	40023800 	.word	0x40023800
 8001c18:	40020c00 	.word	0x40020c00

08001c1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c20:	480d      	ldr	r0, [pc, #52]	; (8001c58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001c22:	490e      	ldr	r1, [pc, #56]	; (8001c5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001c24:	4a0e      	ldr	r2, [pc, #56]	; (8001c60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001c26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c28:	e002      	b.n	8001c30 <LoopCopyDataInit>

08001c2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c2e:	3304      	adds	r3, #4

08001c30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c34:	d3f9      	bcc.n	8001c2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c36:	4a0b      	ldr	r2, [pc, #44]	; (8001c64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001c38:	4c0b      	ldr	r4, [pc, #44]	; (8001c68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001c3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c3c:	e001      	b.n	8001c42 <LoopFillZerobss>

08001c3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c40:	3204      	adds	r2, #4

08001c42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c44:	d3fb      	bcc.n	8001c3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c46:	f7ff fd7d 	bl	8001744 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c4a:	f006 f915 	bl	8007e78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c4e:	f7ff faf9 	bl	8001244 <main>
  bx  lr    
 8001c52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c54:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001c58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c5c:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8001c60:	08009374 	.word	0x08009374
  ldr r2, =_sbss
 8001c64:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8001c68:	20000410 	.word	0x20000410

08001c6c <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c6c:	e7fe      	b.n	8001c6c <CAN1_RX0_IRQHandler>

08001c6e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c72:	2003      	movs	r0, #3
 8001c74:	f000 fd18 	bl	80026a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c78:	2000      	movs	r0, #0
 8001c7a:	f000 f805 	bl	8001c88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c7e:	f7ff fc8f 	bl	80015a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c82:	2300      	movs	r3, #0
}
 8001c84:	4618      	mov	r0, r3
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c90:	4b12      	ldr	r3, [pc, #72]	; (8001cdc <HAL_InitTick+0x54>)
 8001c92:	681a      	ldr	r2, [r3, #0]
 8001c94:	4b12      	ldr	r3, [pc, #72]	; (8001ce0 <HAL_InitTick+0x58>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	4619      	mov	r1, r3
 8001c9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001ca2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f000 fd33 	bl	8002712 <HAL_SYSTICK_Config>
 8001cac:	4603      	mov	r3, r0
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cb2:	2301      	movs	r3, #1
 8001cb4:	e00e      	b.n	8001cd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	2b0f      	cmp	r3, #15
 8001cba:	d80a      	bhi.n	8001cd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	6879      	ldr	r1, [r7, #4]
 8001cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc4:	f000 fcfb 	bl	80026be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001cc8:	4a06      	ldr	r2, [pc, #24]	; (8001ce4 <HAL_InitTick+0x5c>)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	e000      	b.n	8001cd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
}
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	3708      	adds	r7, #8
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bd80      	pop	{r7, pc}
 8001cdc:	20000090 	.word	0x20000090
 8001ce0:	20000098 	.word	0x20000098
 8001ce4:	20000094 	.word	0x20000094

08001ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cec:	4b06      	ldr	r3, [pc, #24]	; (8001d08 <HAL_IncTick+0x20>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	4b06      	ldr	r3, [pc, #24]	; (8001d0c <HAL_IncTick+0x24>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	4a04      	ldr	r2, [pc, #16]	; (8001d0c <HAL_IncTick+0x24>)
 8001cfa:	6013      	str	r3, [r2, #0]
}
 8001cfc:	bf00      	nop
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr
 8001d06:	bf00      	nop
 8001d08:	20000098 	.word	0x20000098
 8001d0c:	200003fc 	.word	0x200003fc

08001d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d10:	b480      	push	{r7}
 8001d12:	af00      	add	r7, sp, #0
  return uwTick;
 8001d14:	4b03      	ldr	r3, [pc, #12]	; (8001d24 <HAL_GetTick+0x14>)
 8001d16:	681b      	ldr	r3, [r3, #0]
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	200003fc 	.word	0x200003fc

08001d28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b084      	sub	sp, #16
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d30:	f7ff ffee 	bl	8001d10 <HAL_GetTick>
 8001d34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d40:	d005      	beq.n	8001d4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d42:	4b0a      	ldr	r3, [pc, #40]	; (8001d6c <HAL_Delay+0x44>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	461a      	mov	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001d4e:	bf00      	nop
 8001d50:	f7ff ffde 	bl	8001d10 <HAL_GetTick>
 8001d54:	4602      	mov	r2, r0
 8001d56:	68bb      	ldr	r3, [r7, #8]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	68fa      	ldr	r2, [r7, #12]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	d8f7      	bhi.n	8001d50 <HAL_Delay+0x28>
  {
  }
}
 8001d60:	bf00      	nop
 8001d62:	bf00      	nop
 8001d64:	3710      	adds	r7, #16
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	bf00      	nop
 8001d6c:	20000098 	.word	0x20000098

08001d70 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d101      	bne.n	8001d86 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001d82:	2301      	movs	r3, #1
 8001d84:	e031      	b.n	8001dea <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d109      	bne.n	8001da2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f7fe fc7c 	bl	800068c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001da6:	f003 0310 	and.w	r3, r3, #16
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d116      	bne.n	8001ddc <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001db2:	4b10      	ldr	r3, [pc, #64]	; (8001df4 <HAL_ADC_Init+0x84>)
 8001db4:	4013      	ands	r3, r2
 8001db6:	f043 0202 	orr.w	r2, r3, #2
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001dbe:	6878      	ldr	r0, [r7, #4]
 8001dc0:	f000 fa9e 	bl	8002300 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dce:	f023 0303 	bic.w	r3, r3, #3
 8001dd2:	f043 0201 	orr.w	r2, r3, #1
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	641a      	str	r2, [r3, #64]	; 0x40
 8001dda:	e001      	b.n	8001de0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	ffffeefd 	.word	0xffffeefd

08001df8 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0, tmp2 = 0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]
 8001e04:	2300      	movs	r3, #0
 8001e06:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	685b      	ldr	r3, [r3, #4]
 8001e16:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	f003 0302 	and.w	r3, r3, #2
 8001e1e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	f003 0320 	and.w	r3, r3, #32
 8001e26:	613b      	str	r3, [r7, #16]

  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 8001e28:	697b      	ldr	r3, [r7, #20]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d049      	beq.n	8001ec2 <HAL_ADC_IRQHandler+0xca>
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d046      	beq.n	8001ec2 <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e38:	f003 0310 	and.w	r3, r3, #16
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d105      	bne.n	8001e4c <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e44:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F7, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	689b      	ldr	r3, [r3, #8]
 8001e52:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d12b      	bne.n	8001eb2 <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	699b      	ldr	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d127      	bne.n	8001eb2 <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e68:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d006      	beq.n	8001e7e <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d119      	bne.n	8001eb2 <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	685a      	ldr	r2, [r3, #4]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f022 0220 	bic.w	r2, r2, #32
 8001e8c:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e92:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d105      	bne.n	8001eb2 <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	f043 0201 	orr.w	r2, r3, #1
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001eb2:	6878      	ldr	r0, [r7, #4]
 8001eb4:	f000 f8b0 	bl	8002018 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f06f 0212 	mvn.w	r2, #18
 8001ec0:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	f003 0304 	and.w	r3, r3, #4
 8001ec8:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 8001eca:	68bb      	ldr	r3, [r7, #8]
 8001ecc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ed0:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 8001ed2:	697b      	ldr	r3, [r7, #20]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d057      	beq.n	8001f88 <HAL_ADC_IRQHandler+0x190>
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d054      	beq.n	8001f88 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee2:	f003 0310 	and.w	r3, r3, #16
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d105      	bne.n	8001ef6 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	689b      	ldr	r3, [r3, #8]
 8001efc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d139      	bne.n	8001f78 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f0a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d006      	beq.n	8001f20 <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL) ||
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d12b      	bne.n	8001f78 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d124      	bne.n	8001f78 <HAL_ADC_IRQHandler+0x180>
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d11d      	bne.n	8001f78 <HAL_ADC_IRQHandler+0x180>
       (hadc->Init.ContinuousConvMode == DISABLE))))
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	699b      	ldr	r3, [r3, #24]
       (ADC_IS_SOFTWARE_START_REGULAR(hadc) &&
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d119      	bne.n	8001f78 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	685a      	ldr	r2, [r3, #4]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f52:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d105      	bne.n	8001f78 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f70:	f043 0201 	orr.w	r2, r3, #1
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f000 fabb 	bl	80024f4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f06f 020c 	mvn.w	r2, #12
 8001f86:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	f003 0301 	and.w	r3, r3, #1
 8001f8e:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f96:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d017      	beq.n	8001fce <HAL_ADC_IRQHandler+0x1d6>
 8001f9e:	693b      	ldr	r3, [r7, #16]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d014      	beq.n	8001fce <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0301 	and.w	r3, r3, #1
 8001fae:	2b01      	cmp	r3, #1
 8001fb0:	d10d      	bne.n	8001fce <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f000 f834 	bl	800202c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f06f 0201 	mvn.w	r2, #1
 8001fcc:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	f003 0320 	and.w	r3, r3, #32
 8001fd4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001fdc:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 8001fde:	697b      	ldr	r3, [r7, #20]
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d015      	beq.n	8002010 <HAL_ADC_IRQHandler+0x218>
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d012      	beq.n	8002010 <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F7, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	f043 0202 	orr.w	r2, r3, #2
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f06f 0220 	mvn.w	r2, #32
 8001ffe:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002000:	6878      	ldr	r0, [r7, #4]
 8002002:	f000 f81d 	bl	8002040 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f06f 0220 	mvn.w	r2, #32
 800200e:	601a      	str	r2, [r3, #0]
  }
}
 8002010:	bf00      	nop
 8002012:	3718      	adds	r7, #24
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}

08002018 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002018:	b480      	push	{r7}
 800201a:	b083      	sub	sp, #12
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 8002034:	bf00      	nop
 8002036:	370c      	adds	r7, #12
 8002038:	46bd      	mov	sp, r7
 800203a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203e:	4770      	bx	lr

08002040 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002040:	b480      	push	{r7}
 8002042:	b083      	sub	sp, #12
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002054:	b480      	push	{r7}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002068:	2b01      	cmp	r3, #1
 800206a:	d101      	bne.n	8002070 <HAL_ADC_ConfigChannel+0x1c>
 800206c:	2302      	movs	r3, #2
 800206e:	e136      	b.n	80022de <HAL_ADC_ConfigChannel+0x28a>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	2201      	movs	r2, #1
 8002074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b09      	cmp	r3, #9
 800207e:	d93a      	bls.n	80020f6 <HAL_ADC_ConfigChannel+0xa2>
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002088:	d035      	beq.n	80020f6 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	68d9      	ldr	r1, [r3, #12]
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	b29b      	uxth	r3, r3
 8002096:	461a      	mov	r2, r3
 8002098:	4613      	mov	r3, r2
 800209a:	005b      	lsls	r3, r3, #1
 800209c:	4413      	add	r3, r2
 800209e:	3b1e      	subs	r3, #30
 80020a0:	2207      	movs	r2, #7
 80020a2:	fa02 f303 	lsl.w	r3, r2, r3
 80020a6:	43da      	mvns	r2, r3
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	400a      	ands	r2, r1
 80020ae:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	4a8d      	ldr	r2, [pc, #564]	; (80022ec <HAL_ADC_ConfigChannel+0x298>)
 80020b6:	4293      	cmp	r3, r2
 80020b8:	d10a      	bne.n	80020d0 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	68d9      	ldr	r1, [r3, #12]
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	061a      	lsls	r2, r3, #24
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	430a      	orrs	r2, r1
 80020cc:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020ce:	e035      	b.n	800213c <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68d9      	ldr	r1, [r3, #12]
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	689a      	ldr	r2, [r3, #8]
 80020da:	683b      	ldr	r3, [r7, #0]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	b29b      	uxth	r3, r3
 80020e0:	4618      	mov	r0, r3
 80020e2:	4603      	mov	r3, r0
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	4403      	add	r3, r0
 80020e8:	3b1e      	subs	r3, #30
 80020ea:	409a      	lsls	r2, r3
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	430a      	orrs	r2, r1
 80020f2:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020f4:	e022      	b.n	800213c <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	6919      	ldr	r1, [r3, #16]
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	b29b      	uxth	r3, r3
 8002102:	461a      	mov	r2, r3
 8002104:	4613      	mov	r3, r2
 8002106:	005b      	lsls	r3, r3, #1
 8002108:	4413      	add	r3, r2
 800210a:	2207      	movs	r2, #7
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	43da      	mvns	r2, r3
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	400a      	ands	r2, r1
 8002118:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6919      	ldr	r1, [r3, #16]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	689a      	ldr	r2, [r3, #8]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	b29b      	uxth	r3, r3
 800212a:	4618      	mov	r0, r3
 800212c:	4603      	mov	r3, r0
 800212e:	005b      	lsls	r3, r3, #1
 8002130:	4403      	add	r3, r0
 8002132:	409a      	lsls	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	430a      	orrs	r2, r1
 800213a:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800213c:	683b      	ldr	r3, [r7, #0]
 800213e:	685b      	ldr	r3, [r3, #4]
 8002140:	2b06      	cmp	r3, #6
 8002142:	d824      	bhi.n	800218e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800214a:	683b      	ldr	r3, [r7, #0]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4413      	add	r3, r2
 8002154:	3b05      	subs	r3, #5
 8002156:	221f      	movs	r2, #31
 8002158:	fa02 f303 	lsl.w	r3, r2, r3
 800215c:	43da      	mvns	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	400a      	ands	r2, r1
 8002164:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	b29b      	uxth	r3, r3
 8002172:	4618      	mov	r0, r3
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	4613      	mov	r3, r2
 800217a:	009b      	lsls	r3, r3, #2
 800217c:	4413      	add	r3, r2
 800217e:	3b05      	subs	r3, #5
 8002180:	fa00 f203 	lsl.w	r2, r0, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	430a      	orrs	r2, r1
 800218a:	635a      	str	r2, [r3, #52]	; 0x34
 800218c:	e04c      	b.n	8002228 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685b      	ldr	r3, [r3, #4]
 8002192:	2b0c      	cmp	r3, #12
 8002194:	d824      	bhi.n	80021e0 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685a      	ldr	r2, [r3, #4]
 80021a0:	4613      	mov	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	4413      	add	r3, r2
 80021a6:	3b23      	subs	r3, #35	; 0x23
 80021a8:	221f      	movs	r2, #31
 80021aa:	fa02 f303 	lsl.w	r3, r2, r3
 80021ae:	43da      	mvns	r2, r3
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	400a      	ands	r2, r1
 80021b6:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	4618      	mov	r0, r3
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	685a      	ldr	r2, [r3, #4]
 80021ca:	4613      	mov	r3, r2
 80021cc:	009b      	lsls	r3, r3, #2
 80021ce:	4413      	add	r3, r2
 80021d0:	3b23      	subs	r3, #35	; 0x23
 80021d2:	fa00 f203 	lsl.w	r2, r0, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	430a      	orrs	r2, r1
 80021dc:	631a      	str	r2, [r3, #48]	; 0x30
 80021de:	e023      	b.n	8002228 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	685a      	ldr	r2, [r3, #4]
 80021ea:	4613      	mov	r3, r2
 80021ec:	009b      	lsls	r3, r3, #2
 80021ee:	4413      	add	r3, r2
 80021f0:	3b41      	subs	r3, #65	; 0x41
 80021f2:	221f      	movs	r2, #31
 80021f4:	fa02 f303 	lsl.w	r3, r2, r3
 80021f8:	43da      	mvns	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	400a      	ands	r2, r1
 8002200:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	b29b      	uxth	r3, r3
 800220e:	4618      	mov	r0, r3
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	685a      	ldr	r2, [r3, #4]
 8002214:	4613      	mov	r3, r2
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	4413      	add	r3, r2
 800221a:	3b41      	subs	r3, #65	; 0x41
 800221c:	fa00 f203 	lsl.w	r2, r0, r3
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	430a      	orrs	r2, r1
 8002226:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a30      	ldr	r2, [pc, #192]	; (80022f0 <HAL_ADC_ConfigChannel+0x29c>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d10a      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x1f4>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800223a:	d105      	bne.n	8002248 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 800223c:	4b2d      	ldr	r3, [pc, #180]	; (80022f4 <HAL_ADC_ConfigChannel+0x2a0>)
 800223e:	685b      	ldr	r3, [r3, #4]
 8002240:	4a2c      	ldr	r2, [pc, #176]	; (80022f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002242:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8002246:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a28      	ldr	r2, [pc, #160]	; (80022f0 <HAL_ADC_ConfigChannel+0x29c>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d10f      	bne.n	8002272 <HAL_ADC_ConfigChannel+0x21e>
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	2b12      	cmp	r3, #18
 8002258:	d10b      	bne.n	8002272 <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 800225a:	4b26      	ldr	r3, [pc, #152]	; (80022f4 <HAL_ADC_ConfigChannel+0x2a0>)
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	4a25      	ldr	r2, [pc, #148]	; (80022f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002260:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002264:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8002266:	4b23      	ldr	r3, [pc, #140]	; (80022f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	4a22      	ldr	r2, [pc, #136]	; (80022f4 <HAL_ADC_ConfigChannel+0x2a0>)
 800226c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002270:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a1e      	ldr	r2, [pc, #120]	; (80022f0 <HAL_ADC_ConfigChannel+0x29c>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d12b      	bne.n	80022d4 <HAL_ADC_ConfigChannel+0x280>
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a1a      	ldr	r2, [pc, #104]	; (80022ec <HAL_ADC_ConfigChannel+0x298>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d003      	beq.n	800228e <HAL_ADC_ConfigChannel+0x23a>
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	2b11      	cmp	r3, #17
 800228c:	d122      	bne.n	80022d4 <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 800228e:	4b19      	ldr	r3, [pc, #100]	; (80022f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002290:	685b      	ldr	r3, [r3, #4]
 8002292:	4a18      	ldr	r2, [pc, #96]	; (80022f4 <HAL_ADC_ConfigChannel+0x2a0>)
 8002294:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8002298:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800229a:	4b16      	ldr	r3, [pc, #88]	; (80022f4 <HAL_ADC_ConfigChannel+0x2a0>)
 800229c:	685b      	ldr	r3, [r3, #4]
 800229e:	4a15      	ldr	r2, [pc, #84]	; (80022f4 <HAL_ADC_ConfigChannel+0x2a0>)
 80022a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022a4:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4a10      	ldr	r2, [pc, #64]	; (80022ec <HAL_ADC_ConfigChannel+0x298>)
 80022ac:	4293      	cmp	r3, r2
 80022ae:	d111      	bne.n	80022d4 <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80022b0:	4b11      	ldr	r3, [pc, #68]	; (80022f8 <HAL_ADC_ConfigChannel+0x2a4>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4a11      	ldr	r2, [pc, #68]	; (80022fc <HAL_ADC_ConfigChannel+0x2a8>)
 80022b6:	fba2 2303 	umull	r2, r3, r2, r3
 80022ba:	0c9a      	lsrs	r2, r3, #18
 80022bc:	4613      	mov	r3, r2
 80022be:	009b      	lsls	r3, r3, #2
 80022c0:	4413      	add	r3, r2
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80022c6:	e002      	b.n	80022ce <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	3b01      	subs	r3, #1
 80022cc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d1f9      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2200      	movs	r2, #0
 80022d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80022dc:	2300      	movs	r3, #0
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
 80022ea:	bf00      	nop
 80022ec:	10000012 	.word	0x10000012
 80022f0:	40012000 	.word	0x40012000
 80022f4:	40012300 	.word	0x40012300
 80022f8:	20000090 	.word	0x20000090
 80022fc:	431bde83 	.word	0x431bde83

08002300 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8002308:	4b78      	ldr	r3, [pc, #480]	; (80024ec <ADC_Init+0x1ec>)
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	4a77      	ldr	r2, [pc, #476]	; (80024ec <ADC_Init+0x1ec>)
 800230e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8002312:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8002314:	4b75      	ldr	r3, [pc, #468]	; (80024ec <ADC_Init+0x1ec>)
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	4973      	ldr	r1, [pc, #460]	; (80024ec <ADC_Init+0x1ec>)
 800231e:	4313      	orrs	r3, r2
 8002320:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	685a      	ldr	r2, [r3, #4]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002330:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	6859      	ldr	r1, [r3, #4]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	021a      	lsls	r2, r3, #8
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	430a      	orrs	r2, r1
 8002344:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	685a      	ldr	r2, [r3, #4]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002354:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6859      	ldr	r1, [r3, #4]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689a      	ldr	r2, [r3, #8]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	430a      	orrs	r2, r1
 8002366:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	689a      	ldr	r2, [r3, #8]
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002376:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	6899      	ldr	r1, [r3, #8]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68da      	ldr	r2, [r3, #12]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	430a      	orrs	r2, r1
 8002388:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800238e:	4a58      	ldr	r2, [pc, #352]	; (80024f0 <ADC_Init+0x1f0>)
 8002390:	4293      	cmp	r3, r2
 8002392:	d022      	beq.n	80023da <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023a2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	6899      	ldr	r1, [r3, #8]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	689a      	ldr	r2, [r3, #8]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023c4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	6899      	ldr	r1, [r3, #8]
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	609a      	str	r2, [r3, #8]
 80023d8:	e00f      	b.n	80023fa <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	689a      	ldr	r2, [r3, #8]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80023e8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80023f8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	689a      	ldr	r2, [r3, #8]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 0202 	bic.w	r2, r2, #2
 8002408:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	6899      	ldr	r1, [r3, #8]
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	699b      	ldr	r3, [r3, #24]
 8002414:	005a      	lsls	r2, r3, #1
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	430a      	orrs	r2, r1
 800241c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d01b      	beq.n	8002460 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	685a      	ldr	r2, [r3, #4]
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002436:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	685a      	ldr	r2, [r3, #4]
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002446:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	6859      	ldr	r1, [r3, #4]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	3b01      	subs	r3, #1
 8002454:	035a      	lsls	r2, r3, #13
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	430a      	orrs	r2, r1
 800245c:	605a      	str	r2, [r3, #4]
 800245e:	e007      	b.n	8002470 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	685a      	ldr	r2, [r3, #4]
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800246e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800247e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	69db      	ldr	r3, [r3, #28]
 800248a:	3b01      	subs	r3, #1
 800248c:	051a      	lsls	r2, r3, #20
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	430a      	orrs	r2, r1
 8002494:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	689a      	ldr	r2, [r3, #8]
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80024a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	6899      	ldr	r1, [r3, #8]
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80024b2:	025a      	lsls	r2, r3, #9
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	430a      	orrs	r2, r1
 80024ba:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	689a      	ldr	r2, [r3, #8]
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80024ca:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	6899      	ldr	r1, [r3, #8]
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	695b      	ldr	r3, [r3, #20]
 80024d6:	029a      	lsls	r2, r3, #10
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	430a      	orrs	r2, r1
 80024de:	609a      	str	r2, [r3, #8]
}
 80024e0:	bf00      	nop
 80024e2:	370c      	adds	r7, #12
 80024e4:	46bd      	mov	sp, r7
 80024e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ea:	4770      	bx	lr
 80024ec:	40012300 	.word	0x40012300
 80024f0:	0f000001 	.word	0x0f000001

080024f4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 80024fc:	bf00      	nop
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	f003 0307 	and.w	r3, r3, #7
 8002516:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002518:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <__NVIC_SetPriorityGrouping+0x40>)
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800251e:	68ba      	ldr	r2, [r7, #8]
 8002520:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002524:	4013      	ands	r3, r2
 8002526:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002530:	4b06      	ldr	r3, [pc, #24]	; (800254c <__NVIC_SetPriorityGrouping+0x44>)
 8002532:	4313      	orrs	r3, r2
 8002534:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002536:	4a04      	ldr	r2, [pc, #16]	; (8002548 <__NVIC_SetPriorityGrouping+0x40>)
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	60d3      	str	r3, [r2, #12]
}
 800253c:	bf00      	nop
 800253e:	3714      	adds	r7, #20
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	e000ed00 	.word	0xe000ed00
 800254c:	05fa0000 	.word	0x05fa0000

08002550 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002554:	4b04      	ldr	r3, [pc, #16]	; (8002568 <__NVIC_GetPriorityGrouping+0x18>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	0a1b      	lsrs	r3, r3, #8
 800255a:	f003 0307 	and.w	r3, r3, #7
}
 800255e:	4618      	mov	r0, r3
 8002560:	46bd      	mov	sp, r7
 8002562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002566:	4770      	bx	lr
 8002568:	e000ed00 	.word	0xe000ed00

0800256c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
 8002572:	4603      	mov	r3, r0
 8002574:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002576:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800257a:	2b00      	cmp	r3, #0
 800257c:	db0b      	blt.n	8002596 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800257e:	79fb      	ldrb	r3, [r7, #7]
 8002580:	f003 021f 	and.w	r2, r3, #31
 8002584:	4907      	ldr	r1, [pc, #28]	; (80025a4 <__NVIC_EnableIRQ+0x38>)
 8002586:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800258a:	095b      	lsrs	r3, r3, #5
 800258c:	2001      	movs	r0, #1
 800258e:	fa00 f202 	lsl.w	r2, r0, r2
 8002592:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	e000e100 	.word	0xe000e100

080025a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	6039      	str	r1, [r7, #0]
 80025b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	db0a      	blt.n	80025d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	b2da      	uxtb	r2, r3
 80025c0:	490c      	ldr	r1, [pc, #48]	; (80025f4 <__NVIC_SetPriority+0x4c>)
 80025c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c6:	0112      	lsls	r2, r2, #4
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	440b      	add	r3, r1
 80025cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025d0:	e00a      	b.n	80025e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	b2da      	uxtb	r2, r3
 80025d6:	4908      	ldr	r1, [pc, #32]	; (80025f8 <__NVIC_SetPriority+0x50>)
 80025d8:	79fb      	ldrb	r3, [r7, #7]
 80025da:	f003 030f 	and.w	r3, r3, #15
 80025de:	3b04      	subs	r3, #4
 80025e0:	0112      	lsls	r2, r2, #4
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	440b      	add	r3, r1
 80025e6:	761a      	strb	r2, [r3, #24]
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr
 80025f4:	e000e100 	.word	0xe000e100
 80025f8:	e000ed00 	.word	0xe000ed00

080025fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025fc:	b480      	push	{r7}
 80025fe:	b089      	sub	sp, #36	; 0x24
 8002600:	af00      	add	r7, sp, #0
 8002602:	60f8      	str	r0, [r7, #12]
 8002604:	60b9      	str	r1, [r7, #8]
 8002606:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	f003 0307 	and.w	r3, r3, #7
 800260e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	f1c3 0307 	rsb	r3, r3, #7
 8002616:	2b04      	cmp	r3, #4
 8002618:	bf28      	it	cs
 800261a:	2304      	movcs	r3, #4
 800261c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	3304      	adds	r3, #4
 8002622:	2b06      	cmp	r3, #6
 8002624:	d902      	bls.n	800262c <NVIC_EncodePriority+0x30>
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	3b03      	subs	r3, #3
 800262a:	e000      	b.n	800262e <NVIC_EncodePriority+0x32>
 800262c:	2300      	movs	r3, #0
 800262e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002630:	f04f 32ff 	mov.w	r2, #4294967295
 8002634:	69bb      	ldr	r3, [r7, #24]
 8002636:	fa02 f303 	lsl.w	r3, r2, r3
 800263a:	43da      	mvns	r2, r3
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	401a      	ands	r2, r3
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002644:	f04f 31ff 	mov.w	r1, #4294967295
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	fa01 f303 	lsl.w	r3, r1, r3
 800264e:	43d9      	mvns	r1, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002654:	4313      	orrs	r3, r2
         );
}
 8002656:	4618      	mov	r0, r3
 8002658:	3724      	adds	r7, #36	; 0x24
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
	...

08002664 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b082      	sub	sp, #8
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	3b01      	subs	r3, #1
 8002670:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002674:	d301      	bcc.n	800267a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002676:	2301      	movs	r3, #1
 8002678:	e00f      	b.n	800269a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800267a:	4a0a      	ldr	r2, [pc, #40]	; (80026a4 <SysTick_Config+0x40>)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	3b01      	subs	r3, #1
 8002680:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002682:	210f      	movs	r1, #15
 8002684:	f04f 30ff 	mov.w	r0, #4294967295
 8002688:	f7ff ff8e 	bl	80025a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800268c:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <SysTick_Config+0x40>)
 800268e:	2200      	movs	r2, #0
 8002690:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002692:	4b04      	ldr	r3, [pc, #16]	; (80026a4 <SysTick_Config+0x40>)
 8002694:	2207      	movs	r2, #7
 8002696:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002698:	2300      	movs	r3, #0
}
 800269a:	4618      	mov	r0, r3
 800269c:	3708      	adds	r7, #8
 800269e:	46bd      	mov	sp, r7
 80026a0:	bd80      	pop	{r7, pc}
 80026a2:	bf00      	nop
 80026a4:	e000e010 	.word	0xe000e010

080026a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026b0:	6878      	ldr	r0, [r7, #4]
 80026b2:	f7ff ff29 	bl	8002508 <__NVIC_SetPriorityGrouping>
}
 80026b6:	bf00      	nop
 80026b8:	3708      	adds	r7, #8
 80026ba:	46bd      	mov	sp, r7
 80026bc:	bd80      	pop	{r7, pc}

080026be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026be:	b580      	push	{r7, lr}
 80026c0:	b086      	sub	sp, #24
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	4603      	mov	r3, r0
 80026c6:	60b9      	str	r1, [r7, #8]
 80026c8:	607a      	str	r2, [r7, #4]
 80026ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80026cc:	2300      	movs	r3, #0
 80026ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026d0:	f7ff ff3e 	bl	8002550 <__NVIC_GetPriorityGrouping>
 80026d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026d6:	687a      	ldr	r2, [r7, #4]
 80026d8:	68b9      	ldr	r1, [r7, #8]
 80026da:	6978      	ldr	r0, [r7, #20]
 80026dc:	f7ff ff8e 	bl	80025fc <NVIC_EncodePriority>
 80026e0:	4602      	mov	r2, r0
 80026e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026e6:	4611      	mov	r1, r2
 80026e8:	4618      	mov	r0, r3
 80026ea:	f7ff ff5d 	bl	80025a8 <__NVIC_SetPriority>
}
 80026ee:	bf00      	nop
 80026f0:	3718      	adds	r7, #24
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b082      	sub	sp, #8
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	4603      	mov	r3, r0
 80026fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002704:	4618      	mov	r0, r3
 8002706:	f7ff ff31 	bl	800256c <__NVIC_EnableIRQ>
}
 800270a:	bf00      	nop
 800270c:	3708      	adds	r7, #8
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}

08002712 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002712:	b580      	push	{r7, lr}
 8002714:	b082      	sub	sp, #8
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800271a:	6878      	ldr	r0, [r7, #4]
 800271c:	f7ff ffa2 	bl	8002664 <SysTick_Config>
 8002720:	4603      	mov	r3, r0
}
 8002722:	4618      	mov	r0, r3
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b084      	sub	sp, #16
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002736:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002738:	f7ff faea 	bl	8001d10 <HAL_GetTick>
 800273c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b02      	cmp	r3, #2
 8002748:	d008      	beq.n	800275c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2280      	movs	r2, #128	; 0x80
 800274e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e052      	b.n	8002802 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 0216 	bic.w	r2, r2, #22
 800276a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	695a      	ldr	r2, [r3, #20]
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800277a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002780:	2b00      	cmp	r3, #0
 8002782:	d103      	bne.n	800278c <HAL_DMA_Abort+0x62>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002788:	2b00      	cmp	r3, #0
 800278a:	d007      	beq.n	800279c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	681a      	ldr	r2, [r3, #0]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	f022 0208 	bic.w	r2, r2, #8
 800279a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681a      	ldr	r2, [r3, #0]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f022 0201 	bic.w	r2, r2, #1
 80027aa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027ac:	e013      	b.n	80027d6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027ae:	f7ff faaf 	bl	8001d10 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b05      	cmp	r3, #5
 80027ba:	d90c      	bls.n	80027d6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2220      	movs	r2, #32
 80027c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2203      	movs	r2, #3
 80027c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80027d2:	2303      	movs	r3, #3
 80027d4:	e015      	b.n	8002802 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	f003 0301 	and.w	r3, r3, #1
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d1e4      	bne.n	80027ae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e8:	223f      	movs	r2, #63	; 0x3f
 80027ea:	409a      	lsls	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	3710      	adds	r7, #16
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}

0800280a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800280a:	b480      	push	{r7}
 800280c:	b083      	sub	sp, #12
 800280e:	af00      	add	r7, sp, #0
 8002810:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002818:	b2db      	uxtb	r3, r3
 800281a:	2b02      	cmp	r3, #2
 800281c:	d004      	beq.n	8002828 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2280      	movs	r2, #128	; 0x80
 8002822:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	e00c      	b.n	8002842 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2205      	movs	r2, #5
 800282c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	681a      	ldr	r2, [r3, #0]
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f022 0201 	bic.w	r2, r2, #1
 800283e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	4618      	mov	r0, r3
 8002844:	370c      	adds	r7, #12
 8002846:	46bd      	mov	sp, r7
 8002848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284c:	4770      	bx	lr

0800284e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800284e:	b480      	push	{r7}
 8002850:	b083      	sub	sp, #12
 8002852:	af00      	add	r7, sp, #0
 8002854:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800285c:	b2db      	uxtb	r3, r3
}
 800285e:	4618      	mov	r0, r3
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
	...

0800286c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800286c:	b480      	push	{r7}
 800286e:	b089      	sub	sp, #36	; 0x24
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002876:	2300      	movs	r3, #0
 8002878:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800287a:	2300      	movs	r3, #0
 800287c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800287e:	2300      	movs	r3, #0
 8002880:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002882:	2300      	movs	r3, #0
 8002884:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002886:	2300      	movs	r3, #0
 8002888:	61fb      	str	r3, [r7, #28]
 800288a:	e175      	b.n	8002b78 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800288c:	2201      	movs	r2, #1
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	fa02 f303 	lsl.w	r3, r2, r3
 8002894:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	697a      	ldr	r2, [r7, #20]
 800289c:	4013      	ands	r3, r2
 800289e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028a0:	693a      	ldr	r2, [r7, #16]
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	f040 8164 	bne.w	8002b72 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f003 0303 	and.w	r3, r3, #3
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d005      	beq.n	80028c2 <HAL_GPIO_Init+0x56>
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	685b      	ldr	r3, [r3, #4]
 80028ba:	f003 0303 	and.w	r3, r3, #3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d130      	bne.n	8002924 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	005b      	lsls	r3, r3, #1
 80028cc:	2203      	movs	r2, #3
 80028ce:	fa02 f303 	lsl.w	r3, r2, r3
 80028d2:	43db      	mvns	r3, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4013      	ands	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	68da      	ldr	r2, [r3, #12]
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	005b      	lsls	r3, r3, #1
 80028e2:	fa02 f303 	lsl.w	r3, r2, r3
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	69ba      	ldr	r2, [r7, #24]
 80028f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028f8:	2201      	movs	r2, #1
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002900:	43db      	mvns	r3, r3
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	4013      	ands	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	091b      	lsrs	r3, r3, #4
 800290e:	f003 0201 	and.w	r2, r3, #1
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	fa02 f303 	lsl.w	r3, r2, r3
 8002918:	69ba      	ldr	r2, [r7, #24]
 800291a:	4313      	orrs	r3, r2
 800291c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	69ba      	ldr	r2, [r7, #24]
 8002922:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	f003 0303 	and.w	r3, r3, #3
 800292c:	2b03      	cmp	r3, #3
 800292e:	d017      	beq.n	8002960 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	2203      	movs	r2, #3
 800293c:	fa02 f303 	lsl.w	r3, r2, r3
 8002940:	43db      	mvns	r3, r3
 8002942:	69ba      	ldr	r2, [r7, #24]
 8002944:	4013      	ands	r3, r2
 8002946:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	689a      	ldr	r2, [r3, #8]
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	fa02 f303 	lsl.w	r3, r2, r3
 8002954:	69ba      	ldr	r2, [r7, #24]
 8002956:	4313      	orrs	r3, r2
 8002958:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	69ba      	ldr	r2, [r7, #24]
 800295e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f003 0303 	and.w	r3, r3, #3
 8002968:	2b02      	cmp	r3, #2
 800296a:	d123      	bne.n	80029b4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800296c:	69fb      	ldr	r3, [r7, #28]
 800296e:	08da      	lsrs	r2, r3, #3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	3208      	adds	r2, #8
 8002974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002978:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	f003 0307 	and.w	r3, r3, #7
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	220f      	movs	r2, #15
 8002984:	fa02 f303 	lsl.w	r3, r2, r3
 8002988:	43db      	mvns	r3, r3
 800298a:	69ba      	ldr	r2, [r7, #24]
 800298c:	4013      	ands	r3, r2
 800298e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	691a      	ldr	r2, [r3, #16]
 8002994:	69fb      	ldr	r3, [r7, #28]
 8002996:	f003 0307 	and.w	r3, r3, #7
 800299a:	009b      	lsls	r3, r3, #2
 800299c:	fa02 f303 	lsl.w	r3, r2, r3
 80029a0:	69ba      	ldr	r2, [r7, #24]
 80029a2:	4313      	orrs	r3, r2
 80029a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80029a6:	69fb      	ldr	r3, [r7, #28]
 80029a8:	08da      	lsrs	r2, r3, #3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	3208      	adds	r2, #8
 80029ae:	69b9      	ldr	r1, [r7, #24]
 80029b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	005b      	lsls	r3, r3, #1
 80029be:	2203      	movs	r2, #3
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	43db      	mvns	r3, r3
 80029c6:	69ba      	ldr	r2, [r7, #24]
 80029c8:	4013      	ands	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f003 0203 	and.w	r2, r3, #3
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	005b      	lsls	r3, r3, #1
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	69ba      	ldr	r2, [r7, #24]
 80029de:	4313      	orrs	r3, r2
 80029e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	69ba      	ldr	r2, [r7, #24]
 80029e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	f000 80be 	beq.w	8002b72 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029f6:	4b66      	ldr	r3, [pc, #408]	; (8002b90 <HAL_GPIO_Init+0x324>)
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	4a65      	ldr	r2, [pc, #404]	; (8002b90 <HAL_GPIO_Init+0x324>)
 80029fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a00:	6453      	str	r3, [r2, #68]	; 0x44
 8002a02:	4b63      	ldr	r3, [pc, #396]	; (8002b90 <HAL_GPIO_Init+0x324>)
 8002a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a0a:	60fb      	str	r3, [r7, #12]
 8002a0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002a0e:	4a61      	ldr	r2, [pc, #388]	; (8002b94 <HAL_GPIO_Init+0x328>)
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	089b      	lsrs	r3, r3, #2
 8002a14:	3302      	adds	r3, #2
 8002a16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002a1c:	69fb      	ldr	r3, [r7, #28]
 8002a1e:	f003 0303 	and.w	r3, r3, #3
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	220f      	movs	r2, #15
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	43db      	mvns	r3, r3
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	4013      	ands	r3, r2
 8002a30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a58      	ldr	r2, [pc, #352]	; (8002b98 <HAL_GPIO_Init+0x32c>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d037      	beq.n	8002aaa <HAL_GPIO_Init+0x23e>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a57      	ldr	r2, [pc, #348]	; (8002b9c <HAL_GPIO_Init+0x330>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d031      	beq.n	8002aa6 <HAL_GPIO_Init+0x23a>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a56      	ldr	r2, [pc, #344]	; (8002ba0 <HAL_GPIO_Init+0x334>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d02b      	beq.n	8002aa2 <HAL_GPIO_Init+0x236>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a55      	ldr	r2, [pc, #340]	; (8002ba4 <HAL_GPIO_Init+0x338>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d025      	beq.n	8002a9e <HAL_GPIO_Init+0x232>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a54      	ldr	r2, [pc, #336]	; (8002ba8 <HAL_GPIO_Init+0x33c>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d01f      	beq.n	8002a9a <HAL_GPIO_Init+0x22e>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a53      	ldr	r2, [pc, #332]	; (8002bac <HAL_GPIO_Init+0x340>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d019      	beq.n	8002a96 <HAL_GPIO_Init+0x22a>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a52      	ldr	r2, [pc, #328]	; (8002bb0 <HAL_GPIO_Init+0x344>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d013      	beq.n	8002a92 <HAL_GPIO_Init+0x226>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a51      	ldr	r2, [pc, #324]	; (8002bb4 <HAL_GPIO_Init+0x348>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d00d      	beq.n	8002a8e <HAL_GPIO_Init+0x222>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a50      	ldr	r2, [pc, #320]	; (8002bb8 <HAL_GPIO_Init+0x34c>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d007      	beq.n	8002a8a <HAL_GPIO_Init+0x21e>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	4a4f      	ldr	r2, [pc, #316]	; (8002bbc <HAL_GPIO_Init+0x350>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d101      	bne.n	8002a86 <HAL_GPIO_Init+0x21a>
 8002a82:	2309      	movs	r3, #9
 8002a84:	e012      	b.n	8002aac <HAL_GPIO_Init+0x240>
 8002a86:	230a      	movs	r3, #10
 8002a88:	e010      	b.n	8002aac <HAL_GPIO_Init+0x240>
 8002a8a:	2308      	movs	r3, #8
 8002a8c:	e00e      	b.n	8002aac <HAL_GPIO_Init+0x240>
 8002a8e:	2307      	movs	r3, #7
 8002a90:	e00c      	b.n	8002aac <HAL_GPIO_Init+0x240>
 8002a92:	2306      	movs	r3, #6
 8002a94:	e00a      	b.n	8002aac <HAL_GPIO_Init+0x240>
 8002a96:	2305      	movs	r3, #5
 8002a98:	e008      	b.n	8002aac <HAL_GPIO_Init+0x240>
 8002a9a:	2304      	movs	r3, #4
 8002a9c:	e006      	b.n	8002aac <HAL_GPIO_Init+0x240>
 8002a9e:	2303      	movs	r3, #3
 8002aa0:	e004      	b.n	8002aac <HAL_GPIO_Init+0x240>
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	e002      	b.n	8002aac <HAL_GPIO_Init+0x240>
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e000      	b.n	8002aac <HAL_GPIO_Init+0x240>
 8002aaa:	2300      	movs	r3, #0
 8002aac:	69fa      	ldr	r2, [r7, #28]
 8002aae:	f002 0203 	and.w	r2, r2, #3
 8002ab2:	0092      	lsls	r2, r2, #2
 8002ab4:	4093      	lsls	r3, r2
 8002ab6:	69ba      	ldr	r2, [r7, #24]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002abc:	4935      	ldr	r1, [pc, #212]	; (8002b94 <HAL_GPIO_Init+0x328>)
 8002abe:	69fb      	ldr	r3, [r7, #28]
 8002ac0:	089b      	lsrs	r3, r3, #2
 8002ac2:	3302      	adds	r3, #2
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aca:	4b3d      	ldr	r3, [pc, #244]	; (8002bc0 <HAL_GPIO_Init+0x354>)
 8002acc:	689b      	ldr	r3, [r3, #8]
 8002ace:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ad0:	693b      	ldr	r3, [r7, #16]
 8002ad2:	43db      	mvns	r3, r3
 8002ad4:	69ba      	ldr	r2, [r7, #24]
 8002ad6:	4013      	ands	r3, r2
 8002ad8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d003      	beq.n	8002aee <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002ae6:	69ba      	ldr	r2, [r7, #24]
 8002ae8:	693b      	ldr	r3, [r7, #16]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002aee:	4a34      	ldr	r2, [pc, #208]	; (8002bc0 <HAL_GPIO_Init+0x354>)
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002af4:	4b32      	ldr	r3, [pc, #200]	; (8002bc0 <HAL_GPIO_Init+0x354>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	43db      	mvns	r3, r3
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4013      	ands	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d003      	beq.n	8002b18 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b10:	69ba      	ldr	r2, [r7, #24]
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	4313      	orrs	r3, r2
 8002b16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b18:	4a29      	ldr	r2, [pc, #164]	; (8002bc0 <HAL_GPIO_Init+0x354>)
 8002b1a:	69bb      	ldr	r3, [r7, #24]
 8002b1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b1e:	4b28      	ldr	r3, [pc, #160]	; (8002bc0 <HAL_GPIO_Init+0x354>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b24:	693b      	ldr	r3, [r7, #16]
 8002b26:	43db      	mvns	r3, r3
 8002b28:	69ba      	ldr	r2, [r7, #24]
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	685b      	ldr	r3, [r3, #4]
 8002b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d003      	beq.n	8002b42 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b3a:	69ba      	ldr	r2, [r7, #24]
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b42:	4a1f      	ldr	r2, [pc, #124]	; (8002bc0 <HAL_GPIO_Init+0x354>)
 8002b44:	69bb      	ldr	r3, [r7, #24]
 8002b46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b48:	4b1d      	ldr	r3, [pc, #116]	; (8002bc0 <HAL_GPIO_Init+0x354>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	43db      	mvns	r3, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4013      	ands	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d003      	beq.n	8002b6c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b6c:	4a14      	ldr	r2, [pc, #80]	; (8002bc0 <HAL_GPIO_Init+0x354>)
 8002b6e:	69bb      	ldr	r3, [r7, #24]
 8002b70:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	3301      	adds	r3, #1
 8002b76:	61fb      	str	r3, [r7, #28]
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	2b0f      	cmp	r3, #15
 8002b7c:	f67f ae86 	bls.w	800288c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002b80:	bf00      	nop
 8002b82:	bf00      	nop
 8002b84:	3724      	adds	r7, #36	; 0x24
 8002b86:	46bd      	mov	sp, r7
 8002b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8c:	4770      	bx	lr
 8002b8e:	bf00      	nop
 8002b90:	40023800 	.word	0x40023800
 8002b94:	40013800 	.word	0x40013800
 8002b98:	40020000 	.word	0x40020000
 8002b9c:	40020400 	.word	0x40020400
 8002ba0:	40020800 	.word	0x40020800
 8002ba4:	40020c00 	.word	0x40020c00
 8002ba8:	40021000 	.word	0x40021000
 8002bac:	40021400 	.word	0x40021400
 8002bb0:	40021800 	.word	0x40021800
 8002bb4:	40021c00 	.word	0x40021c00
 8002bb8:	40022000 	.word	0x40022000
 8002bbc:	40022400 	.word	0x40022400
 8002bc0:	40013c00 	.word	0x40013c00

08002bc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	460b      	mov	r3, r1
 8002bce:	807b      	strh	r3, [r7, #2]
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bd4:	787b      	ldrb	r3, [r7, #1]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bda:	887a      	ldrh	r2, [r7, #2]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002be0:	e003      	b.n	8002bea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002be2:	887b      	ldrh	r3, [r7, #2]
 8002be4:	041a      	lsls	r2, r3, #16
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	619a      	str	r2, [r3, #24]
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr

08002bf6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b085      	sub	sp, #20
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
 8002bfe:	460b      	mov	r3, r1
 8002c00:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	695b      	ldr	r3, [r3, #20]
 8002c06:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002c08:	887a      	ldrh	r2, [r7, #2]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	041a      	lsls	r2, r3, #16
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	43d9      	mvns	r1, r3
 8002c14:	887b      	ldrh	r3, [r7, #2]
 8002c16:	400b      	ands	r3, r1
 8002c18:	431a      	orrs	r2, r3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	619a      	str	r2, [r3, #24]
}
 8002c1e:	bf00      	nop
 8002c20:	3714      	adds	r7, #20
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
	...

08002c2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	4603      	mov	r3, r0
 8002c34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002c36:	4b08      	ldr	r3, [pc, #32]	; (8002c58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c38:	695a      	ldr	r2, [r3, #20]
 8002c3a:	88fb      	ldrh	r3, [r7, #6]
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d006      	beq.n	8002c50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002c42:	4a05      	ldr	r2, [pc, #20]	; (8002c58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002c44:	88fb      	ldrh	r3, [r7, #6]
 8002c46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002c48:	88fb      	ldrh	r3, [r7, #6]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7fe faa8 	bl	80011a0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002c50:	bf00      	nop
 8002c52:	3708      	adds	r7, #8
 8002c54:	46bd      	mov	sp, r7
 8002c56:	bd80      	pop	{r7, pc}
 8002c58:	40013c00 	.word	0x40013c00

08002c5c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b082      	sub	sp, #8
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d101      	bne.n	8002c6e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002c6a:	2301      	movs	r3, #1
 8002c6c:	e07f      	b.n	8002d6e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002c74:	b2db      	uxtb	r3, r3
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d106      	bne.n	8002c88 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7fd ff38 	bl	8000af8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2224      	movs	r2, #36	; 0x24
 8002c8c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	681a      	ldr	r2, [r3, #0]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 0201 	bic.w	r2, r2, #1
 8002c9e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685a      	ldr	r2, [r3, #4]
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cac:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689a      	ldr	r2, [r3, #8]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002cbc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68db      	ldr	r3, [r3, #12]
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d107      	bne.n	8002cd6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	689a      	ldr	r2, [r3, #8]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002cd2:	609a      	str	r2, [r3, #8]
 8002cd4:	e006      	b.n	8002ce4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	689a      	ldr	r2, [r3, #8]
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8002ce2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	68db      	ldr	r3, [r3, #12]
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d104      	bne.n	8002cf6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cf4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	6859      	ldr	r1, [r3, #4]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681a      	ldr	r2, [r3, #0]
 8002d00:	4b1d      	ldr	r3, [pc, #116]	; (8002d78 <HAL_I2C_Init+0x11c>)
 8002d02:	430b      	orrs	r3, r1
 8002d04:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68da      	ldr	r2, [r3, #12]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002d14:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	691a      	ldr	r2, [r3, #16]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	699b      	ldr	r3, [r3, #24]
 8002d26:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	430a      	orrs	r2, r1
 8002d2e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	69d9      	ldr	r1, [r3, #28]
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a1a      	ldr	r2, [r3, #32]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f042 0201 	orr.w	r2, r2, #1
 8002d4e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	2220      	movs	r2, #32
 8002d5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2200      	movs	r2, #0
 8002d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8002d6c:	2300      	movs	r3, #0
}
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3708      	adds	r7, #8
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	02008000 	.word	0x02008000

08002d7c <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b088      	sub	sp, #32
 8002d80:	af02      	add	r7, sp, #8
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	607a      	str	r2, [r7, #4]
 8002d86:	461a      	mov	r2, r3
 8002d88:	460b      	mov	r3, r1
 8002d8a:	817b      	strh	r3, [r7, #10]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d96:	b2db      	uxtb	r3, r3
 8002d98:	2b20      	cmp	r3, #32
 8002d9a:	f040 80da 	bne.w	8002f52 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d101      	bne.n	8002dac <HAL_I2C_Master_Transmit+0x30>
 8002da8:	2302      	movs	r3, #2
 8002daa:	e0d3      	b.n	8002f54 <HAL_I2C_Master_Transmit+0x1d8>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2201      	movs	r2, #1
 8002db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002db4:	f7fe ffac 	bl	8001d10 <HAL_GetTick>
 8002db8:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	2319      	movs	r3, #25
 8002dc0:	2201      	movs	r2, #1
 8002dc2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002dc6:	68f8      	ldr	r0, [r7, #12]
 8002dc8:	f000 fefb 	bl	8003bc2 <I2C_WaitOnFlagUntilTimeout>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
 8002dd4:	e0be      	b.n	8002f54 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	2221      	movs	r2, #33	; 0x21
 8002dda:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2210      	movs	r2, #16
 8002de2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	2200      	movs	r2, #0
 8002dea:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	687a      	ldr	r2, [r7, #4]
 8002df0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	893a      	ldrh	r2, [r7, #8]
 8002df6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	2bff      	cmp	r3, #255	; 0xff
 8002e06:	d90e      	bls.n	8002e26 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	22ff      	movs	r2, #255	; 0xff
 8002e0c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e12:	b2da      	uxtb	r2, r3
 8002e14:	8979      	ldrh	r1, [r7, #10]
 8002e16:	4b51      	ldr	r3, [pc, #324]	; (8002f5c <HAL_I2C_Master_Transmit+0x1e0>)
 8002e18:	9300      	str	r3, [sp, #0]
 8002e1a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f001 f8f2 	bl	8004008 <I2C_TransferConfig>
 8002e24:	e06c      	b.n	8002f00 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e2a:	b29a      	uxth	r2, r3
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	8979      	ldrh	r1, [r7, #10]
 8002e38:	4b48      	ldr	r3, [pc, #288]	; (8002f5c <HAL_I2C_Master_Transmit+0x1e0>)
 8002e3a:	9300      	str	r3, [sp, #0]
 8002e3c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002e40:	68f8      	ldr	r0, [r7, #12]
 8002e42:	f001 f8e1 	bl	8004008 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8002e46:	e05b      	b.n	8002f00 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e48:	697a      	ldr	r2, [r7, #20]
 8002e4a:	6a39      	ldr	r1, [r7, #32]
 8002e4c:	68f8      	ldr	r0, [r7, #12]
 8002e4e:	f000 fef8 	bl	8003c42 <I2C_WaitOnTXISFlagUntilTimeout>
 8002e52:	4603      	mov	r3, r0
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d001      	beq.n	8002e5c <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e07b      	b.n	8002f54 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e60:	781a      	ldrb	r2, [r3, #0]
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	1c5a      	adds	r2, r3, #1
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e76:	b29b      	uxth	r3, r3
 8002e78:	3b01      	subs	r3, #1
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e84:	3b01      	subs	r3, #1
 8002e86:	b29a      	uxth	r2, r3
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d034      	beq.n	8002f00 <HAL_I2C_Master_Transmit+0x184>
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d130      	bne.n	8002f00 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	9300      	str	r3, [sp, #0]
 8002ea2:	6a3b      	ldr	r3, [r7, #32]
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	2180      	movs	r1, #128	; 0x80
 8002ea8:	68f8      	ldr	r0, [r7, #12]
 8002eaa:	f000 fe8a 	bl	8003bc2 <I2C_WaitOnFlagUntilTimeout>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d001      	beq.n	8002eb8 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e04d      	b.n	8002f54 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	2bff      	cmp	r3, #255	; 0xff
 8002ec0:	d90e      	bls.n	8002ee0 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	22ff      	movs	r2, #255	; 0xff
 8002ec6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ecc:	b2da      	uxtb	r2, r3
 8002ece:	8979      	ldrh	r1, [r7, #10]
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	9300      	str	r3, [sp, #0]
 8002ed4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f001 f895 	bl	8004008 <I2C_TransferConfig>
 8002ede:	e00f      	b.n	8002f00 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002ee4:	b29a      	uxth	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002eee:	b2da      	uxtb	r2, r3
 8002ef0:	8979      	ldrh	r1, [r7, #10]
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f001 f884 	bl	8004008 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002f04:	b29b      	uxth	r3, r3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d19e      	bne.n	8002e48 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002f0a:	697a      	ldr	r2, [r7, #20]
 8002f0c:	6a39      	ldr	r1, [r7, #32]
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	f000 fed7 	bl	8003cc2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d001      	beq.n	8002f1e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	e01a      	b.n	8002f54 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	2220      	movs	r2, #32
 8002f24:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	6859      	ldr	r1, [r3, #4]
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681a      	ldr	r2, [r3, #0]
 8002f30:	4b0b      	ldr	r3, [pc, #44]	; (8002f60 <HAL_I2C_Master_Transmit+0x1e4>)
 8002f32:	400b      	ands	r3, r1
 8002f34:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2220      	movs	r2, #32
 8002f3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	e000      	b.n	8002f54 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8002f52:	2302      	movs	r3, #2
  }
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3718      	adds	r7, #24
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	80002000 	.word	0x80002000
 8002f60:	fe00e800 	.word	0xfe00e800

08002f64 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b088      	sub	sp, #32
 8002f68:	af02      	add	r7, sp, #8
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	607a      	str	r2, [r7, #4]
 8002f6e:	461a      	mov	r2, r3
 8002f70:	460b      	mov	r3, r1
 8002f72:	817b      	strh	r3, [r7, #10]
 8002f74:	4613      	mov	r3, r2
 8002f76:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b20      	cmp	r3, #32
 8002f82:	f040 80db 	bne.w	800313c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002f8c:	2b01      	cmp	r3, #1
 8002f8e:	d101      	bne.n	8002f94 <HAL_I2C_Master_Receive+0x30>
 8002f90:	2302      	movs	r3, #2
 8002f92:	e0d4      	b.n	800313e <HAL_I2C_Master_Receive+0x1da>
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002f9c:	f7fe feb8 	bl	8001d10 <HAL_GetTick>
 8002fa0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8002fa2:	697b      	ldr	r3, [r7, #20]
 8002fa4:	9300      	str	r3, [sp, #0]
 8002fa6:	2319      	movs	r3, #25
 8002fa8:	2201      	movs	r2, #1
 8002faa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002fae:	68f8      	ldr	r0, [r7, #12]
 8002fb0:	f000 fe07 	bl	8003bc2 <I2C_WaitOnFlagUntilTimeout>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d001      	beq.n	8002fbe <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 8002fba:	2301      	movs	r3, #1
 8002fbc:	e0bf      	b.n	800313e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	2222      	movs	r2, #34	; 0x22
 8002fc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8002fc6:	68fb      	ldr	r3, [r7, #12]
 8002fc8:	2210      	movs	r2, #16
 8002fca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	687a      	ldr	r2, [r7, #4]
 8002fd8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	893a      	ldrh	r2, [r7, #8]
 8002fde:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	2bff      	cmp	r3, #255	; 0xff
 8002fee:	d90e      	bls.n	800300e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	22ff      	movs	r2, #255	; 0xff
 8002ff4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	8979      	ldrh	r1, [r7, #10]
 8002ffe:	4b52      	ldr	r3, [pc, #328]	; (8003148 <HAL_I2C_Master_Receive+0x1e4>)
 8003000:	9300      	str	r3, [sp, #0]
 8003002:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003006:	68f8      	ldr	r0, [r7, #12]
 8003008:	f000 fffe 	bl	8004008 <I2C_TransferConfig>
 800300c:	e06d      	b.n	80030ea <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003012:	b29a      	uxth	r2, r3
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800301c:	b2da      	uxtb	r2, r3
 800301e:	8979      	ldrh	r1, [r7, #10]
 8003020:	4b49      	ldr	r3, [pc, #292]	; (8003148 <HAL_I2C_Master_Receive+0x1e4>)
 8003022:	9300      	str	r3, [sp, #0]
 8003024:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003028:	68f8      	ldr	r0, [r7, #12]
 800302a:	f000 ffed 	bl	8004008 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 800302e:	e05c      	b.n	80030ea <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003030:	697a      	ldr	r2, [r7, #20]
 8003032:	6a39      	ldr	r1, [r7, #32]
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f000 fe81 	bl	8003d3c <I2C_WaitOnRXNEFlagUntilTimeout>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d001      	beq.n	8003044 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8003040:	2301      	movs	r3, #1
 8003042:	e07c      	b.n	800313e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304e:	b2d2      	uxtb	r2, r2
 8003050:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	1c5a      	adds	r2, r3, #1
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003060:	3b01      	subs	r3, #1
 8003062:	b29a      	uxth	r2, r3
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800306c:	b29b      	uxth	r3, r3
 800306e:	3b01      	subs	r3, #1
 8003070:	b29a      	uxth	r2, r3
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800307a:	b29b      	uxth	r3, r3
 800307c:	2b00      	cmp	r3, #0
 800307e:	d034      	beq.n	80030ea <HAL_I2C_Master_Receive+0x186>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003084:	2b00      	cmp	r3, #0
 8003086:	d130      	bne.n	80030ea <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	9300      	str	r3, [sp, #0]
 800308c:	6a3b      	ldr	r3, [r7, #32]
 800308e:	2200      	movs	r2, #0
 8003090:	2180      	movs	r1, #128	; 0x80
 8003092:	68f8      	ldr	r0, [r7, #12]
 8003094:	f000 fd95 	bl	8003bc2 <I2C_WaitOnFlagUntilTimeout>
 8003098:	4603      	mov	r3, r0
 800309a:	2b00      	cmp	r3, #0
 800309c:	d001      	beq.n	80030a2 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e04d      	b.n	800313e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	2bff      	cmp	r3, #255	; 0xff
 80030aa:	d90e      	bls.n	80030ca <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	22ff      	movs	r2, #255	; 0xff
 80030b0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030b6:	b2da      	uxtb	r2, r3
 80030b8:	8979      	ldrh	r1, [r7, #10]
 80030ba:	2300      	movs	r3, #0
 80030bc:	9300      	str	r3, [sp, #0]
 80030be:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f000 ffa0 	bl	8004008 <I2C_TransferConfig>
 80030c8:	e00f      	b.n	80030ea <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ce:	b29a      	uxth	r2, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80030d8:	b2da      	uxtb	r2, r3
 80030da:	8979      	ldrh	r1, [r7, #10]
 80030dc:	2300      	movs	r3, #0
 80030de:	9300      	str	r3, [sp, #0]
 80030e0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80030e4:	68f8      	ldr	r0, [r7, #12]
 80030e6:	f000 ff8f 	bl	8004008 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d19d      	bne.n	8003030 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	6a39      	ldr	r1, [r7, #32]
 80030f8:	68f8      	ldr	r0, [r7, #12]
 80030fa:	f000 fde2 	bl	8003cc2 <I2C_WaitOnSTOPFlagUntilTimeout>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d001      	beq.n	8003108 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8003104:	2301      	movs	r3, #1
 8003106:	e01a      	b.n	800313e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2220      	movs	r2, #32
 800310e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6859      	ldr	r1, [r3, #4]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681a      	ldr	r2, [r3, #0]
 800311a:	4b0c      	ldr	r3, [pc, #48]	; (800314c <HAL_I2C_Master_Receive+0x1e8>)
 800311c:	400b      	ands	r3, r1
 800311e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2220      	movs	r2, #32
 8003124:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003138:	2300      	movs	r3, #0
 800313a:	e000      	b.n	800313e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800313c:	2302      	movs	r3, #2
  }
}
 800313e:	4618      	mov	r0, r3
 8003140:	3718      	adds	r7, #24
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
 8003146:	bf00      	nop
 8003148:	80002400 	.word	0x80002400
 800314c:	fe00e800 	.word	0xfe00e800

08003150 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b084      	sub	sp, #16
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800316c:	2b00      	cmp	r3, #0
 800316e:	d005      	beq.n	800317c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003174:	68ba      	ldr	r2, [r7, #8]
 8003176:	68f9      	ldr	r1, [r7, #12]
 8003178:	6878      	ldr	r0, [r7, #4]
 800317a:	4798      	blx	r3
  }
}
 800317c:	bf00      	nop
 800317e:	3710      	adds	r7, #16
 8003180:	46bd      	mov	sp, r7
 8003182:	bd80      	pop	{r7, pc}

08003184 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003184:	b580      	push	{r7, lr}
 8003186:	b086      	sub	sp, #24
 8003188:	af00      	add	r7, sp, #0
 800318a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	0a1b      	lsrs	r3, r3, #8
 80031a0:	f003 0301 	and.w	r3, r3, #1
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d010      	beq.n	80031ca <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	09db      	lsrs	r3, r3, #7
 80031ac:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d00a      	beq.n	80031ca <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031b8:	f043 0201 	orr.w	r2, r3, #1
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80031c8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	0a9b      	lsrs	r3, r3, #10
 80031ce:	f003 0301 	and.w	r3, r3, #1
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d010      	beq.n	80031f8 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80031d6:	693b      	ldr	r3, [r7, #16]
 80031d8:	09db      	lsrs	r3, r3, #7
 80031da:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00a      	beq.n	80031f8 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031e6:	f043 0208 	orr.w	r2, r3, #8
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80031f6:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	0a5b      	lsrs	r3, r3, #9
 80031fc:	f003 0301 	and.w	r3, r3, #1
 8003200:	2b00      	cmp	r3, #0
 8003202:	d010      	beq.n	8003226 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003204:	693b      	ldr	r3, [r7, #16]
 8003206:	09db      	lsrs	r3, r3, #7
 8003208:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800320c:	2b00      	cmp	r3, #0
 800320e:	d00a      	beq.n	8003226 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003214:	f043 0202 	orr.w	r2, r3, #2
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003224:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800322a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	f003 030b 	and.w	r3, r3, #11
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8003236:	68f9      	ldr	r1, [r7, #12]
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 fb89 	bl	8003950 <I2C_ITError>
  }
}
 800323e:	bf00      	nop
 8003240:	3718      	adds	r7, #24
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}

08003246 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003246:	b480      	push	{r7}
 8003248:	b083      	sub	sp, #12
 800324a:	af00      	add	r7, sp, #0
 800324c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr

0800325a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800325a:	b480      	push	{r7}
 800325c:	b083      	sub	sp, #12
 800325e:	af00      	add	r7, sp, #0
 8003260:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003262:	bf00      	nop
 8003264:	370c      	adds	r7, #12
 8003266:	46bd      	mov	sp, r7
 8003268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326c:	4770      	bx	lr

0800326e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800326e:	b480      	push	{r7}
 8003270:	b083      	sub	sp, #12
 8003272:	af00      	add	r7, sp, #0
 8003274:	6078      	str	r0, [r7, #4]
 8003276:	460b      	mov	r3, r1
 8003278:	70fb      	strb	r3, [r7, #3]
 800327a:	4613      	mov	r3, r2
 800327c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800327e:	bf00      	nop
 8003280:	370c      	adds	r7, #12
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr

0800328a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800328a:	b480      	push	{r7}
 800328c:	b083      	sub	sp, #12
 800328e:	af00      	add	r7, sp, #0
 8003290:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003292:	bf00      	nop
 8003294:	370c      	adds	r7, #12
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr

0800329e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800329e:	b480      	push	{r7}
 80032a0:	b083      	sub	sp, #12
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80032a6:	bf00      	nop
 80032a8:	370c      	adds	r7, #12
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr

080032b2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80032b2:	b480      	push	{r7}
 80032b4:	b083      	sub	sp, #12
 80032b6:	af00      	add	r7, sp, #0
 80032b8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80032ba:	bf00      	nop
 80032bc:	370c      	adds	r7, #12
 80032be:	46bd      	mov	sp, r7
 80032c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c4:	4770      	bx	lr

080032c6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80032c6:	b580      	push	{r7, lr}
 80032c8:	b086      	sub	sp, #24
 80032ca:	af00      	add	r7, sp, #0
 80032cc:	60f8      	str	r0, [r7, #12]
 80032ce:	60b9      	str	r1, [r7, #8]
 80032d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d101      	bne.n	80032ea <I2C_Slave_ISR_IT+0x24>
 80032e6:	2302      	movs	r3, #2
 80032e8:	e0ec      	b.n	80034c4 <I2C_Slave_ISR_IT+0x1fe>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2201      	movs	r2, #1
 80032ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	095b      	lsrs	r3, r3, #5
 80032f6:	f003 0301 	and.w	r3, r3, #1
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d009      	beq.n	8003312 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	095b      	lsrs	r3, r3, #5
 8003302:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800330a:	6939      	ldr	r1, [r7, #16]
 800330c:	68f8      	ldr	r0, [r7, #12]
 800330e:	f000 f9bf 	bl	8003690 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	091b      	lsrs	r3, r3, #4
 8003316:	f003 0301 	and.w	r3, r3, #1
 800331a:	2b00      	cmp	r3, #0
 800331c:	d04d      	beq.n	80033ba <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	091b      	lsrs	r3, r3, #4
 8003322:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003326:	2b00      	cmp	r3, #0
 8003328:	d047      	beq.n	80033ba <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800332e:	b29b      	uxth	r3, r3
 8003330:	2b00      	cmp	r3, #0
 8003332:	d128      	bne.n	8003386 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800333a:	b2db      	uxtb	r3, r3
 800333c:	2b28      	cmp	r3, #40	; 0x28
 800333e:	d108      	bne.n	8003352 <I2C_Slave_ISR_IT+0x8c>
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003346:	d104      	bne.n	8003352 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003348:	6939      	ldr	r1, [r7, #16]
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f000 faaa 	bl	80038a4 <I2C_ITListenCplt>
 8003350:	e032      	b.n	80033b8 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003358:	b2db      	uxtb	r3, r3
 800335a:	2b29      	cmp	r3, #41	; 0x29
 800335c:	d10e      	bne.n	800337c <I2C_Slave_ISR_IT+0xb6>
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003364:	d00a      	beq.n	800337c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	2210      	movs	r2, #16
 800336c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800336e:	68f8      	ldr	r0, [r7, #12]
 8003370:	f000 fbe5 	bl	8003b3e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	f000 f92d 	bl	80035d4 <I2C_ITSlaveSeqCplt>
 800337a:	e01d      	b.n	80033b8 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	2210      	movs	r2, #16
 8003382:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003384:	e096      	b.n	80034b4 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2210      	movs	r2, #16
 800338c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003392:	f043 0204 	orr.w	r2, r3, #4
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800339a:	697b      	ldr	r3, [r7, #20]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d004      	beq.n	80033aa <I2C_Slave_ISR_IT+0xe4>
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80033a6:	f040 8085 	bne.w	80034b4 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ae:	4619      	mov	r1, r3
 80033b0:	68f8      	ldr	r0, [r7, #12]
 80033b2:	f000 facd 	bl	8003950 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80033b6:	e07d      	b.n	80034b4 <I2C_Slave_ISR_IT+0x1ee>
 80033b8:	e07c      	b.n	80034b4 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	089b      	lsrs	r3, r3, #2
 80033be:	f003 0301 	and.w	r3, r3, #1
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d030      	beq.n	8003428 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	089b      	lsrs	r3, r3, #2
 80033ca:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d02a      	beq.n	8003428 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033d6:	b29b      	uxth	r3, r3
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d018      	beq.n	800340e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e6:	b2d2      	uxtb	r2, r2
 80033e8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ee:	1c5a      	adds	r2, r3, #1
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033f8:	3b01      	subs	r3, #1
 80033fa:	b29a      	uxth	r2, r3
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003404:	b29b      	uxth	r3, r3
 8003406:	3b01      	subs	r3, #1
 8003408:	b29a      	uxth	r2, r3
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003412:	b29b      	uxth	r3, r3
 8003414:	2b00      	cmp	r3, #0
 8003416:	d14f      	bne.n	80034b8 <I2C_Slave_ISR_IT+0x1f2>
 8003418:	697b      	ldr	r3, [r7, #20]
 800341a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800341e:	d04b      	beq.n	80034b8 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f000 f8d7 	bl	80035d4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003426:	e047      	b.n	80034b8 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	08db      	lsrs	r3, r3, #3
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	2b00      	cmp	r3, #0
 8003432:	d00a      	beq.n	800344a <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	08db      	lsrs	r3, r3, #3
 8003438:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800343c:	2b00      	cmp	r3, #0
 800343e:	d004      	beq.n	800344a <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003440:	6939      	ldr	r1, [r7, #16]
 8003442:	68f8      	ldr	r0, [r7, #12]
 8003444:	f000 f842 	bl	80034cc <I2C_ITAddrCplt>
 8003448:	e037      	b.n	80034ba <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800344a:	693b      	ldr	r3, [r7, #16]
 800344c:	085b      	lsrs	r3, r3, #1
 800344e:	f003 0301 	and.w	r3, r3, #1
 8003452:	2b00      	cmp	r3, #0
 8003454:	d031      	beq.n	80034ba <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	085b      	lsrs	r3, r3, #1
 800345a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800345e:	2b00      	cmp	r3, #0
 8003460:	d02b      	beq.n	80034ba <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003466:	b29b      	uxth	r3, r3
 8003468:	2b00      	cmp	r3, #0
 800346a:	d018      	beq.n	800349e <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003470:	781a      	ldrb	r2, [r3, #0]
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347c:	1c5a      	adds	r2, r3, #1
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003486:	b29b      	uxth	r3, r3
 8003488:	3b01      	subs	r3, #1
 800348a:	b29a      	uxth	r2, r3
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003494:	3b01      	subs	r3, #1
 8003496:	b29a      	uxth	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	851a      	strh	r2, [r3, #40]	; 0x28
 800349c:	e00d      	b.n	80034ba <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80034a4:	d002      	beq.n	80034ac <I2C_Slave_ISR_IT+0x1e6>
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d106      	bne.n	80034ba <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80034ac:	68f8      	ldr	r0, [r7, #12]
 80034ae:	f000 f891 	bl	80035d4 <I2C_ITSlaveSeqCplt>
 80034b2:	e002      	b.n	80034ba <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 80034b4:	bf00      	nop
 80034b6:	e000      	b.n	80034ba <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 80034b8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80034c2:	2300      	movs	r3, #0
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	3718      	adds	r7, #24
 80034c8:	46bd      	mov	sp, r7
 80034ca:	bd80      	pop	{r7, pc}

080034cc <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b084      	sub	sp, #16
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80034e2:	2b28      	cmp	r3, #40	; 0x28
 80034e4:	d16a      	bne.n	80035bc <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	699b      	ldr	r3, [r3, #24]
 80034ec:	0c1b      	lsrs	r3, r3, #16
 80034ee:	b2db      	uxtb	r3, r3
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	699b      	ldr	r3, [r3, #24]
 80034fc:	0c1b      	lsrs	r3, r3, #16
 80034fe:	b29b      	uxth	r3, r3
 8003500:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003504:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	b29b      	uxth	r3, r3
 800350e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003512:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68db      	ldr	r3, [r3, #12]
 800351a:	b29b      	uxth	r3, r3
 800351c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003520:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	2b02      	cmp	r3, #2
 8003528:	d138      	bne.n	800359c <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800352a:	897b      	ldrh	r3, [r7, #10]
 800352c:	09db      	lsrs	r3, r3, #7
 800352e:	b29a      	uxth	r2, r3
 8003530:	89bb      	ldrh	r3, [r7, #12]
 8003532:	4053      	eors	r3, r2
 8003534:	b29b      	uxth	r3, r3
 8003536:	f003 0306 	and.w	r3, r3, #6
 800353a:	2b00      	cmp	r3, #0
 800353c:	d11c      	bne.n	8003578 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 800353e:	897b      	ldrh	r3, [r7, #10]
 8003540:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003546:	1c5a      	adds	r2, r3, #1
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003550:	2b02      	cmp	r3, #2
 8003552:	d13b      	bne.n	80035cc <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2200      	movs	r2, #0
 8003558:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	2208      	movs	r2, #8
 8003560:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	2200      	movs	r2, #0
 8003566:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800356a:	89ba      	ldrh	r2, [r7, #12]
 800356c:	7bfb      	ldrb	r3, [r7, #15]
 800356e:	4619      	mov	r1, r3
 8003570:	6878      	ldr	r0, [r7, #4]
 8003572:	f7ff fe7c 	bl	800326e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003576:	e029      	b.n	80035cc <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003578:	893b      	ldrh	r3, [r7, #8]
 800357a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800357c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 fd73 	bl	800406c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800358e:	89ba      	ldrh	r2, [r7, #12]
 8003590:	7bfb      	ldrb	r3, [r7, #15]
 8003592:	4619      	mov	r1, r3
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7ff fe6a 	bl	800326e <HAL_I2C_AddrCallback>
}
 800359a:	e017      	b.n	80035cc <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800359c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80035a0:	6878      	ldr	r0, [r7, #4]
 80035a2:	f000 fd63 	bl	800406c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80035ae:	89ba      	ldrh	r2, [r7, #12]
 80035b0:	7bfb      	ldrb	r3, [r7, #15]
 80035b2:	4619      	mov	r1, r3
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f7ff fe5a 	bl	800326e <HAL_I2C_AddrCallback>
}
 80035ba:	e007      	b.n	80035cc <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	2208      	movs	r2, #8
 80035c2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80035cc:	bf00      	nop
 80035ce:	3710      	adds	r7, #16
 80035d0:	46bd      	mov	sp, r7
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2200      	movs	r2, #0
 80035e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	0b9b      	lsrs	r3, r3, #14
 80035f0:	f003 0301 	and.w	r3, r3, #1
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d008      	beq.n	800360a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	681a      	ldr	r2, [r3, #0]
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003606:	601a      	str	r2, [r3, #0]
 8003608:	e00d      	b.n	8003626 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	0bdb      	lsrs	r3, r3, #15
 800360e:	f003 0301 	and.w	r3, r3, #1
 8003612:	2b00      	cmp	r3, #0
 8003614:	d007      	beq.n	8003626 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	681a      	ldr	r2, [r3, #0]
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003624:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800362c:	b2db      	uxtb	r3, r3
 800362e:	2b29      	cmp	r3, #41	; 0x29
 8003630:	d112      	bne.n	8003658 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	2228      	movs	r2, #40	; 0x28
 8003636:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2221      	movs	r2, #33	; 0x21
 800363e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003640:	2101      	movs	r1, #1
 8003642:	6878      	ldr	r0, [r7, #4]
 8003644:	f000 fd12 	bl	800406c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2200      	movs	r2, #0
 800364c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f7ff fdf8 	bl	8003246 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003656:	e017      	b.n	8003688 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b2a      	cmp	r3, #42	; 0x2a
 8003662:	d111      	bne.n	8003688 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2228      	movs	r2, #40	; 0x28
 8003668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2222      	movs	r2, #34	; 0x22
 8003670:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003672:	2102      	movs	r1, #2
 8003674:	6878      	ldr	r0, [r7, #4]
 8003676:	f000 fcf9 	bl	800406c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	2200      	movs	r2, #0
 800367e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003682:	6878      	ldr	r0, [r7, #4]
 8003684:	f7ff fde9 	bl	800325a <HAL_I2C_SlaveRxCpltCallback>
}
 8003688:	bf00      	nop
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	b086      	sub	sp, #24
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
 8003698:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036ac:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2220      	movs	r2, #32
 80036b4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80036b6:	7bfb      	ldrb	r3, [r7, #15]
 80036b8:	2b21      	cmp	r3, #33	; 0x21
 80036ba:	d002      	beq.n	80036c2 <I2C_ITSlaveCplt+0x32>
 80036bc:	7bfb      	ldrb	r3, [r7, #15]
 80036be:	2b29      	cmp	r3, #41	; 0x29
 80036c0:	d108      	bne.n	80036d4 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80036c2:	f248 0101 	movw	r1, #32769	; 0x8001
 80036c6:	6878      	ldr	r0, [r7, #4]
 80036c8:	f000 fcd0 	bl	800406c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2221      	movs	r2, #33	; 0x21
 80036d0:	631a      	str	r2, [r3, #48]	; 0x30
 80036d2:	e00d      	b.n	80036f0 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80036d4:	7bfb      	ldrb	r3, [r7, #15]
 80036d6:	2b22      	cmp	r3, #34	; 0x22
 80036d8:	d002      	beq.n	80036e0 <I2C_ITSlaveCplt+0x50>
 80036da:	7bfb      	ldrb	r3, [r7, #15]
 80036dc:	2b2a      	cmp	r3, #42	; 0x2a
 80036de:	d107      	bne.n	80036f0 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80036e0:	f248 0102 	movw	r1, #32770	; 0x8002
 80036e4:	6878      	ldr	r0, [r7, #4]
 80036e6:	f000 fcc1 	bl	800406c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	2222      	movs	r2, #34	; 0x22
 80036ee:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	685a      	ldr	r2, [r3, #4]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80036fe:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	6859      	ldr	r1, [r3, #4]
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	4b64      	ldr	r3, [pc, #400]	; (800389c <I2C_ITSlaveCplt+0x20c>)
 800370c:	400b      	ands	r3, r1
 800370e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 fa14 	bl	8003b3e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	0b9b      	lsrs	r3, r3, #14
 800371a:	f003 0301 	and.w	r3, r3, #1
 800371e:	2b00      	cmp	r3, #0
 8003720:	d013      	beq.n	800374a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	681a      	ldr	r2, [r3, #0]
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003730:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003736:	2b00      	cmp	r3, #0
 8003738:	d020      	beq.n	800377c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	b29a      	uxth	r2, r3
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003748:	e018      	b.n	800377c <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	0bdb      	lsrs	r3, r3, #15
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b00      	cmp	r3, #0
 8003754:	d012      	beq.n	800377c <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	681a      	ldr	r2, [r3, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003764:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376a:	2b00      	cmp	r3, #0
 800376c:	d006      	beq.n	800377c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	b29a      	uxth	r2, r3
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800377c:	697b      	ldr	r3, [r7, #20]
 800377e:	089b      	lsrs	r3, r3, #2
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	2b00      	cmp	r3, #0
 8003786:	d020      	beq.n	80037ca <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	f023 0304 	bic.w	r3, r3, #4
 800378e:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	b2d2      	uxtb	r2, r2
 800379c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037a2:	1c5a      	adds	r2, r3, #1
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d00c      	beq.n	80037ca <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037b4:	3b01      	subs	r3, #1
 80037b6:	b29a      	uxth	r2, r3
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037c0:	b29b      	uxth	r3, r3
 80037c2:	3b01      	subs	r3, #1
 80037c4:	b29a      	uxth	r2, r3
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d005      	beq.n	80037e0 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037d8:	f043 0204 	orr.w	r2, r3, #4
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d010      	beq.n	8003818 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fa:	4619      	mov	r1, r3
 80037fc:	6878      	ldr	r0, [r7, #4]
 80037fe:	f000 f8a7 	bl	8003950 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003808:	b2db      	uxtb	r3, r3
 800380a:	2b28      	cmp	r3, #40	; 0x28
 800380c:	d141      	bne.n	8003892 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800380e:	6979      	ldr	r1, [r7, #20]
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 f847 	bl	80038a4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003816:	e03c      	b.n	8003892 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003820:	d014      	beq.n	800384c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f7ff fed6 	bl	80035d4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a1d      	ldr	r2, [pc, #116]	; (80038a0 <I2C_ITSlaveCplt+0x210>)
 800382c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2220      	movs	r2, #32
 8003832:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2200      	movs	r2, #0
 800383a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2200      	movs	r2, #0
 8003840:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003844:	6878      	ldr	r0, [r7, #4]
 8003846:	f7ff fd20 	bl	800328a <HAL_I2C_ListenCpltCallback>
}
 800384a:	e022      	b.n	8003892 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2b22      	cmp	r3, #34	; 0x22
 8003856:	d10e      	bne.n	8003876 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	2220      	movs	r2, #32
 800385c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2200      	movs	r2, #0
 8003864:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	2200      	movs	r2, #0
 800386a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800386e:	6878      	ldr	r0, [r7, #4]
 8003870:	f7ff fcf3 	bl	800325a <HAL_I2C_SlaveRxCpltCallback>
}
 8003874:	e00d      	b.n	8003892 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2220      	movs	r2, #32
 800387a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f7ff fcda 	bl	8003246 <HAL_I2C_SlaveTxCpltCallback>
}
 8003892:	bf00      	nop
 8003894:	3718      	adds	r7, #24
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}
 800389a:	bf00      	nop
 800389c:	fe00e800 	.word	0xfe00e800
 80038a0:	ffff0000 	.word	0xffff0000

080038a4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b082      	sub	sp, #8
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	4a26      	ldr	r2, [pc, #152]	; (800394c <I2C_ITListenCplt+0xa8>)
 80038b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2200      	movs	r2, #0
 80038b8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2220      	movs	r2, #32
 80038be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	089b      	lsrs	r3, r3, #2
 80038d4:	f003 0301 	and.w	r3, r3, #1
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d022      	beq.n	8003922 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038e6:	b2d2      	uxtb	r2, r2
 80038e8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ee:	1c5a      	adds	r2, r3, #1
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d012      	beq.n	8003922 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003900:	3b01      	subs	r3, #1
 8003902:	b29a      	uxth	r2, r3
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800390c:	b29b      	uxth	r3, r3
 800390e:	3b01      	subs	r3, #1
 8003910:	b29a      	uxth	r2, r3
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800391a:	f043 0204 	orr.w	r2, r3, #4
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003922:	f248 0103 	movw	r1, #32771	; 0x8003
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f000 fba0 	bl	800406c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2210      	movs	r2, #16
 8003932:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800393c:	6878      	ldr	r0, [r7, #4]
 800393e:	f7ff fca4 	bl	800328a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003942:	bf00      	nop
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}
 800394a:	bf00      	nop
 800394c:	ffff0000 	.word	0xffff0000

08003950 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003960:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	4a5d      	ldr	r2, [pc, #372]	; (8003ae4 <I2C_ITError+0x194>)
 800396e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	431a      	orrs	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003982:	7bfb      	ldrb	r3, [r7, #15]
 8003984:	2b28      	cmp	r3, #40	; 0x28
 8003986:	d005      	beq.n	8003994 <I2C_ITError+0x44>
 8003988:	7bfb      	ldrb	r3, [r7, #15]
 800398a:	2b29      	cmp	r3, #41	; 0x29
 800398c:	d002      	beq.n	8003994 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800398e:	7bfb      	ldrb	r3, [r7, #15]
 8003990:	2b2a      	cmp	r3, #42	; 0x2a
 8003992:	d10b      	bne.n	80039ac <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003994:	2103      	movs	r1, #3
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	f000 fb68 	bl	800406c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2228      	movs	r2, #40	; 0x28
 80039a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a50      	ldr	r2, [pc, #320]	; (8003ae8 <I2C_ITError+0x198>)
 80039a8:	635a      	str	r2, [r3, #52]	; 0x34
 80039aa:	e011      	b.n	80039d0 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80039ac:	f248 0103 	movw	r1, #32771	; 0x8003
 80039b0:	6878      	ldr	r0, [r7, #4]
 80039b2:	f000 fb5b 	bl	800406c <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	2b60      	cmp	r3, #96	; 0x60
 80039c0:	d003      	beq.n	80039ca <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2220      	movs	r2, #32
 80039c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039d4:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d039      	beq.n	8003a52 <I2C_ITError+0x102>
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	2b11      	cmp	r3, #17
 80039e2:	d002      	beq.n	80039ea <I2C_ITError+0x9a>
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	2b21      	cmp	r3, #33	; 0x21
 80039e8:	d133      	bne.n	8003a52 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80039f4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80039f8:	d107      	bne.n	8003a0a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003a08:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f7fe ff1d 	bl	800284e <HAL_DMA_GetState>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d017      	beq.n	8003a4a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1e:	4a33      	ldr	r2, [pc, #204]	; (8003aec <I2C_ITError+0x19c>)
 8003a20:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2e:	4618      	mov	r0, r3
 8003a30:	f7fe feeb 	bl	800280a <HAL_DMA_Abort_IT>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d04d      	beq.n	8003ad6 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a40:	687a      	ldr	r2, [r7, #4]
 8003a42:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003a44:	4610      	mov	r0, r2
 8003a46:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003a48:	e045      	b.n	8003ad6 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 f850 	bl	8003af0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003a50:	e041      	b.n	8003ad6 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d039      	beq.n	8003ace <I2C_ITError+0x17e>
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	2b12      	cmp	r3, #18
 8003a5e:	d002      	beq.n	8003a66 <I2C_ITError+0x116>
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	2b22      	cmp	r3, #34	; 0x22
 8003a64:	d133      	bne.n	8003ace <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a74:	d107      	bne.n	8003a86 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	681a      	ldr	r2, [r3, #0]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a84:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7fe fedf 	bl	800284e <HAL_DMA_GetState>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d017      	beq.n	8003ac6 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a9a:	4a14      	ldr	r2, [pc, #80]	; (8003aec <I2C_ITError+0x19c>)
 8003a9c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aaa:	4618      	mov	r0, r3
 8003aac:	f7fe fead 	bl	800280a <HAL_DMA_Abort_IT>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d011      	beq.n	8003ada <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003abc:	687a      	ldr	r2, [r7, #4]
 8003abe:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003ac0:	4610      	mov	r0, r2
 8003ac2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ac4:	e009      	b.n	8003ada <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f000 f812 	bl	8003af0 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003acc:	e005      	b.n	8003ada <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f000 f80e 	bl	8003af0 <I2C_TreatErrorCallback>
  }
}
 8003ad4:	e002      	b.n	8003adc <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003ad6:	bf00      	nop
 8003ad8:	e000      	b.n	8003adc <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ada:	bf00      	nop
}
 8003adc:	bf00      	nop
 8003ade:	3710      	adds	r7, #16
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}
 8003ae4:	ffff0000 	.word	0xffff0000
 8003ae8:	080032c7 	.word	0x080032c7
 8003aec:	08003b87 	.word	0x08003b87

08003af0 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003af0:	b580      	push	{r7, lr}
 8003af2:	b082      	sub	sp, #8
 8003af4:	af00      	add	r7, sp, #0
 8003af6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b60      	cmp	r3, #96	; 0x60
 8003b02:	d10e      	bne.n	8003b22 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2220      	movs	r2, #32
 8003b08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2200      	movs	r2, #0
 8003b16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003b1a:	6878      	ldr	r0, [r7, #4]
 8003b1c:	f7ff fbc9 	bl	80032b2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003b20:	e009      	b.n	8003b36 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f7ff fbb4 	bl	800329e <HAL_I2C_ErrorCallback>
}
 8003b36:	bf00      	nop
 8003b38:	3708      	adds	r7, #8
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}

08003b3e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003b3e:	b480      	push	{r7}
 8003b40:	b083      	sub	sp, #12
 8003b42:	af00      	add	r7, sp, #0
 8003b44:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	f003 0302 	and.w	r3, r3, #2
 8003b50:	2b02      	cmp	r3, #2
 8003b52:	d103      	bne.n	8003b5c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2200      	movs	r2, #0
 8003b5a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	f003 0301 	and.w	r3, r3, #1
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d007      	beq.n	8003b7a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	699a      	ldr	r2, [r3, #24]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f042 0201 	orr.w	r2, r2, #1
 8003b78:	619a      	str	r2, [r3, #24]
  }
}
 8003b7a:	bf00      	nop
 8003b7c:	370c      	adds	r7, #12
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr

08003b86 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003b86:	b580      	push	{r7, lr}
 8003b88:	b084      	sub	sp, #16
 8003b8a:	af00      	add	r7, sp, #0
 8003b8c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d003      	beq.n	8003ba4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d003      	beq.n	8003bb4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8003bb4:	68f8      	ldr	r0, [r7, #12]
 8003bb6:	f7ff ff9b 	bl	8003af0 <I2C_TreatErrorCallback>
}
 8003bba:	bf00      	nop
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b084      	sub	sp, #16
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	60f8      	str	r0, [r7, #12]
 8003bca:	60b9      	str	r1, [r7, #8]
 8003bcc:	603b      	str	r3, [r7, #0]
 8003bce:	4613      	mov	r3, r2
 8003bd0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003bd2:	e022      	b.n	8003c1a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003bda:	d01e      	beq.n	8003c1a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bdc:	f7fe f898 	bl	8001d10 <HAL_GetTick>
 8003be0:	4602      	mov	r2, r0
 8003be2:	69bb      	ldr	r3, [r7, #24]
 8003be4:	1ad3      	subs	r3, r2, r3
 8003be6:	683a      	ldr	r2, [r7, #0]
 8003be8:	429a      	cmp	r2, r3
 8003bea:	d302      	bcc.n	8003bf2 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d113      	bne.n	8003c1a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bf6:	f043 0220 	orr.w	r2, r3, #32
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2220      	movs	r2, #32
 8003c02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	2200      	movs	r2, #0
 8003c0a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
 8003c18:	e00f      	b.n	8003c3a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	699a      	ldr	r2, [r3, #24]
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	4013      	ands	r3, r2
 8003c24:	68ba      	ldr	r2, [r7, #8]
 8003c26:	429a      	cmp	r2, r3
 8003c28:	bf0c      	ite	eq
 8003c2a:	2301      	moveq	r3, #1
 8003c2c:	2300      	movne	r3, #0
 8003c2e:	b2db      	uxtb	r3, r3
 8003c30:	461a      	mov	r2, r3
 8003c32:	79fb      	ldrb	r3, [r7, #7]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d0cd      	beq.n	8003bd4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	3710      	adds	r7, #16
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	bd80      	pop	{r7, pc}

08003c42 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003c42:	b580      	push	{r7, lr}
 8003c44:	b084      	sub	sp, #16
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	60f8      	str	r0, [r7, #12]
 8003c4a:	60b9      	str	r1, [r7, #8]
 8003c4c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003c4e:	e02c      	b.n	8003caa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003c50:	687a      	ldr	r2, [r7, #4]
 8003c52:	68b9      	ldr	r1, [r7, #8]
 8003c54:	68f8      	ldr	r0, [r7, #12]
 8003c56:	f000 f8eb 	bl	8003e30 <I2C_IsErrorOccurred>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d001      	beq.n	8003c64 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003c60:	2301      	movs	r3, #1
 8003c62:	e02a      	b.n	8003cba <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6a:	d01e      	beq.n	8003caa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c6c:	f7fe f850 	bl	8001d10 <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	68ba      	ldr	r2, [r7, #8]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d302      	bcc.n	8003c82 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d113      	bne.n	8003caa <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c86:	f043 0220 	orr.w	r2, r3, #32
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	2220      	movs	r2, #32
 8003c92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e007      	b.n	8003cba <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	f003 0302 	and.w	r3, r3, #2
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d1cb      	bne.n	8003c50 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3710      	adds	r7, #16
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b084      	sub	sp, #16
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	60f8      	str	r0, [r7, #12]
 8003cca:	60b9      	str	r1, [r7, #8]
 8003ccc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003cce:	e028      	b.n	8003d22 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	68b9      	ldr	r1, [r7, #8]
 8003cd4:	68f8      	ldr	r0, [r7, #12]
 8003cd6:	f000 f8ab 	bl	8003e30 <I2C_IsErrorOccurred>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d001      	beq.n	8003ce4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ce0:	2301      	movs	r3, #1
 8003ce2:	e026      	b.n	8003d32 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ce4:	f7fe f814 	bl	8001d10 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	68ba      	ldr	r2, [r7, #8]
 8003cf0:	429a      	cmp	r2, r3
 8003cf2:	d302      	bcc.n	8003cfa <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d113      	bne.n	8003d22 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfe:	f043 0220 	orr.w	r2, r3, #32
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2220      	movs	r2, #32
 8003d0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	e007      	b.n	8003d32 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	699b      	ldr	r3, [r3, #24]
 8003d28:	f003 0320 	and.w	r3, r3, #32
 8003d2c:	2b20      	cmp	r3, #32
 8003d2e:	d1cf      	bne.n	8003cd0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3710      	adds	r7, #16
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
	...

08003d3c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003d48:	e064      	b.n	8003e14 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	68b9      	ldr	r1, [r7, #8]
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f000 f86e 	bl	8003e30 <I2C_IsErrorOccurred>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e062      	b.n	8003e24 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	699b      	ldr	r3, [r3, #24]
 8003d64:	f003 0320 	and.w	r3, r3, #32
 8003d68:	2b20      	cmp	r3, #32
 8003d6a:	d138      	bne.n	8003dde <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	f003 0304 	and.w	r3, r3, #4
 8003d76:	2b04      	cmp	r3, #4
 8003d78:	d105      	bne.n	8003d86 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d001      	beq.n	8003d86 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8003d82:	2300      	movs	r3, #0
 8003d84:	e04e      	b.n	8003e24 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
      else
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	699b      	ldr	r3, [r3, #24]
 8003d8c:	f003 0310 	and.w	r3, r3, #16
 8003d90:	2b10      	cmp	r3, #16
 8003d92:	d107      	bne.n	8003da4 <I2C_WaitOnRXNEFlagUntilTimeout+0x68>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	2210      	movs	r2, #16
 8003d9a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2204      	movs	r2, #4
 8003da0:	645a      	str	r2, [r3, #68]	; 0x44
 8003da2:	e002      	b.n	8003daa <I2C_WaitOnRXNEFlagUntilTimeout+0x6e>
        }
        else
        {
          hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	2220      	movs	r2, #32
 8003db0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	6859      	ldr	r1, [r3, #4]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681a      	ldr	r2, [r3, #0]
 8003dbc:	4b1b      	ldr	r3, [pc, #108]	; (8003e2c <I2C_WaitOnRXNEFlagUntilTimeout+0xf0>)
 8003dbe:	400b      	ands	r3, r1
 8003dc0:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2220      	movs	r2, #32
 8003dc6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	e022      	b.n	8003e24 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003dde:	f7fd ff97 	bl	8001d10 <HAL_GetTick>
 8003de2:	4602      	mov	r2, r0
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	1ad3      	subs	r3, r2, r3
 8003de8:	68ba      	ldr	r2, [r7, #8]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d302      	bcc.n	8003df4 <I2C_WaitOnRXNEFlagUntilTimeout+0xb8>
 8003dee:	68bb      	ldr	r3, [r7, #8]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d10f      	bne.n	8003e14 <I2C_WaitOnRXNEFlagUntilTimeout+0xd8>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003df8:	f043 0220 	orr.w	r2, r3, #32
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	2220      	movs	r2, #32
 8003e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003e10:	2301      	movs	r3, #1
 8003e12:	e007      	b.n	8003e24 <I2C_WaitOnRXNEFlagUntilTimeout+0xe8>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	f003 0304 	and.w	r3, r3, #4
 8003e1e:	2b04      	cmp	r3, #4
 8003e20:	d193      	bne.n	8003d4a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003e22:	2300      	movs	r3, #0
}
 8003e24:	4618      	mov	r0, r3
 8003e26:	3710      	adds	r7, #16
 8003e28:	46bd      	mov	sp, r7
 8003e2a:	bd80      	pop	{r7, pc}
 8003e2c:	fe00e800 	.word	0xfe00e800

08003e30 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b08a      	sub	sp, #40	; 0x28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e3c:	2300      	movs	r3, #0
 8003e3e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	f003 0310 	and.w	r3, r3, #16
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d075      	beq.n	8003f48 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	2210      	movs	r2, #16
 8003e62:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003e64:	e056      	b.n	8003f14 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e6c:	d052      	beq.n	8003f14 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003e6e:	f7fd ff4f 	bl	8001d10 <HAL_GetTick>
 8003e72:	4602      	mov	r2, r0
 8003e74:	69fb      	ldr	r3, [r7, #28]
 8003e76:	1ad3      	subs	r3, r2, r3
 8003e78:	68ba      	ldr	r2, [r7, #8]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d302      	bcc.n	8003e84 <I2C_IsErrorOccurred+0x54>
 8003e7e:	68bb      	ldr	r3, [r7, #8]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d147      	bne.n	8003f14 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	685b      	ldr	r3, [r3, #4]
 8003e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e8e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003e96:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ea2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ea6:	d12e      	bne.n	8003f06 <I2C_IsErrorOccurred+0xd6>
 8003ea8:	697b      	ldr	r3, [r7, #20]
 8003eaa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003eae:	d02a      	beq.n	8003f06 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8003eb0:	7cfb      	ldrb	r3, [r7, #19]
 8003eb2:	2b20      	cmp	r3, #32
 8003eb4:	d027      	beq.n	8003f06 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003ec4:	605a      	str	r2, [r3, #4]
            
            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003ec6:	f7fd ff23 	bl	8001d10 <HAL_GetTick>
 8003eca:	61f8      	str	r0, [r7, #28]
          }
          
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ecc:	e01b      	b.n	8003f06 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003ece:	f7fd ff1f 	bl	8001d10 <HAL_GetTick>
 8003ed2:	4602      	mov	r2, r0
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	1ad3      	subs	r3, r2, r3
 8003ed8:	2b19      	cmp	r3, #25
 8003eda:	d914      	bls.n	8003f06 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ee0:	f043 0220 	orr.w	r2, r3, #32
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2220      	movs	r2, #32
 8003eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
              
              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
              
              status = HAL_ERROR;
 8003f00:	2301      	movs	r3, #1
 8003f02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	f003 0320 	and.w	r3, r3, #32
 8003f10:	2b20      	cmp	r3, #32
 8003f12:	d1dc      	bne.n	8003ece <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	699b      	ldr	r3, [r3, #24]
 8003f1a:	f003 0320 	and.w	r3, r3, #32
 8003f1e:	2b20      	cmp	r3, #32
 8003f20:	d003      	beq.n	8003f2a <I2C_IsErrorOccurred+0xfa>
 8003f22:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d09d      	beq.n	8003e66 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8003f2a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d103      	bne.n	8003f3a <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2220      	movs	r2, #32
 8003f38:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8003f3a:	6a3b      	ldr	r3, [r7, #32]
 8003f3c:	f043 0304 	orr.w	r3, r3, #4
 8003f40:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d00b      	beq.n	8003f72 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8003f5a:	6a3b      	ldr	r3, [r7, #32]
 8003f5c:	f043 0301 	orr.w	r3, r3, #1
 8003f60:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f6a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d00b      	beq.n	8003f94 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8003f7c:	6a3b      	ldr	r3, [r7, #32]
 8003f7e:	f043 0308 	orr.w	r3, r3, #8
 8003f82:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f8c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8003f94:	69bb      	ldr	r3, [r7, #24]
 8003f96:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00b      	beq.n	8003fb6 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8003f9e:	6a3b      	ldr	r3, [r7, #32]
 8003fa0:	f043 0302 	orr.w	r3, r3, #2
 8003fa4:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003fae:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8003fb0:	2301      	movs	r3, #1
 8003fb2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8003fb6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d01c      	beq.n	8003ff8 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f7ff fdbd 	bl	8003b3e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6859      	ldr	r1, [r3, #4]
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	4b0d      	ldr	r3, [pc, #52]	; (8004004 <I2C_IsErrorOccurred+0x1d4>)
 8003fd0:	400b      	ands	r3, r1
 8003fd2:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003fd8:	6a3b      	ldr	r3, [r7, #32]
 8003fda:	431a      	orrs	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2220      	movs	r2, #32
 8003fe4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8003ff8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	3728      	adds	r7, #40	; 0x28
 8004000:	46bd      	mov	sp, r7
 8004002:	bd80      	pop	{r7, pc}
 8004004:	fe00e800 	.word	0xfe00e800

08004008 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004008:	b480      	push	{r7}
 800400a:	b087      	sub	sp, #28
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	607b      	str	r3, [r7, #4]
 8004012:	460b      	mov	r3, r1
 8004014:	817b      	strh	r3, [r7, #10]
 8004016:	4613      	mov	r3, r2
 8004018:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800401a:	897b      	ldrh	r3, [r7, #10]
 800401c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004020:	7a7b      	ldrb	r3, [r7, #9]
 8004022:	041b      	lsls	r3, r3, #16
 8004024:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004028:	431a      	orrs	r2, r3
                            (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800402e:	6a3b      	ldr	r3, [r7, #32]
 8004030:	4313      	orrs	r3, r2
 8004032:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004036:	617b      	str	r3, [r7, #20]
                              (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	685a      	ldr	r2, [r3, #4]
 800403e:	6a3b      	ldr	r3, [r7, #32]
 8004040:	0d5b      	lsrs	r3, r3, #21
 8004042:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004046:	4b08      	ldr	r3, [pc, #32]	; (8004068 <I2C_TransferConfig+0x60>)
 8004048:	430b      	orrs	r3, r1
 800404a:	43db      	mvns	r3, r3
 800404c:	ea02 0103 	and.w	r1, r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	697a      	ldr	r2, [r7, #20]
 8004056:	430a      	orrs	r2, r1
 8004058:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
                I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800405a:	bf00      	nop
 800405c:	371c      	adds	r7, #28
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	03ff63ff 	.word	0x03ff63ff

0800406c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	6078      	str	r0, [r7, #4]
 8004074:	460b      	mov	r3, r1
 8004076:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004078:	2300      	movs	r3, #0
 800407a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800407c:	887b      	ldrh	r3, [r7, #2]
 800407e:	f003 0301 	and.w	r3, r3, #1
 8004082:	2b00      	cmp	r3, #0
 8004084:	d00f      	beq.n	80040a6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 800408c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004094:	b2db      	uxtb	r3, r3
 8004096:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800409a:	2b28      	cmp	r3, #40	; 0x28
 800409c:	d003      	beq.n	80040a6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80040a4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80040a6:	887b      	ldrh	r3, [r7, #2]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00f      	beq.n	80040d0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80040b6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80040c4:	2b28      	cmp	r3, #40	; 0x28
 80040c6:	d003      	beq.n	80040d0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80040ce:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80040d0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	da03      	bge.n	80040e0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80040de:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80040e0:	887b      	ldrh	r3, [r7, #2]
 80040e2:	2b10      	cmp	r3, #16
 80040e4:	d103      	bne.n	80040ee <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80040ec:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80040ee:	887b      	ldrh	r3, [r7, #2]
 80040f0:	2b20      	cmp	r3, #32
 80040f2:	d103      	bne.n	80040fc <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f043 0320 	orr.w	r3, r3, #32
 80040fa:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80040fc:	887b      	ldrh	r3, [r7, #2]
 80040fe:	2b40      	cmp	r3, #64	; 0x40
 8004100:	d103      	bne.n	800410a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004108:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	6819      	ldr	r1, [r3, #0]
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	43da      	mvns	r2, r3
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	400a      	ands	r2, r1
 800411a:	601a      	str	r2, [r3, #0]
}
 800411c:	bf00      	nop
 800411e:	3714      	adds	r7, #20
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr

08004128 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004128:	b480      	push	{r7}
 800412a:	b083      	sub	sp, #12
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
 8004130:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004138:	b2db      	uxtb	r3, r3
 800413a:	2b20      	cmp	r3, #32
 800413c:	d138      	bne.n	80041b0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004144:	2b01      	cmp	r3, #1
 8004146:	d101      	bne.n	800414c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004148:	2302      	movs	r3, #2
 800414a:	e032      	b.n	80041b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2224      	movs	r2, #36	; 0x24
 8004158:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f022 0201 	bic.w	r2, r2, #1
 800416a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800417a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	6819      	ldr	r1, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	683a      	ldr	r2, [r7, #0]
 8004188:	430a      	orrs	r2, r1
 800418a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f042 0201 	orr.w	r2, r2, #1
 800419a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2220      	movs	r2, #32
 80041a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2200      	movs	r2, #0
 80041a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80041ac:	2300      	movs	r3, #0
 80041ae:	e000      	b.n	80041b2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80041b0:	2302      	movs	r3, #2
  }
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	370c      	adds	r7, #12
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr

080041be <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80041be:	b480      	push	{r7}
 80041c0:	b085      	sub	sp, #20
 80041c2:	af00      	add	r7, sp, #0
 80041c4:	6078      	str	r0, [r7, #4]
 80041c6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041ce:	b2db      	uxtb	r3, r3
 80041d0:	2b20      	cmp	r3, #32
 80041d2:	d139      	bne.n	8004248 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80041da:	2b01      	cmp	r3, #1
 80041dc:	d101      	bne.n	80041e2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80041de:	2302      	movs	r3, #2
 80041e0:	e033      	b.n	800424a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2201      	movs	r2, #1
 80041e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2224      	movs	r2, #36	; 0x24
 80041ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 0201 	bic.w	r2, r2, #1
 8004200:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004210:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	021b      	lsls	r3, r3, #8
 8004216:	68fa      	ldr	r2, [r7, #12]
 8004218:	4313      	orrs	r3, r2
 800421a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681a      	ldr	r2, [r3, #0]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f042 0201 	orr.w	r2, r2, #1
 8004232:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	2220      	movs	r2, #32
 8004238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2200      	movs	r2, #0
 8004240:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004244:	2300      	movs	r3, #0
 8004246:	e000      	b.n	800424a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004248:	2302      	movs	r3, #2
  }
}
 800424a:	4618      	mov	r0, r3
 800424c:	3714      	adds	r7, #20
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
	...

08004258 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800425c:	4b05      	ldr	r3, [pc, #20]	; (8004274 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4a04      	ldr	r2, [pc, #16]	; (8004274 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004262:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004266:	6013      	str	r3, [r2, #0]
}
 8004268:	bf00      	nop
 800426a:	46bd      	mov	sp, r7
 800426c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004270:	4770      	bx	lr
 8004272:	bf00      	nop
 8004274:	40007000 	.word	0x40007000

08004278 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004278:	b580      	push	{r7, lr}
 800427a:	b082      	sub	sp, #8
 800427c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800427e:	2300      	movs	r3, #0
 8004280:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004282:	4b23      	ldr	r3, [pc, #140]	; (8004310 <HAL_PWREx_EnableOverDrive+0x98>)
 8004284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004286:	4a22      	ldr	r2, [pc, #136]	; (8004310 <HAL_PWREx_EnableOverDrive+0x98>)
 8004288:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800428c:	6413      	str	r3, [r2, #64]	; 0x40
 800428e:	4b20      	ldr	r3, [pc, #128]	; (8004310 <HAL_PWREx_EnableOverDrive+0x98>)
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004296:	603b      	str	r3, [r7, #0]
 8004298:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800429a:	4b1e      	ldr	r3, [pc, #120]	; (8004314 <HAL_PWREx_EnableOverDrive+0x9c>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4a1d      	ldr	r2, [pc, #116]	; (8004314 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80042a4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042a6:	f7fd fd33 	bl	8001d10 <HAL_GetTick>
 80042aa:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80042ac:	e009      	b.n	80042c2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80042ae:	f7fd fd2f 	bl	8001d10 <HAL_GetTick>
 80042b2:	4602      	mov	r2, r0
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042bc:	d901      	bls.n	80042c2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e022      	b.n	8004308 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80042c2:	4b14      	ldr	r3, [pc, #80]	; (8004314 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80042ce:	d1ee      	bne.n	80042ae <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80042d0:	4b10      	ldr	r3, [pc, #64]	; (8004314 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a0f      	ldr	r2, [pc, #60]	; (8004314 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042da:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80042dc:	f7fd fd18 	bl	8001d10 <HAL_GetTick>
 80042e0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80042e2:	e009      	b.n	80042f8 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80042e4:	f7fd fd14 	bl	8001d10 <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80042f2:	d901      	bls.n	80042f8 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e007      	b.n	8004308 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80042f8:	4b06      	ldr	r3, [pc, #24]	; (8004314 <HAL_PWREx_EnableOverDrive+0x9c>)
 80042fa:	685b      	ldr	r3, [r3, #4]
 80042fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004300:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004304:	d1ee      	bne.n	80042e4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004306:	2300      	movs	r3, #0
}
 8004308:	4618      	mov	r0, r3
 800430a:	3708      	adds	r7, #8
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}
 8004310:	40023800 	.word	0x40023800
 8004314:	40007000 	.word	0x40007000

08004318 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b086      	sub	sp, #24
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004320:	2300      	movs	r3, #0
 8004322:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2b00      	cmp	r3, #0
 8004328:	d101      	bne.n	800432e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800432a:	2301      	movs	r3, #1
 800432c:	e29b      	b.n	8004866 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b00      	cmp	r3, #0
 8004338:	f000 8087 	beq.w	800444a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800433c:	4b96      	ldr	r3, [pc, #600]	; (8004598 <HAL_RCC_OscConfig+0x280>)
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	f003 030c 	and.w	r3, r3, #12
 8004344:	2b04      	cmp	r3, #4
 8004346:	d00c      	beq.n	8004362 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004348:	4b93      	ldr	r3, [pc, #588]	; (8004598 <HAL_RCC_OscConfig+0x280>)
 800434a:	689b      	ldr	r3, [r3, #8]
 800434c:	f003 030c 	and.w	r3, r3, #12
 8004350:	2b08      	cmp	r3, #8
 8004352:	d112      	bne.n	800437a <HAL_RCC_OscConfig+0x62>
 8004354:	4b90      	ldr	r3, [pc, #576]	; (8004598 <HAL_RCC_OscConfig+0x280>)
 8004356:	685b      	ldr	r3, [r3, #4]
 8004358:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800435c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004360:	d10b      	bne.n	800437a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004362:	4b8d      	ldr	r3, [pc, #564]	; (8004598 <HAL_RCC_OscConfig+0x280>)
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800436a:	2b00      	cmp	r3, #0
 800436c:	d06c      	beq.n	8004448 <HAL_RCC_OscConfig+0x130>
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d168      	bne.n	8004448 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e275      	b.n	8004866 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	685b      	ldr	r3, [r3, #4]
 800437e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004382:	d106      	bne.n	8004392 <HAL_RCC_OscConfig+0x7a>
 8004384:	4b84      	ldr	r3, [pc, #528]	; (8004598 <HAL_RCC_OscConfig+0x280>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	4a83      	ldr	r2, [pc, #524]	; (8004598 <HAL_RCC_OscConfig+0x280>)
 800438a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800438e:	6013      	str	r3, [r2, #0]
 8004390:	e02e      	b.n	80043f0 <HAL_RCC_OscConfig+0xd8>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d10c      	bne.n	80043b4 <HAL_RCC_OscConfig+0x9c>
 800439a:	4b7f      	ldr	r3, [pc, #508]	; (8004598 <HAL_RCC_OscConfig+0x280>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a7e      	ldr	r2, [pc, #504]	; (8004598 <HAL_RCC_OscConfig+0x280>)
 80043a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043a4:	6013      	str	r3, [r2, #0]
 80043a6:	4b7c      	ldr	r3, [pc, #496]	; (8004598 <HAL_RCC_OscConfig+0x280>)
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a7b      	ldr	r2, [pc, #492]	; (8004598 <HAL_RCC_OscConfig+0x280>)
 80043ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043b0:	6013      	str	r3, [r2, #0]
 80043b2:	e01d      	b.n	80043f0 <HAL_RCC_OscConfig+0xd8>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685b      	ldr	r3, [r3, #4]
 80043b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043bc:	d10c      	bne.n	80043d8 <HAL_RCC_OscConfig+0xc0>
 80043be:	4b76      	ldr	r3, [pc, #472]	; (8004598 <HAL_RCC_OscConfig+0x280>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a75      	ldr	r2, [pc, #468]	; (8004598 <HAL_RCC_OscConfig+0x280>)
 80043c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043c8:	6013      	str	r3, [r2, #0]
 80043ca:	4b73      	ldr	r3, [pc, #460]	; (8004598 <HAL_RCC_OscConfig+0x280>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a72      	ldr	r2, [pc, #456]	; (8004598 <HAL_RCC_OscConfig+0x280>)
 80043d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043d4:	6013      	str	r3, [r2, #0]
 80043d6:	e00b      	b.n	80043f0 <HAL_RCC_OscConfig+0xd8>
 80043d8:	4b6f      	ldr	r3, [pc, #444]	; (8004598 <HAL_RCC_OscConfig+0x280>)
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a6e      	ldr	r2, [pc, #440]	; (8004598 <HAL_RCC_OscConfig+0x280>)
 80043de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043e2:	6013      	str	r3, [r2, #0]
 80043e4:	4b6c      	ldr	r3, [pc, #432]	; (8004598 <HAL_RCC_OscConfig+0x280>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a6b      	ldr	r2, [pc, #428]	; (8004598 <HAL_RCC_OscConfig+0x280>)
 80043ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d013      	beq.n	8004420 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043f8:	f7fd fc8a 	bl	8001d10 <HAL_GetTick>
 80043fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043fe:	e008      	b.n	8004412 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004400:	f7fd fc86 	bl	8001d10 <HAL_GetTick>
 8004404:	4602      	mov	r2, r0
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	1ad3      	subs	r3, r2, r3
 800440a:	2b64      	cmp	r3, #100	; 0x64
 800440c:	d901      	bls.n	8004412 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e229      	b.n	8004866 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004412:	4b61      	ldr	r3, [pc, #388]	; (8004598 <HAL_RCC_OscConfig+0x280>)
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800441a:	2b00      	cmp	r3, #0
 800441c:	d0f0      	beq.n	8004400 <HAL_RCC_OscConfig+0xe8>
 800441e:	e014      	b.n	800444a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004420:	f7fd fc76 	bl	8001d10 <HAL_GetTick>
 8004424:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004426:	e008      	b.n	800443a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004428:	f7fd fc72 	bl	8001d10 <HAL_GetTick>
 800442c:	4602      	mov	r2, r0
 800442e:	693b      	ldr	r3, [r7, #16]
 8004430:	1ad3      	subs	r3, r2, r3
 8004432:	2b64      	cmp	r3, #100	; 0x64
 8004434:	d901      	bls.n	800443a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004436:	2303      	movs	r3, #3
 8004438:	e215      	b.n	8004866 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800443a:	4b57      	ldr	r3, [pc, #348]	; (8004598 <HAL_RCC_OscConfig+0x280>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004442:	2b00      	cmp	r3, #0
 8004444:	d1f0      	bne.n	8004428 <HAL_RCC_OscConfig+0x110>
 8004446:	e000      	b.n	800444a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004448:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d069      	beq.n	800452a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004456:	4b50      	ldr	r3, [pc, #320]	; (8004598 <HAL_RCC_OscConfig+0x280>)
 8004458:	689b      	ldr	r3, [r3, #8]
 800445a:	f003 030c 	and.w	r3, r3, #12
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00b      	beq.n	800447a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004462:	4b4d      	ldr	r3, [pc, #308]	; (8004598 <HAL_RCC_OscConfig+0x280>)
 8004464:	689b      	ldr	r3, [r3, #8]
 8004466:	f003 030c 	and.w	r3, r3, #12
 800446a:	2b08      	cmp	r3, #8
 800446c:	d11c      	bne.n	80044a8 <HAL_RCC_OscConfig+0x190>
 800446e:	4b4a      	ldr	r3, [pc, #296]	; (8004598 <HAL_RCC_OscConfig+0x280>)
 8004470:	685b      	ldr	r3, [r3, #4]
 8004472:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004476:	2b00      	cmp	r3, #0
 8004478:	d116      	bne.n	80044a8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800447a:	4b47      	ldr	r3, [pc, #284]	; (8004598 <HAL_RCC_OscConfig+0x280>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f003 0302 	and.w	r3, r3, #2
 8004482:	2b00      	cmp	r3, #0
 8004484:	d005      	beq.n	8004492 <HAL_RCC_OscConfig+0x17a>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	68db      	ldr	r3, [r3, #12]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d001      	beq.n	8004492 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e1e9      	b.n	8004866 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004492:	4b41      	ldr	r3, [pc, #260]	; (8004598 <HAL_RCC_OscConfig+0x280>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	691b      	ldr	r3, [r3, #16]
 800449e:	00db      	lsls	r3, r3, #3
 80044a0:	493d      	ldr	r1, [pc, #244]	; (8004598 <HAL_RCC_OscConfig+0x280>)
 80044a2:	4313      	orrs	r3, r2
 80044a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80044a6:	e040      	b.n	800452a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	68db      	ldr	r3, [r3, #12]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d023      	beq.n	80044f8 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80044b0:	4b39      	ldr	r3, [pc, #228]	; (8004598 <HAL_RCC_OscConfig+0x280>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	4a38      	ldr	r2, [pc, #224]	; (8004598 <HAL_RCC_OscConfig+0x280>)
 80044b6:	f043 0301 	orr.w	r3, r3, #1
 80044ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044bc:	f7fd fc28 	bl	8001d10 <HAL_GetTick>
 80044c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044c2:	e008      	b.n	80044d6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80044c4:	f7fd fc24 	bl	8001d10 <HAL_GetTick>
 80044c8:	4602      	mov	r2, r0
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1ad3      	subs	r3, r2, r3
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d901      	bls.n	80044d6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80044d2:	2303      	movs	r3, #3
 80044d4:	e1c7      	b.n	8004866 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044d6:	4b30      	ldr	r3, [pc, #192]	; (8004598 <HAL_RCC_OscConfig+0x280>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f003 0302 	and.w	r3, r3, #2
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d0f0      	beq.n	80044c4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044e2:	4b2d      	ldr	r3, [pc, #180]	; (8004598 <HAL_RCC_OscConfig+0x280>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	00db      	lsls	r3, r3, #3
 80044f0:	4929      	ldr	r1, [pc, #164]	; (8004598 <HAL_RCC_OscConfig+0x280>)
 80044f2:	4313      	orrs	r3, r2
 80044f4:	600b      	str	r3, [r1, #0]
 80044f6:	e018      	b.n	800452a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044f8:	4b27      	ldr	r3, [pc, #156]	; (8004598 <HAL_RCC_OscConfig+0x280>)
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a26      	ldr	r2, [pc, #152]	; (8004598 <HAL_RCC_OscConfig+0x280>)
 80044fe:	f023 0301 	bic.w	r3, r3, #1
 8004502:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004504:	f7fd fc04 	bl	8001d10 <HAL_GetTick>
 8004508:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800450a:	e008      	b.n	800451e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800450c:	f7fd fc00 	bl	8001d10 <HAL_GetTick>
 8004510:	4602      	mov	r2, r0
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	1ad3      	subs	r3, r2, r3
 8004516:	2b02      	cmp	r3, #2
 8004518:	d901      	bls.n	800451e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e1a3      	b.n	8004866 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800451e:	4b1e      	ldr	r3, [pc, #120]	; (8004598 <HAL_RCC_OscConfig+0x280>)
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f003 0302 	and.w	r3, r3, #2
 8004526:	2b00      	cmp	r3, #0
 8004528:	d1f0      	bne.n	800450c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f003 0308 	and.w	r3, r3, #8
 8004532:	2b00      	cmp	r3, #0
 8004534:	d038      	beq.n	80045a8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	695b      	ldr	r3, [r3, #20]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d019      	beq.n	8004572 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800453e:	4b16      	ldr	r3, [pc, #88]	; (8004598 <HAL_RCC_OscConfig+0x280>)
 8004540:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004542:	4a15      	ldr	r2, [pc, #84]	; (8004598 <HAL_RCC_OscConfig+0x280>)
 8004544:	f043 0301 	orr.w	r3, r3, #1
 8004548:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800454a:	f7fd fbe1 	bl	8001d10 <HAL_GetTick>
 800454e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004550:	e008      	b.n	8004564 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004552:	f7fd fbdd 	bl	8001d10 <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b02      	cmp	r3, #2
 800455e:	d901      	bls.n	8004564 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e180      	b.n	8004866 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004564:	4b0c      	ldr	r3, [pc, #48]	; (8004598 <HAL_RCC_OscConfig+0x280>)
 8004566:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004568:	f003 0302 	and.w	r3, r3, #2
 800456c:	2b00      	cmp	r3, #0
 800456e:	d0f0      	beq.n	8004552 <HAL_RCC_OscConfig+0x23a>
 8004570:	e01a      	b.n	80045a8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004572:	4b09      	ldr	r3, [pc, #36]	; (8004598 <HAL_RCC_OscConfig+0x280>)
 8004574:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004576:	4a08      	ldr	r2, [pc, #32]	; (8004598 <HAL_RCC_OscConfig+0x280>)
 8004578:	f023 0301 	bic.w	r3, r3, #1
 800457c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800457e:	f7fd fbc7 	bl	8001d10 <HAL_GetTick>
 8004582:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004584:	e00a      	b.n	800459c <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004586:	f7fd fbc3 	bl	8001d10 <HAL_GetTick>
 800458a:	4602      	mov	r2, r0
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	1ad3      	subs	r3, r2, r3
 8004590:	2b02      	cmp	r3, #2
 8004592:	d903      	bls.n	800459c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e166      	b.n	8004866 <HAL_RCC_OscConfig+0x54e>
 8004598:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800459c:	4b92      	ldr	r3, [pc, #584]	; (80047e8 <HAL_RCC_OscConfig+0x4d0>)
 800459e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1ee      	bne.n	8004586 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 0304 	and.w	r3, r3, #4
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	f000 80a4 	beq.w	80046fe <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80045b6:	4b8c      	ldr	r3, [pc, #560]	; (80047e8 <HAL_RCC_OscConfig+0x4d0>)
 80045b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d10d      	bne.n	80045de <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80045c2:	4b89      	ldr	r3, [pc, #548]	; (80047e8 <HAL_RCC_OscConfig+0x4d0>)
 80045c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c6:	4a88      	ldr	r2, [pc, #544]	; (80047e8 <HAL_RCC_OscConfig+0x4d0>)
 80045c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045cc:	6413      	str	r3, [r2, #64]	; 0x40
 80045ce:	4b86      	ldr	r3, [pc, #536]	; (80047e8 <HAL_RCC_OscConfig+0x4d0>)
 80045d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045d6:	60bb      	str	r3, [r7, #8]
 80045d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045da:	2301      	movs	r3, #1
 80045dc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045de:	4b83      	ldr	r3, [pc, #524]	; (80047ec <HAL_RCC_OscConfig+0x4d4>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d118      	bne.n	800461c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80045ea:	4b80      	ldr	r3, [pc, #512]	; (80047ec <HAL_RCC_OscConfig+0x4d4>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4a7f      	ldr	r2, [pc, #508]	; (80047ec <HAL_RCC_OscConfig+0x4d4>)
 80045f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045f6:	f7fd fb8b 	bl	8001d10 <HAL_GetTick>
 80045fa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80045fc:	e008      	b.n	8004610 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045fe:	f7fd fb87 	bl	8001d10 <HAL_GetTick>
 8004602:	4602      	mov	r2, r0
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	1ad3      	subs	r3, r2, r3
 8004608:	2b64      	cmp	r3, #100	; 0x64
 800460a:	d901      	bls.n	8004610 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800460c:	2303      	movs	r3, #3
 800460e:	e12a      	b.n	8004866 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004610:	4b76      	ldr	r3, [pc, #472]	; (80047ec <HAL_RCC_OscConfig+0x4d4>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004618:	2b00      	cmp	r3, #0
 800461a:	d0f0      	beq.n	80045fe <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	2b01      	cmp	r3, #1
 8004622:	d106      	bne.n	8004632 <HAL_RCC_OscConfig+0x31a>
 8004624:	4b70      	ldr	r3, [pc, #448]	; (80047e8 <HAL_RCC_OscConfig+0x4d0>)
 8004626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004628:	4a6f      	ldr	r2, [pc, #444]	; (80047e8 <HAL_RCC_OscConfig+0x4d0>)
 800462a:	f043 0301 	orr.w	r3, r3, #1
 800462e:	6713      	str	r3, [r2, #112]	; 0x70
 8004630:	e02d      	b.n	800468e <HAL_RCC_OscConfig+0x376>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d10c      	bne.n	8004654 <HAL_RCC_OscConfig+0x33c>
 800463a:	4b6b      	ldr	r3, [pc, #428]	; (80047e8 <HAL_RCC_OscConfig+0x4d0>)
 800463c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800463e:	4a6a      	ldr	r2, [pc, #424]	; (80047e8 <HAL_RCC_OscConfig+0x4d0>)
 8004640:	f023 0301 	bic.w	r3, r3, #1
 8004644:	6713      	str	r3, [r2, #112]	; 0x70
 8004646:	4b68      	ldr	r3, [pc, #416]	; (80047e8 <HAL_RCC_OscConfig+0x4d0>)
 8004648:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464a:	4a67      	ldr	r2, [pc, #412]	; (80047e8 <HAL_RCC_OscConfig+0x4d0>)
 800464c:	f023 0304 	bic.w	r3, r3, #4
 8004650:	6713      	str	r3, [r2, #112]	; 0x70
 8004652:	e01c      	b.n	800468e <HAL_RCC_OscConfig+0x376>
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	2b05      	cmp	r3, #5
 800465a:	d10c      	bne.n	8004676 <HAL_RCC_OscConfig+0x35e>
 800465c:	4b62      	ldr	r3, [pc, #392]	; (80047e8 <HAL_RCC_OscConfig+0x4d0>)
 800465e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004660:	4a61      	ldr	r2, [pc, #388]	; (80047e8 <HAL_RCC_OscConfig+0x4d0>)
 8004662:	f043 0304 	orr.w	r3, r3, #4
 8004666:	6713      	str	r3, [r2, #112]	; 0x70
 8004668:	4b5f      	ldr	r3, [pc, #380]	; (80047e8 <HAL_RCC_OscConfig+0x4d0>)
 800466a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466c:	4a5e      	ldr	r2, [pc, #376]	; (80047e8 <HAL_RCC_OscConfig+0x4d0>)
 800466e:	f043 0301 	orr.w	r3, r3, #1
 8004672:	6713      	str	r3, [r2, #112]	; 0x70
 8004674:	e00b      	b.n	800468e <HAL_RCC_OscConfig+0x376>
 8004676:	4b5c      	ldr	r3, [pc, #368]	; (80047e8 <HAL_RCC_OscConfig+0x4d0>)
 8004678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800467a:	4a5b      	ldr	r2, [pc, #364]	; (80047e8 <HAL_RCC_OscConfig+0x4d0>)
 800467c:	f023 0301 	bic.w	r3, r3, #1
 8004680:	6713      	str	r3, [r2, #112]	; 0x70
 8004682:	4b59      	ldr	r3, [pc, #356]	; (80047e8 <HAL_RCC_OscConfig+0x4d0>)
 8004684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004686:	4a58      	ldr	r2, [pc, #352]	; (80047e8 <HAL_RCC_OscConfig+0x4d0>)
 8004688:	f023 0304 	bic.w	r3, r3, #4
 800468c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	689b      	ldr	r3, [r3, #8]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d015      	beq.n	80046c2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004696:	f7fd fb3b 	bl	8001d10 <HAL_GetTick>
 800469a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800469c:	e00a      	b.n	80046b4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800469e:	f7fd fb37 	bl	8001d10 <HAL_GetTick>
 80046a2:	4602      	mov	r2, r0
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	1ad3      	subs	r3, r2, r3
 80046a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d901      	bls.n	80046b4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80046b0:	2303      	movs	r3, #3
 80046b2:	e0d8      	b.n	8004866 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046b4:	4b4c      	ldr	r3, [pc, #304]	; (80047e8 <HAL_RCC_OscConfig+0x4d0>)
 80046b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d0ee      	beq.n	800469e <HAL_RCC_OscConfig+0x386>
 80046c0:	e014      	b.n	80046ec <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80046c2:	f7fd fb25 	bl	8001d10 <HAL_GetTick>
 80046c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046c8:	e00a      	b.n	80046e0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80046ca:	f7fd fb21 	bl	8001d10 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80046d8:	4293      	cmp	r3, r2
 80046da:	d901      	bls.n	80046e0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80046dc:	2303      	movs	r3, #3
 80046de:	e0c2      	b.n	8004866 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80046e0:	4b41      	ldr	r3, [pc, #260]	; (80047e8 <HAL_RCC_OscConfig+0x4d0>)
 80046e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046e4:	f003 0302 	and.w	r3, r3, #2
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1ee      	bne.n	80046ca <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80046ec:	7dfb      	ldrb	r3, [r7, #23]
 80046ee:	2b01      	cmp	r3, #1
 80046f0:	d105      	bne.n	80046fe <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046f2:	4b3d      	ldr	r3, [pc, #244]	; (80047e8 <HAL_RCC_OscConfig+0x4d0>)
 80046f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046f6:	4a3c      	ldr	r2, [pc, #240]	; (80047e8 <HAL_RCC_OscConfig+0x4d0>)
 80046f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046fc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	2b00      	cmp	r3, #0
 8004704:	f000 80ae 	beq.w	8004864 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004708:	4b37      	ldr	r3, [pc, #220]	; (80047e8 <HAL_RCC_OscConfig+0x4d0>)
 800470a:	689b      	ldr	r3, [r3, #8]
 800470c:	f003 030c 	and.w	r3, r3, #12
 8004710:	2b08      	cmp	r3, #8
 8004712:	d06d      	beq.n	80047f0 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	699b      	ldr	r3, [r3, #24]
 8004718:	2b02      	cmp	r3, #2
 800471a:	d14b      	bne.n	80047b4 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800471c:	4b32      	ldr	r3, [pc, #200]	; (80047e8 <HAL_RCC_OscConfig+0x4d0>)
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a31      	ldr	r2, [pc, #196]	; (80047e8 <HAL_RCC_OscConfig+0x4d0>)
 8004722:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004726:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004728:	f7fd faf2 	bl	8001d10 <HAL_GetTick>
 800472c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800472e:	e008      	b.n	8004742 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004730:	f7fd faee 	bl	8001d10 <HAL_GetTick>
 8004734:	4602      	mov	r2, r0
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	1ad3      	subs	r3, r2, r3
 800473a:	2b02      	cmp	r3, #2
 800473c:	d901      	bls.n	8004742 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800473e:	2303      	movs	r3, #3
 8004740:	e091      	b.n	8004866 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004742:	4b29      	ldr	r3, [pc, #164]	; (80047e8 <HAL_RCC_OscConfig+0x4d0>)
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800474a:	2b00      	cmp	r3, #0
 800474c:	d1f0      	bne.n	8004730 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	69da      	ldr	r2, [r3, #28]
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a1b      	ldr	r3, [r3, #32]
 8004756:	431a      	orrs	r2, r3
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800475c:	019b      	lsls	r3, r3, #6
 800475e:	431a      	orrs	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004764:	085b      	lsrs	r3, r3, #1
 8004766:	3b01      	subs	r3, #1
 8004768:	041b      	lsls	r3, r3, #16
 800476a:	431a      	orrs	r2, r3
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004770:	061b      	lsls	r3, r3, #24
 8004772:	431a      	orrs	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004778:	071b      	lsls	r3, r3, #28
 800477a:	491b      	ldr	r1, [pc, #108]	; (80047e8 <HAL_RCC_OscConfig+0x4d0>)
 800477c:	4313      	orrs	r3, r2
 800477e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004780:	4b19      	ldr	r3, [pc, #100]	; (80047e8 <HAL_RCC_OscConfig+0x4d0>)
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a18      	ldr	r2, [pc, #96]	; (80047e8 <HAL_RCC_OscConfig+0x4d0>)
 8004786:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800478a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800478c:	f7fd fac0 	bl	8001d10 <HAL_GetTick>
 8004790:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004792:	e008      	b.n	80047a6 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004794:	f7fd fabc 	bl	8001d10 <HAL_GetTick>
 8004798:	4602      	mov	r2, r0
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	1ad3      	subs	r3, r2, r3
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d901      	bls.n	80047a6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80047a2:	2303      	movs	r3, #3
 80047a4:	e05f      	b.n	8004866 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80047a6:	4b10      	ldr	r3, [pc, #64]	; (80047e8 <HAL_RCC_OscConfig+0x4d0>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d0f0      	beq.n	8004794 <HAL_RCC_OscConfig+0x47c>
 80047b2:	e057      	b.n	8004864 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80047b4:	4b0c      	ldr	r3, [pc, #48]	; (80047e8 <HAL_RCC_OscConfig+0x4d0>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	4a0b      	ldr	r2, [pc, #44]	; (80047e8 <HAL_RCC_OscConfig+0x4d0>)
 80047ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80047be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047c0:	f7fd faa6 	bl	8001d10 <HAL_GetTick>
 80047c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047c6:	e008      	b.n	80047da <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80047c8:	f7fd faa2 	bl	8001d10 <HAL_GetTick>
 80047cc:	4602      	mov	r2, r0
 80047ce:	693b      	ldr	r3, [r7, #16]
 80047d0:	1ad3      	subs	r3, r2, r3
 80047d2:	2b02      	cmp	r3, #2
 80047d4:	d901      	bls.n	80047da <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80047d6:	2303      	movs	r3, #3
 80047d8:	e045      	b.n	8004866 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80047da:	4b03      	ldr	r3, [pc, #12]	; (80047e8 <HAL_RCC_OscConfig+0x4d0>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d1f0      	bne.n	80047c8 <HAL_RCC_OscConfig+0x4b0>
 80047e6:	e03d      	b.n	8004864 <HAL_RCC_OscConfig+0x54c>
 80047e8:	40023800 	.word	0x40023800
 80047ec:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80047f0:	4b1f      	ldr	r3, [pc, #124]	; (8004870 <HAL_RCC_OscConfig+0x558>)
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	699b      	ldr	r3, [r3, #24]
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d030      	beq.n	8004860 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004808:	429a      	cmp	r2, r3
 800480a:	d129      	bne.n	8004860 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004816:	429a      	cmp	r2, r3
 8004818:	d122      	bne.n	8004860 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800481a:	68fa      	ldr	r2, [r7, #12]
 800481c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004820:	4013      	ands	r3, r2
 8004822:	687a      	ldr	r2, [r7, #4]
 8004824:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004826:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004828:	4293      	cmp	r3, r2
 800482a:	d119      	bne.n	8004860 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004836:	085b      	lsrs	r3, r3, #1
 8004838:	3b01      	subs	r3, #1
 800483a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800483c:	429a      	cmp	r2, r3
 800483e:	d10f      	bne.n	8004860 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800484a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800484c:	429a      	cmp	r2, r3
 800484e:	d107      	bne.n	8004860 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800485a:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800485c:	429a      	cmp	r2, r3
 800485e:	d001      	beq.n	8004864 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004860:	2301      	movs	r3, #1
 8004862:	e000      	b.n	8004866 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004864:	2300      	movs	r3, #0
}
 8004866:	4618      	mov	r0, r3
 8004868:	3718      	adds	r7, #24
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	40023800 	.word	0x40023800

08004874 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
 800487c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800487e:	2300      	movs	r3, #0
 8004880:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d101      	bne.n	800488c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004888:	2301      	movs	r3, #1
 800488a:	e0d0      	b.n	8004a2e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800488c:	4b6a      	ldr	r3, [pc, #424]	; (8004a38 <HAL_RCC_ClockConfig+0x1c4>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f003 030f 	and.w	r3, r3, #15
 8004894:	683a      	ldr	r2, [r7, #0]
 8004896:	429a      	cmp	r2, r3
 8004898:	d910      	bls.n	80048bc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800489a:	4b67      	ldr	r3, [pc, #412]	; (8004a38 <HAL_RCC_ClockConfig+0x1c4>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f023 020f 	bic.w	r2, r3, #15
 80048a2:	4965      	ldr	r1, [pc, #404]	; (8004a38 <HAL_RCC_ClockConfig+0x1c4>)
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80048aa:	4b63      	ldr	r3, [pc, #396]	; (8004a38 <HAL_RCC_ClockConfig+0x1c4>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 030f 	and.w	r3, r3, #15
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	429a      	cmp	r2, r3
 80048b6:	d001      	beq.n	80048bc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80048b8:	2301      	movs	r3, #1
 80048ba:	e0b8      	b.n	8004a2e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0302 	and.w	r3, r3, #2
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d020      	beq.n	800490a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f003 0304 	and.w	r3, r3, #4
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d005      	beq.n	80048e0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80048d4:	4b59      	ldr	r3, [pc, #356]	; (8004a3c <HAL_RCC_ClockConfig+0x1c8>)
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	4a58      	ldr	r2, [pc, #352]	; (8004a3c <HAL_RCC_ClockConfig+0x1c8>)
 80048da:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80048de:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f003 0308 	and.w	r3, r3, #8
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d005      	beq.n	80048f8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80048ec:	4b53      	ldr	r3, [pc, #332]	; (8004a3c <HAL_RCC_ClockConfig+0x1c8>)
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	4a52      	ldr	r2, [pc, #328]	; (8004a3c <HAL_RCC_ClockConfig+0x1c8>)
 80048f2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80048f6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80048f8:	4b50      	ldr	r3, [pc, #320]	; (8004a3c <HAL_RCC_ClockConfig+0x1c8>)
 80048fa:	689b      	ldr	r3, [r3, #8]
 80048fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	689b      	ldr	r3, [r3, #8]
 8004904:	494d      	ldr	r1, [pc, #308]	; (8004a3c <HAL_RCC_ClockConfig+0x1c8>)
 8004906:	4313      	orrs	r3, r2
 8004908:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0301 	and.w	r3, r3, #1
 8004912:	2b00      	cmp	r3, #0
 8004914:	d040      	beq.n	8004998 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	2b01      	cmp	r3, #1
 800491c:	d107      	bne.n	800492e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800491e:	4b47      	ldr	r3, [pc, #284]	; (8004a3c <HAL_RCC_ClockConfig+0x1c8>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d115      	bne.n	8004956 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800492a:	2301      	movs	r3, #1
 800492c:	e07f      	b.n	8004a2e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	2b02      	cmp	r3, #2
 8004934:	d107      	bne.n	8004946 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004936:	4b41      	ldr	r3, [pc, #260]	; (8004a3c <HAL_RCC_ClockConfig+0x1c8>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d109      	bne.n	8004956 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e073      	b.n	8004a2e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004946:	4b3d      	ldr	r3, [pc, #244]	; (8004a3c <HAL_RCC_ClockConfig+0x1c8>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e06b      	b.n	8004a2e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004956:	4b39      	ldr	r3, [pc, #228]	; (8004a3c <HAL_RCC_ClockConfig+0x1c8>)
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	f023 0203 	bic.w	r2, r3, #3
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	4936      	ldr	r1, [pc, #216]	; (8004a3c <HAL_RCC_ClockConfig+0x1c8>)
 8004964:	4313      	orrs	r3, r2
 8004966:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004968:	f7fd f9d2 	bl	8001d10 <HAL_GetTick>
 800496c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800496e:	e00a      	b.n	8004986 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004970:	f7fd f9ce 	bl	8001d10 <HAL_GetTick>
 8004974:	4602      	mov	r2, r0
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	1ad3      	subs	r3, r2, r3
 800497a:	f241 3288 	movw	r2, #5000	; 0x1388
 800497e:	4293      	cmp	r3, r2
 8004980:	d901      	bls.n	8004986 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e053      	b.n	8004a2e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004986:	4b2d      	ldr	r3, [pc, #180]	; (8004a3c <HAL_RCC_ClockConfig+0x1c8>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f003 020c 	and.w	r2, r3, #12
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	009b      	lsls	r3, r3, #2
 8004994:	429a      	cmp	r2, r3
 8004996:	d1eb      	bne.n	8004970 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004998:	4b27      	ldr	r3, [pc, #156]	; (8004a38 <HAL_RCC_ClockConfig+0x1c4>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	f003 030f 	and.w	r3, r3, #15
 80049a0:	683a      	ldr	r2, [r7, #0]
 80049a2:	429a      	cmp	r2, r3
 80049a4:	d210      	bcs.n	80049c8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80049a6:	4b24      	ldr	r3, [pc, #144]	; (8004a38 <HAL_RCC_ClockConfig+0x1c4>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f023 020f 	bic.w	r2, r3, #15
 80049ae:	4922      	ldr	r1, [pc, #136]	; (8004a38 <HAL_RCC_ClockConfig+0x1c4>)
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80049b6:	4b20      	ldr	r3, [pc, #128]	; (8004a38 <HAL_RCC_ClockConfig+0x1c4>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f003 030f 	and.w	r3, r3, #15
 80049be:	683a      	ldr	r2, [r7, #0]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d001      	beq.n	80049c8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e032      	b.n	8004a2e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f003 0304 	and.w	r3, r3, #4
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d008      	beq.n	80049e6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80049d4:	4b19      	ldr	r3, [pc, #100]	; (8004a3c <HAL_RCC_ClockConfig+0x1c8>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	4916      	ldr	r1, [pc, #88]	; (8004a3c <HAL_RCC_ClockConfig+0x1c8>)
 80049e2:	4313      	orrs	r3, r2
 80049e4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0308 	and.w	r3, r3, #8
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d009      	beq.n	8004a06 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80049f2:	4b12      	ldr	r3, [pc, #72]	; (8004a3c <HAL_RCC_ClockConfig+0x1c8>)
 80049f4:	689b      	ldr	r3, [r3, #8]
 80049f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	00db      	lsls	r3, r3, #3
 8004a00:	490e      	ldr	r1, [pc, #56]	; (8004a3c <HAL_RCC_ClockConfig+0x1c8>)
 8004a02:	4313      	orrs	r3, r2
 8004a04:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004a06:	f000 f821 	bl	8004a4c <HAL_RCC_GetSysClockFreq>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	4b0b      	ldr	r3, [pc, #44]	; (8004a3c <HAL_RCC_ClockConfig+0x1c8>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	091b      	lsrs	r3, r3, #4
 8004a12:	f003 030f 	and.w	r3, r3, #15
 8004a16:	490a      	ldr	r1, [pc, #40]	; (8004a40 <HAL_RCC_ClockConfig+0x1cc>)
 8004a18:	5ccb      	ldrb	r3, [r1, r3]
 8004a1a:	fa22 f303 	lsr.w	r3, r2, r3
 8004a1e:	4a09      	ldr	r2, [pc, #36]	; (8004a44 <HAL_RCC_ClockConfig+0x1d0>)
 8004a20:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004a22:	4b09      	ldr	r3, [pc, #36]	; (8004a48 <HAL_RCC_ClockConfig+0x1d4>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4618      	mov	r0, r3
 8004a28:	f7fd f92e 	bl	8001c88 <HAL_InitTick>

  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3710      	adds	r7, #16
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	40023c00 	.word	0x40023c00
 8004a3c:	40023800 	.word	0x40023800
 8004a40:	0800919c 	.word	0x0800919c
 8004a44:	20000090 	.word	0x20000090
 8004a48:	20000094 	.word	0x20000094

08004a4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004a4c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004a50:	b084      	sub	sp, #16
 8004a52:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004a54:	2300      	movs	r3, #0
 8004a56:	607b      	str	r3, [r7, #4]
 8004a58:	2300      	movs	r3, #0
 8004a5a:	60fb      	str	r3, [r7, #12]
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8004a60:	2300      	movs	r3, #0
 8004a62:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004a64:	4b67      	ldr	r3, [pc, #412]	; (8004c04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a66:	689b      	ldr	r3, [r3, #8]
 8004a68:	f003 030c 	and.w	r3, r3, #12
 8004a6c:	2b08      	cmp	r3, #8
 8004a6e:	d00d      	beq.n	8004a8c <HAL_RCC_GetSysClockFreq+0x40>
 8004a70:	2b08      	cmp	r3, #8
 8004a72:	f200 80bd 	bhi.w	8004bf0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d002      	beq.n	8004a80 <HAL_RCC_GetSysClockFreq+0x34>
 8004a7a:	2b04      	cmp	r3, #4
 8004a7c:	d003      	beq.n	8004a86 <HAL_RCC_GetSysClockFreq+0x3a>
 8004a7e:	e0b7      	b.n	8004bf0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a80:	4b61      	ldr	r3, [pc, #388]	; (8004c08 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004a82:	60bb      	str	r3, [r7, #8]
      break;
 8004a84:	e0b7      	b.n	8004bf6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a86:	4b61      	ldr	r3, [pc, #388]	; (8004c0c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004a88:	60bb      	str	r3, [r7, #8]
      break;
 8004a8a:	e0b4      	b.n	8004bf6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a8c:	4b5d      	ldr	r3, [pc, #372]	; (8004c04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a94:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004a96:	4b5b      	ldr	r3, [pc, #364]	; (8004c04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d04d      	beq.n	8004b3e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004aa2:	4b58      	ldr	r3, [pc, #352]	; (8004c04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004aa4:	685b      	ldr	r3, [r3, #4]
 8004aa6:	099b      	lsrs	r3, r3, #6
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	f04f 0300 	mov.w	r3, #0
 8004aae:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004ab2:	f04f 0100 	mov.w	r1, #0
 8004ab6:	ea02 0800 	and.w	r8, r2, r0
 8004aba:	ea03 0901 	and.w	r9, r3, r1
 8004abe:	4640      	mov	r0, r8
 8004ac0:	4649      	mov	r1, r9
 8004ac2:	f04f 0200 	mov.w	r2, #0
 8004ac6:	f04f 0300 	mov.w	r3, #0
 8004aca:	014b      	lsls	r3, r1, #5
 8004acc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004ad0:	0142      	lsls	r2, r0, #5
 8004ad2:	4610      	mov	r0, r2
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	ebb0 0008 	subs.w	r0, r0, r8
 8004ada:	eb61 0109 	sbc.w	r1, r1, r9
 8004ade:	f04f 0200 	mov.w	r2, #0
 8004ae2:	f04f 0300 	mov.w	r3, #0
 8004ae6:	018b      	lsls	r3, r1, #6
 8004ae8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004aec:	0182      	lsls	r2, r0, #6
 8004aee:	1a12      	subs	r2, r2, r0
 8004af0:	eb63 0301 	sbc.w	r3, r3, r1
 8004af4:	f04f 0000 	mov.w	r0, #0
 8004af8:	f04f 0100 	mov.w	r1, #0
 8004afc:	00d9      	lsls	r1, r3, #3
 8004afe:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b02:	00d0      	lsls	r0, r2, #3
 8004b04:	4602      	mov	r2, r0
 8004b06:	460b      	mov	r3, r1
 8004b08:	eb12 0208 	adds.w	r2, r2, r8
 8004b0c:	eb43 0309 	adc.w	r3, r3, r9
 8004b10:	f04f 0000 	mov.w	r0, #0
 8004b14:	f04f 0100 	mov.w	r1, #0
 8004b18:	0259      	lsls	r1, r3, #9
 8004b1a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8004b1e:	0250      	lsls	r0, r2, #9
 8004b20:	4602      	mov	r2, r0
 8004b22:	460b      	mov	r3, r1
 8004b24:	4610      	mov	r0, r2
 8004b26:	4619      	mov	r1, r3
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	461a      	mov	r2, r3
 8004b2c:	f04f 0300 	mov.w	r3, #0
 8004b30:	f7fb fbde 	bl	80002f0 <__aeabi_uldivmod>
 8004b34:	4602      	mov	r2, r0
 8004b36:	460b      	mov	r3, r1
 8004b38:	4613      	mov	r3, r2
 8004b3a:	60fb      	str	r3, [r7, #12]
 8004b3c:	e04a      	b.n	8004bd4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004b3e:	4b31      	ldr	r3, [pc, #196]	; (8004c04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	099b      	lsrs	r3, r3, #6
 8004b44:	461a      	mov	r2, r3
 8004b46:	f04f 0300 	mov.w	r3, #0
 8004b4a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004b4e:	f04f 0100 	mov.w	r1, #0
 8004b52:	ea02 0400 	and.w	r4, r2, r0
 8004b56:	ea03 0501 	and.w	r5, r3, r1
 8004b5a:	4620      	mov	r0, r4
 8004b5c:	4629      	mov	r1, r5
 8004b5e:	f04f 0200 	mov.w	r2, #0
 8004b62:	f04f 0300 	mov.w	r3, #0
 8004b66:	014b      	lsls	r3, r1, #5
 8004b68:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004b6c:	0142      	lsls	r2, r0, #5
 8004b6e:	4610      	mov	r0, r2
 8004b70:	4619      	mov	r1, r3
 8004b72:	1b00      	subs	r0, r0, r4
 8004b74:	eb61 0105 	sbc.w	r1, r1, r5
 8004b78:	f04f 0200 	mov.w	r2, #0
 8004b7c:	f04f 0300 	mov.w	r3, #0
 8004b80:	018b      	lsls	r3, r1, #6
 8004b82:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004b86:	0182      	lsls	r2, r0, #6
 8004b88:	1a12      	subs	r2, r2, r0
 8004b8a:	eb63 0301 	sbc.w	r3, r3, r1
 8004b8e:	f04f 0000 	mov.w	r0, #0
 8004b92:	f04f 0100 	mov.w	r1, #0
 8004b96:	00d9      	lsls	r1, r3, #3
 8004b98:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b9c:	00d0      	lsls	r0, r2, #3
 8004b9e:	4602      	mov	r2, r0
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	1912      	adds	r2, r2, r4
 8004ba4:	eb45 0303 	adc.w	r3, r5, r3
 8004ba8:	f04f 0000 	mov.w	r0, #0
 8004bac:	f04f 0100 	mov.w	r1, #0
 8004bb0:	0299      	lsls	r1, r3, #10
 8004bb2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004bb6:	0290      	lsls	r0, r2, #10
 8004bb8:	4602      	mov	r2, r0
 8004bba:	460b      	mov	r3, r1
 8004bbc:	4610      	mov	r0, r2
 8004bbe:	4619      	mov	r1, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	f04f 0300 	mov.w	r3, #0
 8004bc8:	f7fb fb92 	bl	80002f0 <__aeabi_uldivmod>
 8004bcc:	4602      	mov	r2, r0
 8004bce:	460b      	mov	r3, r1
 8004bd0:	4613      	mov	r3, r2
 8004bd2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004bd4:	4b0b      	ldr	r3, [pc, #44]	; (8004c04 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	0c1b      	lsrs	r3, r3, #16
 8004bda:	f003 0303 	and.w	r3, r3, #3
 8004bde:	3301      	adds	r3, #1
 8004be0:	005b      	lsls	r3, r3, #1
 8004be2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8004be4:	68fa      	ldr	r2, [r7, #12]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bec:	60bb      	str	r3, [r7, #8]
      break;
 8004bee:	e002      	b.n	8004bf6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004bf0:	4b05      	ldr	r3, [pc, #20]	; (8004c08 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004bf2:	60bb      	str	r3, [r7, #8]
      break;
 8004bf4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004bf6:	68bb      	ldr	r3, [r7, #8]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3710      	adds	r7, #16
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004c02:	bf00      	nop
 8004c04:	40023800 	.word	0x40023800
 8004c08:	00f42400 	.word	0x00f42400
 8004c0c:	007a1200 	.word	0x007a1200

08004c10 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c10:	b480      	push	{r7}
 8004c12:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c14:	4b03      	ldr	r3, [pc, #12]	; (8004c24 <HAL_RCC_GetHCLKFreq+0x14>)
 8004c16:	681b      	ldr	r3, [r3, #0]
}
 8004c18:	4618      	mov	r0, r3
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr
 8004c22:	bf00      	nop
 8004c24:	20000090 	.word	0x20000090

08004c28 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c2c:	f7ff fff0 	bl	8004c10 <HAL_RCC_GetHCLKFreq>
 8004c30:	4602      	mov	r2, r0
 8004c32:	4b05      	ldr	r3, [pc, #20]	; (8004c48 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	0a9b      	lsrs	r3, r3, #10
 8004c38:	f003 0307 	and.w	r3, r3, #7
 8004c3c:	4903      	ldr	r1, [pc, #12]	; (8004c4c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c3e:	5ccb      	ldrb	r3, [r1, r3]
 8004c40:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c44:	4618      	mov	r0, r3
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	40023800 	.word	0x40023800
 8004c4c:	080091ac 	.word	0x080091ac

08004c50 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c54:	f7ff ffdc 	bl	8004c10 <HAL_RCC_GetHCLKFreq>
 8004c58:	4602      	mov	r2, r0
 8004c5a:	4b05      	ldr	r3, [pc, #20]	; (8004c70 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004c5c:	689b      	ldr	r3, [r3, #8]
 8004c5e:	0b5b      	lsrs	r3, r3, #13
 8004c60:	f003 0307 	and.w	r3, r3, #7
 8004c64:	4903      	ldr	r1, [pc, #12]	; (8004c74 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004c66:	5ccb      	ldrb	r3, [r1, r3]
 8004c68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	bd80      	pop	{r7, pc}
 8004c70:	40023800 	.word	0x40023800
 8004c74:	080091ac 	.word	0x080091ac

08004c78 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b088      	sub	sp, #32
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004c80:	2300      	movs	r3, #0
 8004c82:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004c84:	2300      	movs	r3, #0
 8004c86:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004c88:	2300      	movs	r3, #0
 8004c8a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004c8c:	2300      	movs	r3, #0
 8004c8e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004c90:	2300      	movs	r3, #0
 8004c92:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0301 	and.w	r3, r3, #1
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d012      	beq.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004ca0:	4b69      	ldr	r3, [pc, #420]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	4a68      	ldr	r2, [pc, #416]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ca6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004caa:	6093      	str	r3, [r2, #8]
 8004cac:	4b66      	ldr	r3, [pc, #408]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cae:	689a      	ldr	r2, [r3, #8]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cb4:	4964      	ldr	r1, [pc, #400]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cb6:	4313      	orrs	r3, r2
 8004cb8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d101      	bne.n	8004cc6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004cc2:	2301      	movs	r3, #1
 8004cc4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d017      	beq.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004cd2:	4b5d      	ldr	r3, [pc, #372]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004cd4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cd8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce0:	4959      	ldr	r1, [pc, #356]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cec:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cf0:	d101      	bne.n	8004cf6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d101      	bne.n	8004d02 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8004cfe:	2301      	movs	r3, #1
 8004d00:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d017      	beq.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8004d0e:	4b4e      	ldr	r3, [pc, #312]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d14:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1c:	494a      	ldr	r1, [pc, #296]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d1e:	4313      	orrs	r3, r2
 8004d20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d2c:	d101      	bne.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d001      	beq.n	8004d4e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f003 0320 	and.w	r3, r3, #32
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f000 808b 	beq.w	8004e72 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004d5c:	4b3a      	ldr	r3, [pc, #232]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d60:	4a39      	ldr	r2, [pc, #228]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d66:	6413      	str	r3, [r2, #64]	; 0x40
 8004d68:	4b37      	ldr	r3, [pc, #220]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d70:	60bb      	str	r3, [r7, #8]
 8004d72:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004d74:	4b35      	ldr	r3, [pc, #212]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	4a34      	ldr	r2, [pc, #208]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d7e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d80:	f7fc ffc6 	bl	8001d10 <HAL_GetTick>
 8004d84:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d86:	e008      	b.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d88:	f7fc ffc2 	bl	8001d10 <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	697b      	ldr	r3, [r7, #20]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	2b64      	cmp	r3, #100	; 0x64
 8004d94:	d901      	bls.n	8004d9a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e38f      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004d9a:	4b2c      	ldr	r3, [pc, #176]	; (8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d0f0      	beq.n	8004d88 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004da6:	4b28      	ldr	r3, [pc, #160]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dae:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004db0:	693b      	ldr	r3, [r7, #16]
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d035      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004dbe:	693a      	ldr	r2, [r7, #16]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d02e      	beq.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004dc4:	4b20      	ldr	r3, [pc, #128]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004dcc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004dce:	4b1e      	ldr	r3, [pc, #120]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd2:	4a1d      	ldr	r2, [pc, #116]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dd4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004dd8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004dda:	4b1b      	ldr	r3, [pc, #108]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ddc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dde:	4a1a      	ldr	r2, [pc, #104]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004de0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004de4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8004de6:	4a18      	ldr	r2, [pc, #96]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004dec:	4b16      	ldr	r3, [pc, #88]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df0:	f003 0301 	and.w	r3, r3, #1
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d114      	bne.n	8004e22 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004df8:	f7fc ff8a 	bl	8001d10 <HAL_GetTick>
 8004dfc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dfe:	e00a      	b.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e00:	f7fc ff86 	bl	8001d10 <HAL_GetTick>
 8004e04:	4602      	mov	r2, r0
 8004e06:	697b      	ldr	r3, [r7, #20]
 8004e08:	1ad3      	subs	r3, r2, r3
 8004e0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e0e:	4293      	cmp	r3, r2
 8004e10:	d901      	bls.n	8004e16 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e351      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e16:	4b0c      	ldr	r3, [pc, #48]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e1a:	f003 0302 	and.w	r3, r3, #2
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d0ee      	beq.n	8004e00 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e2a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004e2e:	d111      	bne.n	8004e54 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8004e30:	4b05      	ldr	r3, [pc, #20]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e3c:	4b04      	ldr	r3, [pc, #16]	; (8004e50 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8004e3e:	400b      	ands	r3, r1
 8004e40:	4901      	ldr	r1, [pc, #4]	; (8004e48 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	608b      	str	r3, [r1, #8]
 8004e46:	e00b      	b.n	8004e60 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004e48:	40023800 	.word	0x40023800
 8004e4c:	40007000 	.word	0x40007000
 8004e50:	0ffffcff 	.word	0x0ffffcff
 8004e54:	4bb3      	ldr	r3, [pc, #716]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e56:	689b      	ldr	r3, [r3, #8]
 8004e58:	4ab2      	ldr	r2, [pc, #712]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e5a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004e5e:	6093      	str	r3, [r2, #8]
 8004e60:	4bb0      	ldr	r3, [pc, #704]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e62:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004e6c:	49ad      	ldr	r1, [pc, #692]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 0310 	and.w	r3, r3, #16
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d010      	beq.n	8004ea0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004e7e:	4ba9      	ldr	r3, [pc, #676]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e80:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004e84:	4aa7      	ldr	r2, [pc, #668]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004e8a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8004e8e:	4ba5      	ldr	r3, [pc, #660]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e90:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e98:	49a2      	ldr	r1, [pc, #648]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d00a      	beq.n	8004ec2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004eac:	4b9d      	ldr	r3, [pc, #628]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004eb2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004eba:	499a      	ldr	r1, [pc, #616]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d00a      	beq.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004ece:	4b95      	ldr	r3, [pc, #596]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ed4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004edc:	4991      	ldr	r1, [pc, #580]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d00a      	beq.n	8004f06 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004ef0:	4b8c      	ldr	r3, [pc, #560]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004efe:	4989      	ldr	r1, [pc, #548]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f00:	4313      	orrs	r3, r2
 8004f02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00a      	beq.n	8004f28 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004f12:	4b84      	ldr	r3, [pc, #528]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f18:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004f20:	4980      	ldr	r1, [pc, #512]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d00a      	beq.n	8004f4a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004f34:	4b7b      	ldr	r3, [pc, #492]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f3a:	f023 0203 	bic.w	r2, r3, #3
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f42:	4978      	ldr	r1, [pc, #480]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f44:	4313      	orrs	r3, r2
 8004f46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00a      	beq.n	8004f6c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004f56:	4b73      	ldr	r3, [pc, #460]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f5c:	f023 020c 	bic.w	r2, r3, #12
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004f64:	496f      	ldr	r1, [pc, #444]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f66:	4313      	orrs	r3, r2
 8004f68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d00a      	beq.n	8004f8e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004f78:	4b6a      	ldr	r3, [pc, #424]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f7e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f86:	4967      	ldr	r1, [pc, #412]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d00a      	beq.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004f9a:	4b62      	ldr	r3, [pc, #392]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004f9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fa0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fa8:	495e      	ldr	r1, [pc, #376]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004faa:	4313      	orrs	r3, r2
 8004fac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00a      	beq.n	8004fd2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004fbc:	4b59      	ldr	r3, [pc, #356]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fca:	4956      	ldr	r1, [pc, #344]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00a      	beq.n	8004ff4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8004fde:	4b51      	ldr	r3, [pc, #324]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fe0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fe4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fec:	494d      	ldr	r1, [pc, #308]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d00a      	beq.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005000:	4b48      	ldr	r3, [pc, #288]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005002:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005006:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800500e:	4945      	ldr	r1, [pc, #276]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005010:	4313      	orrs	r3, r2
 8005012:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800501e:	2b00      	cmp	r3, #0
 8005020:	d00a      	beq.n	8005038 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005022:	4b40      	ldr	r3, [pc, #256]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005028:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005030:	493c      	ldr	r1, [pc, #240]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005032:	4313      	orrs	r3, r2
 8005034:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005040:	2b00      	cmp	r3, #0
 8005042:	d00a      	beq.n	800505a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005044:	4b37      	ldr	r3, [pc, #220]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800504a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005052:	4934      	ldr	r1, [pc, #208]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005054:	4313      	orrs	r3, r2
 8005056:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d011      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005066:	4b2f      	ldr	r3, [pc, #188]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800506c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005074:	492b      	ldr	r1, [pc, #172]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005076:	4313      	orrs	r3, r2
 8005078:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005080:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005084:	d101      	bne.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005086:	2301      	movs	r3, #1
 8005088:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0308 	and.w	r3, r3, #8
 8005092:	2b00      	cmp	r3, #0
 8005094:	d001      	beq.n	800509a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005096:	2301      	movs	r3, #1
 8005098:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00a      	beq.n	80050bc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80050a6:	4b1f      	ldr	r3, [pc, #124]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ac:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050b4:	491b      	ldr	r1, [pc, #108]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050b6:	4313      	orrs	r3, r2
 80050b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00b      	beq.n	80050e0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80050c8:	4b16      	ldr	r3, [pc, #88]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050ce:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80050d8:	4912      	ldr	r1, [pc, #72]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050da:	4313      	orrs	r3, r2
 80050dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d00b      	beq.n	8005104 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80050ec:	4b0d      	ldr	r3, [pc, #52]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80050f2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80050fc:	4909      	ldr	r1, [pc, #36]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d00f      	beq.n	8005130 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005110:	4b04      	ldr	r3, [pc, #16]	; (8005124 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8005112:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005116:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005120:	e002      	b.n	8005128 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8005122:	bf00      	nop
 8005124:	40023800 	.word	0x40023800
 8005128:	4986      	ldr	r1, [pc, #536]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800512a:	4313      	orrs	r3, r2
 800512c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005138:	2b00      	cmp	r3, #0
 800513a:	d00b      	beq.n	8005154 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800513c:	4b81      	ldr	r3, [pc, #516]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800513e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005142:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800514c:	497d      	ldr	r1, [pc, #500]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800514e:	4313      	orrs	r3, r2
 8005150:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	2b01      	cmp	r3, #1
 8005158:	d006      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005162:	2b00      	cmp	r3, #0
 8005164:	f000 80d6 	beq.w	8005314 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005168:	4b76      	ldr	r3, [pc, #472]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	4a75      	ldr	r2, [pc, #468]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800516e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005172:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005174:	f7fc fdcc 	bl	8001d10 <HAL_GetTick>
 8005178:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800517a:	e008      	b.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800517c:	f7fc fdc8 	bl	8001d10 <HAL_GetTick>
 8005180:	4602      	mov	r2, r0
 8005182:	697b      	ldr	r3, [r7, #20]
 8005184:	1ad3      	subs	r3, r2, r3
 8005186:	2b64      	cmp	r3, #100	; 0x64
 8005188:	d901      	bls.n	800518e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e195      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800518e:	4b6d      	ldr	r3, [pc, #436]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1f0      	bne.n	800517c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	f003 0301 	and.w	r3, r3, #1
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d021      	beq.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x572>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d11d      	bne.n	80051ea <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80051ae:	4b65      	ldr	r3, [pc, #404]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051b4:	0c1b      	lsrs	r3, r3, #16
 80051b6:	f003 0303 	and.w	r3, r3, #3
 80051ba:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80051bc:	4b61      	ldr	r3, [pc, #388]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051c2:	0e1b      	lsrs	r3, r3, #24
 80051c4:	f003 030f 	and.w	r3, r3, #15
 80051c8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	019a      	lsls	r2, r3, #6
 80051d0:	693b      	ldr	r3, [r7, #16]
 80051d2:	041b      	lsls	r3, r3, #16
 80051d4:	431a      	orrs	r2, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	061b      	lsls	r3, r3, #24
 80051da:	431a      	orrs	r2, r3
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	071b      	lsls	r3, r3, #28
 80051e2:	4958      	ldr	r1, [pc, #352]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80051e4:	4313      	orrs	r3, r2
 80051e6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d004      	beq.n	8005200 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051fe:	d00a      	beq.n	8005216 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005208:	2b00      	cmp	r3, #0
 800520a:	d02e      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005210:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005214:	d129      	bne.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005216:	4b4b      	ldr	r3, [pc, #300]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005218:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800521c:	0c1b      	lsrs	r3, r3, #16
 800521e:	f003 0303 	and.w	r3, r3, #3
 8005222:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005224:	4b47      	ldr	r3, [pc, #284]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005226:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800522a:	0f1b      	lsrs	r3, r3, #28
 800522c:	f003 0307 	and.w	r3, r3, #7
 8005230:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	019a      	lsls	r2, r3, #6
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	041b      	lsls	r3, r3, #16
 800523c:	431a      	orrs	r2, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	68db      	ldr	r3, [r3, #12]
 8005242:	061b      	lsls	r3, r3, #24
 8005244:	431a      	orrs	r2, r3
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	071b      	lsls	r3, r3, #28
 800524a:	493e      	ldr	r1, [pc, #248]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800524c:	4313      	orrs	r3, r2
 800524e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005252:	4b3c      	ldr	r3, [pc, #240]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005254:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005258:	f023 021f 	bic.w	r2, r3, #31
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005260:	3b01      	subs	r3, #1
 8005262:	4938      	ldr	r1, [pc, #224]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005264:	4313      	orrs	r3, r2
 8005266:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005272:	2b00      	cmp	r3, #0
 8005274:	d01d      	beq.n	80052b2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005276:	4b33      	ldr	r3, [pc, #204]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005278:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800527c:	0e1b      	lsrs	r3, r3, #24
 800527e:	f003 030f 	and.w	r3, r3, #15
 8005282:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005284:	4b2f      	ldr	r3, [pc, #188]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005286:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800528a:	0f1b      	lsrs	r3, r3, #28
 800528c:	f003 0307 	and.w	r3, r3, #7
 8005290:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	019a      	lsls	r2, r3, #6
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	041b      	lsls	r3, r3, #16
 800529e:	431a      	orrs	r2, r3
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	061b      	lsls	r3, r3, #24
 80052a4:	431a      	orrs	r2, r3
 80052a6:	68fb      	ldr	r3, [r7, #12]
 80052a8:	071b      	lsls	r3, r3, #28
 80052aa:	4926      	ldr	r1, [pc, #152]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d011      	beq.n	80052e2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	019a      	lsls	r2, r3, #6
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	041b      	lsls	r3, r3, #16
 80052ca:	431a      	orrs	r2, r3
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	68db      	ldr	r3, [r3, #12]
 80052d0:	061b      	lsls	r3, r3, #24
 80052d2:	431a      	orrs	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	689b      	ldr	r3, [r3, #8]
 80052d8:	071b      	lsls	r3, r3, #28
 80052da:	491a      	ldr	r1, [pc, #104]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052dc:	4313      	orrs	r3, r2
 80052de:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80052e2:	4b18      	ldr	r3, [pc, #96]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	4a17      	ldr	r2, [pc, #92]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80052e8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80052ec:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052ee:	f7fc fd0f 	bl	8001d10 <HAL_GetTick>
 80052f2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80052f4:	e008      	b.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80052f6:	f7fc fd0b 	bl	8001d10 <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	2b64      	cmp	r3, #100	; 0x64
 8005302:	d901      	bls.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e0d8      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005308:	4b0e      	ldr	r3, [pc, #56]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d0f0      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	2b01      	cmp	r3, #1
 8005318:	f040 80ce 	bne.w	80054b8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800531c:	4b09      	ldr	r3, [pc, #36]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	4a08      	ldr	r2, [pc, #32]	; (8005344 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005322:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005326:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005328:	f7fc fcf2 	bl	8001d10 <HAL_GetTick>
 800532c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800532e:	e00b      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005330:	f7fc fcee 	bl	8001d10 <HAL_GetTick>
 8005334:	4602      	mov	r2, r0
 8005336:	697b      	ldr	r3, [r7, #20]
 8005338:	1ad3      	subs	r3, r2, r3
 800533a:	2b64      	cmp	r3, #100	; 0x64
 800533c:	d904      	bls.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800533e:	2303      	movs	r3, #3
 8005340:	e0bb      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005342:	bf00      	nop
 8005344:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005348:	4b5e      	ldr	r3, [pc, #376]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005350:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005354:	d0ec      	beq.n	8005330 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800535e:	2b00      	cmp	r3, #0
 8005360:	d003      	beq.n	800536a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005366:	2b00      	cmp	r3, #0
 8005368:	d009      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005372:	2b00      	cmp	r3, #0
 8005374:	d02e      	beq.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537a:	2b00      	cmp	r3, #0
 800537c:	d12a      	bne.n	80053d4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800537e:	4b51      	ldr	r3, [pc, #324]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005380:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005384:	0c1b      	lsrs	r3, r3, #16
 8005386:	f003 0303 	and.w	r3, r3, #3
 800538a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800538c:	4b4d      	ldr	r3, [pc, #308]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800538e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005392:	0f1b      	lsrs	r3, r3, #28
 8005394:	f003 0307 	and.w	r3, r3, #7
 8005398:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	019a      	lsls	r2, r3, #6
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	041b      	lsls	r3, r3, #16
 80053a4:	431a      	orrs	r2, r3
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	699b      	ldr	r3, [r3, #24]
 80053aa:	061b      	lsls	r3, r3, #24
 80053ac:	431a      	orrs	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	071b      	lsls	r3, r3, #28
 80053b2:	4944      	ldr	r1, [pc, #272]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053b4:	4313      	orrs	r3, r2
 80053b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80053ba:	4b42      	ldr	r3, [pc, #264]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80053c0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053c8:	3b01      	subs	r3, #1
 80053ca:	021b      	lsls	r3, r3, #8
 80053cc:	493d      	ldr	r1, [pc, #244]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053ce:	4313      	orrs	r3, r2
 80053d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d022      	beq.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053e8:	d11d      	bne.n	8005426 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80053ea:	4b36      	ldr	r3, [pc, #216]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053f0:	0e1b      	lsrs	r3, r3, #24
 80053f2:	f003 030f 	and.w	r3, r3, #15
 80053f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80053f8:	4b32      	ldr	r3, [pc, #200]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80053fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053fe:	0f1b      	lsrs	r3, r3, #28
 8005400:	f003 0307 	and.w	r3, r3, #7
 8005404:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	695b      	ldr	r3, [r3, #20]
 800540a:	019a      	lsls	r2, r3, #6
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	6a1b      	ldr	r3, [r3, #32]
 8005410:	041b      	lsls	r3, r3, #16
 8005412:	431a      	orrs	r2, r3
 8005414:	693b      	ldr	r3, [r7, #16]
 8005416:	061b      	lsls	r3, r3, #24
 8005418:	431a      	orrs	r2, r3
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	071b      	lsls	r3, r3, #28
 800541e:	4929      	ldr	r1, [pc, #164]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005420:	4313      	orrs	r3, r2
 8005422:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	f003 0308 	and.w	r3, r3, #8
 800542e:	2b00      	cmp	r3, #0
 8005430:	d028      	beq.n	8005484 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005432:	4b24      	ldr	r3, [pc, #144]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005434:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005438:	0e1b      	lsrs	r3, r3, #24
 800543a:	f003 030f 	and.w	r3, r3, #15
 800543e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005440:	4b20      	ldr	r3, [pc, #128]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005442:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005446:	0c1b      	lsrs	r3, r3, #16
 8005448:	f003 0303 	and.w	r3, r3, #3
 800544c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	019a      	lsls	r2, r3, #6
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	041b      	lsls	r3, r3, #16
 8005458:	431a      	orrs	r2, r3
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	061b      	lsls	r3, r3, #24
 800545e:	431a      	orrs	r2, r3
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	69db      	ldr	r3, [r3, #28]
 8005464:	071b      	lsls	r3, r3, #28
 8005466:	4917      	ldr	r1, [pc, #92]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005468:	4313      	orrs	r3, r2
 800546a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800546e:	4b15      	ldr	r3, [pc, #84]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005470:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005474:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547c:	4911      	ldr	r1, [pc, #68]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800547e:	4313      	orrs	r3, r2
 8005480:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005484:	4b0f      	ldr	r3, [pc, #60]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	4a0e      	ldr	r2, [pc, #56]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800548a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800548e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005490:	f7fc fc3e 	bl	8001d10 <HAL_GetTick>
 8005494:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005496:	e008      	b.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005498:	f7fc fc3a 	bl	8001d10 <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	697b      	ldr	r3, [r7, #20]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	2b64      	cmp	r3, #100	; 0x64
 80054a4:	d901      	bls.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e007      	b.n	80054ba <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80054aa:	4b06      	ldr	r3, [pc, #24]	; (80054c4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80054b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80054b6:	d1ef      	bne.n	8005498 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80054b8:	2300      	movs	r3, #0
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3720      	adds	r7, #32
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	40023800 	.word	0x40023800

080054c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80054c8:	b580      	push	{r7, lr}
 80054ca:	b082      	sub	sp, #8
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80054d6:	2301      	movs	r3, #1
 80054d8:	e049      	b.n	800556e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d106      	bne.n	80054f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2200      	movs	r2, #0
 80054ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80054ee:	6878      	ldr	r0, [r7, #4]
 80054f0:	f7fc fa66 	bl	80019c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2202      	movs	r2, #2
 80054f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	3304      	adds	r3, #4
 8005504:	4619      	mov	r1, r3
 8005506:	4610      	mov	r0, r2
 8005508:	f000 fd30 	bl	8005f6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2201      	movs	r2, #1
 8005518:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2201      	movs	r2, #1
 8005520:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2201      	movs	r2, #1
 8005528:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2201      	movs	r2, #1
 8005530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	2201      	movs	r2, #1
 8005538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	2201      	movs	r2, #1
 8005540:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2201      	movs	r2, #1
 8005558:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2201      	movs	r2, #1
 8005560:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	2201      	movs	r2, #1
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800556c:	2300      	movs	r3, #0
}
 800556e:	4618      	mov	r0, r3
 8005570:	3708      	adds	r7, #8
 8005572:	46bd      	mov	sp, r7
 8005574:	bd80      	pop	{r7, pc}
	...

08005578 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005578:	b480      	push	{r7}
 800557a:	b085      	sub	sp, #20
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005586:	b2db      	uxtb	r3, r3
 8005588:	2b01      	cmp	r3, #1
 800558a:	d001      	beq.n	8005590 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e054      	b.n	800563a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2202      	movs	r2, #2
 8005594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	68da      	ldr	r2, [r3, #12]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f042 0201 	orr.w	r2, r2, #1
 80055a6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	4a26      	ldr	r2, [pc, #152]	; (8005648 <HAL_TIM_Base_Start_IT+0xd0>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	d022      	beq.n	80055f8 <HAL_TIM_Base_Start_IT+0x80>
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055ba:	d01d      	beq.n	80055f8 <HAL_TIM_Base_Start_IT+0x80>
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	4a22      	ldr	r2, [pc, #136]	; (800564c <HAL_TIM_Base_Start_IT+0xd4>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d018      	beq.n	80055f8 <HAL_TIM_Base_Start_IT+0x80>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	4a21      	ldr	r2, [pc, #132]	; (8005650 <HAL_TIM_Base_Start_IT+0xd8>)
 80055cc:	4293      	cmp	r3, r2
 80055ce:	d013      	beq.n	80055f8 <HAL_TIM_Base_Start_IT+0x80>
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	4a1f      	ldr	r2, [pc, #124]	; (8005654 <HAL_TIM_Base_Start_IT+0xdc>)
 80055d6:	4293      	cmp	r3, r2
 80055d8:	d00e      	beq.n	80055f8 <HAL_TIM_Base_Start_IT+0x80>
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	4a1e      	ldr	r2, [pc, #120]	; (8005658 <HAL_TIM_Base_Start_IT+0xe0>)
 80055e0:	4293      	cmp	r3, r2
 80055e2:	d009      	beq.n	80055f8 <HAL_TIM_Base_Start_IT+0x80>
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4a1c      	ldr	r2, [pc, #112]	; (800565c <HAL_TIM_Base_Start_IT+0xe4>)
 80055ea:	4293      	cmp	r3, r2
 80055ec:	d004      	beq.n	80055f8 <HAL_TIM_Base_Start_IT+0x80>
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	4a1b      	ldr	r2, [pc, #108]	; (8005660 <HAL_TIM_Base_Start_IT+0xe8>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d115      	bne.n	8005624 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	689a      	ldr	r2, [r3, #8]
 80055fe:	4b19      	ldr	r3, [pc, #100]	; (8005664 <HAL_TIM_Base_Start_IT+0xec>)
 8005600:	4013      	ands	r3, r2
 8005602:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2b06      	cmp	r3, #6
 8005608:	d015      	beq.n	8005636 <HAL_TIM_Base_Start_IT+0xbe>
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005610:	d011      	beq.n	8005636 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f042 0201 	orr.w	r2, r2, #1
 8005620:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005622:	e008      	b.n	8005636 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	681a      	ldr	r2, [r3, #0]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f042 0201 	orr.w	r2, r2, #1
 8005632:	601a      	str	r2, [r3, #0]
 8005634:	e000      	b.n	8005638 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005636:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	3714      	adds	r7, #20
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	40010000 	.word	0x40010000
 800564c:	40000400 	.word	0x40000400
 8005650:	40000800 	.word	0x40000800
 8005654:	40000c00 	.word	0x40000c00
 8005658:	40010400 	.word	0x40010400
 800565c:	40014000 	.word	0x40014000
 8005660:	40001800 	.word	0x40001800
 8005664:	00010007 	.word	0x00010007

08005668 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b082      	sub	sp, #8
 800566c:	af00      	add	r7, sp, #0
 800566e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d101      	bne.n	800567a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005676:	2301      	movs	r3, #1
 8005678:	e049      	b.n	800570e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005680:	b2db      	uxtb	r3, r3
 8005682:	2b00      	cmp	r3, #0
 8005684:	d106      	bne.n	8005694 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f841 	bl	8005716 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2202      	movs	r2, #2
 8005698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681a      	ldr	r2, [r3, #0]
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	3304      	adds	r3, #4
 80056a4:	4619      	mov	r1, r3
 80056a6:	4610      	mov	r0, r2
 80056a8:	f000 fc60 	bl	8005f6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2201      	movs	r2, #1
 80056b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2201      	movs	r2, #1
 80056c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2201      	movs	r2, #1
 80056d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2201      	movs	r2, #1
 80056f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2201      	movs	r2, #1
 8005700:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	2201      	movs	r2, #1
 8005708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800570c:	2300      	movs	r3, #0
}
 800570e:	4618      	mov	r0, r3
 8005710:	3708      	adds	r7, #8
 8005712:	46bd      	mov	sp, r7
 8005714:	bd80      	pop	{r7, pc}

08005716 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005716:	b480      	push	{r7}
 8005718:	b083      	sub	sp, #12
 800571a:	af00      	add	r7, sp, #0
 800571c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800571e:	bf00      	nop
 8005720:	370c      	adds	r7, #12
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr
	...

0800572c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800572c:	b580      	push	{r7, lr}
 800572e:	b084      	sub	sp, #16
 8005730:	af00      	add	r7, sp, #0
 8005732:	6078      	str	r0, [r7, #4]
 8005734:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d109      	bne.n	8005750 <HAL_TIM_PWM_Start+0x24>
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005742:	b2db      	uxtb	r3, r3
 8005744:	2b01      	cmp	r3, #1
 8005746:	bf14      	ite	ne
 8005748:	2301      	movne	r3, #1
 800574a:	2300      	moveq	r3, #0
 800574c:	b2db      	uxtb	r3, r3
 800574e:	e03c      	b.n	80057ca <HAL_TIM_PWM_Start+0x9e>
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	2b04      	cmp	r3, #4
 8005754:	d109      	bne.n	800576a <HAL_TIM_PWM_Start+0x3e>
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800575c:	b2db      	uxtb	r3, r3
 800575e:	2b01      	cmp	r3, #1
 8005760:	bf14      	ite	ne
 8005762:	2301      	movne	r3, #1
 8005764:	2300      	moveq	r3, #0
 8005766:	b2db      	uxtb	r3, r3
 8005768:	e02f      	b.n	80057ca <HAL_TIM_PWM_Start+0x9e>
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	2b08      	cmp	r3, #8
 800576e:	d109      	bne.n	8005784 <HAL_TIM_PWM_Start+0x58>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005776:	b2db      	uxtb	r3, r3
 8005778:	2b01      	cmp	r3, #1
 800577a:	bf14      	ite	ne
 800577c:	2301      	movne	r3, #1
 800577e:	2300      	moveq	r3, #0
 8005780:	b2db      	uxtb	r3, r3
 8005782:	e022      	b.n	80057ca <HAL_TIM_PWM_Start+0x9e>
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	2b0c      	cmp	r3, #12
 8005788:	d109      	bne.n	800579e <HAL_TIM_PWM_Start+0x72>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005790:	b2db      	uxtb	r3, r3
 8005792:	2b01      	cmp	r3, #1
 8005794:	bf14      	ite	ne
 8005796:	2301      	movne	r3, #1
 8005798:	2300      	moveq	r3, #0
 800579a:	b2db      	uxtb	r3, r3
 800579c:	e015      	b.n	80057ca <HAL_TIM_PWM_Start+0x9e>
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	2b10      	cmp	r3, #16
 80057a2:	d109      	bne.n	80057b8 <HAL_TIM_PWM_Start+0x8c>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80057aa:	b2db      	uxtb	r3, r3
 80057ac:	2b01      	cmp	r3, #1
 80057ae:	bf14      	ite	ne
 80057b0:	2301      	movne	r3, #1
 80057b2:	2300      	moveq	r3, #0
 80057b4:	b2db      	uxtb	r3, r3
 80057b6:	e008      	b.n	80057ca <HAL_TIM_PWM_Start+0x9e>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80057be:	b2db      	uxtb	r3, r3
 80057c0:	2b01      	cmp	r3, #1
 80057c2:	bf14      	ite	ne
 80057c4:	2301      	movne	r3, #1
 80057c6:	2300      	moveq	r3, #0
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d001      	beq.n	80057d2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80057ce:	2301      	movs	r3, #1
 80057d0:	e092      	b.n	80058f8 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d104      	bne.n	80057e2 <HAL_TIM_PWM_Start+0xb6>
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2202      	movs	r2, #2
 80057dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057e0:	e023      	b.n	800582a <HAL_TIM_PWM_Start+0xfe>
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	2b04      	cmp	r3, #4
 80057e6:	d104      	bne.n	80057f2 <HAL_TIM_PWM_Start+0xc6>
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2202      	movs	r2, #2
 80057ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057f0:	e01b      	b.n	800582a <HAL_TIM_PWM_Start+0xfe>
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	2b08      	cmp	r3, #8
 80057f6:	d104      	bne.n	8005802 <HAL_TIM_PWM_Start+0xd6>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	2202      	movs	r2, #2
 80057fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005800:	e013      	b.n	800582a <HAL_TIM_PWM_Start+0xfe>
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	2b0c      	cmp	r3, #12
 8005806:	d104      	bne.n	8005812 <HAL_TIM_PWM_Start+0xe6>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2202      	movs	r2, #2
 800580c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005810:	e00b      	b.n	800582a <HAL_TIM_PWM_Start+0xfe>
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	2b10      	cmp	r3, #16
 8005816:	d104      	bne.n	8005822 <HAL_TIM_PWM_Start+0xf6>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2202      	movs	r2, #2
 800581c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005820:	e003      	b.n	800582a <HAL_TIM_PWM_Start+0xfe>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	2202      	movs	r2, #2
 8005826:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	2201      	movs	r2, #1
 8005830:	6839      	ldr	r1, [r7, #0]
 8005832:	4618      	mov	r0, r3
 8005834:	f000 ff32 	bl	800669c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	4a30      	ldr	r2, [pc, #192]	; (8005900 <HAL_TIM_PWM_Start+0x1d4>)
 800583e:	4293      	cmp	r3, r2
 8005840:	d004      	beq.n	800584c <HAL_TIM_PWM_Start+0x120>
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	4a2f      	ldr	r2, [pc, #188]	; (8005904 <HAL_TIM_PWM_Start+0x1d8>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d101      	bne.n	8005850 <HAL_TIM_PWM_Start+0x124>
 800584c:	2301      	movs	r3, #1
 800584e:	e000      	b.n	8005852 <HAL_TIM_PWM_Start+0x126>
 8005850:	2300      	movs	r3, #0
 8005852:	2b00      	cmp	r3, #0
 8005854:	d007      	beq.n	8005866 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005864:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	4a25      	ldr	r2, [pc, #148]	; (8005900 <HAL_TIM_PWM_Start+0x1d4>)
 800586c:	4293      	cmp	r3, r2
 800586e:	d022      	beq.n	80058b6 <HAL_TIM_PWM_Start+0x18a>
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005878:	d01d      	beq.n	80058b6 <HAL_TIM_PWM_Start+0x18a>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a22      	ldr	r2, [pc, #136]	; (8005908 <HAL_TIM_PWM_Start+0x1dc>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d018      	beq.n	80058b6 <HAL_TIM_PWM_Start+0x18a>
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4a20      	ldr	r2, [pc, #128]	; (800590c <HAL_TIM_PWM_Start+0x1e0>)
 800588a:	4293      	cmp	r3, r2
 800588c:	d013      	beq.n	80058b6 <HAL_TIM_PWM_Start+0x18a>
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4a1f      	ldr	r2, [pc, #124]	; (8005910 <HAL_TIM_PWM_Start+0x1e4>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d00e      	beq.n	80058b6 <HAL_TIM_PWM_Start+0x18a>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	4a19      	ldr	r2, [pc, #100]	; (8005904 <HAL_TIM_PWM_Start+0x1d8>)
 800589e:	4293      	cmp	r3, r2
 80058a0:	d009      	beq.n	80058b6 <HAL_TIM_PWM_Start+0x18a>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	4a1b      	ldr	r2, [pc, #108]	; (8005914 <HAL_TIM_PWM_Start+0x1e8>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d004      	beq.n	80058b6 <HAL_TIM_PWM_Start+0x18a>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a19      	ldr	r2, [pc, #100]	; (8005918 <HAL_TIM_PWM_Start+0x1ec>)
 80058b2:	4293      	cmp	r3, r2
 80058b4:	d115      	bne.n	80058e2 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	689a      	ldr	r2, [r3, #8]
 80058bc:	4b17      	ldr	r3, [pc, #92]	; (800591c <HAL_TIM_PWM_Start+0x1f0>)
 80058be:	4013      	ands	r3, r2
 80058c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2b06      	cmp	r3, #6
 80058c6:	d015      	beq.n	80058f4 <HAL_TIM_PWM_Start+0x1c8>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058ce:	d011      	beq.n	80058f4 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	681a      	ldr	r2, [r3, #0]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f042 0201 	orr.w	r2, r2, #1
 80058de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058e0:	e008      	b.n	80058f4 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f042 0201 	orr.w	r2, r2, #1
 80058f0:	601a      	str	r2, [r3, #0]
 80058f2:	e000      	b.n	80058f6 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80058f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80058f6:	2300      	movs	r3, #0
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	40010000 	.word	0x40010000
 8005904:	40010400 	.word	0x40010400
 8005908:	40000400 	.word	0x40000400
 800590c:	40000800 	.word	0x40000800
 8005910:	40000c00 	.word	0x40000c00
 8005914:	40014000 	.word	0x40014000
 8005918:	40001800 	.word	0x40001800
 800591c:	00010007 	.word	0x00010007

08005920 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005920:	b580      	push	{r7, lr}
 8005922:	b082      	sub	sp, #8
 8005924:	af00      	add	r7, sp, #0
 8005926:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	f003 0302 	and.w	r3, r3, #2
 8005932:	2b02      	cmp	r3, #2
 8005934:	d122      	bne.n	800597c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68db      	ldr	r3, [r3, #12]
 800593c:	f003 0302 	and.w	r3, r3, #2
 8005940:	2b02      	cmp	r3, #2
 8005942:	d11b      	bne.n	800597c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f06f 0202 	mvn.w	r2, #2
 800594c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	2201      	movs	r2, #1
 8005952:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	f003 0303 	and.w	r3, r3, #3
 800595e:	2b00      	cmp	r3, #0
 8005960:	d003      	beq.n	800596a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005962:	6878      	ldr	r0, [r7, #4]
 8005964:	f000 fae4 	bl	8005f30 <HAL_TIM_IC_CaptureCallback>
 8005968:	e005      	b.n	8005976 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800596a:	6878      	ldr	r0, [r7, #4]
 800596c:	f000 fad6 	bl	8005f1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 fae7 	bl	8005f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	f003 0304 	and.w	r3, r3, #4
 8005986:	2b04      	cmp	r3, #4
 8005988:	d122      	bne.n	80059d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	f003 0304 	and.w	r3, r3, #4
 8005994:	2b04      	cmp	r3, #4
 8005996:	d11b      	bne.n	80059d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f06f 0204 	mvn.w	r2, #4
 80059a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2202      	movs	r2, #2
 80059a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d003      	beq.n	80059be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 faba 	bl	8005f30 <HAL_TIM_IC_CaptureCallback>
 80059bc:	e005      	b.n	80059ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80059be:	6878      	ldr	r0, [r7, #4]
 80059c0:	f000 faac 	bl	8005f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f000 fabd 	bl	8005f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	691b      	ldr	r3, [r3, #16]
 80059d6:	f003 0308 	and.w	r3, r3, #8
 80059da:	2b08      	cmp	r3, #8
 80059dc:	d122      	bne.n	8005a24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	68db      	ldr	r3, [r3, #12]
 80059e4:	f003 0308 	and.w	r3, r3, #8
 80059e8:	2b08      	cmp	r3, #8
 80059ea:	d11b      	bne.n	8005a24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f06f 0208 	mvn.w	r2, #8
 80059f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2204      	movs	r2, #4
 80059fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	69db      	ldr	r3, [r3, #28]
 8005a02:	f003 0303 	and.w	r3, r3, #3
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d003      	beq.n	8005a12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	f000 fa90 	bl	8005f30 <HAL_TIM_IC_CaptureCallback>
 8005a10:	e005      	b.n	8005a1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a12:	6878      	ldr	r0, [r7, #4]
 8005a14:	f000 fa82 	bl	8005f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a18:	6878      	ldr	r0, [r7, #4]
 8005a1a:	f000 fa93 	bl	8005f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2200      	movs	r2, #0
 8005a22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	691b      	ldr	r3, [r3, #16]
 8005a2a:	f003 0310 	and.w	r3, r3, #16
 8005a2e:	2b10      	cmp	r3, #16
 8005a30:	d122      	bne.n	8005a78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	68db      	ldr	r3, [r3, #12]
 8005a38:	f003 0310 	and.w	r3, r3, #16
 8005a3c:	2b10      	cmp	r3, #16
 8005a3e:	d11b      	bne.n	8005a78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f06f 0210 	mvn.w	r2, #16
 8005a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2208      	movs	r2, #8
 8005a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	69db      	ldr	r3, [r3, #28]
 8005a56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d003      	beq.n	8005a66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a5e:	6878      	ldr	r0, [r7, #4]
 8005a60:	f000 fa66 	bl	8005f30 <HAL_TIM_IC_CaptureCallback>
 8005a64:	e005      	b.n	8005a72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f000 fa58 	bl	8005f1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 fa69 	bl	8005f44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	691b      	ldr	r3, [r3, #16]
 8005a7e:	f003 0301 	and.w	r3, r3, #1
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d10e      	bne.n	8005aa4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	68db      	ldr	r3, [r3, #12]
 8005a8c:	f003 0301 	and.w	r3, r3, #1
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d107      	bne.n	8005aa4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f06f 0201 	mvn.w	r2, #1
 8005a9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f7fb fa90 	bl	8000fc4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	691b      	ldr	r3, [r3, #16]
 8005aaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aae:	2b80      	cmp	r3, #128	; 0x80
 8005ab0:	d10e      	bne.n	8005ad0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68db      	ldr	r3, [r3, #12]
 8005ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005abc:	2b80      	cmp	r3, #128	; 0x80
 8005abe:	d107      	bne.n	8005ad0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ac8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f000 fea4 	bl	8006818 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ada:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ade:	d10e      	bne.n	8005afe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aea:	2b80      	cmp	r3, #128	; 0x80
 8005aec:	d107      	bne.n	8005afe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005af6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 fe97 	bl	800682c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b08:	2b40      	cmp	r3, #64	; 0x40
 8005b0a:	d10e      	bne.n	8005b2a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	68db      	ldr	r3, [r3, #12]
 8005b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b16:	2b40      	cmp	r3, #64	; 0x40
 8005b18:	d107      	bne.n	8005b2a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005b22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005b24:	6878      	ldr	r0, [r7, #4]
 8005b26:	f000 fa17 	bl	8005f58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	691b      	ldr	r3, [r3, #16]
 8005b30:	f003 0320 	and.w	r3, r3, #32
 8005b34:	2b20      	cmp	r3, #32
 8005b36:	d10e      	bne.n	8005b56 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	68db      	ldr	r3, [r3, #12]
 8005b3e:	f003 0320 	and.w	r3, r3, #32
 8005b42:	2b20      	cmp	r3, #32
 8005b44:	d107      	bne.n	8005b56 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f06f 0220 	mvn.w	r2, #32
 8005b4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 fe57 	bl	8006804 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005b56:	bf00      	nop
 8005b58:	3708      	adds	r7, #8
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	bd80      	pop	{r7, pc}
	...

08005b60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005b60:	b580      	push	{r7, lr}
 8005b62:	b086      	sub	sp, #24
 8005b64:	af00      	add	r7, sp, #0
 8005b66:	60f8      	str	r0, [r7, #12]
 8005b68:	60b9      	str	r1, [r7, #8]
 8005b6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b76:	2b01      	cmp	r3, #1
 8005b78:	d101      	bne.n	8005b7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005b7a:	2302      	movs	r3, #2
 8005b7c:	e0ff      	b.n	8005d7e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	2201      	movs	r2, #1
 8005b82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	2b14      	cmp	r3, #20
 8005b8a:	f200 80f0 	bhi.w	8005d6e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005b8e:	a201      	add	r2, pc, #4	; (adr r2, 8005b94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b94:	08005be9 	.word	0x08005be9
 8005b98:	08005d6f 	.word	0x08005d6f
 8005b9c:	08005d6f 	.word	0x08005d6f
 8005ba0:	08005d6f 	.word	0x08005d6f
 8005ba4:	08005c29 	.word	0x08005c29
 8005ba8:	08005d6f 	.word	0x08005d6f
 8005bac:	08005d6f 	.word	0x08005d6f
 8005bb0:	08005d6f 	.word	0x08005d6f
 8005bb4:	08005c6b 	.word	0x08005c6b
 8005bb8:	08005d6f 	.word	0x08005d6f
 8005bbc:	08005d6f 	.word	0x08005d6f
 8005bc0:	08005d6f 	.word	0x08005d6f
 8005bc4:	08005cab 	.word	0x08005cab
 8005bc8:	08005d6f 	.word	0x08005d6f
 8005bcc:	08005d6f 	.word	0x08005d6f
 8005bd0:	08005d6f 	.word	0x08005d6f
 8005bd4:	08005ced 	.word	0x08005ced
 8005bd8:	08005d6f 	.word	0x08005d6f
 8005bdc:	08005d6f 	.word	0x08005d6f
 8005be0:	08005d6f 	.word	0x08005d6f
 8005be4:	08005d2d 	.word	0x08005d2d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	68b9      	ldr	r1, [r7, #8]
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f000 fa5c 	bl	80060ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	699a      	ldr	r2, [r3, #24]
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f042 0208 	orr.w	r2, r2, #8
 8005c02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	699a      	ldr	r2, [r3, #24]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f022 0204 	bic.w	r2, r2, #4
 8005c12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	6999      	ldr	r1, [r3, #24]
 8005c1a:	68bb      	ldr	r3, [r7, #8]
 8005c1c:	691a      	ldr	r2, [r3, #16]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	430a      	orrs	r2, r1
 8005c24:	619a      	str	r2, [r3, #24]
      break;
 8005c26:	e0a5      	b.n	8005d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	68b9      	ldr	r1, [r7, #8]
 8005c2e:	4618      	mov	r0, r3
 8005c30:	f000 faae 	bl	8006190 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	699a      	ldr	r2, [r3, #24]
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c42:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	699a      	ldr	r2, [r3, #24]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c52:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	6999      	ldr	r1, [r3, #24]
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	691b      	ldr	r3, [r3, #16]
 8005c5e:	021a      	lsls	r2, r3, #8
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	430a      	orrs	r2, r1
 8005c66:	619a      	str	r2, [r3, #24]
      break;
 8005c68:	e084      	b.n	8005d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68b9      	ldr	r1, [r7, #8]
 8005c70:	4618      	mov	r0, r3
 8005c72:	f000 fb05 	bl	8006280 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	69da      	ldr	r2, [r3, #28]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f042 0208 	orr.w	r2, r2, #8
 8005c84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	69da      	ldr	r2, [r3, #28]
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f022 0204 	bic.w	r2, r2, #4
 8005c94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	69d9      	ldr	r1, [r3, #28]
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	691a      	ldr	r2, [r3, #16]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	430a      	orrs	r2, r1
 8005ca6:	61da      	str	r2, [r3, #28]
      break;
 8005ca8:	e064      	b.n	8005d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	68b9      	ldr	r1, [r7, #8]
 8005cb0:	4618      	mov	r0, r3
 8005cb2:	f000 fb5b 	bl	800636c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	69da      	ldr	r2, [r3, #28]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cc4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	69da      	ldr	r2, [r3, #28]
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cd4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	69d9      	ldr	r1, [r3, #28]
 8005cdc:	68bb      	ldr	r3, [r7, #8]
 8005cde:	691b      	ldr	r3, [r3, #16]
 8005ce0:	021a      	lsls	r2, r3, #8
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	430a      	orrs	r2, r1
 8005ce8:	61da      	str	r2, [r3, #28]
      break;
 8005cea:	e043      	b.n	8005d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	68b9      	ldr	r1, [r7, #8]
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f000 fb92 	bl	800641c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f042 0208 	orr.w	r2, r2, #8
 8005d06:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	f022 0204 	bic.w	r2, r2, #4
 8005d16:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005d1e:	68bb      	ldr	r3, [r7, #8]
 8005d20:	691a      	ldr	r2, [r3, #16]
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	430a      	orrs	r2, r1
 8005d28:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005d2a:	e023      	b.n	8005d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	68b9      	ldr	r1, [r7, #8]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 fbc4 	bl	80064c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d46:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d56:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	691b      	ldr	r3, [r3, #16]
 8005d62:	021a      	lsls	r2, r3, #8
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	430a      	orrs	r2, r1
 8005d6a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005d6c:	e002      	b.n	8005d74 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005d6e:	2301      	movs	r3, #1
 8005d70:	75fb      	strb	r3, [r7, #23]
      break;
 8005d72:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	2200      	movs	r2, #0
 8005d78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d7e:	4618      	mov	r0, r3
 8005d80:	3718      	adds	r7, #24
 8005d82:	46bd      	mov	sp, r7
 8005d84:	bd80      	pop	{r7, pc}
 8005d86:	bf00      	nop

08005d88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d88:	b580      	push	{r7, lr}
 8005d8a:	b084      	sub	sp, #16
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d92:	2300      	movs	r3, #0
 8005d94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d101      	bne.n	8005da4 <HAL_TIM_ConfigClockSource+0x1c>
 8005da0:	2302      	movs	r3, #2
 8005da2:	e0b4      	b.n	8005f0e <HAL_TIM_ConfigClockSource+0x186>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2202      	movs	r2, #2
 8005db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005dbc:	68ba      	ldr	r2, [r7, #8]
 8005dbe:	4b56      	ldr	r3, [pc, #344]	; (8005f18 <HAL_TIM_ConfigClockSource+0x190>)
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dc4:	68bb      	ldr	r3, [r7, #8]
 8005dc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68ba      	ldr	r2, [r7, #8]
 8005dd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005dd4:	683b      	ldr	r3, [r7, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ddc:	d03e      	beq.n	8005e5c <HAL_TIM_ConfigClockSource+0xd4>
 8005dde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005de2:	f200 8087 	bhi.w	8005ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8005de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dea:	f000 8086 	beq.w	8005efa <HAL_TIM_ConfigClockSource+0x172>
 8005dee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005df2:	d87f      	bhi.n	8005ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8005df4:	2b70      	cmp	r3, #112	; 0x70
 8005df6:	d01a      	beq.n	8005e2e <HAL_TIM_ConfigClockSource+0xa6>
 8005df8:	2b70      	cmp	r3, #112	; 0x70
 8005dfa:	d87b      	bhi.n	8005ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8005dfc:	2b60      	cmp	r3, #96	; 0x60
 8005dfe:	d050      	beq.n	8005ea2 <HAL_TIM_ConfigClockSource+0x11a>
 8005e00:	2b60      	cmp	r3, #96	; 0x60
 8005e02:	d877      	bhi.n	8005ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8005e04:	2b50      	cmp	r3, #80	; 0x50
 8005e06:	d03c      	beq.n	8005e82 <HAL_TIM_ConfigClockSource+0xfa>
 8005e08:	2b50      	cmp	r3, #80	; 0x50
 8005e0a:	d873      	bhi.n	8005ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8005e0c:	2b40      	cmp	r3, #64	; 0x40
 8005e0e:	d058      	beq.n	8005ec2 <HAL_TIM_ConfigClockSource+0x13a>
 8005e10:	2b40      	cmp	r3, #64	; 0x40
 8005e12:	d86f      	bhi.n	8005ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8005e14:	2b30      	cmp	r3, #48	; 0x30
 8005e16:	d064      	beq.n	8005ee2 <HAL_TIM_ConfigClockSource+0x15a>
 8005e18:	2b30      	cmp	r3, #48	; 0x30
 8005e1a:	d86b      	bhi.n	8005ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8005e1c:	2b20      	cmp	r3, #32
 8005e1e:	d060      	beq.n	8005ee2 <HAL_TIM_ConfigClockSource+0x15a>
 8005e20:	2b20      	cmp	r3, #32
 8005e22:	d867      	bhi.n	8005ef4 <HAL_TIM_ConfigClockSource+0x16c>
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d05c      	beq.n	8005ee2 <HAL_TIM_ConfigClockSource+0x15a>
 8005e28:	2b10      	cmp	r3, #16
 8005e2a:	d05a      	beq.n	8005ee2 <HAL_TIM_ConfigClockSource+0x15a>
 8005e2c:	e062      	b.n	8005ef4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	6818      	ldr	r0, [r3, #0]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	6899      	ldr	r1, [r3, #8]
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	685a      	ldr	r2, [r3, #4]
 8005e3a:	683b      	ldr	r3, [r7, #0]
 8005e3c:	68db      	ldr	r3, [r3, #12]
 8005e3e:	f000 fc0d 	bl	800665c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e4a:	68bb      	ldr	r3, [r7, #8]
 8005e4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68ba      	ldr	r2, [r7, #8]
 8005e58:	609a      	str	r2, [r3, #8]
      break;
 8005e5a:	e04f      	b.n	8005efc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6818      	ldr	r0, [r3, #0]
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	6899      	ldr	r1, [r3, #8]
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	685a      	ldr	r2, [r3, #4]
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	68db      	ldr	r3, [r3, #12]
 8005e6c:	f000 fbf6 	bl	800665c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	689a      	ldr	r2, [r3, #8]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e7e:	609a      	str	r2, [r3, #8]
      break;
 8005e80:	e03c      	b.n	8005efc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6818      	ldr	r0, [r3, #0]
 8005e86:	683b      	ldr	r3, [r7, #0]
 8005e88:	6859      	ldr	r1, [r3, #4]
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	461a      	mov	r2, r3
 8005e90:	f000 fb6a 	bl	8006568 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2150      	movs	r1, #80	; 0x50
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f000 fbc3 	bl	8006626 <TIM_ITRx_SetConfig>
      break;
 8005ea0:	e02c      	b.n	8005efc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6818      	ldr	r0, [r3, #0]
 8005ea6:	683b      	ldr	r3, [r7, #0]
 8005ea8:	6859      	ldr	r1, [r3, #4]
 8005eaa:	683b      	ldr	r3, [r7, #0]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	461a      	mov	r2, r3
 8005eb0:	f000 fb89 	bl	80065c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	2160      	movs	r1, #96	; 0x60
 8005eba:	4618      	mov	r0, r3
 8005ebc:	f000 fbb3 	bl	8006626 <TIM_ITRx_SetConfig>
      break;
 8005ec0:	e01c      	b.n	8005efc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6818      	ldr	r0, [r3, #0]
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	6859      	ldr	r1, [r3, #4]
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	68db      	ldr	r3, [r3, #12]
 8005ece:	461a      	mov	r2, r3
 8005ed0:	f000 fb4a 	bl	8006568 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	2140      	movs	r1, #64	; 0x40
 8005eda:	4618      	mov	r0, r3
 8005edc:	f000 fba3 	bl	8006626 <TIM_ITRx_SetConfig>
      break;
 8005ee0:	e00c      	b.n	8005efc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681a      	ldr	r2, [r3, #0]
 8005ee6:	683b      	ldr	r3, [r7, #0]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4619      	mov	r1, r3
 8005eec:	4610      	mov	r0, r2
 8005eee:	f000 fb9a 	bl	8006626 <TIM_ITRx_SetConfig>
      break;
 8005ef2:	e003      	b.n	8005efc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005ef4:	2301      	movs	r3, #1
 8005ef6:	73fb      	strb	r3, [r7, #15]
      break;
 8005ef8:	e000      	b.n	8005efc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005efa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2201      	movs	r2, #1
 8005f00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	2200      	movs	r2, #0
 8005f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005f0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3710      	adds	r7, #16
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	fffeff88 	.word	0xfffeff88

08005f1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f24:	bf00      	nop
 8005f26:	370c      	adds	r7, #12
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2e:	4770      	bx	lr

08005f30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b083      	sub	sp, #12
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f38:	bf00      	nop
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f4c:	bf00      	nop
 8005f4e:	370c      	adds	r7, #12
 8005f50:	46bd      	mov	sp, r7
 8005f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f56:	4770      	bx	lr

08005f58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b083      	sub	sp, #12
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f60:	bf00      	nop
 8005f62:	370c      	adds	r7, #12
 8005f64:	46bd      	mov	sp, r7
 8005f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f6a:	4770      	bx	lr

08005f6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f6c:	b480      	push	{r7}
 8005f6e:	b085      	sub	sp, #20
 8005f70:	af00      	add	r7, sp, #0
 8005f72:	6078      	str	r0, [r7, #4]
 8005f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a40      	ldr	r2, [pc, #256]	; (8006080 <TIM_Base_SetConfig+0x114>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d013      	beq.n	8005fac <TIM_Base_SetConfig+0x40>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f8a:	d00f      	beq.n	8005fac <TIM_Base_SetConfig+0x40>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a3d      	ldr	r2, [pc, #244]	; (8006084 <TIM_Base_SetConfig+0x118>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d00b      	beq.n	8005fac <TIM_Base_SetConfig+0x40>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	4a3c      	ldr	r2, [pc, #240]	; (8006088 <TIM_Base_SetConfig+0x11c>)
 8005f98:	4293      	cmp	r3, r2
 8005f9a:	d007      	beq.n	8005fac <TIM_Base_SetConfig+0x40>
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	4a3b      	ldr	r2, [pc, #236]	; (800608c <TIM_Base_SetConfig+0x120>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d003      	beq.n	8005fac <TIM_Base_SetConfig+0x40>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a3a      	ldr	r2, [pc, #232]	; (8006090 <TIM_Base_SetConfig+0x124>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d108      	bne.n	8005fbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	68fa      	ldr	r2, [r7, #12]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a2f      	ldr	r2, [pc, #188]	; (8006080 <TIM_Base_SetConfig+0x114>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d02b      	beq.n	800601e <TIM_Base_SetConfig+0xb2>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fcc:	d027      	beq.n	800601e <TIM_Base_SetConfig+0xb2>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a2c      	ldr	r2, [pc, #176]	; (8006084 <TIM_Base_SetConfig+0x118>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d023      	beq.n	800601e <TIM_Base_SetConfig+0xb2>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a2b      	ldr	r2, [pc, #172]	; (8006088 <TIM_Base_SetConfig+0x11c>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d01f      	beq.n	800601e <TIM_Base_SetConfig+0xb2>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a2a      	ldr	r2, [pc, #168]	; (800608c <TIM_Base_SetConfig+0x120>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d01b      	beq.n	800601e <TIM_Base_SetConfig+0xb2>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a29      	ldr	r2, [pc, #164]	; (8006090 <TIM_Base_SetConfig+0x124>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d017      	beq.n	800601e <TIM_Base_SetConfig+0xb2>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	4a28      	ldr	r2, [pc, #160]	; (8006094 <TIM_Base_SetConfig+0x128>)
 8005ff2:	4293      	cmp	r3, r2
 8005ff4:	d013      	beq.n	800601e <TIM_Base_SetConfig+0xb2>
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	4a27      	ldr	r2, [pc, #156]	; (8006098 <TIM_Base_SetConfig+0x12c>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d00f      	beq.n	800601e <TIM_Base_SetConfig+0xb2>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	4a26      	ldr	r2, [pc, #152]	; (800609c <TIM_Base_SetConfig+0x130>)
 8006002:	4293      	cmp	r3, r2
 8006004:	d00b      	beq.n	800601e <TIM_Base_SetConfig+0xb2>
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	4a25      	ldr	r2, [pc, #148]	; (80060a0 <TIM_Base_SetConfig+0x134>)
 800600a:	4293      	cmp	r3, r2
 800600c:	d007      	beq.n	800601e <TIM_Base_SetConfig+0xb2>
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	4a24      	ldr	r2, [pc, #144]	; (80060a4 <TIM_Base_SetConfig+0x138>)
 8006012:	4293      	cmp	r3, r2
 8006014:	d003      	beq.n	800601e <TIM_Base_SetConfig+0xb2>
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	4a23      	ldr	r2, [pc, #140]	; (80060a8 <TIM_Base_SetConfig+0x13c>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d108      	bne.n	8006030 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006024:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	4313      	orrs	r3, r2
 800602e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	695b      	ldr	r3, [r3, #20]
 800603a:	4313      	orrs	r3, r2
 800603c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	68fa      	ldr	r2, [r7, #12]
 8006042:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	689a      	ldr	r2, [r3, #8]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	681a      	ldr	r2, [r3, #0]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	4a0a      	ldr	r2, [pc, #40]	; (8006080 <TIM_Base_SetConfig+0x114>)
 8006058:	4293      	cmp	r3, r2
 800605a:	d003      	beq.n	8006064 <TIM_Base_SetConfig+0xf8>
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	4a0c      	ldr	r2, [pc, #48]	; (8006090 <TIM_Base_SetConfig+0x124>)
 8006060:	4293      	cmp	r3, r2
 8006062:	d103      	bne.n	800606c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	691a      	ldr	r2, [r3, #16]
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2201      	movs	r2, #1
 8006070:	615a      	str	r2, [r3, #20]
}
 8006072:	bf00      	nop
 8006074:	3714      	adds	r7, #20
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	40010000 	.word	0x40010000
 8006084:	40000400 	.word	0x40000400
 8006088:	40000800 	.word	0x40000800
 800608c:	40000c00 	.word	0x40000c00
 8006090:	40010400 	.word	0x40010400
 8006094:	40014000 	.word	0x40014000
 8006098:	40014400 	.word	0x40014400
 800609c:	40014800 	.word	0x40014800
 80060a0:	40001800 	.word	0x40001800
 80060a4:	40001c00 	.word	0x40001c00
 80060a8:	40002000 	.word	0x40002000

080060ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060ac:	b480      	push	{r7}
 80060ae:	b087      	sub	sp, #28
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
 80060b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	6a1b      	ldr	r3, [r3, #32]
 80060ba:	f023 0201 	bic.w	r2, r3, #1
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a1b      	ldr	r3, [r3, #32]
 80060c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	685b      	ldr	r3, [r3, #4]
 80060cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	699b      	ldr	r3, [r3, #24]
 80060d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80060d4:	68fa      	ldr	r2, [r7, #12]
 80060d6:	4b2b      	ldr	r3, [pc, #172]	; (8006184 <TIM_OC1_SetConfig+0xd8>)
 80060d8:	4013      	ands	r3, r2
 80060da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	f023 0303 	bic.w	r3, r3, #3
 80060e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	68fa      	ldr	r2, [r7, #12]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80060ee:	697b      	ldr	r3, [r7, #20]
 80060f0:	f023 0302 	bic.w	r3, r3, #2
 80060f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	697a      	ldr	r2, [r7, #20]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	4a21      	ldr	r2, [pc, #132]	; (8006188 <TIM_OC1_SetConfig+0xdc>)
 8006104:	4293      	cmp	r3, r2
 8006106:	d003      	beq.n	8006110 <TIM_OC1_SetConfig+0x64>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	4a20      	ldr	r2, [pc, #128]	; (800618c <TIM_OC1_SetConfig+0xe0>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d10c      	bne.n	800612a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	f023 0308 	bic.w	r3, r3, #8
 8006116:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	697a      	ldr	r2, [r7, #20]
 800611e:	4313      	orrs	r3, r2
 8006120:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	f023 0304 	bic.w	r3, r3, #4
 8006128:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a16      	ldr	r2, [pc, #88]	; (8006188 <TIM_OC1_SetConfig+0xdc>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d003      	beq.n	800613a <TIM_OC1_SetConfig+0x8e>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a15      	ldr	r2, [pc, #84]	; (800618c <TIM_OC1_SetConfig+0xe0>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d111      	bne.n	800615e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006140:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006142:	693b      	ldr	r3, [r7, #16]
 8006144:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006148:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	695b      	ldr	r3, [r3, #20]
 800614e:	693a      	ldr	r2, [r7, #16]
 8006150:	4313      	orrs	r3, r2
 8006152:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	699b      	ldr	r3, [r3, #24]
 8006158:	693a      	ldr	r2, [r7, #16]
 800615a:	4313      	orrs	r3, r2
 800615c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800616a:	683b      	ldr	r3, [r7, #0]
 800616c:	685a      	ldr	r2, [r3, #4]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	697a      	ldr	r2, [r7, #20]
 8006176:	621a      	str	r2, [r3, #32]
}
 8006178:	bf00      	nop
 800617a:	371c      	adds	r7, #28
 800617c:	46bd      	mov	sp, r7
 800617e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006182:	4770      	bx	lr
 8006184:	fffeff8f 	.word	0xfffeff8f
 8006188:	40010000 	.word	0x40010000
 800618c:	40010400 	.word	0x40010400

08006190 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006190:	b480      	push	{r7}
 8006192:	b087      	sub	sp, #28
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a1b      	ldr	r3, [r3, #32]
 800619e:	f023 0210 	bic.w	r2, r3, #16
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	685b      	ldr	r3, [r3, #4]
 80061b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80061b8:	68fa      	ldr	r2, [r7, #12]
 80061ba:	4b2e      	ldr	r3, [pc, #184]	; (8006274 <TIM_OC2_SetConfig+0xe4>)
 80061bc:	4013      	ands	r3, r2
 80061be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	021b      	lsls	r3, r3, #8
 80061ce:	68fa      	ldr	r2, [r7, #12]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	f023 0320 	bic.w	r3, r3, #32
 80061da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80061dc:	683b      	ldr	r3, [r7, #0]
 80061de:	689b      	ldr	r3, [r3, #8]
 80061e0:	011b      	lsls	r3, r3, #4
 80061e2:	697a      	ldr	r2, [r7, #20]
 80061e4:	4313      	orrs	r3, r2
 80061e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	4a23      	ldr	r2, [pc, #140]	; (8006278 <TIM_OC2_SetConfig+0xe8>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d003      	beq.n	80061f8 <TIM_OC2_SetConfig+0x68>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	4a22      	ldr	r2, [pc, #136]	; (800627c <TIM_OC2_SetConfig+0xec>)
 80061f4:	4293      	cmp	r3, r2
 80061f6:	d10d      	bne.n	8006214 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80061fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	68db      	ldr	r3, [r3, #12]
 8006204:	011b      	lsls	r3, r3, #4
 8006206:	697a      	ldr	r2, [r7, #20]
 8006208:	4313      	orrs	r3, r2
 800620a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800620c:	697b      	ldr	r3, [r7, #20]
 800620e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006212:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	4a18      	ldr	r2, [pc, #96]	; (8006278 <TIM_OC2_SetConfig+0xe8>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d003      	beq.n	8006224 <TIM_OC2_SetConfig+0x94>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	4a17      	ldr	r2, [pc, #92]	; (800627c <TIM_OC2_SetConfig+0xec>)
 8006220:	4293      	cmp	r3, r2
 8006222:	d113      	bne.n	800624c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800622a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006232:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	695b      	ldr	r3, [r3, #20]
 8006238:	009b      	lsls	r3, r3, #2
 800623a:	693a      	ldr	r2, [r7, #16]
 800623c:	4313      	orrs	r3, r2
 800623e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	699b      	ldr	r3, [r3, #24]
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	693a      	ldr	r2, [r7, #16]
 8006248:	4313      	orrs	r3, r2
 800624a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	693a      	ldr	r2, [r7, #16]
 8006250:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	68fa      	ldr	r2, [r7, #12]
 8006256:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	685a      	ldr	r2, [r3, #4]
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	697a      	ldr	r2, [r7, #20]
 8006264:	621a      	str	r2, [r3, #32]
}
 8006266:	bf00      	nop
 8006268:	371c      	adds	r7, #28
 800626a:	46bd      	mov	sp, r7
 800626c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop
 8006274:	feff8fff 	.word	0xfeff8fff
 8006278:	40010000 	.word	0x40010000
 800627c:	40010400 	.word	0x40010400

08006280 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006280:	b480      	push	{r7}
 8006282:	b087      	sub	sp, #28
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a1b      	ldr	r3, [r3, #32]
 800628e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6a1b      	ldr	r3, [r3, #32]
 800629a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	685b      	ldr	r3, [r3, #4]
 80062a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	69db      	ldr	r3, [r3, #28]
 80062a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80062a8:	68fa      	ldr	r2, [r7, #12]
 80062aa:	4b2d      	ldr	r3, [pc, #180]	; (8006360 <TIM_OC3_SetConfig+0xe0>)
 80062ac:	4013      	ands	r3, r2
 80062ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	f023 0303 	bic.w	r3, r3, #3
 80062b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80062b8:	683b      	ldr	r3, [r7, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	4313      	orrs	r3, r2
 80062c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80062c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80062ca:	683b      	ldr	r3, [r7, #0]
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	021b      	lsls	r3, r3, #8
 80062d0:	697a      	ldr	r2, [r7, #20]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a22      	ldr	r2, [pc, #136]	; (8006364 <TIM_OC3_SetConfig+0xe4>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d003      	beq.n	80062e6 <TIM_OC3_SetConfig+0x66>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a21      	ldr	r2, [pc, #132]	; (8006368 <TIM_OC3_SetConfig+0xe8>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d10d      	bne.n	8006302 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80062e6:	697b      	ldr	r3, [r7, #20]
 80062e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80062ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	68db      	ldr	r3, [r3, #12]
 80062f2:	021b      	lsls	r3, r3, #8
 80062f4:	697a      	ldr	r2, [r7, #20]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006300:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a17      	ldr	r2, [pc, #92]	; (8006364 <TIM_OC3_SetConfig+0xe4>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d003      	beq.n	8006312 <TIM_OC3_SetConfig+0x92>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a16      	ldr	r2, [pc, #88]	; (8006368 <TIM_OC3_SetConfig+0xe8>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d113      	bne.n	800633a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006318:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006320:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	695b      	ldr	r3, [r3, #20]
 8006326:	011b      	lsls	r3, r3, #4
 8006328:	693a      	ldr	r2, [r7, #16]
 800632a:	4313      	orrs	r3, r2
 800632c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800632e:	683b      	ldr	r3, [r7, #0]
 8006330:	699b      	ldr	r3, [r3, #24]
 8006332:	011b      	lsls	r3, r3, #4
 8006334:	693a      	ldr	r2, [r7, #16]
 8006336:	4313      	orrs	r3, r2
 8006338:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	693a      	ldr	r2, [r7, #16]
 800633e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	68fa      	ldr	r2, [r7, #12]
 8006344:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	685a      	ldr	r2, [r3, #4]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	697a      	ldr	r2, [r7, #20]
 8006352:	621a      	str	r2, [r3, #32]
}
 8006354:	bf00      	nop
 8006356:	371c      	adds	r7, #28
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr
 8006360:	fffeff8f 	.word	0xfffeff8f
 8006364:	40010000 	.word	0x40010000
 8006368:	40010400 	.word	0x40010400

0800636c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800636c:	b480      	push	{r7}
 800636e:	b087      	sub	sp, #28
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
 8006374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6a1b      	ldr	r3, [r3, #32]
 800637a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6a1b      	ldr	r3, [r3, #32]
 8006386:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	685b      	ldr	r3, [r3, #4]
 800638c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	69db      	ldr	r3, [r3, #28]
 8006392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	4b1e      	ldr	r3, [pc, #120]	; (8006410 <TIM_OC4_SetConfig+0xa4>)
 8006398:	4013      	ands	r3, r2
 800639a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	021b      	lsls	r3, r3, #8
 80063aa:	68fa      	ldr	r2, [r7, #12]
 80063ac:	4313      	orrs	r3, r2
 80063ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80063b0:	693b      	ldr	r3, [r7, #16]
 80063b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80063b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	031b      	lsls	r3, r3, #12
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	4313      	orrs	r3, r2
 80063c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	4a13      	ldr	r2, [pc, #76]	; (8006414 <TIM_OC4_SetConfig+0xa8>)
 80063c8:	4293      	cmp	r3, r2
 80063ca:	d003      	beq.n	80063d4 <TIM_OC4_SetConfig+0x68>
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	4a12      	ldr	r2, [pc, #72]	; (8006418 <TIM_OC4_SetConfig+0xac>)
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d109      	bne.n	80063e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80063da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80063dc:	683b      	ldr	r3, [r7, #0]
 80063de:	695b      	ldr	r3, [r3, #20]
 80063e0:	019b      	lsls	r3, r3, #6
 80063e2:	697a      	ldr	r2, [r7, #20]
 80063e4:	4313      	orrs	r3, r2
 80063e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	697a      	ldr	r2, [r7, #20]
 80063ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	68fa      	ldr	r2, [r7, #12]
 80063f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80063f4:	683b      	ldr	r3, [r7, #0]
 80063f6:	685a      	ldr	r2, [r3, #4]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	693a      	ldr	r2, [r7, #16]
 8006400:	621a      	str	r2, [r3, #32]
}
 8006402:	bf00      	nop
 8006404:	371c      	adds	r7, #28
 8006406:	46bd      	mov	sp, r7
 8006408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640c:	4770      	bx	lr
 800640e:	bf00      	nop
 8006410:	feff8fff 	.word	0xfeff8fff
 8006414:	40010000 	.word	0x40010000
 8006418:	40010400 	.word	0x40010400

0800641c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800641c:	b480      	push	{r7}
 800641e:	b087      	sub	sp, #28
 8006420:	af00      	add	r7, sp, #0
 8006422:	6078      	str	r0, [r7, #4]
 8006424:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6a1b      	ldr	r3, [r3, #32]
 800642a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	6a1b      	ldr	r3, [r3, #32]
 8006436:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	685b      	ldr	r3, [r3, #4]
 800643c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006444:	68fa      	ldr	r2, [r7, #12]
 8006446:	4b1b      	ldr	r3, [pc, #108]	; (80064b4 <TIM_OC5_SetConfig+0x98>)
 8006448:	4013      	ands	r3, r2
 800644a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	68fa      	ldr	r2, [r7, #12]
 8006452:	4313      	orrs	r3, r2
 8006454:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006456:	693b      	ldr	r3, [r7, #16]
 8006458:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800645c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	041b      	lsls	r3, r3, #16
 8006464:	693a      	ldr	r2, [r7, #16]
 8006466:	4313      	orrs	r3, r2
 8006468:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	4a12      	ldr	r2, [pc, #72]	; (80064b8 <TIM_OC5_SetConfig+0x9c>)
 800646e:	4293      	cmp	r3, r2
 8006470:	d003      	beq.n	800647a <TIM_OC5_SetConfig+0x5e>
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	4a11      	ldr	r2, [pc, #68]	; (80064bc <TIM_OC5_SetConfig+0xa0>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d109      	bne.n	800648e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006480:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	695b      	ldr	r3, [r3, #20]
 8006486:	021b      	lsls	r3, r3, #8
 8006488:	697a      	ldr	r2, [r7, #20]
 800648a:	4313      	orrs	r3, r2
 800648c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	697a      	ldr	r2, [r7, #20]
 8006492:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	68fa      	ldr	r2, [r7, #12]
 8006498:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	685a      	ldr	r2, [r3, #4]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	693a      	ldr	r2, [r7, #16]
 80064a6:	621a      	str	r2, [r3, #32]
}
 80064a8:	bf00      	nop
 80064aa:	371c      	adds	r7, #28
 80064ac:	46bd      	mov	sp, r7
 80064ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b2:	4770      	bx	lr
 80064b4:	fffeff8f 	.word	0xfffeff8f
 80064b8:	40010000 	.word	0x40010000
 80064bc:	40010400 	.word	0x40010400

080064c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b087      	sub	sp, #28
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a1b      	ldr	r3, [r3, #32]
 80064ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	6a1b      	ldr	r3, [r3, #32]
 80064da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	685b      	ldr	r3, [r3, #4]
 80064e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80064e8:	68fa      	ldr	r2, [r7, #12]
 80064ea:	4b1c      	ldr	r3, [pc, #112]	; (800655c <TIM_OC6_SetConfig+0x9c>)
 80064ec:	4013      	ands	r3, r2
 80064ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064f0:	683b      	ldr	r3, [r7, #0]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	021b      	lsls	r3, r3, #8
 80064f6:	68fa      	ldr	r2, [r7, #12]
 80064f8:	4313      	orrs	r3, r2
 80064fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80064fc:	693b      	ldr	r3, [r7, #16]
 80064fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006502:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006504:	683b      	ldr	r3, [r7, #0]
 8006506:	689b      	ldr	r3, [r3, #8]
 8006508:	051b      	lsls	r3, r3, #20
 800650a:	693a      	ldr	r2, [r7, #16]
 800650c:	4313      	orrs	r3, r2
 800650e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a13      	ldr	r2, [pc, #76]	; (8006560 <TIM_OC6_SetConfig+0xa0>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d003      	beq.n	8006520 <TIM_OC6_SetConfig+0x60>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	4a12      	ldr	r2, [pc, #72]	; (8006564 <TIM_OC6_SetConfig+0xa4>)
 800651c:	4293      	cmp	r3, r2
 800651e:	d109      	bne.n	8006534 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006526:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	695b      	ldr	r3, [r3, #20]
 800652c:	029b      	lsls	r3, r3, #10
 800652e:	697a      	ldr	r2, [r7, #20]
 8006530:	4313      	orrs	r3, r2
 8006532:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	697a      	ldr	r2, [r7, #20]
 8006538:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	68fa      	ldr	r2, [r7, #12]
 800653e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	685a      	ldr	r2, [r3, #4]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	693a      	ldr	r2, [r7, #16]
 800654c:	621a      	str	r2, [r3, #32]
}
 800654e:	bf00      	nop
 8006550:	371c      	adds	r7, #28
 8006552:	46bd      	mov	sp, r7
 8006554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006558:	4770      	bx	lr
 800655a:	bf00      	nop
 800655c:	feff8fff 	.word	0xfeff8fff
 8006560:	40010000 	.word	0x40010000
 8006564:	40010400 	.word	0x40010400

08006568 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006568:	b480      	push	{r7}
 800656a:	b087      	sub	sp, #28
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6a1b      	ldr	r3, [r3, #32]
 8006578:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	6a1b      	ldr	r3, [r3, #32]
 800657e:	f023 0201 	bic.w	r2, r3, #1
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	699b      	ldr	r3, [r3, #24]
 800658a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006592:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	011b      	lsls	r3, r3, #4
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	4313      	orrs	r3, r2
 800659c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800659e:	697b      	ldr	r3, [r7, #20]
 80065a0:	f023 030a 	bic.w	r3, r3, #10
 80065a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80065a6:	697a      	ldr	r2, [r7, #20]
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	4313      	orrs	r3, r2
 80065ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	693a      	ldr	r2, [r7, #16]
 80065b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	697a      	ldr	r2, [r7, #20]
 80065b8:	621a      	str	r2, [r3, #32]
}
 80065ba:	bf00      	nop
 80065bc:	371c      	adds	r7, #28
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr

080065c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80065c6:	b480      	push	{r7}
 80065c8:	b087      	sub	sp, #28
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	60f8      	str	r0, [r7, #12]
 80065ce:	60b9      	str	r1, [r7, #8]
 80065d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	6a1b      	ldr	r3, [r3, #32]
 80065d6:	f023 0210 	bic.w	r2, r3, #16
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	699b      	ldr	r3, [r3, #24]
 80065e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6a1b      	ldr	r3, [r3, #32]
 80065e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80065f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	031b      	lsls	r3, r3, #12
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006602:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	011b      	lsls	r3, r3, #4
 8006608:	693a      	ldr	r2, [r7, #16]
 800660a:	4313      	orrs	r3, r2
 800660c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	621a      	str	r2, [r3, #32]
}
 800661a:	bf00      	nop
 800661c:	371c      	adds	r7, #28
 800661e:	46bd      	mov	sp, r7
 8006620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006624:	4770      	bx	lr

08006626 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006626:	b480      	push	{r7}
 8006628:	b085      	sub	sp, #20
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
 800662e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	689b      	ldr	r3, [r3, #8]
 8006634:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800663c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800663e:	683a      	ldr	r2, [r7, #0]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	4313      	orrs	r3, r2
 8006644:	f043 0307 	orr.w	r3, r3, #7
 8006648:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	68fa      	ldr	r2, [r7, #12]
 800664e:	609a      	str	r2, [r3, #8]
}
 8006650:	bf00      	nop
 8006652:	3714      	adds	r7, #20
 8006654:	46bd      	mov	sp, r7
 8006656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665a:	4770      	bx	lr

0800665c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800665c:	b480      	push	{r7}
 800665e:	b087      	sub	sp, #28
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	607a      	str	r2, [r7, #4]
 8006668:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	689b      	ldr	r3, [r3, #8]
 800666e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006676:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	021a      	lsls	r2, r3, #8
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	431a      	orrs	r2, r3
 8006680:	68bb      	ldr	r3, [r7, #8]
 8006682:	4313      	orrs	r3, r2
 8006684:	697a      	ldr	r2, [r7, #20]
 8006686:	4313      	orrs	r3, r2
 8006688:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	697a      	ldr	r2, [r7, #20]
 800668e:	609a      	str	r2, [r3, #8]
}
 8006690:	bf00      	nop
 8006692:	371c      	adds	r7, #28
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800669c:	b480      	push	{r7}
 800669e:	b087      	sub	sp, #28
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	60f8      	str	r0, [r7, #12]
 80066a4:	60b9      	str	r1, [r7, #8]
 80066a6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80066a8:	68bb      	ldr	r3, [r7, #8]
 80066aa:	f003 031f 	and.w	r3, r3, #31
 80066ae:	2201      	movs	r2, #1
 80066b0:	fa02 f303 	lsl.w	r3, r2, r3
 80066b4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	6a1a      	ldr	r2, [r3, #32]
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	43db      	mvns	r3, r3
 80066be:	401a      	ands	r2, r3
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6a1a      	ldr	r2, [r3, #32]
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	f003 031f 	and.w	r3, r3, #31
 80066ce:	6879      	ldr	r1, [r7, #4]
 80066d0:	fa01 f303 	lsl.w	r3, r1, r3
 80066d4:	431a      	orrs	r2, r3
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	621a      	str	r2, [r3, #32]
}
 80066da:	bf00      	nop
 80066dc:	371c      	adds	r7, #28
 80066de:	46bd      	mov	sp, r7
 80066e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e4:	4770      	bx	lr
	...

080066e8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
 80066f0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	d101      	bne.n	8006700 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80066fc:	2302      	movs	r3, #2
 80066fe:	e06d      	b.n	80067dc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2202      	movs	r2, #2
 800670c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	685b      	ldr	r3, [r3, #4]
 8006716:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	4a30      	ldr	r2, [pc, #192]	; (80067e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d004      	beq.n	8006734 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a2f      	ldr	r2, [pc, #188]	; (80067ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006730:	4293      	cmp	r3, r2
 8006732:	d108      	bne.n	8006746 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800673a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	685b      	ldr	r3, [r3, #4]
 8006740:	68fa      	ldr	r2, [r7, #12]
 8006742:	4313      	orrs	r3, r2
 8006744:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800674c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800674e:	683b      	ldr	r3, [r7, #0]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	68fa      	ldr	r2, [r7, #12]
 8006754:	4313      	orrs	r3, r2
 8006756:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	68fa      	ldr	r2, [r7, #12]
 800675e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a20      	ldr	r2, [pc, #128]	; (80067e8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006766:	4293      	cmp	r3, r2
 8006768:	d022      	beq.n	80067b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006772:	d01d      	beq.n	80067b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	4a1d      	ldr	r2, [pc, #116]	; (80067f0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800677a:	4293      	cmp	r3, r2
 800677c:	d018      	beq.n	80067b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a1c      	ldr	r2, [pc, #112]	; (80067f4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d013      	beq.n	80067b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a1a      	ldr	r2, [pc, #104]	; (80067f8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800678e:	4293      	cmp	r3, r2
 8006790:	d00e      	beq.n	80067b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a15      	ldr	r2, [pc, #84]	; (80067ec <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d009      	beq.n	80067b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a16      	ldr	r2, [pc, #88]	; (80067fc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d004      	beq.n	80067b0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a15      	ldr	r2, [pc, #84]	; (8006800 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d10c      	bne.n	80067ca <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	689b      	ldr	r3, [r3, #8]
 80067bc:	68ba      	ldr	r2, [r7, #8]
 80067be:	4313      	orrs	r3, r2
 80067c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	68ba      	ldr	r2, [r7, #8]
 80067c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2201      	movs	r2, #1
 80067ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2200      	movs	r2, #0
 80067d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067da:	2300      	movs	r3, #0
}
 80067dc:	4618      	mov	r0, r3
 80067de:	3714      	adds	r7, #20
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr
 80067e8:	40010000 	.word	0x40010000
 80067ec:	40010400 	.word	0x40010400
 80067f0:	40000400 	.word	0x40000400
 80067f4:	40000800 	.word	0x40000800
 80067f8:	40000c00 	.word	0x40000c00
 80067fc:	40014000 	.word	0x40014000
 8006800:	40001800 	.word	0x40001800

08006804 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006804:	b480      	push	{r7}
 8006806:	b083      	sub	sp, #12
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800680c:	bf00      	nop
 800680e:	370c      	adds	r7, #12
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr

08006818 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006818:	b480      	push	{r7}
 800681a:	b083      	sub	sp, #12
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006820:	bf00      	nop
 8006822:	370c      	adds	r7, #12
 8006824:	46bd      	mov	sp, r7
 8006826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682a:	4770      	bx	lr

0800682c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800682c:	b480      	push	{r7}
 800682e:	b083      	sub	sp, #12
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006834:	bf00      	nop
 8006836:	370c      	adds	r7, #12
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d101      	bne.n	8006852 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e040      	b.n	80068d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006856:	2b00      	cmp	r3, #0
 8006858:	d106      	bne.n	8006868 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006862:	6878      	ldr	r0, [r7, #4]
 8006864:	f7fb f98e 	bl	8001b84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2224      	movs	r2, #36	; 0x24
 800686c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681a      	ldr	r2, [r3, #0]
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f022 0201 	bic.w	r2, r2, #1
 800687c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800687e:	6878      	ldr	r0, [r7, #4]
 8006880:	f000 fc18 	bl	80070b4 <UART_SetConfig>
 8006884:	4603      	mov	r3, r0
 8006886:	2b01      	cmp	r3, #1
 8006888:	d101      	bne.n	800688e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e022      	b.n	80068d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006892:	2b00      	cmp	r3, #0
 8006894:	d002      	beq.n	800689c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 fe6e 	bl	8007578 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	685a      	ldr	r2, [r3, #4]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	689a      	ldr	r2, [r3, #8]
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	681a      	ldr	r2, [r3, #0]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f042 0201 	orr.w	r2, r2, #1
 80068ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 fef5 	bl	80076bc <UART_CheckIdleState>
 80068d2:	4603      	mov	r3, r0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3708      	adds	r7, #8
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b08a      	sub	sp, #40	; 0x28
 80068e0:	af02      	add	r7, sp, #8
 80068e2:	60f8      	str	r0, [r7, #12]
 80068e4:	60b9      	str	r1, [r7, #8]
 80068e6:	603b      	str	r3, [r7, #0]
 80068e8:	4613      	mov	r3, r2
 80068ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80068f0:	2b20      	cmp	r3, #32
 80068f2:	f040 8081 	bne.w	80069f8 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d002      	beq.n	8006902 <HAL_UART_Transmit+0x26>
 80068fc:	88fb      	ldrh	r3, [r7, #6]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d101      	bne.n	8006906 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e079      	b.n	80069fa <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800690c:	2b01      	cmp	r3, #1
 800690e:	d101      	bne.n	8006914 <HAL_UART_Transmit+0x38>
 8006910:	2302      	movs	r3, #2
 8006912:	e072      	b.n	80069fa <HAL_UART_Transmit+0x11e>
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	2201      	movs	r2, #1
 8006918:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2221      	movs	r2, #33	; 0x21
 8006928:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800692a:	f7fb f9f1 	bl	8001d10 <HAL_GetTick>
 800692e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	88fa      	ldrh	r2, [r7, #6]
 8006934:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006938:	68fb      	ldr	r3, [r7, #12]
 800693a:	88fa      	ldrh	r2, [r7, #6]
 800693c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	689b      	ldr	r3, [r3, #8]
 8006944:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006948:	d108      	bne.n	800695c <HAL_UART_Transmit+0x80>
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	691b      	ldr	r3, [r3, #16]
 800694e:	2b00      	cmp	r3, #0
 8006950:	d104      	bne.n	800695c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8006952:	2300      	movs	r3, #0
 8006954:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	61bb      	str	r3, [r7, #24]
 800695a:	e003      	b.n	8006964 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800695c:	68bb      	ldr	r3, [r7, #8]
 800695e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006960:	2300      	movs	r3, #0
 8006962:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	2200      	movs	r2, #0
 8006968:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800696c:	e02c      	b.n	80069c8 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800696e:	683b      	ldr	r3, [r7, #0]
 8006970:	9300      	str	r3, [sp, #0]
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	2200      	movs	r2, #0
 8006976:	2180      	movs	r1, #128	; 0x80
 8006978:	68f8      	ldr	r0, [r7, #12]
 800697a:	f000 fee8 	bl	800774e <UART_WaitOnFlagUntilTimeout>
 800697e:	4603      	mov	r3, r0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d001      	beq.n	8006988 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8006984:	2303      	movs	r3, #3
 8006986:	e038      	b.n	80069fa <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8006988:	69fb      	ldr	r3, [r7, #28]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d10b      	bne.n	80069a6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800698e:	69bb      	ldr	r3, [r7, #24]
 8006990:	881b      	ldrh	r3, [r3, #0]
 8006992:	461a      	mov	r2, r3
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800699c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	3302      	adds	r3, #2
 80069a2:	61bb      	str	r3, [r7, #24]
 80069a4:	e007      	b.n	80069b6 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	781a      	ldrb	r2, [r3, #0]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80069b0:	69fb      	ldr	r3, [r7, #28]
 80069b2:	3301      	adds	r3, #1
 80069b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80069bc:	b29b      	uxth	r3, r3
 80069be:	3b01      	subs	r3, #1
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80069ce:	b29b      	uxth	r3, r3
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1cc      	bne.n	800696e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	9300      	str	r3, [sp, #0]
 80069d8:	697b      	ldr	r3, [r7, #20]
 80069da:	2200      	movs	r2, #0
 80069dc:	2140      	movs	r1, #64	; 0x40
 80069de:	68f8      	ldr	r0, [r7, #12]
 80069e0:	f000 feb5 	bl	800774e <UART_WaitOnFlagUntilTimeout>
 80069e4:	4603      	mov	r3, r0
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d001      	beq.n	80069ee <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 80069ea:	2303      	movs	r3, #3
 80069ec:	e005      	b.n	80069fa <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	2220      	movs	r2, #32
 80069f2:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80069f4:	2300      	movs	r3, #0
 80069f6:	e000      	b.n	80069fa <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 80069f8:	2302      	movs	r3, #2
  }
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	3720      	adds	r7, #32
 80069fe:	46bd      	mov	sp, r7
 8006a00:	bd80      	pop	{r7, pc}

08006a02 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a02:	b580      	push	{r7, lr}
 8006a04:	b08a      	sub	sp, #40	; 0x28
 8006a06:	af00      	add	r7, sp, #0
 8006a08:	60f8      	str	r0, [r7, #12]
 8006a0a:	60b9      	str	r1, [r7, #8]
 8006a0c:	4613      	mov	r3, r2
 8006a0e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006a14:	2b20      	cmp	r3, #32
 8006a16:	d13d      	bne.n	8006a94 <HAL_UART_Receive_IT+0x92>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d002      	beq.n	8006a24 <HAL_UART_Receive_IT+0x22>
 8006a1e:	88fb      	ldrh	r3, [r7, #6]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d101      	bne.n	8006a28 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8006a24:	2301      	movs	r3, #1
 8006a26:	e036      	b.n	8006a96 <HAL_UART_Receive_IT+0x94>
    }

    __HAL_LOCK(huart);
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8006a2e:	2b01      	cmp	r3, #1
 8006a30:	d101      	bne.n	8006a36 <HAL_UART_Receive_IT+0x34>
 8006a32:	2302      	movs	r3, #2
 8006a34:	e02f      	b.n	8006a96 <HAL_UART_Receive_IT+0x94>
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2201      	movs	r2, #1
 8006a3a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	2200      	movs	r2, #0
 8006a42:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d018      	beq.n	8006a84 <HAL_UART_Receive_IT+0x82>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	e853 3f00 	ldrex	r3, [r3]
 8006a5e:	613b      	str	r3, [r7, #16]
   return(result);
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a66:	627b      	str	r3, [r7, #36]	; 0x24
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	461a      	mov	r2, r3
 8006a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a70:	623b      	str	r3, [r7, #32]
 8006a72:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a74:	69f9      	ldr	r1, [r7, #28]
 8006a76:	6a3a      	ldr	r2, [r7, #32]
 8006a78:	e841 2300 	strex	r3, r2, [r1]
 8006a7c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006a7e:	69bb      	ldr	r3, [r7, #24]
 8006a80:	2b00      	cmp	r3, #0
 8006a82:	d1e6      	bne.n	8006a52 <HAL_UART_Receive_IT+0x50>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006a84:	88fb      	ldrh	r3, [r7, #6]
 8006a86:	461a      	mov	r2, r3
 8006a88:	68b9      	ldr	r1, [r7, #8]
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f000 ff24 	bl	80078d8 <UART_Start_Receive_IT>
 8006a90:	4603      	mov	r3, r0
 8006a92:	e000      	b.n	8006a96 <HAL_UART_Receive_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006a94:	2302      	movs	r3, #2
  }
}
 8006a96:	4618      	mov	r0, r3
 8006a98:	3728      	adds	r7, #40	; 0x28
 8006a9a:	46bd      	mov	sp, r7
 8006a9c:	bd80      	pop	{r7, pc}
	...

08006aa0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b0ba      	sub	sp, #232	; 0xe8
 8006aa4:	af00      	add	r7, sp, #0
 8006aa6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	69db      	ldr	r3, [r3, #28]
 8006aae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	689b      	ldr	r3, [r3, #8]
 8006ac2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006ac6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006aca:	f640 030f 	movw	r3, #2063	; 0x80f
 8006ace:	4013      	ands	r3, r2
 8006ad0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006ad4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d115      	bne.n	8006b08 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006adc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ae0:	f003 0320 	and.w	r3, r3, #32
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d00f      	beq.n	8006b08 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006ae8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006aec:	f003 0320 	and.w	r3, r3, #32
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d009      	beq.n	8006b08 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	f000 82a4 	beq.w	8007046 <HAL_UART_IRQHandler+0x5a6>
      {
        huart->RxISR(huart);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	4798      	blx	r3
      }
      return;
 8006b06:	e29e      	b.n	8007046 <HAL_UART_IRQHandler+0x5a6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006b08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	f000 8117 	beq.w	8006d40 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006b12:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b16:	f003 0301 	and.w	r3, r3, #1
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d106      	bne.n	8006b2c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006b1e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006b22:	4b85      	ldr	r3, [pc, #532]	; (8006d38 <HAL_UART_IRQHandler+0x298>)
 8006b24:	4013      	ands	r3, r2
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	f000 810a 	beq.w	8006d40 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006b2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b30:	f003 0301 	and.w	r3, r3, #1
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d011      	beq.n	8006b5c <HAL_UART_IRQHandler+0xbc>
 8006b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d00b      	beq.n	8006b5c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b52:	f043 0201 	orr.w	r2, r3, #1
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b60:	f003 0302 	and.w	r3, r3, #2
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d011      	beq.n	8006b8c <HAL_UART_IRQHandler+0xec>
 8006b68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b6c:	f003 0301 	and.w	r3, r3, #1
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d00b      	beq.n	8006b8c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	2202      	movs	r2, #2
 8006b7a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006b82:	f043 0204 	orr.w	r2, r3, #4
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b90:	f003 0304 	and.w	r3, r3, #4
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d011      	beq.n	8006bbc <HAL_UART_IRQHandler+0x11c>
 8006b98:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b9c:	f003 0301 	and.w	r3, r3, #1
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d00b      	beq.n	8006bbc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	2204      	movs	r2, #4
 8006baa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bb2:	f043 0202 	orr.w	r2, r3, #2
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bc0:	f003 0308 	and.w	r3, r3, #8
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d017      	beq.n	8006bf8 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bcc:	f003 0320 	and.w	r3, r3, #32
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d105      	bne.n	8006be0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006bd4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006bd8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d00b      	beq.n	8006bf8 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2208      	movs	r2, #8
 8006be6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006bee:	f043 0208 	orr.w	r2, r3, #8
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006bf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d012      	beq.n	8006c2a <HAL_UART_IRQHandler+0x18a>
 8006c04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d00c      	beq.n	8006c2a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c20:	f043 0220 	orr.w	r2, r3, #32
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	f000 820a 	beq.w	800704a <HAL_UART_IRQHandler+0x5aa>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006c36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c3a:	f003 0320 	and.w	r3, r3, #32
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00d      	beq.n	8006c5e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006c42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c46:	f003 0320 	and.w	r3, r3, #32
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d007      	beq.n	8006c5e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d003      	beq.n	8006c5e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006c64:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c72:	2b40      	cmp	r3, #64	; 0x40
 8006c74:	d005      	beq.n	8006c82 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006c76:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c7a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d04f      	beq.n	8006d22 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 fef2 	bl	8007a6c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c92:	2b40      	cmp	r3, #64	; 0x40
 8006c94:	d141      	bne.n	8006d1a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	3308      	adds	r3, #8
 8006c9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ca0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006ca4:	e853 3f00 	ldrex	r3, [r3]
 8006ca8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006cac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006cb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cb4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	3308      	adds	r3, #8
 8006cbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006cc2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006cc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006cce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006cd2:	e841 2300 	strex	r3, r2, [r1]
 8006cd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006cda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d1d9      	bne.n	8006c96 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d013      	beq.n	8006d12 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cee:	4a13      	ldr	r2, [pc, #76]	; (8006d3c <HAL_UART_IRQHandler+0x29c>)
 8006cf0:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	f7fb fd87 	bl	800280a <HAL_DMA_Abort_IT>
 8006cfc:	4603      	mov	r3, r0
 8006cfe:	2b00      	cmp	r3, #0
 8006d00:	d017      	beq.n	8006d32 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d08:	687a      	ldr	r2, [r7, #4]
 8006d0a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8006d0c:	4610      	mov	r0, r2
 8006d0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d10:	e00f      	b.n	8006d32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006d12:	6878      	ldr	r0, [r7, #4]
 8006d14:	f000 f9ae 	bl	8007074 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d18:	e00b      	b.n	8006d32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 f9aa 	bl	8007074 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d20:	e007      	b.n	8006d32 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	f000 f9a6 	bl	8007074 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8006d30:	e18b      	b.n	800704a <HAL_UART_IRQHandler+0x5aa>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d32:	bf00      	nop
    return;
 8006d34:	e189      	b.n	800704a <HAL_UART_IRQHandler+0x5aa>
 8006d36:	bf00      	nop
 8006d38:	04000120 	.word	0x04000120
 8006d3c:	08007b33 	.word	0x08007b33

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d44:	2b01      	cmp	r3, #1
 8006d46:	f040 8144 	bne.w	8006fd2 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006d4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d4e:	f003 0310 	and.w	r3, r3, #16
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f000 813d 	beq.w	8006fd2 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006d58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d5c:	f003 0310 	and.w	r3, r3, #16
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	f000 8136 	beq.w	8006fd2 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	2210      	movs	r2, #16
 8006d6c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d78:	2b40      	cmp	r3, #64	; 0x40
 8006d7a:	f040 80b2 	bne.w	8006ee2 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	685b      	ldr	r3, [r3, #4]
 8006d86:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006d8a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	f000 815d 	beq.w	800704e <HAL_UART_IRQHandler+0x5ae>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006d9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d9e:	429a      	cmp	r2, r3
 8006da0:	f080 8155 	bcs.w	800704e <HAL_UART_IRQHandler+0x5ae>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006daa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006db2:	69db      	ldr	r3, [r3, #28]
 8006db4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006db8:	f000 8085 	beq.w	8006ec6 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006dc8:	e853 3f00 	ldrex	r3, [r3]
 8006dcc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006dd0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006dd4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006dd8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	461a      	mov	r2, r3
 8006de2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006de6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006dea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006df2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006df6:	e841 2300 	strex	r3, r2, [r1]
 8006dfa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006dfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	d1da      	bne.n	8006dbc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	3308      	adds	r3, #8
 8006e0c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e10:	e853 3f00 	ldrex	r3, [r3]
 8006e14:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006e16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006e18:	f023 0301 	bic.w	r3, r3, #1
 8006e1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	3308      	adds	r3, #8
 8006e26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006e2a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006e2e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e30:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006e32:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006e36:	e841 2300 	strex	r3, r2, [r1]
 8006e3a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006e3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d1e1      	bne.n	8006e06 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	3308      	adds	r3, #8
 8006e48:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006e4c:	e853 3f00 	ldrex	r3, [r3]
 8006e50:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006e52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006e54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	3308      	adds	r3, #8
 8006e62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006e66:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006e68:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006e6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006e6e:	e841 2300 	strex	r3, r2, [r1]
 8006e72:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006e74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d1e3      	bne.n	8006e42 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2220      	movs	r2, #32
 8006e7e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e8e:	e853 3f00 	ldrex	r3, [r3]
 8006e92:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e96:	f023 0310 	bic.w	r3, r3, #16
 8006e9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	461a      	mov	r2, r3
 8006ea4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006ea8:	65bb      	str	r3, [r7, #88]	; 0x58
 8006eaa:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006eac:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006eae:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006eb0:	e841 2300 	strex	r3, r2, [r1]
 8006eb4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006eb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d1e4      	bne.n	8006e86 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ec0:	4618      	mov	r0, r3
 8006ec2:	f7fb fc32 	bl	800272a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	1ad3      	subs	r3, r2, r3
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	4619      	mov	r1, r3
 8006eda:	6878      	ldr	r0, [r7, #4]
 8006edc:	f000 f8d4 	bl	8007088 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006ee0:	e0b5      	b.n	800704e <HAL_UART_IRQHandler+0x5ae>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006eee:	b29b      	uxth	r3, r3
 8006ef0:	1ad3      	subs	r3, r2, r3
 8006ef2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8006efc:	b29b      	uxth	r3, r3
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	f000 80a7 	beq.w	8007052 <HAL_UART_IRQHandler+0x5b2>
          && (nb_rx_data > 0U))
 8006f04:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	f000 80a2 	beq.w	8007052 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f16:	e853 3f00 	ldrex	r3, [r3]
 8006f1a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006f22:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006f30:	647b      	str	r3, [r7, #68]	; 0x44
 8006f32:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006f36:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f38:	e841 2300 	strex	r3, r2, [r1]
 8006f3c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006f3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d1e4      	bne.n	8006f0e <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	3308      	adds	r3, #8
 8006f4a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4e:	e853 3f00 	ldrex	r3, [r3]
 8006f52:	623b      	str	r3, [r7, #32]
   return(result);
 8006f54:	6a3b      	ldr	r3, [r7, #32]
 8006f56:	f023 0301 	bic.w	r3, r3, #1
 8006f5a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	3308      	adds	r3, #8
 8006f64:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006f68:	633a      	str	r2, [r7, #48]	; 0x30
 8006f6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006f6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006f70:	e841 2300 	strex	r3, r2, [r1]
 8006f74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d1e3      	bne.n	8006f44 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2220      	movs	r2, #32
 8006f80:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	e853 3f00 	ldrex	r3, [r3]
 8006f9a:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	f023 0310 	bic.w	r3, r3, #16
 8006fa2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	461a      	mov	r2, r3
 8006fac:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006fb0:	61fb      	str	r3, [r7, #28]
 8006fb2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fb4:	69b9      	ldr	r1, [r7, #24]
 8006fb6:	69fa      	ldr	r2, [r7, #28]
 8006fb8:	e841 2300 	strex	r3, r2, [r1]
 8006fbc:	617b      	str	r3, [r7, #20]
   return(result);
 8006fbe:	697b      	ldr	r3, [r7, #20]
 8006fc0:	2b00      	cmp	r3, #0
 8006fc2:	d1e4      	bne.n	8006f8e <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006fc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006fc8:	4619      	mov	r1, r3
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 f85c 	bl	8007088 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006fd0:	e03f      	b.n	8007052 <HAL_UART_IRQHandler+0x5b2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006fd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006fd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d00e      	beq.n	8006ffc <HAL_UART_IRQHandler+0x55c>
 8006fde:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d008      	beq.n	8006ffc <HAL_UART_IRQHandler+0x55c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8006ff2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006ff4:	6878      	ldr	r0, [r7, #4]
 8006ff6:	f000 f853 	bl	80070a0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ffa:	e02d      	b.n	8007058 <HAL_UART_IRQHandler+0x5b8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8006ffc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007004:	2b00      	cmp	r3, #0
 8007006:	d00e      	beq.n	8007026 <HAL_UART_IRQHandler+0x586>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007008:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800700c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007010:	2b00      	cmp	r3, #0
 8007012:	d008      	beq.n	8007026 <HAL_UART_IRQHandler+0x586>
  {
    if (huart->TxISR != NULL)
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007018:	2b00      	cmp	r3, #0
 800701a:	d01c      	beq.n	8007056 <HAL_UART_IRQHandler+0x5b6>
    {
      huart->TxISR(huart);
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007020:	6878      	ldr	r0, [r7, #4]
 8007022:	4798      	blx	r3
    }
    return;
 8007024:	e017      	b.n	8007056 <HAL_UART_IRQHandler+0x5b6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007026:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800702a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800702e:	2b00      	cmp	r3, #0
 8007030:	d012      	beq.n	8007058 <HAL_UART_IRQHandler+0x5b8>
 8007032:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007036:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800703a:	2b00      	cmp	r3, #0
 800703c:	d00c      	beq.n	8007058 <HAL_UART_IRQHandler+0x5b8>
  {
    UART_EndTransmit_IT(huart);
 800703e:	6878      	ldr	r0, [r7, #4]
 8007040:	f000 fd8d 	bl	8007b5e <UART_EndTransmit_IT>
    return;
 8007044:	e008      	b.n	8007058 <HAL_UART_IRQHandler+0x5b8>
      return;
 8007046:	bf00      	nop
 8007048:	e006      	b.n	8007058 <HAL_UART_IRQHandler+0x5b8>
    return;
 800704a:	bf00      	nop
 800704c:	e004      	b.n	8007058 <HAL_UART_IRQHandler+0x5b8>
      return;
 800704e:	bf00      	nop
 8007050:	e002      	b.n	8007058 <HAL_UART_IRQHandler+0x5b8>
      return;
 8007052:	bf00      	nop
 8007054:	e000      	b.n	8007058 <HAL_UART_IRQHandler+0x5b8>
    return;
 8007056:	bf00      	nop
  }

}
 8007058:	37e8      	adds	r7, #232	; 0xe8
 800705a:	46bd      	mov	sp, r7
 800705c:	bd80      	pop	{r7, pc}
 800705e:	bf00      	nop

08007060 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007060:	b480      	push	{r7}
 8007062:	b083      	sub	sp, #12
 8007064:	af00      	add	r7, sp, #0
 8007066:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007068:	bf00      	nop
 800706a:	370c      	adds	r7, #12
 800706c:	46bd      	mov	sp, r7
 800706e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007072:	4770      	bx	lr

08007074 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007074:	b480      	push	{r7}
 8007076:	b083      	sub	sp, #12
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800707c:	bf00      	nop
 800707e:	370c      	adds	r7, #12
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
 8007090:	460b      	mov	r3, r1
 8007092:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007094:	bf00      	nop
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr

080070a0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80070a8:	bf00      	nop
 80070aa:	370c      	adds	r7, #12
 80070ac:	46bd      	mov	sp, r7
 80070ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b2:	4770      	bx	lr

080070b4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80070b4:	b580      	push	{r7, lr}
 80070b6:	b088      	sub	sp, #32
 80070b8:	af00      	add	r7, sp, #0
 80070ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80070bc:	2300      	movs	r3, #0
 80070be:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	689a      	ldr	r2, [r3, #8]
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	691b      	ldr	r3, [r3, #16]
 80070c8:	431a      	orrs	r2, r3
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	695b      	ldr	r3, [r3, #20]
 80070ce:	431a      	orrs	r2, r3
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	69db      	ldr	r3, [r3, #28]
 80070d4:	4313      	orrs	r3, r2
 80070d6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	4ba7      	ldr	r3, [pc, #668]	; (800737c <UART_SetConfig+0x2c8>)
 80070e0:	4013      	ands	r3, r2
 80070e2:	687a      	ldr	r2, [r7, #4]
 80070e4:	6812      	ldr	r2, [r2, #0]
 80070e6:	6979      	ldr	r1, [r7, #20]
 80070e8:	430b      	orrs	r3, r1
 80070ea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	685b      	ldr	r3, [r3, #4]
 80070f2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	68da      	ldr	r2, [r3, #12]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	430a      	orrs	r2, r1
 8007100:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	699b      	ldr	r3, [r3, #24]
 8007106:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	6a1b      	ldr	r3, [r3, #32]
 800710c:	697a      	ldr	r2, [r7, #20]
 800710e:	4313      	orrs	r3, r2
 8007110:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	689b      	ldr	r3, [r3, #8]
 8007118:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	697a      	ldr	r2, [r7, #20]
 8007122:	430a      	orrs	r2, r1
 8007124:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a95      	ldr	r2, [pc, #596]	; (8007380 <UART_SetConfig+0x2cc>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d120      	bne.n	8007172 <UART_SetConfig+0xbe>
 8007130:	4b94      	ldr	r3, [pc, #592]	; (8007384 <UART_SetConfig+0x2d0>)
 8007132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007136:	f003 0303 	and.w	r3, r3, #3
 800713a:	2b03      	cmp	r3, #3
 800713c:	d816      	bhi.n	800716c <UART_SetConfig+0xb8>
 800713e:	a201      	add	r2, pc, #4	; (adr r2, 8007144 <UART_SetConfig+0x90>)
 8007140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007144:	08007155 	.word	0x08007155
 8007148:	08007161 	.word	0x08007161
 800714c:	0800715b 	.word	0x0800715b
 8007150:	08007167 	.word	0x08007167
 8007154:	2301      	movs	r3, #1
 8007156:	77fb      	strb	r3, [r7, #31]
 8007158:	e14f      	b.n	80073fa <UART_SetConfig+0x346>
 800715a:	2302      	movs	r3, #2
 800715c:	77fb      	strb	r3, [r7, #31]
 800715e:	e14c      	b.n	80073fa <UART_SetConfig+0x346>
 8007160:	2304      	movs	r3, #4
 8007162:	77fb      	strb	r3, [r7, #31]
 8007164:	e149      	b.n	80073fa <UART_SetConfig+0x346>
 8007166:	2308      	movs	r3, #8
 8007168:	77fb      	strb	r3, [r7, #31]
 800716a:	e146      	b.n	80073fa <UART_SetConfig+0x346>
 800716c:	2310      	movs	r3, #16
 800716e:	77fb      	strb	r3, [r7, #31]
 8007170:	e143      	b.n	80073fa <UART_SetConfig+0x346>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	4a84      	ldr	r2, [pc, #528]	; (8007388 <UART_SetConfig+0x2d4>)
 8007178:	4293      	cmp	r3, r2
 800717a:	d132      	bne.n	80071e2 <UART_SetConfig+0x12e>
 800717c:	4b81      	ldr	r3, [pc, #516]	; (8007384 <UART_SetConfig+0x2d0>)
 800717e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007182:	f003 030c 	and.w	r3, r3, #12
 8007186:	2b0c      	cmp	r3, #12
 8007188:	d828      	bhi.n	80071dc <UART_SetConfig+0x128>
 800718a:	a201      	add	r2, pc, #4	; (adr r2, 8007190 <UART_SetConfig+0xdc>)
 800718c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007190:	080071c5 	.word	0x080071c5
 8007194:	080071dd 	.word	0x080071dd
 8007198:	080071dd 	.word	0x080071dd
 800719c:	080071dd 	.word	0x080071dd
 80071a0:	080071d1 	.word	0x080071d1
 80071a4:	080071dd 	.word	0x080071dd
 80071a8:	080071dd 	.word	0x080071dd
 80071ac:	080071dd 	.word	0x080071dd
 80071b0:	080071cb 	.word	0x080071cb
 80071b4:	080071dd 	.word	0x080071dd
 80071b8:	080071dd 	.word	0x080071dd
 80071bc:	080071dd 	.word	0x080071dd
 80071c0:	080071d7 	.word	0x080071d7
 80071c4:	2300      	movs	r3, #0
 80071c6:	77fb      	strb	r3, [r7, #31]
 80071c8:	e117      	b.n	80073fa <UART_SetConfig+0x346>
 80071ca:	2302      	movs	r3, #2
 80071cc:	77fb      	strb	r3, [r7, #31]
 80071ce:	e114      	b.n	80073fa <UART_SetConfig+0x346>
 80071d0:	2304      	movs	r3, #4
 80071d2:	77fb      	strb	r3, [r7, #31]
 80071d4:	e111      	b.n	80073fa <UART_SetConfig+0x346>
 80071d6:	2308      	movs	r3, #8
 80071d8:	77fb      	strb	r3, [r7, #31]
 80071da:	e10e      	b.n	80073fa <UART_SetConfig+0x346>
 80071dc:	2310      	movs	r3, #16
 80071de:	77fb      	strb	r3, [r7, #31]
 80071e0:	e10b      	b.n	80073fa <UART_SetConfig+0x346>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	4a69      	ldr	r2, [pc, #420]	; (800738c <UART_SetConfig+0x2d8>)
 80071e8:	4293      	cmp	r3, r2
 80071ea:	d120      	bne.n	800722e <UART_SetConfig+0x17a>
 80071ec:	4b65      	ldr	r3, [pc, #404]	; (8007384 <UART_SetConfig+0x2d0>)
 80071ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071f2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80071f6:	2b30      	cmp	r3, #48	; 0x30
 80071f8:	d013      	beq.n	8007222 <UART_SetConfig+0x16e>
 80071fa:	2b30      	cmp	r3, #48	; 0x30
 80071fc:	d814      	bhi.n	8007228 <UART_SetConfig+0x174>
 80071fe:	2b20      	cmp	r3, #32
 8007200:	d009      	beq.n	8007216 <UART_SetConfig+0x162>
 8007202:	2b20      	cmp	r3, #32
 8007204:	d810      	bhi.n	8007228 <UART_SetConfig+0x174>
 8007206:	2b00      	cmp	r3, #0
 8007208:	d002      	beq.n	8007210 <UART_SetConfig+0x15c>
 800720a:	2b10      	cmp	r3, #16
 800720c:	d006      	beq.n	800721c <UART_SetConfig+0x168>
 800720e:	e00b      	b.n	8007228 <UART_SetConfig+0x174>
 8007210:	2300      	movs	r3, #0
 8007212:	77fb      	strb	r3, [r7, #31]
 8007214:	e0f1      	b.n	80073fa <UART_SetConfig+0x346>
 8007216:	2302      	movs	r3, #2
 8007218:	77fb      	strb	r3, [r7, #31]
 800721a:	e0ee      	b.n	80073fa <UART_SetConfig+0x346>
 800721c:	2304      	movs	r3, #4
 800721e:	77fb      	strb	r3, [r7, #31]
 8007220:	e0eb      	b.n	80073fa <UART_SetConfig+0x346>
 8007222:	2308      	movs	r3, #8
 8007224:	77fb      	strb	r3, [r7, #31]
 8007226:	e0e8      	b.n	80073fa <UART_SetConfig+0x346>
 8007228:	2310      	movs	r3, #16
 800722a:	77fb      	strb	r3, [r7, #31]
 800722c:	e0e5      	b.n	80073fa <UART_SetConfig+0x346>
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	4a57      	ldr	r2, [pc, #348]	; (8007390 <UART_SetConfig+0x2dc>)
 8007234:	4293      	cmp	r3, r2
 8007236:	d120      	bne.n	800727a <UART_SetConfig+0x1c6>
 8007238:	4b52      	ldr	r3, [pc, #328]	; (8007384 <UART_SetConfig+0x2d0>)
 800723a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800723e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007242:	2bc0      	cmp	r3, #192	; 0xc0
 8007244:	d013      	beq.n	800726e <UART_SetConfig+0x1ba>
 8007246:	2bc0      	cmp	r3, #192	; 0xc0
 8007248:	d814      	bhi.n	8007274 <UART_SetConfig+0x1c0>
 800724a:	2b80      	cmp	r3, #128	; 0x80
 800724c:	d009      	beq.n	8007262 <UART_SetConfig+0x1ae>
 800724e:	2b80      	cmp	r3, #128	; 0x80
 8007250:	d810      	bhi.n	8007274 <UART_SetConfig+0x1c0>
 8007252:	2b00      	cmp	r3, #0
 8007254:	d002      	beq.n	800725c <UART_SetConfig+0x1a8>
 8007256:	2b40      	cmp	r3, #64	; 0x40
 8007258:	d006      	beq.n	8007268 <UART_SetConfig+0x1b4>
 800725a:	e00b      	b.n	8007274 <UART_SetConfig+0x1c0>
 800725c:	2300      	movs	r3, #0
 800725e:	77fb      	strb	r3, [r7, #31]
 8007260:	e0cb      	b.n	80073fa <UART_SetConfig+0x346>
 8007262:	2302      	movs	r3, #2
 8007264:	77fb      	strb	r3, [r7, #31]
 8007266:	e0c8      	b.n	80073fa <UART_SetConfig+0x346>
 8007268:	2304      	movs	r3, #4
 800726a:	77fb      	strb	r3, [r7, #31]
 800726c:	e0c5      	b.n	80073fa <UART_SetConfig+0x346>
 800726e:	2308      	movs	r3, #8
 8007270:	77fb      	strb	r3, [r7, #31]
 8007272:	e0c2      	b.n	80073fa <UART_SetConfig+0x346>
 8007274:	2310      	movs	r3, #16
 8007276:	77fb      	strb	r3, [r7, #31]
 8007278:	e0bf      	b.n	80073fa <UART_SetConfig+0x346>
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	4a45      	ldr	r2, [pc, #276]	; (8007394 <UART_SetConfig+0x2e0>)
 8007280:	4293      	cmp	r3, r2
 8007282:	d125      	bne.n	80072d0 <UART_SetConfig+0x21c>
 8007284:	4b3f      	ldr	r3, [pc, #252]	; (8007384 <UART_SetConfig+0x2d0>)
 8007286:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800728a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800728e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007292:	d017      	beq.n	80072c4 <UART_SetConfig+0x210>
 8007294:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007298:	d817      	bhi.n	80072ca <UART_SetConfig+0x216>
 800729a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800729e:	d00b      	beq.n	80072b8 <UART_SetConfig+0x204>
 80072a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072a4:	d811      	bhi.n	80072ca <UART_SetConfig+0x216>
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d003      	beq.n	80072b2 <UART_SetConfig+0x1fe>
 80072aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80072ae:	d006      	beq.n	80072be <UART_SetConfig+0x20a>
 80072b0:	e00b      	b.n	80072ca <UART_SetConfig+0x216>
 80072b2:	2300      	movs	r3, #0
 80072b4:	77fb      	strb	r3, [r7, #31]
 80072b6:	e0a0      	b.n	80073fa <UART_SetConfig+0x346>
 80072b8:	2302      	movs	r3, #2
 80072ba:	77fb      	strb	r3, [r7, #31]
 80072bc:	e09d      	b.n	80073fa <UART_SetConfig+0x346>
 80072be:	2304      	movs	r3, #4
 80072c0:	77fb      	strb	r3, [r7, #31]
 80072c2:	e09a      	b.n	80073fa <UART_SetConfig+0x346>
 80072c4:	2308      	movs	r3, #8
 80072c6:	77fb      	strb	r3, [r7, #31]
 80072c8:	e097      	b.n	80073fa <UART_SetConfig+0x346>
 80072ca:	2310      	movs	r3, #16
 80072cc:	77fb      	strb	r3, [r7, #31]
 80072ce:	e094      	b.n	80073fa <UART_SetConfig+0x346>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	4a30      	ldr	r2, [pc, #192]	; (8007398 <UART_SetConfig+0x2e4>)
 80072d6:	4293      	cmp	r3, r2
 80072d8:	d125      	bne.n	8007326 <UART_SetConfig+0x272>
 80072da:	4b2a      	ldr	r3, [pc, #168]	; (8007384 <UART_SetConfig+0x2d0>)
 80072dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072e0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80072e4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80072e8:	d017      	beq.n	800731a <UART_SetConfig+0x266>
 80072ea:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80072ee:	d817      	bhi.n	8007320 <UART_SetConfig+0x26c>
 80072f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072f4:	d00b      	beq.n	800730e <UART_SetConfig+0x25a>
 80072f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80072fa:	d811      	bhi.n	8007320 <UART_SetConfig+0x26c>
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d003      	beq.n	8007308 <UART_SetConfig+0x254>
 8007300:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007304:	d006      	beq.n	8007314 <UART_SetConfig+0x260>
 8007306:	e00b      	b.n	8007320 <UART_SetConfig+0x26c>
 8007308:	2301      	movs	r3, #1
 800730a:	77fb      	strb	r3, [r7, #31]
 800730c:	e075      	b.n	80073fa <UART_SetConfig+0x346>
 800730e:	2302      	movs	r3, #2
 8007310:	77fb      	strb	r3, [r7, #31]
 8007312:	e072      	b.n	80073fa <UART_SetConfig+0x346>
 8007314:	2304      	movs	r3, #4
 8007316:	77fb      	strb	r3, [r7, #31]
 8007318:	e06f      	b.n	80073fa <UART_SetConfig+0x346>
 800731a:	2308      	movs	r3, #8
 800731c:	77fb      	strb	r3, [r7, #31]
 800731e:	e06c      	b.n	80073fa <UART_SetConfig+0x346>
 8007320:	2310      	movs	r3, #16
 8007322:	77fb      	strb	r3, [r7, #31]
 8007324:	e069      	b.n	80073fa <UART_SetConfig+0x346>
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a1c      	ldr	r2, [pc, #112]	; (800739c <UART_SetConfig+0x2e8>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d137      	bne.n	80073a0 <UART_SetConfig+0x2ec>
 8007330:	4b14      	ldr	r3, [pc, #80]	; (8007384 <UART_SetConfig+0x2d0>)
 8007332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007336:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800733a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800733e:	d017      	beq.n	8007370 <UART_SetConfig+0x2bc>
 8007340:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007344:	d817      	bhi.n	8007376 <UART_SetConfig+0x2c2>
 8007346:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800734a:	d00b      	beq.n	8007364 <UART_SetConfig+0x2b0>
 800734c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007350:	d811      	bhi.n	8007376 <UART_SetConfig+0x2c2>
 8007352:	2b00      	cmp	r3, #0
 8007354:	d003      	beq.n	800735e <UART_SetConfig+0x2aa>
 8007356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800735a:	d006      	beq.n	800736a <UART_SetConfig+0x2b6>
 800735c:	e00b      	b.n	8007376 <UART_SetConfig+0x2c2>
 800735e:	2300      	movs	r3, #0
 8007360:	77fb      	strb	r3, [r7, #31]
 8007362:	e04a      	b.n	80073fa <UART_SetConfig+0x346>
 8007364:	2302      	movs	r3, #2
 8007366:	77fb      	strb	r3, [r7, #31]
 8007368:	e047      	b.n	80073fa <UART_SetConfig+0x346>
 800736a:	2304      	movs	r3, #4
 800736c:	77fb      	strb	r3, [r7, #31]
 800736e:	e044      	b.n	80073fa <UART_SetConfig+0x346>
 8007370:	2308      	movs	r3, #8
 8007372:	77fb      	strb	r3, [r7, #31]
 8007374:	e041      	b.n	80073fa <UART_SetConfig+0x346>
 8007376:	2310      	movs	r3, #16
 8007378:	77fb      	strb	r3, [r7, #31]
 800737a:	e03e      	b.n	80073fa <UART_SetConfig+0x346>
 800737c:	efff69f3 	.word	0xefff69f3
 8007380:	40011000 	.word	0x40011000
 8007384:	40023800 	.word	0x40023800
 8007388:	40004400 	.word	0x40004400
 800738c:	40004800 	.word	0x40004800
 8007390:	40004c00 	.word	0x40004c00
 8007394:	40005000 	.word	0x40005000
 8007398:	40011400 	.word	0x40011400
 800739c:	40007800 	.word	0x40007800
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	4a71      	ldr	r2, [pc, #452]	; (800756c <UART_SetConfig+0x4b8>)
 80073a6:	4293      	cmp	r3, r2
 80073a8:	d125      	bne.n	80073f6 <UART_SetConfig+0x342>
 80073aa:	4b71      	ldr	r3, [pc, #452]	; (8007570 <UART_SetConfig+0x4bc>)
 80073ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80073b4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80073b8:	d017      	beq.n	80073ea <UART_SetConfig+0x336>
 80073ba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80073be:	d817      	bhi.n	80073f0 <UART_SetConfig+0x33c>
 80073c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073c4:	d00b      	beq.n	80073de <UART_SetConfig+0x32a>
 80073c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073ca:	d811      	bhi.n	80073f0 <UART_SetConfig+0x33c>
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d003      	beq.n	80073d8 <UART_SetConfig+0x324>
 80073d0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073d4:	d006      	beq.n	80073e4 <UART_SetConfig+0x330>
 80073d6:	e00b      	b.n	80073f0 <UART_SetConfig+0x33c>
 80073d8:	2300      	movs	r3, #0
 80073da:	77fb      	strb	r3, [r7, #31]
 80073dc:	e00d      	b.n	80073fa <UART_SetConfig+0x346>
 80073de:	2302      	movs	r3, #2
 80073e0:	77fb      	strb	r3, [r7, #31]
 80073e2:	e00a      	b.n	80073fa <UART_SetConfig+0x346>
 80073e4:	2304      	movs	r3, #4
 80073e6:	77fb      	strb	r3, [r7, #31]
 80073e8:	e007      	b.n	80073fa <UART_SetConfig+0x346>
 80073ea:	2308      	movs	r3, #8
 80073ec:	77fb      	strb	r3, [r7, #31]
 80073ee:	e004      	b.n	80073fa <UART_SetConfig+0x346>
 80073f0:	2310      	movs	r3, #16
 80073f2:	77fb      	strb	r3, [r7, #31]
 80073f4:	e001      	b.n	80073fa <UART_SetConfig+0x346>
 80073f6:	2310      	movs	r3, #16
 80073f8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	69db      	ldr	r3, [r3, #28]
 80073fe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007402:	d15a      	bne.n	80074ba <UART_SetConfig+0x406>
  {
    switch (clocksource)
 8007404:	7ffb      	ldrb	r3, [r7, #31]
 8007406:	2b08      	cmp	r3, #8
 8007408:	d827      	bhi.n	800745a <UART_SetConfig+0x3a6>
 800740a:	a201      	add	r2, pc, #4	; (adr r2, 8007410 <UART_SetConfig+0x35c>)
 800740c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007410:	08007435 	.word	0x08007435
 8007414:	0800743d 	.word	0x0800743d
 8007418:	08007445 	.word	0x08007445
 800741c:	0800745b 	.word	0x0800745b
 8007420:	0800744b 	.word	0x0800744b
 8007424:	0800745b 	.word	0x0800745b
 8007428:	0800745b 	.word	0x0800745b
 800742c:	0800745b 	.word	0x0800745b
 8007430:	08007453 	.word	0x08007453
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007434:	f7fd fbf8 	bl	8004c28 <HAL_RCC_GetPCLK1Freq>
 8007438:	61b8      	str	r0, [r7, #24]
        break;
 800743a:	e013      	b.n	8007464 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800743c:	f7fd fc08 	bl	8004c50 <HAL_RCC_GetPCLK2Freq>
 8007440:	61b8      	str	r0, [r7, #24]
        break;
 8007442:	e00f      	b.n	8007464 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007444:	4b4b      	ldr	r3, [pc, #300]	; (8007574 <UART_SetConfig+0x4c0>)
 8007446:	61bb      	str	r3, [r7, #24]
        break;
 8007448:	e00c      	b.n	8007464 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800744a:	f7fd faff 	bl	8004a4c <HAL_RCC_GetSysClockFreq>
 800744e:	61b8      	str	r0, [r7, #24]
        break;
 8007450:	e008      	b.n	8007464 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007452:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007456:	61bb      	str	r3, [r7, #24]
        break;
 8007458:	e004      	b.n	8007464 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800745a:	2300      	movs	r3, #0
 800745c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	77bb      	strb	r3, [r7, #30]
        break;
 8007462:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007464:	69bb      	ldr	r3, [r7, #24]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d074      	beq.n	8007554 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800746a:	69bb      	ldr	r3, [r7, #24]
 800746c:	005a      	lsls	r2, r3, #1
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	685b      	ldr	r3, [r3, #4]
 8007472:	085b      	lsrs	r3, r3, #1
 8007474:	441a      	add	r2, r3
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	fbb2 f3f3 	udiv	r3, r2, r3
 800747e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007480:	693b      	ldr	r3, [r7, #16]
 8007482:	2b0f      	cmp	r3, #15
 8007484:	d916      	bls.n	80074b4 <UART_SetConfig+0x400>
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800748c:	d212      	bcs.n	80074b4 <UART_SetConfig+0x400>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800748e:	693b      	ldr	r3, [r7, #16]
 8007490:	b29b      	uxth	r3, r3
 8007492:	f023 030f 	bic.w	r3, r3, #15
 8007496:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	085b      	lsrs	r3, r3, #1
 800749c:	b29b      	uxth	r3, r3
 800749e:	f003 0307 	and.w	r3, r3, #7
 80074a2:	b29a      	uxth	r2, r3
 80074a4:	89fb      	ldrh	r3, [r7, #14]
 80074a6:	4313      	orrs	r3, r2
 80074a8:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	89fa      	ldrh	r2, [r7, #14]
 80074b0:	60da      	str	r2, [r3, #12]
 80074b2:	e04f      	b.n	8007554 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	77bb      	strb	r3, [r7, #30]
 80074b8:	e04c      	b.n	8007554 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80074ba:	7ffb      	ldrb	r3, [r7, #31]
 80074bc:	2b08      	cmp	r3, #8
 80074be:	d828      	bhi.n	8007512 <UART_SetConfig+0x45e>
 80074c0:	a201      	add	r2, pc, #4	; (adr r2, 80074c8 <UART_SetConfig+0x414>)
 80074c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074c6:	bf00      	nop
 80074c8:	080074ed 	.word	0x080074ed
 80074cc:	080074f5 	.word	0x080074f5
 80074d0:	080074fd 	.word	0x080074fd
 80074d4:	08007513 	.word	0x08007513
 80074d8:	08007503 	.word	0x08007503
 80074dc:	08007513 	.word	0x08007513
 80074e0:	08007513 	.word	0x08007513
 80074e4:	08007513 	.word	0x08007513
 80074e8:	0800750b 	.word	0x0800750b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074ec:	f7fd fb9c 	bl	8004c28 <HAL_RCC_GetPCLK1Freq>
 80074f0:	61b8      	str	r0, [r7, #24]
        break;
 80074f2:	e013      	b.n	800751c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074f4:	f7fd fbac 	bl	8004c50 <HAL_RCC_GetPCLK2Freq>
 80074f8:	61b8      	str	r0, [r7, #24]
        break;
 80074fa:	e00f      	b.n	800751c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80074fc:	4b1d      	ldr	r3, [pc, #116]	; (8007574 <UART_SetConfig+0x4c0>)
 80074fe:	61bb      	str	r3, [r7, #24]
        break;
 8007500:	e00c      	b.n	800751c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007502:	f7fd faa3 	bl	8004a4c <HAL_RCC_GetSysClockFreq>
 8007506:	61b8      	str	r0, [r7, #24]
        break;
 8007508:	e008      	b.n	800751c <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800750a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800750e:	61bb      	str	r3, [r7, #24]
        break;
 8007510:	e004      	b.n	800751c <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8007512:	2300      	movs	r3, #0
 8007514:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007516:	2301      	movs	r3, #1
 8007518:	77bb      	strb	r3, [r7, #30]
        break;
 800751a:	bf00      	nop
    }

    if (pclk != 0U)
 800751c:	69bb      	ldr	r3, [r7, #24]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d018      	beq.n	8007554 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	685b      	ldr	r3, [r3, #4]
 8007526:	085a      	lsrs	r2, r3, #1
 8007528:	69bb      	ldr	r3, [r7, #24]
 800752a:	441a      	add	r2, r3
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	fbb2 f3f3 	udiv	r3, r2, r3
 8007534:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007536:	693b      	ldr	r3, [r7, #16]
 8007538:	2b0f      	cmp	r3, #15
 800753a:	d909      	bls.n	8007550 <UART_SetConfig+0x49c>
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007542:	d205      	bcs.n	8007550 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	b29a      	uxth	r2, r3
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	60da      	str	r2, [r3, #12]
 800754e:	e001      	b.n	8007554 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	2200      	movs	r2, #0
 800755e:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007560:	7fbb      	ldrb	r3, [r7, #30]
}
 8007562:	4618      	mov	r0, r3
 8007564:	3720      	adds	r7, #32
 8007566:	46bd      	mov	sp, r7
 8007568:	bd80      	pop	{r7, pc}
 800756a:	bf00      	nop
 800756c:	40007c00 	.word	0x40007c00
 8007570:	40023800 	.word	0x40023800
 8007574:	00f42400 	.word	0x00f42400

08007578 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007584:	f003 0301 	and.w	r3, r3, #1
 8007588:	2b00      	cmp	r3, #0
 800758a:	d00a      	beq.n	80075a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	430a      	orrs	r2, r1
 80075a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075a6:	f003 0302 	and.w	r3, r3, #2
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d00a      	beq.n	80075c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	685b      	ldr	r3, [r3, #4]
 80075b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	430a      	orrs	r2, r1
 80075c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075c8:	f003 0304 	and.w	r3, r3, #4
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d00a      	beq.n	80075e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	430a      	orrs	r2, r1
 80075e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80075ea:	f003 0308 	and.w	r3, r3, #8
 80075ee:	2b00      	cmp	r3, #0
 80075f0:	d00a      	beq.n	8007608 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	685b      	ldr	r3, [r3, #4]
 80075f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	430a      	orrs	r2, r1
 8007606:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800760c:	f003 0310 	and.w	r3, r3, #16
 8007610:	2b00      	cmp	r3, #0
 8007612:	d00a      	beq.n	800762a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	689b      	ldr	r3, [r3, #8]
 800761a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	430a      	orrs	r2, r1
 8007628:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800762e:	f003 0320 	and.w	r3, r3, #32
 8007632:	2b00      	cmp	r3, #0
 8007634:	d00a      	beq.n	800764c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	689b      	ldr	r3, [r3, #8]
 800763c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	430a      	orrs	r2, r1
 800764a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007650:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007654:	2b00      	cmp	r3, #0
 8007656:	d01a      	beq.n	800768e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	685b      	ldr	r3, [r3, #4]
 800765e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	430a      	orrs	r2, r1
 800766c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007672:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007676:	d10a      	bne.n	800768e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	430a      	orrs	r2, r1
 800768c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007696:	2b00      	cmp	r3, #0
 8007698:	d00a      	beq.n	80076b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	430a      	orrs	r2, r1
 80076ae:	605a      	str	r2, [r3, #4]
  }
}
 80076b0:	bf00      	nop
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b086      	sub	sp, #24
 80076c0:	af02      	add	r7, sp, #8
 80076c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2200      	movs	r2, #0
 80076c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80076cc:	f7fa fb20 	bl	8001d10 <HAL_GetTick>
 80076d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	f003 0308 	and.w	r3, r3, #8
 80076dc:	2b08      	cmp	r3, #8
 80076de:	d10e      	bne.n	80076fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80076e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80076e4:	9300      	str	r3, [sp, #0]
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	2200      	movs	r2, #0
 80076ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f82d 	bl	800774e <UART_WaitOnFlagUntilTimeout>
 80076f4:	4603      	mov	r3, r0
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d001      	beq.n	80076fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80076fa:	2303      	movs	r3, #3
 80076fc:	e023      	b.n	8007746 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f003 0304 	and.w	r3, r3, #4
 8007708:	2b04      	cmp	r3, #4
 800770a:	d10e      	bne.n	800772a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800770c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007710:	9300      	str	r3, [sp, #0]
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2200      	movs	r2, #0
 8007716:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800771a:	6878      	ldr	r0, [r7, #4]
 800771c:	f000 f817 	bl	800774e <UART_WaitOnFlagUntilTimeout>
 8007720:	4603      	mov	r3, r0
 8007722:	2b00      	cmp	r3, #0
 8007724:	d001      	beq.n	800772a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007726:	2303      	movs	r3, #3
 8007728:	e00d      	b.n	8007746 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	2220      	movs	r2, #32
 800772e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2220      	movs	r2, #32
 8007734:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}

0800774e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800774e:	b580      	push	{r7, lr}
 8007750:	b09c      	sub	sp, #112	; 0x70
 8007752:	af00      	add	r7, sp, #0
 8007754:	60f8      	str	r0, [r7, #12]
 8007756:	60b9      	str	r1, [r7, #8]
 8007758:	603b      	str	r3, [r7, #0]
 800775a:	4613      	mov	r3, r2
 800775c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800775e:	e0a5      	b.n	80078ac <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007760:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007762:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007766:	f000 80a1 	beq.w	80078ac <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800776a:	f7fa fad1 	bl	8001d10 <HAL_GetTick>
 800776e:	4602      	mov	r2, r0
 8007770:	683b      	ldr	r3, [r7, #0]
 8007772:	1ad3      	subs	r3, r2, r3
 8007774:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007776:	429a      	cmp	r2, r3
 8007778:	d302      	bcc.n	8007780 <UART_WaitOnFlagUntilTimeout+0x32>
 800777a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800777c:	2b00      	cmp	r3, #0
 800777e:	d13e      	bne.n	80077fe <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007786:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007788:	e853 3f00 	ldrex	r3, [r3]
 800778c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800778e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007790:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007794:	667b      	str	r3, [r7, #100]	; 0x64
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	461a      	mov	r2, r3
 800779c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800779e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077a0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80077a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80077a6:	e841 2300 	strex	r3, r2, [r1]
 80077aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80077ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d1e6      	bne.n	8007780 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	3308      	adds	r3, #8
 80077b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077bc:	e853 3f00 	ldrex	r3, [r3]
 80077c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80077c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c4:	f023 0301 	bic.w	r3, r3, #1
 80077c8:	663b      	str	r3, [r7, #96]	; 0x60
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	3308      	adds	r3, #8
 80077d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80077d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80077d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80077d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80077da:	e841 2300 	strex	r3, r2, [r1]
 80077de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80077e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d1e5      	bne.n	80077b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2220      	movs	r2, #32
 80077ea:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	2220      	movs	r2, #32
 80077f0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	2200      	movs	r2, #0
 80077f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80077fa:	2303      	movs	r3, #3
 80077fc:	e067      	b.n	80078ce <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	f003 0304 	and.w	r3, r3, #4
 8007808:	2b00      	cmp	r3, #0
 800780a:	d04f      	beq.n	80078ac <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	69db      	ldr	r3, [r3, #28]
 8007812:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007816:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800781a:	d147      	bne.n	80078ac <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007824:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800782c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800782e:	e853 3f00 	ldrex	r3, [r3]
 8007832:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007834:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007836:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800783a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	461a      	mov	r2, r3
 8007842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007844:	637b      	str	r3, [r7, #52]	; 0x34
 8007846:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007848:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800784a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800784c:	e841 2300 	strex	r3, r2, [r1]
 8007850:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007854:	2b00      	cmp	r3, #0
 8007856:	d1e6      	bne.n	8007826 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	681b      	ldr	r3, [r3, #0]
 800785c:	3308      	adds	r3, #8
 800785e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007860:	697b      	ldr	r3, [r7, #20]
 8007862:	e853 3f00 	ldrex	r3, [r3]
 8007866:	613b      	str	r3, [r7, #16]
   return(result);
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	f023 0301 	bic.w	r3, r3, #1
 800786e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	3308      	adds	r3, #8
 8007876:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007878:	623a      	str	r2, [r7, #32]
 800787a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787c:	69f9      	ldr	r1, [r7, #28]
 800787e:	6a3a      	ldr	r2, [r7, #32]
 8007880:	e841 2300 	strex	r3, r2, [r1]
 8007884:	61bb      	str	r3, [r7, #24]
   return(result);
 8007886:	69bb      	ldr	r3, [r7, #24]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d1e5      	bne.n	8007858 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	2220      	movs	r2, #32
 8007890:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	2220      	movs	r2, #32
 8007896:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	2220      	movs	r2, #32
 800789c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	2200      	movs	r2, #0
 80078a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80078a8:	2303      	movs	r3, #3
 80078aa:	e010      	b.n	80078ce <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	69da      	ldr	r2, [r3, #28]
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	4013      	ands	r3, r2
 80078b6:	68ba      	ldr	r2, [r7, #8]
 80078b8:	429a      	cmp	r2, r3
 80078ba:	bf0c      	ite	eq
 80078bc:	2301      	moveq	r3, #1
 80078be:	2300      	movne	r3, #0
 80078c0:	b2db      	uxtb	r3, r3
 80078c2:	461a      	mov	r2, r3
 80078c4:	79fb      	ldrb	r3, [r7, #7]
 80078c6:	429a      	cmp	r2, r3
 80078c8:	f43f af4a 	beq.w	8007760 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80078cc:	2300      	movs	r3, #0
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3770      	adds	r7, #112	; 0x70
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
	...

080078d8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078d8:	b480      	push	{r7}
 80078da:	b097      	sub	sp, #92	; 0x5c
 80078dc:	af00      	add	r7, sp, #0
 80078de:	60f8      	str	r0, [r7, #12]
 80078e0:	60b9      	str	r1, [r7, #8]
 80078e2:	4613      	mov	r3, r2
 80078e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	68ba      	ldr	r2, [r7, #8]
 80078ea:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	88fa      	ldrh	r2, [r7, #6]
 80078f0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	88fa      	ldrh	r2, [r7, #6]
 80078f8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80078fc:	68fb      	ldr	r3, [r7, #12]
 80078fe:	2200      	movs	r2, #0
 8007900:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	689b      	ldr	r3, [r3, #8]
 8007906:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800790a:	d10e      	bne.n	800792a <UART_Start_Receive_IT+0x52>
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	691b      	ldr	r3, [r3, #16]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d105      	bne.n	8007920 <UART_Start_Receive_IT+0x48>
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f240 12ff 	movw	r2, #511	; 0x1ff
 800791a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800791e:	e02d      	b.n	800797c <UART_Start_Receive_IT+0xa4>
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	22ff      	movs	r2, #255	; 0xff
 8007924:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007928:	e028      	b.n	800797c <UART_Start_Receive_IT+0xa4>
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	689b      	ldr	r3, [r3, #8]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d10d      	bne.n	800794e <UART_Start_Receive_IT+0x76>
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	691b      	ldr	r3, [r3, #16]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d104      	bne.n	8007944 <UART_Start_Receive_IT+0x6c>
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	22ff      	movs	r2, #255	; 0xff
 800793e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007942:	e01b      	b.n	800797c <UART_Start_Receive_IT+0xa4>
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	227f      	movs	r2, #127	; 0x7f
 8007948:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800794c:	e016      	b.n	800797c <UART_Start_Receive_IT+0xa4>
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	689b      	ldr	r3, [r3, #8]
 8007952:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007956:	d10d      	bne.n	8007974 <UART_Start_Receive_IT+0x9c>
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	691b      	ldr	r3, [r3, #16]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d104      	bne.n	800796a <UART_Start_Receive_IT+0x92>
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	227f      	movs	r2, #127	; 0x7f
 8007964:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007968:	e008      	b.n	800797c <UART_Start_Receive_IT+0xa4>
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	223f      	movs	r2, #63	; 0x3f
 800796e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8007972:	e003      	b.n	800797c <UART_Start_Receive_IT+0xa4>
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2200      	movs	r2, #0
 8007978:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2200      	movs	r2, #0
 8007980:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	2222      	movs	r2, #34	; 0x22
 8007988:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	3308      	adds	r3, #8
 8007990:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007994:	e853 3f00 	ldrex	r3, [r3]
 8007998:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800799a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800799c:	f043 0301 	orr.w	r3, r3, #1
 80079a0:	657b      	str	r3, [r7, #84]	; 0x54
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	3308      	adds	r3, #8
 80079a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80079aa:	64ba      	str	r2, [r7, #72]	; 0x48
 80079ac:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80079b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079b2:	e841 2300 	strex	r3, r2, [r1]
 80079b6:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80079b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d1e5      	bne.n	800798a <UART_Start_Receive_IT+0xb2>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	689b      	ldr	r3, [r3, #8]
 80079c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079c6:	d107      	bne.n	80079d8 <UART_Start_Receive_IT+0x100>
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	691b      	ldr	r3, [r3, #16]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d103      	bne.n	80079d8 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	4a24      	ldr	r2, [pc, #144]	; (8007a64 <UART_Start_Receive_IT+0x18c>)
 80079d4:	665a      	str	r2, [r3, #100]	; 0x64
 80079d6:	e002      	b.n	80079de <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	4a23      	ldr	r2, [pc, #140]	; (8007a68 <UART_Start_Receive_IT+0x190>)
 80079dc:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	2200      	movs	r2, #0
 80079e2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	691b      	ldr	r3, [r3, #16]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d019      	beq.n	8007a22 <UART_Start_Receive_IT+0x14a>
  { 
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079f6:	e853 3f00 	ldrex	r3, [r3]
 80079fa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079fe:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007a02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	461a      	mov	r2, r3
 8007a0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a0c:	637b      	str	r3, [r7, #52]	; 0x34
 8007a0e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a10:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007a12:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007a14:	e841 2300 	strex	r3, r2, [r1]
 8007a18:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d1e6      	bne.n	80079ee <UART_Start_Receive_IT+0x116>
 8007a20:	e018      	b.n	8007a54 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	e853 3f00 	ldrex	r3, [r3]
 8007a2e:	613b      	str	r3, [r7, #16]
   return(result);
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	f043 0320 	orr.w	r3, r3, #32
 8007a36:	653b      	str	r3, [r7, #80]	; 0x50
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	461a      	mov	r2, r3
 8007a3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a40:	623b      	str	r3, [r7, #32]
 8007a42:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a44:	69f9      	ldr	r1, [r7, #28]
 8007a46:	6a3a      	ldr	r2, [r7, #32]
 8007a48:	e841 2300 	strex	r3, r2, [r1]
 8007a4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a4e:	69bb      	ldr	r3, [r7, #24]
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d1e6      	bne.n	8007a22 <UART_Start_Receive_IT+0x14a>
  }
  return HAL_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	375c      	adds	r7, #92	; 0x5c
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr
 8007a62:	bf00      	nop
 8007a64:	08007d0f 	.word	0x08007d0f
 8007a68:	08007bb3 	.word	0x08007bb3

08007a6c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a6c:	b480      	push	{r7}
 8007a6e:	b095      	sub	sp, #84	; 0x54
 8007a70:	af00      	add	r7, sp, #0
 8007a72:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a7c:	e853 3f00 	ldrex	r3, [r3]
 8007a80:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a84:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	461a      	mov	r2, r3
 8007a90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a92:	643b      	str	r3, [r7, #64]	; 0x40
 8007a94:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a96:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007a98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007a9a:	e841 2300 	strex	r3, r2, [r1]
 8007a9e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007aa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d1e6      	bne.n	8007a74 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	3308      	adds	r3, #8
 8007aac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aae:	6a3b      	ldr	r3, [r7, #32]
 8007ab0:	e853 3f00 	ldrex	r3, [r3]
 8007ab4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007ab6:	69fb      	ldr	r3, [r7, #28]
 8007ab8:	f023 0301 	bic.w	r3, r3, #1
 8007abc:	64bb      	str	r3, [r7, #72]	; 0x48
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	3308      	adds	r3, #8
 8007ac4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ac6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ac8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007acc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ace:	e841 2300 	strex	r3, r2, [r1]
 8007ad2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d1e5      	bne.n	8007aa6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007ade:	2b01      	cmp	r3, #1
 8007ae0:	d118      	bne.n	8007b14 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	e853 3f00 	ldrex	r3, [r3]
 8007aee:	60bb      	str	r3, [r7, #8]
   return(result);
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	f023 0310 	bic.w	r3, r3, #16
 8007af6:	647b      	str	r3, [r7, #68]	; 0x44
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	461a      	mov	r2, r3
 8007afe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b00:	61bb      	str	r3, [r7, #24]
 8007b02:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b04:	6979      	ldr	r1, [r7, #20]
 8007b06:	69ba      	ldr	r2, [r7, #24]
 8007b08:	e841 2300 	strex	r3, r2, [r1]
 8007b0c:	613b      	str	r3, [r7, #16]
   return(result);
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1e6      	bne.n	8007ae2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2220      	movs	r2, #32
 8007b18:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2200      	movs	r2, #0
 8007b1e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2200      	movs	r2, #0
 8007b24:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007b26:	bf00      	nop
 8007b28:	3754      	adds	r7, #84	; 0x54
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b30:	4770      	bx	lr

08007b32 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b32:	b580      	push	{r7, lr}
 8007b34:	b084      	sub	sp, #16
 8007b36:	af00      	add	r7, sp, #0
 8007b38:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b3e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007b40:	68fb      	ldr	r3, [r7, #12]
 8007b42:	2200      	movs	r2, #0
 8007b44:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b50:	68f8      	ldr	r0, [r7, #12]
 8007b52:	f7ff fa8f 	bl	8007074 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b56:	bf00      	nop
 8007b58:	3710      	adds	r7, #16
 8007b5a:	46bd      	mov	sp, r7
 8007b5c:	bd80      	pop	{r7, pc}

08007b5e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b088      	sub	sp, #32
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	e853 3f00 	ldrex	r3, [r3]
 8007b72:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b7a:	61fb      	str	r3, [r7, #28]
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	461a      	mov	r2, r3
 8007b82:	69fb      	ldr	r3, [r7, #28]
 8007b84:	61bb      	str	r3, [r7, #24]
 8007b86:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b88:	6979      	ldr	r1, [r7, #20]
 8007b8a:	69ba      	ldr	r2, [r7, #24]
 8007b8c:	e841 2300 	strex	r3, r2, [r1]
 8007b90:	613b      	str	r3, [r7, #16]
   return(result);
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d1e6      	bne.n	8007b66 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2220      	movs	r2, #32
 8007b9c:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	2200      	movs	r2, #0
 8007ba2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007ba4:	6878      	ldr	r0, [r7, #4]
 8007ba6:	f7ff fa5b 	bl	8007060 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007baa:	bf00      	nop
 8007bac:	3720      	adds	r7, #32
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}

08007bb2 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b096      	sub	sp, #88	; 0x58
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007bc0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007bc8:	2b22      	cmp	r3, #34	; 0x22
 8007bca:	f040 8094 	bne.w	8007cf6 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bd4:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007bd8:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007bdc:	b2d9      	uxtb	r1, r3
 8007bde:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007be2:	b2da      	uxtb	r2, r3
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007be8:	400a      	ands	r2, r1
 8007bea:	b2d2      	uxtb	r2, r2
 8007bec:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007bf2:	1c5a      	adds	r2, r3, #1
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007bfe:	b29b      	uxth	r3, r3
 8007c00:	3b01      	subs	r3, #1
 8007c02:	b29a      	uxth	r2, r3
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007c10:	b29b      	uxth	r3, r3
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d177      	bne.n	8007d06 <UART_RxISR_8BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c1e:	e853 3f00 	ldrex	r3, [r3]
 8007c22:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007c24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c26:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007c2a:	653b      	str	r3, [r7, #80]	; 0x50
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	461a      	mov	r2, r3
 8007c32:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007c34:	647b      	str	r3, [r7, #68]	; 0x44
 8007c36:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c38:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007c3a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007c3c:	e841 2300 	strex	r3, r2, [r1]
 8007c40:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007c42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d1e6      	bne.n	8007c16 <UART_RxISR_8BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	3308      	adds	r3, #8
 8007c4e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c52:	e853 3f00 	ldrex	r3, [r3]
 8007c56:	623b      	str	r3, [r7, #32]
   return(result);
 8007c58:	6a3b      	ldr	r3, [r7, #32]
 8007c5a:	f023 0301 	bic.w	r3, r3, #1
 8007c5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	3308      	adds	r3, #8
 8007c66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007c68:	633a      	str	r2, [r7, #48]	; 0x30
 8007c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c6c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007c6e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007c70:	e841 2300 	strex	r3, r2, [r1]
 8007c74:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007c76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d1e5      	bne.n	8007c48 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2220      	movs	r2, #32
 8007c80:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2200      	movs	r2, #0
 8007c86:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c8c:	2b01      	cmp	r3, #1
 8007c8e:	d12e      	bne.n	8007cee <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	2200      	movs	r2, #0
 8007c94:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	e853 3f00 	ldrex	r3, [r3]
 8007ca2:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f023 0310 	bic.w	r3, r3, #16
 8007caa:	64bb      	str	r3, [r7, #72]	; 0x48
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	461a      	mov	r2, r3
 8007cb2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007cb4:	61fb      	str	r3, [r7, #28]
 8007cb6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb8:	69b9      	ldr	r1, [r7, #24]
 8007cba:	69fa      	ldr	r2, [r7, #28]
 8007cbc:	e841 2300 	strex	r3, r2, [r1]
 8007cc0:	617b      	str	r3, [r7, #20]
   return(result);
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d1e6      	bne.n	8007c96 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	69db      	ldr	r3, [r3, #28]
 8007cce:	f003 0310 	and.w	r3, r3, #16
 8007cd2:	2b10      	cmp	r3, #16
 8007cd4:	d103      	bne.n	8007cde <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	2210      	movs	r2, #16
 8007cdc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f7ff f9ce 	bl	8007088 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007cec:	e00b      	b.n	8007d06 <UART_RxISR_8BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f7f9 f89a 	bl	8000e28 <HAL_UART_RxCpltCallback>
}
 8007cf4:	e007      	b.n	8007d06 <UART_RxISR_8BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	699a      	ldr	r2, [r3, #24]
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f042 0208 	orr.w	r2, r2, #8
 8007d04:	619a      	str	r2, [r3, #24]
}
 8007d06:	bf00      	nop
 8007d08:	3758      	adds	r7, #88	; 0x58
 8007d0a:	46bd      	mov	sp, r7
 8007d0c:	bd80      	pop	{r7, pc}

08007d0e <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007d0e:	b580      	push	{r7, lr}
 8007d10:	b096      	sub	sp, #88	; 0x58
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007d1c:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007d24:	2b22      	cmp	r3, #34	; 0x22
 8007d26:	f040 8094 	bne.w	8007e52 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d30:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d38:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007d3a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007d3e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007d42:	4013      	ands	r3, r2
 8007d44:	b29a      	uxth	r2, r3
 8007d46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d48:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d4e:	1c9a      	adds	r2, r3, #2
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	3b01      	subs	r3, #1
 8007d5e:	b29a      	uxth	r2, r3
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007d6c:	b29b      	uxth	r3, r3
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d177      	bne.n	8007e62 <UART_RxISR_16BIT+0x154>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d7a:	e853 3f00 	ldrex	r3, [r3]
 8007d7e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d82:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007d86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	461a      	mov	r2, r3
 8007d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d90:	643b      	str	r3, [r7, #64]	; 0x40
 8007d92:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d94:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007d96:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007d98:	e841 2300 	strex	r3, r2, [r1]
 8007d9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d1e6      	bne.n	8007d72 <UART_RxISR_16BIT+0x64>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	3308      	adds	r3, #8
 8007daa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dac:	6a3b      	ldr	r3, [r7, #32]
 8007dae:	e853 3f00 	ldrex	r3, [r3]
 8007db2:	61fb      	str	r3, [r7, #28]
   return(result);
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	f023 0301 	bic.w	r3, r3, #1
 8007dba:	64bb      	str	r3, [r7, #72]	; 0x48
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	3308      	adds	r3, #8
 8007dc2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007dc4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007dc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007dca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007dcc:	e841 2300 	strex	r3, r2, [r1]
 8007dd0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d1e5      	bne.n	8007da4 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	2220      	movs	r2, #32
 8007ddc:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007de8:	2b01      	cmp	r3, #1
 8007dea:	d12e      	bne.n	8007e4a <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2200      	movs	r2, #0
 8007df0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	e853 3f00 	ldrex	r3, [r3]
 8007dfe:	60bb      	str	r3, [r7, #8]
   return(result);
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	f023 0310 	bic.w	r3, r3, #16
 8007e06:	647b      	str	r3, [r7, #68]	; 0x44
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	461a      	mov	r2, r3
 8007e0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007e10:	61bb      	str	r3, [r7, #24]
 8007e12:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e14:	6979      	ldr	r1, [r7, #20]
 8007e16:	69ba      	ldr	r2, [r7, #24]
 8007e18:	e841 2300 	strex	r3, r2, [r1]
 8007e1c:	613b      	str	r3, [r7, #16]
   return(result);
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d1e6      	bne.n	8007df2 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	69db      	ldr	r3, [r3, #28]
 8007e2a:	f003 0310 	and.w	r3, r3, #16
 8007e2e:	2b10      	cmp	r3, #16
 8007e30:	d103      	bne.n	8007e3a <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2210      	movs	r2, #16
 8007e38:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007e40:	4619      	mov	r1, r3
 8007e42:	6878      	ldr	r0, [r7, #4]
 8007e44:	f7ff f920 	bl	8007088 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007e48:	e00b      	b.n	8007e62 <UART_RxISR_16BIT+0x154>
        HAL_UART_RxCpltCallback(huart);
 8007e4a:	6878      	ldr	r0, [r7, #4]
 8007e4c:	f7f8 ffec 	bl	8000e28 <HAL_UART_RxCpltCallback>
}
 8007e50:	e007      	b.n	8007e62 <UART_RxISR_16BIT+0x154>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	699a      	ldr	r2, [r3, #24]
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f042 0208 	orr.w	r2, r2, #8
 8007e60:	619a      	str	r2, [r3, #24]
}
 8007e62:	bf00      	nop
 8007e64:	3758      	adds	r7, #88	; 0x58
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
	...

08007e6c <__errno>:
 8007e6c:	4b01      	ldr	r3, [pc, #4]	; (8007e74 <__errno+0x8>)
 8007e6e:	6818      	ldr	r0, [r3, #0]
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	2000009c 	.word	0x2000009c

08007e78 <__libc_init_array>:
 8007e78:	b570      	push	{r4, r5, r6, lr}
 8007e7a:	4d0d      	ldr	r5, [pc, #52]	; (8007eb0 <__libc_init_array+0x38>)
 8007e7c:	4c0d      	ldr	r4, [pc, #52]	; (8007eb4 <__libc_init_array+0x3c>)
 8007e7e:	1b64      	subs	r4, r4, r5
 8007e80:	10a4      	asrs	r4, r4, #2
 8007e82:	2600      	movs	r6, #0
 8007e84:	42a6      	cmp	r6, r4
 8007e86:	d109      	bne.n	8007e9c <__libc_init_array+0x24>
 8007e88:	4d0b      	ldr	r5, [pc, #44]	; (8007eb8 <__libc_init_array+0x40>)
 8007e8a:	4c0c      	ldr	r4, [pc, #48]	; (8007ebc <__libc_init_array+0x44>)
 8007e8c:	f001 f912 	bl	80090b4 <_init>
 8007e90:	1b64      	subs	r4, r4, r5
 8007e92:	10a4      	asrs	r4, r4, #2
 8007e94:	2600      	movs	r6, #0
 8007e96:	42a6      	cmp	r6, r4
 8007e98:	d105      	bne.n	8007ea6 <__libc_init_array+0x2e>
 8007e9a:	bd70      	pop	{r4, r5, r6, pc}
 8007e9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ea0:	4798      	blx	r3
 8007ea2:	3601      	adds	r6, #1
 8007ea4:	e7ee      	b.n	8007e84 <__libc_init_array+0xc>
 8007ea6:	f855 3b04 	ldr.w	r3, [r5], #4
 8007eaa:	4798      	blx	r3
 8007eac:	3601      	adds	r6, #1
 8007eae:	e7f2      	b.n	8007e96 <__libc_init_array+0x1e>
 8007eb0:	0800936c 	.word	0x0800936c
 8007eb4:	0800936c 	.word	0x0800936c
 8007eb8:	0800936c 	.word	0x0800936c
 8007ebc:	08009370 	.word	0x08009370

08007ec0 <memset>:
 8007ec0:	4402      	add	r2, r0
 8007ec2:	4603      	mov	r3, r0
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d100      	bne.n	8007eca <memset+0xa>
 8007ec8:	4770      	bx	lr
 8007eca:	f803 1b01 	strb.w	r1, [r3], #1
 8007ece:	e7f9      	b.n	8007ec4 <memset+0x4>

08007ed0 <siprintf>:
 8007ed0:	b40e      	push	{r1, r2, r3}
 8007ed2:	b500      	push	{lr}
 8007ed4:	b09c      	sub	sp, #112	; 0x70
 8007ed6:	ab1d      	add	r3, sp, #116	; 0x74
 8007ed8:	9002      	str	r0, [sp, #8]
 8007eda:	9006      	str	r0, [sp, #24]
 8007edc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007ee0:	4809      	ldr	r0, [pc, #36]	; (8007f08 <siprintf+0x38>)
 8007ee2:	9107      	str	r1, [sp, #28]
 8007ee4:	9104      	str	r1, [sp, #16]
 8007ee6:	4909      	ldr	r1, [pc, #36]	; (8007f0c <siprintf+0x3c>)
 8007ee8:	f853 2b04 	ldr.w	r2, [r3], #4
 8007eec:	9105      	str	r1, [sp, #20]
 8007eee:	6800      	ldr	r0, [r0, #0]
 8007ef0:	9301      	str	r3, [sp, #4]
 8007ef2:	a902      	add	r1, sp, #8
 8007ef4:	f000 f896 	bl	8008024 <_svfiprintf_r>
 8007ef8:	9b02      	ldr	r3, [sp, #8]
 8007efa:	2200      	movs	r2, #0
 8007efc:	701a      	strb	r2, [r3, #0]
 8007efe:	b01c      	add	sp, #112	; 0x70
 8007f00:	f85d eb04 	ldr.w	lr, [sp], #4
 8007f04:	b003      	add	sp, #12
 8007f06:	4770      	bx	lr
 8007f08:	2000009c 	.word	0x2000009c
 8007f0c:	ffff0208 	.word	0xffff0208

08007f10 <siscanf>:
 8007f10:	b40e      	push	{r1, r2, r3}
 8007f12:	b510      	push	{r4, lr}
 8007f14:	b09f      	sub	sp, #124	; 0x7c
 8007f16:	ac21      	add	r4, sp, #132	; 0x84
 8007f18:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007f1c:	f854 2b04 	ldr.w	r2, [r4], #4
 8007f20:	9201      	str	r2, [sp, #4]
 8007f22:	f8ad 101c 	strh.w	r1, [sp, #28]
 8007f26:	9004      	str	r0, [sp, #16]
 8007f28:	9008      	str	r0, [sp, #32]
 8007f2a:	f7f8 f989 	bl	8000240 <strlen>
 8007f2e:	4b0c      	ldr	r3, [pc, #48]	; (8007f60 <siscanf+0x50>)
 8007f30:	9005      	str	r0, [sp, #20]
 8007f32:	9009      	str	r0, [sp, #36]	; 0x24
 8007f34:	930d      	str	r3, [sp, #52]	; 0x34
 8007f36:	480b      	ldr	r0, [pc, #44]	; (8007f64 <siscanf+0x54>)
 8007f38:	9a01      	ldr	r2, [sp, #4]
 8007f3a:	6800      	ldr	r0, [r0, #0]
 8007f3c:	9403      	str	r4, [sp, #12]
 8007f3e:	2300      	movs	r3, #0
 8007f40:	9311      	str	r3, [sp, #68]	; 0x44
 8007f42:	9316      	str	r3, [sp, #88]	; 0x58
 8007f44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007f48:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007f4c:	a904      	add	r1, sp, #16
 8007f4e:	4623      	mov	r3, r4
 8007f50:	f000 f9c2 	bl	80082d8 <__ssvfiscanf_r>
 8007f54:	b01f      	add	sp, #124	; 0x7c
 8007f56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f5a:	b003      	add	sp, #12
 8007f5c:	4770      	bx	lr
 8007f5e:	bf00      	nop
 8007f60:	08007f69 	.word	0x08007f69
 8007f64:	2000009c 	.word	0x2000009c

08007f68 <__seofread>:
 8007f68:	2000      	movs	r0, #0
 8007f6a:	4770      	bx	lr

08007f6c <__ssputs_r>:
 8007f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f70:	688e      	ldr	r6, [r1, #8]
 8007f72:	429e      	cmp	r6, r3
 8007f74:	4682      	mov	sl, r0
 8007f76:	460c      	mov	r4, r1
 8007f78:	4690      	mov	r8, r2
 8007f7a:	461f      	mov	r7, r3
 8007f7c:	d838      	bhi.n	8007ff0 <__ssputs_r+0x84>
 8007f7e:	898a      	ldrh	r2, [r1, #12]
 8007f80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007f84:	d032      	beq.n	8007fec <__ssputs_r+0x80>
 8007f86:	6825      	ldr	r5, [r4, #0]
 8007f88:	6909      	ldr	r1, [r1, #16]
 8007f8a:	eba5 0901 	sub.w	r9, r5, r1
 8007f8e:	6965      	ldr	r5, [r4, #20]
 8007f90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007f94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007f98:	3301      	adds	r3, #1
 8007f9a:	444b      	add	r3, r9
 8007f9c:	106d      	asrs	r5, r5, #1
 8007f9e:	429d      	cmp	r5, r3
 8007fa0:	bf38      	it	cc
 8007fa2:	461d      	movcc	r5, r3
 8007fa4:	0553      	lsls	r3, r2, #21
 8007fa6:	d531      	bpl.n	800800c <__ssputs_r+0xa0>
 8007fa8:	4629      	mov	r1, r5
 8007faa:	f000 ffdf 	bl	8008f6c <_malloc_r>
 8007fae:	4606      	mov	r6, r0
 8007fb0:	b950      	cbnz	r0, 8007fc8 <__ssputs_r+0x5c>
 8007fb2:	230c      	movs	r3, #12
 8007fb4:	f8ca 3000 	str.w	r3, [sl]
 8007fb8:	89a3      	ldrh	r3, [r4, #12]
 8007fba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007fbe:	81a3      	strh	r3, [r4, #12]
 8007fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8007fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007fc8:	6921      	ldr	r1, [r4, #16]
 8007fca:	464a      	mov	r2, r9
 8007fcc:	f000 ff56 	bl	8008e7c <memcpy>
 8007fd0:	89a3      	ldrh	r3, [r4, #12]
 8007fd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007fd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007fda:	81a3      	strh	r3, [r4, #12]
 8007fdc:	6126      	str	r6, [r4, #16]
 8007fde:	6165      	str	r5, [r4, #20]
 8007fe0:	444e      	add	r6, r9
 8007fe2:	eba5 0509 	sub.w	r5, r5, r9
 8007fe6:	6026      	str	r6, [r4, #0]
 8007fe8:	60a5      	str	r5, [r4, #8]
 8007fea:	463e      	mov	r6, r7
 8007fec:	42be      	cmp	r6, r7
 8007fee:	d900      	bls.n	8007ff2 <__ssputs_r+0x86>
 8007ff0:	463e      	mov	r6, r7
 8007ff2:	4632      	mov	r2, r6
 8007ff4:	6820      	ldr	r0, [r4, #0]
 8007ff6:	4641      	mov	r1, r8
 8007ff8:	f000 ff4e 	bl	8008e98 <memmove>
 8007ffc:	68a3      	ldr	r3, [r4, #8]
 8007ffe:	6822      	ldr	r2, [r4, #0]
 8008000:	1b9b      	subs	r3, r3, r6
 8008002:	4432      	add	r2, r6
 8008004:	60a3      	str	r3, [r4, #8]
 8008006:	6022      	str	r2, [r4, #0]
 8008008:	2000      	movs	r0, #0
 800800a:	e7db      	b.n	8007fc4 <__ssputs_r+0x58>
 800800c:	462a      	mov	r2, r5
 800800e:	f001 f807 	bl	8009020 <_realloc_r>
 8008012:	4606      	mov	r6, r0
 8008014:	2800      	cmp	r0, #0
 8008016:	d1e1      	bne.n	8007fdc <__ssputs_r+0x70>
 8008018:	6921      	ldr	r1, [r4, #16]
 800801a:	4650      	mov	r0, sl
 800801c:	f000 ff56 	bl	8008ecc <_free_r>
 8008020:	e7c7      	b.n	8007fb2 <__ssputs_r+0x46>
	...

08008024 <_svfiprintf_r>:
 8008024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008028:	4698      	mov	r8, r3
 800802a:	898b      	ldrh	r3, [r1, #12]
 800802c:	061b      	lsls	r3, r3, #24
 800802e:	b09d      	sub	sp, #116	; 0x74
 8008030:	4607      	mov	r7, r0
 8008032:	460d      	mov	r5, r1
 8008034:	4614      	mov	r4, r2
 8008036:	d50e      	bpl.n	8008056 <_svfiprintf_r+0x32>
 8008038:	690b      	ldr	r3, [r1, #16]
 800803a:	b963      	cbnz	r3, 8008056 <_svfiprintf_r+0x32>
 800803c:	2140      	movs	r1, #64	; 0x40
 800803e:	f000 ff95 	bl	8008f6c <_malloc_r>
 8008042:	6028      	str	r0, [r5, #0]
 8008044:	6128      	str	r0, [r5, #16]
 8008046:	b920      	cbnz	r0, 8008052 <_svfiprintf_r+0x2e>
 8008048:	230c      	movs	r3, #12
 800804a:	603b      	str	r3, [r7, #0]
 800804c:	f04f 30ff 	mov.w	r0, #4294967295
 8008050:	e0d1      	b.n	80081f6 <_svfiprintf_r+0x1d2>
 8008052:	2340      	movs	r3, #64	; 0x40
 8008054:	616b      	str	r3, [r5, #20]
 8008056:	2300      	movs	r3, #0
 8008058:	9309      	str	r3, [sp, #36]	; 0x24
 800805a:	2320      	movs	r3, #32
 800805c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008060:	f8cd 800c 	str.w	r8, [sp, #12]
 8008064:	2330      	movs	r3, #48	; 0x30
 8008066:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008210 <_svfiprintf_r+0x1ec>
 800806a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800806e:	f04f 0901 	mov.w	r9, #1
 8008072:	4623      	mov	r3, r4
 8008074:	469a      	mov	sl, r3
 8008076:	f813 2b01 	ldrb.w	r2, [r3], #1
 800807a:	b10a      	cbz	r2, 8008080 <_svfiprintf_r+0x5c>
 800807c:	2a25      	cmp	r2, #37	; 0x25
 800807e:	d1f9      	bne.n	8008074 <_svfiprintf_r+0x50>
 8008080:	ebba 0b04 	subs.w	fp, sl, r4
 8008084:	d00b      	beq.n	800809e <_svfiprintf_r+0x7a>
 8008086:	465b      	mov	r3, fp
 8008088:	4622      	mov	r2, r4
 800808a:	4629      	mov	r1, r5
 800808c:	4638      	mov	r0, r7
 800808e:	f7ff ff6d 	bl	8007f6c <__ssputs_r>
 8008092:	3001      	adds	r0, #1
 8008094:	f000 80aa 	beq.w	80081ec <_svfiprintf_r+0x1c8>
 8008098:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800809a:	445a      	add	r2, fp
 800809c:	9209      	str	r2, [sp, #36]	; 0x24
 800809e:	f89a 3000 	ldrb.w	r3, [sl]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	f000 80a2 	beq.w	80081ec <_svfiprintf_r+0x1c8>
 80080a8:	2300      	movs	r3, #0
 80080aa:	f04f 32ff 	mov.w	r2, #4294967295
 80080ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80080b2:	f10a 0a01 	add.w	sl, sl, #1
 80080b6:	9304      	str	r3, [sp, #16]
 80080b8:	9307      	str	r3, [sp, #28]
 80080ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80080be:	931a      	str	r3, [sp, #104]	; 0x68
 80080c0:	4654      	mov	r4, sl
 80080c2:	2205      	movs	r2, #5
 80080c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080c8:	4851      	ldr	r0, [pc, #324]	; (8008210 <_svfiprintf_r+0x1ec>)
 80080ca:	f7f8 f8c1 	bl	8000250 <memchr>
 80080ce:	9a04      	ldr	r2, [sp, #16]
 80080d0:	b9d8      	cbnz	r0, 800810a <_svfiprintf_r+0xe6>
 80080d2:	06d0      	lsls	r0, r2, #27
 80080d4:	bf44      	itt	mi
 80080d6:	2320      	movmi	r3, #32
 80080d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080dc:	0711      	lsls	r1, r2, #28
 80080de:	bf44      	itt	mi
 80080e0:	232b      	movmi	r3, #43	; 0x2b
 80080e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80080e6:	f89a 3000 	ldrb.w	r3, [sl]
 80080ea:	2b2a      	cmp	r3, #42	; 0x2a
 80080ec:	d015      	beq.n	800811a <_svfiprintf_r+0xf6>
 80080ee:	9a07      	ldr	r2, [sp, #28]
 80080f0:	4654      	mov	r4, sl
 80080f2:	2000      	movs	r0, #0
 80080f4:	f04f 0c0a 	mov.w	ip, #10
 80080f8:	4621      	mov	r1, r4
 80080fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80080fe:	3b30      	subs	r3, #48	; 0x30
 8008100:	2b09      	cmp	r3, #9
 8008102:	d94e      	bls.n	80081a2 <_svfiprintf_r+0x17e>
 8008104:	b1b0      	cbz	r0, 8008134 <_svfiprintf_r+0x110>
 8008106:	9207      	str	r2, [sp, #28]
 8008108:	e014      	b.n	8008134 <_svfiprintf_r+0x110>
 800810a:	eba0 0308 	sub.w	r3, r0, r8
 800810e:	fa09 f303 	lsl.w	r3, r9, r3
 8008112:	4313      	orrs	r3, r2
 8008114:	9304      	str	r3, [sp, #16]
 8008116:	46a2      	mov	sl, r4
 8008118:	e7d2      	b.n	80080c0 <_svfiprintf_r+0x9c>
 800811a:	9b03      	ldr	r3, [sp, #12]
 800811c:	1d19      	adds	r1, r3, #4
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	9103      	str	r1, [sp, #12]
 8008122:	2b00      	cmp	r3, #0
 8008124:	bfbb      	ittet	lt
 8008126:	425b      	neglt	r3, r3
 8008128:	f042 0202 	orrlt.w	r2, r2, #2
 800812c:	9307      	strge	r3, [sp, #28]
 800812e:	9307      	strlt	r3, [sp, #28]
 8008130:	bfb8      	it	lt
 8008132:	9204      	strlt	r2, [sp, #16]
 8008134:	7823      	ldrb	r3, [r4, #0]
 8008136:	2b2e      	cmp	r3, #46	; 0x2e
 8008138:	d10c      	bne.n	8008154 <_svfiprintf_r+0x130>
 800813a:	7863      	ldrb	r3, [r4, #1]
 800813c:	2b2a      	cmp	r3, #42	; 0x2a
 800813e:	d135      	bne.n	80081ac <_svfiprintf_r+0x188>
 8008140:	9b03      	ldr	r3, [sp, #12]
 8008142:	1d1a      	adds	r2, r3, #4
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	9203      	str	r2, [sp, #12]
 8008148:	2b00      	cmp	r3, #0
 800814a:	bfb8      	it	lt
 800814c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008150:	3402      	adds	r4, #2
 8008152:	9305      	str	r3, [sp, #20]
 8008154:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008220 <_svfiprintf_r+0x1fc>
 8008158:	7821      	ldrb	r1, [r4, #0]
 800815a:	2203      	movs	r2, #3
 800815c:	4650      	mov	r0, sl
 800815e:	f7f8 f877 	bl	8000250 <memchr>
 8008162:	b140      	cbz	r0, 8008176 <_svfiprintf_r+0x152>
 8008164:	2340      	movs	r3, #64	; 0x40
 8008166:	eba0 000a 	sub.w	r0, r0, sl
 800816a:	fa03 f000 	lsl.w	r0, r3, r0
 800816e:	9b04      	ldr	r3, [sp, #16]
 8008170:	4303      	orrs	r3, r0
 8008172:	3401      	adds	r4, #1
 8008174:	9304      	str	r3, [sp, #16]
 8008176:	f814 1b01 	ldrb.w	r1, [r4], #1
 800817a:	4826      	ldr	r0, [pc, #152]	; (8008214 <_svfiprintf_r+0x1f0>)
 800817c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008180:	2206      	movs	r2, #6
 8008182:	f7f8 f865 	bl	8000250 <memchr>
 8008186:	2800      	cmp	r0, #0
 8008188:	d038      	beq.n	80081fc <_svfiprintf_r+0x1d8>
 800818a:	4b23      	ldr	r3, [pc, #140]	; (8008218 <_svfiprintf_r+0x1f4>)
 800818c:	bb1b      	cbnz	r3, 80081d6 <_svfiprintf_r+0x1b2>
 800818e:	9b03      	ldr	r3, [sp, #12]
 8008190:	3307      	adds	r3, #7
 8008192:	f023 0307 	bic.w	r3, r3, #7
 8008196:	3308      	adds	r3, #8
 8008198:	9303      	str	r3, [sp, #12]
 800819a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800819c:	4433      	add	r3, r6
 800819e:	9309      	str	r3, [sp, #36]	; 0x24
 80081a0:	e767      	b.n	8008072 <_svfiprintf_r+0x4e>
 80081a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80081a6:	460c      	mov	r4, r1
 80081a8:	2001      	movs	r0, #1
 80081aa:	e7a5      	b.n	80080f8 <_svfiprintf_r+0xd4>
 80081ac:	2300      	movs	r3, #0
 80081ae:	3401      	adds	r4, #1
 80081b0:	9305      	str	r3, [sp, #20]
 80081b2:	4619      	mov	r1, r3
 80081b4:	f04f 0c0a 	mov.w	ip, #10
 80081b8:	4620      	mov	r0, r4
 80081ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80081be:	3a30      	subs	r2, #48	; 0x30
 80081c0:	2a09      	cmp	r2, #9
 80081c2:	d903      	bls.n	80081cc <_svfiprintf_r+0x1a8>
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d0c5      	beq.n	8008154 <_svfiprintf_r+0x130>
 80081c8:	9105      	str	r1, [sp, #20]
 80081ca:	e7c3      	b.n	8008154 <_svfiprintf_r+0x130>
 80081cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80081d0:	4604      	mov	r4, r0
 80081d2:	2301      	movs	r3, #1
 80081d4:	e7f0      	b.n	80081b8 <_svfiprintf_r+0x194>
 80081d6:	ab03      	add	r3, sp, #12
 80081d8:	9300      	str	r3, [sp, #0]
 80081da:	462a      	mov	r2, r5
 80081dc:	4b0f      	ldr	r3, [pc, #60]	; (800821c <_svfiprintf_r+0x1f8>)
 80081de:	a904      	add	r1, sp, #16
 80081e0:	4638      	mov	r0, r7
 80081e2:	f3af 8000 	nop.w
 80081e6:	1c42      	adds	r2, r0, #1
 80081e8:	4606      	mov	r6, r0
 80081ea:	d1d6      	bne.n	800819a <_svfiprintf_r+0x176>
 80081ec:	89ab      	ldrh	r3, [r5, #12]
 80081ee:	065b      	lsls	r3, r3, #25
 80081f0:	f53f af2c 	bmi.w	800804c <_svfiprintf_r+0x28>
 80081f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80081f6:	b01d      	add	sp, #116	; 0x74
 80081f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081fc:	ab03      	add	r3, sp, #12
 80081fe:	9300      	str	r3, [sp, #0]
 8008200:	462a      	mov	r2, r5
 8008202:	4b06      	ldr	r3, [pc, #24]	; (800821c <_svfiprintf_r+0x1f8>)
 8008204:	a904      	add	r1, sp, #16
 8008206:	4638      	mov	r0, r7
 8008208:	f000 fa4c 	bl	80086a4 <_printf_i>
 800820c:	e7eb      	b.n	80081e6 <_svfiprintf_r+0x1c2>
 800820e:	bf00      	nop
 8008210:	080091b4 	.word	0x080091b4
 8008214:	080091be 	.word	0x080091be
 8008218:	00000000 	.word	0x00000000
 800821c:	08007f6d 	.word	0x08007f6d
 8008220:	080091ba 	.word	0x080091ba

08008224 <_sungetc_r>:
 8008224:	b538      	push	{r3, r4, r5, lr}
 8008226:	1c4b      	adds	r3, r1, #1
 8008228:	4614      	mov	r4, r2
 800822a:	d103      	bne.n	8008234 <_sungetc_r+0x10>
 800822c:	f04f 35ff 	mov.w	r5, #4294967295
 8008230:	4628      	mov	r0, r5
 8008232:	bd38      	pop	{r3, r4, r5, pc}
 8008234:	8993      	ldrh	r3, [r2, #12]
 8008236:	f023 0320 	bic.w	r3, r3, #32
 800823a:	8193      	strh	r3, [r2, #12]
 800823c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800823e:	6852      	ldr	r2, [r2, #4]
 8008240:	b2cd      	uxtb	r5, r1
 8008242:	b18b      	cbz	r3, 8008268 <_sungetc_r+0x44>
 8008244:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8008246:	4293      	cmp	r3, r2
 8008248:	dd08      	ble.n	800825c <_sungetc_r+0x38>
 800824a:	6823      	ldr	r3, [r4, #0]
 800824c:	1e5a      	subs	r2, r3, #1
 800824e:	6022      	str	r2, [r4, #0]
 8008250:	f803 5c01 	strb.w	r5, [r3, #-1]
 8008254:	6863      	ldr	r3, [r4, #4]
 8008256:	3301      	adds	r3, #1
 8008258:	6063      	str	r3, [r4, #4]
 800825a:	e7e9      	b.n	8008230 <_sungetc_r+0xc>
 800825c:	4621      	mov	r1, r4
 800825e:	f000 fdd1 	bl	8008e04 <__submore>
 8008262:	2800      	cmp	r0, #0
 8008264:	d0f1      	beq.n	800824a <_sungetc_r+0x26>
 8008266:	e7e1      	b.n	800822c <_sungetc_r+0x8>
 8008268:	6921      	ldr	r1, [r4, #16]
 800826a:	6823      	ldr	r3, [r4, #0]
 800826c:	b151      	cbz	r1, 8008284 <_sungetc_r+0x60>
 800826e:	4299      	cmp	r1, r3
 8008270:	d208      	bcs.n	8008284 <_sungetc_r+0x60>
 8008272:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008276:	42a9      	cmp	r1, r5
 8008278:	d104      	bne.n	8008284 <_sungetc_r+0x60>
 800827a:	3b01      	subs	r3, #1
 800827c:	3201      	adds	r2, #1
 800827e:	6023      	str	r3, [r4, #0]
 8008280:	6062      	str	r2, [r4, #4]
 8008282:	e7d5      	b.n	8008230 <_sungetc_r+0xc>
 8008284:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008288:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800828c:	6363      	str	r3, [r4, #52]	; 0x34
 800828e:	2303      	movs	r3, #3
 8008290:	63a3      	str	r3, [r4, #56]	; 0x38
 8008292:	4623      	mov	r3, r4
 8008294:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008298:	6023      	str	r3, [r4, #0]
 800829a:	2301      	movs	r3, #1
 800829c:	e7dc      	b.n	8008258 <_sungetc_r+0x34>

0800829e <__ssrefill_r>:
 800829e:	b510      	push	{r4, lr}
 80082a0:	460c      	mov	r4, r1
 80082a2:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80082a4:	b169      	cbz	r1, 80082c2 <__ssrefill_r+0x24>
 80082a6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80082aa:	4299      	cmp	r1, r3
 80082ac:	d001      	beq.n	80082b2 <__ssrefill_r+0x14>
 80082ae:	f000 fe0d 	bl	8008ecc <_free_r>
 80082b2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80082b4:	6063      	str	r3, [r4, #4]
 80082b6:	2000      	movs	r0, #0
 80082b8:	6360      	str	r0, [r4, #52]	; 0x34
 80082ba:	b113      	cbz	r3, 80082c2 <__ssrefill_r+0x24>
 80082bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80082be:	6023      	str	r3, [r4, #0]
 80082c0:	bd10      	pop	{r4, pc}
 80082c2:	6923      	ldr	r3, [r4, #16]
 80082c4:	6023      	str	r3, [r4, #0]
 80082c6:	2300      	movs	r3, #0
 80082c8:	6063      	str	r3, [r4, #4]
 80082ca:	89a3      	ldrh	r3, [r4, #12]
 80082cc:	f043 0320 	orr.w	r3, r3, #32
 80082d0:	81a3      	strh	r3, [r4, #12]
 80082d2:	f04f 30ff 	mov.w	r0, #4294967295
 80082d6:	e7f3      	b.n	80082c0 <__ssrefill_r+0x22>

080082d8 <__ssvfiscanf_r>:
 80082d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082dc:	460c      	mov	r4, r1
 80082de:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 80082e2:	2100      	movs	r1, #0
 80082e4:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80082e8:	49b2      	ldr	r1, [pc, #712]	; (80085b4 <__ssvfiscanf_r+0x2dc>)
 80082ea:	91a0      	str	r1, [sp, #640]	; 0x280
 80082ec:	f10d 0804 	add.w	r8, sp, #4
 80082f0:	49b1      	ldr	r1, [pc, #708]	; (80085b8 <__ssvfiscanf_r+0x2e0>)
 80082f2:	4fb2      	ldr	r7, [pc, #712]	; (80085bc <__ssvfiscanf_r+0x2e4>)
 80082f4:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 80085c0 <__ssvfiscanf_r+0x2e8>
 80082f8:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80082fc:	4606      	mov	r6, r0
 80082fe:	91a1      	str	r1, [sp, #644]	; 0x284
 8008300:	9300      	str	r3, [sp, #0]
 8008302:	f892 a000 	ldrb.w	sl, [r2]
 8008306:	f1ba 0f00 	cmp.w	sl, #0
 800830a:	f000 8151 	beq.w	80085b0 <__ssvfiscanf_r+0x2d8>
 800830e:	f81a 3007 	ldrb.w	r3, [sl, r7]
 8008312:	f013 0308 	ands.w	r3, r3, #8
 8008316:	f102 0501 	add.w	r5, r2, #1
 800831a:	d019      	beq.n	8008350 <__ssvfiscanf_r+0x78>
 800831c:	6863      	ldr	r3, [r4, #4]
 800831e:	2b00      	cmp	r3, #0
 8008320:	dd0f      	ble.n	8008342 <__ssvfiscanf_r+0x6a>
 8008322:	6823      	ldr	r3, [r4, #0]
 8008324:	781a      	ldrb	r2, [r3, #0]
 8008326:	5cba      	ldrb	r2, [r7, r2]
 8008328:	0712      	lsls	r2, r2, #28
 800832a:	d401      	bmi.n	8008330 <__ssvfiscanf_r+0x58>
 800832c:	462a      	mov	r2, r5
 800832e:	e7e8      	b.n	8008302 <__ssvfiscanf_r+0x2a>
 8008330:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008332:	3201      	adds	r2, #1
 8008334:	9245      	str	r2, [sp, #276]	; 0x114
 8008336:	6862      	ldr	r2, [r4, #4]
 8008338:	3301      	adds	r3, #1
 800833a:	3a01      	subs	r2, #1
 800833c:	6062      	str	r2, [r4, #4]
 800833e:	6023      	str	r3, [r4, #0]
 8008340:	e7ec      	b.n	800831c <__ssvfiscanf_r+0x44>
 8008342:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008344:	4621      	mov	r1, r4
 8008346:	4630      	mov	r0, r6
 8008348:	4798      	blx	r3
 800834a:	2800      	cmp	r0, #0
 800834c:	d0e9      	beq.n	8008322 <__ssvfiscanf_r+0x4a>
 800834e:	e7ed      	b.n	800832c <__ssvfiscanf_r+0x54>
 8008350:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 8008354:	f040 8083 	bne.w	800845e <__ssvfiscanf_r+0x186>
 8008358:	9341      	str	r3, [sp, #260]	; 0x104
 800835a:	9343      	str	r3, [sp, #268]	; 0x10c
 800835c:	7853      	ldrb	r3, [r2, #1]
 800835e:	2b2a      	cmp	r3, #42	; 0x2a
 8008360:	bf02      	ittt	eq
 8008362:	2310      	moveq	r3, #16
 8008364:	1c95      	addeq	r5, r2, #2
 8008366:	9341      	streq	r3, [sp, #260]	; 0x104
 8008368:	220a      	movs	r2, #10
 800836a:	46ab      	mov	fp, r5
 800836c:	f81b 1b01 	ldrb.w	r1, [fp], #1
 8008370:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8008374:	2b09      	cmp	r3, #9
 8008376:	d91d      	bls.n	80083b4 <__ssvfiscanf_r+0xdc>
 8008378:	4891      	ldr	r0, [pc, #580]	; (80085c0 <__ssvfiscanf_r+0x2e8>)
 800837a:	2203      	movs	r2, #3
 800837c:	f7f7 ff68 	bl	8000250 <memchr>
 8008380:	b140      	cbz	r0, 8008394 <__ssvfiscanf_r+0xbc>
 8008382:	2301      	movs	r3, #1
 8008384:	eba0 0009 	sub.w	r0, r0, r9
 8008388:	fa03 f000 	lsl.w	r0, r3, r0
 800838c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800838e:	4318      	orrs	r0, r3
 8008390:	9041      	str	r0, [sp, #260]	; 0x104
 8008392:	465d      	mov	r5, fp
 8008394:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008398:	2b78      	cmp	r3, #120	; 0x78
 800839a:	d806      	bhi.n	80083aa <__ssvfiscanf_r+0xd2>
 800839c:	2b57      	cmp	r3, #87	; 0x57
 800839e:	d810      	bhi.n	80083c2 <__ssvfiscanf_r+0xea>
 80083a0:	2b25      	cmp	r3, #37	; 0x25
 80083a2:	d05c      	beq.n	800845e <__ssvfiscanf_r+0x186>
 80083a4:	d856      	bhi.n	8008454 <__ssvfiscanf_r+0x17c>
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d074      	beq.n	8008494 <__ssvfiscanf_r+0x1bc>
 80083aa:	2303      	movs	r3, #3
 80083ac:	9347      	str	r3, [sp, #284]	; 0x11c
 80083ae:	230a      	movs	r3, #10
 80083b0:	9342      	str	r3, [sp, #264]	; 0x108
 80083b2:	e081      	b.n	80084b8 <__ssvfiscanf_r+0x1e0>
 80083b4:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80083b6:	fb02 1303 	mla	r3, r2, r3, r1
 80083ba:	3b30      	subs	r3, #48	; 0x30
 80083bc:	9343      	str	r3, [sp, #268]	; 0x10c
 80083be:	465d      	mov	r5, fp
 80083c0:	e7d3      	b.n	800836a <__ssvfiscanf_r+0x92>
 80083c2:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80083c6:	2a20      	cmp	r2, #32
 80083c8:	d8ef      	bhi.n	80083aa <__ssvfiscanf_r+0xd2>
 80083ca:	a101      	add	r1, pc, #4	; (adr r1, 80083d0 <__ssvfiscanf_r+0xf8>)
 80083cc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80083d0:	080084a3 	.word	0x080084a3
 80083d4:	080083ab 	.word	0x080083ab
 80083d8:	080083ab 	.word	0x080083ab
 80083dc:	08008501 	.word	0x08008501
 80083e0:	080083ab 	.word	0x080083ab
 80083e4:	080083ab 	.word	0x080083ab
 80083e8:	080083ab 	.word	0x080083ab
 80083ec:	080083ab 	.word	0x080083ab
 80083f0:	080083ab 	.word	0x080083ab
 80083f4:	080083ab 	.word	0x080083ab
 80083f8:	080083ab 	.word	0x080083ab
 80083fc:	08008517 	.word	0x08008517
 8008400:	080084ed 	.word	0x080084ed
 8008404:	0800845b 	.word	0x0800845b
 8008408:	0800845b 	.word	0x0800845b
 800840c:	0800845b 	.word	0x0800845b
 8008410:	080083ab 	.word	0x080083ab
 8008414:	080084f1 	.word	0x080084f1
 8008418:	080083ab 	.word	0x080083ab
 800841c:	080083ab 	.word	0x080083ab
 8008420:	080083ab 	.word	0x080083ab
 8008424:	080083ab 	.word	0x080083ab
 8008428:	08008527 	.word	0x08008527
 800842c:	080084f9 	.word	0x080084f9
 8008430:	0800849b 	.word	0x0800849b
 8008434:	080083ab 	.word	0x080083ab
 8008438:	080083ab 	.word	0x080083ab
 800843c:	08008523 	.word	0x08008523
 8008440:	080083ab 	.word	0x080083ab
 8008444:	080084ed 	.word	0x080084ed
 8008448:	080083ab 	.word	0x080083ab
 800844c:	080083ab 	.word	0x080083ab
 8008450:	080084a3 	.word	0x080084a3
 8008454:	3b45      	subs	r3, #69	; 0x45
 8008456:	2b02      	cmp	r3, #2
 8008458:	d8a7      	bhi.n	80083aa <__ssvfiscanf_r+0xd2>
 800845a:	2305      	movs	r3, #5
 800845c:	e02b      	b.n	80084b6 <__ssvfiscanf_r+0x1de>
 800845e:	6863      	ldr	r3, [r4, #4]
 8008460:	2b00      	cmp	r3, #0
 8008462:	dd0d      	ble.n	8008480 <__ssvfiscanf_r+0x1a8>
 8008464:	6823      	ldr	r3, [r4, #0]
 8008466:	781a      	ldrb	r2, [r3, #0]
 8008468:	4552      	cmp	r2, sl
 800846a:	f040 80a1 	bne.w	80085b0 <__ssvfiscanf_r+0x2d8>
 800846e:	3301      	adds	r3, #1
 8008470:	6862      	ldr	r2, [r4, #4]
 8008472:	6023      	str	r3, [r4, #0]
 8008474:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8008476:	3a01      	subs	r2, #1
 8008478:	3301      	adds	r3, #1
 800847a:	6062      	str	r2, [r4, #4]
 800847c:	9345      	str	r3, [sp, #276]	; 0x114
 800847e:	e755      	b.n	800832c <__ssvfiscanf_r+0x54>
 8008480:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008482:	4621      	mov	r1, r4
 8008484:	4630      	mov	r0, r6
 8008486:	4798      	blx	r3
 8008488:	2800      	cmp	r0, #0
 800848a:	d0eb      	beq.n	8008464 <__ssvfiscanf_r+0x18c>
 800848c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800848e:	2800      	cmp	r0, #0
 8008490:	f040 8084 	bne.w	800859c <__ssvfiscanf_r+0x2c4>
 8008494:	f04f 30ff 	mov.w	r0, #4294967295
 8008498:	e086      	b.n	80085a8 <__ssvfiscanf_r+0x2d0>
 800849a:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800849c:	f042 0220 	orr.w	r2, r2, #32
 80084a0:	9241      	str	r2, [sp, #260]	; 0x104
 80084a2:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80084a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80084a8:	9241      	str	r2, [sp, #260]	; 0x104
 80084aa:	2210      	movs	r2, #16
 80084ac:	2b6f      	cmp	r3, #111	; 0x6f
 80084ae:	9242      	str	r2, [sp, #264]	; 0x108
 80084b0:	bf34      	ite	cc
 80084b2:	2303      	movcc	r3, #3
 80084b4:	2304      	movcs	r3, #4
 80084b6:	9347      	str	r3, [sp, #284]	; 0x11c
 80084b8:	6863      	ldr	r3, [r4, #4]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	dd41      	ble.n	8008542 <__ssvfiscanf_r+0x26a>
 80084be:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80084c0:	0659      	lsls	r1, r3, #25
 80084c2:	d404      	bmi.n	80084ce <__ssvfiscanf_r+0x1f6>
 80084c4:	6823      	ldr	r3, [r4, #0]
 80084c6:	781a      	ldrb	r2, [r3, #0]
 80084c8:	5cba      	ldrb	r2, [r7, r2]
 80084ca:	0712      	lsls	r2, r2, #28
 80084cc:	d440      	bmi.n	8008550 <__ssvfiscanf_r+0x278>
 80084ce:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80084d0:	2b02      	cmp	r3, #2
 80084d2:	dc4f      	bgt.n	8008574 <__ssvfiscanf_r+0x29c>
 80084d4:	466b      	mov	r3, sp
 80084d6:	4622      	mov	r2, r4
 80084d8:	a941      	add	r1, sp, #260	; 0x104
 80084da:	4630      	mov	r0, r6
 80084dc:	f000 fa08 	bl	80088f0 <_scanf_chars>
 80084e0:	2801      	cmp	r0, #1
 80084e2:	d065      	beq.n	80085b0 <__ssvfiscanf_r+0x2d8>
 80084e4:	2802      	cmp	r0, #2
 80084e6:	f47f af21 	bne.w	800832c <__ssvfiscanf_r+0x54>
 80084ea:	e7cf      	b.n	800848c <__ssvfiscanf_r+0x1b4>
 80084ec:	220a      	movs	r2, #10
 80084ee:	e7dd      	b.n	80084ac <__ssvfiscanf_r+0x1d4>
 80084f0:	2300      	movs	r3, #0
 80084f2:	9342      	str	r3, [sp, #264]	; 0x108
 80084f4:	2303      	movs	r3, #3
 80084f6:	e7de      	b.n	80084b6 <__ssvfiscanf_r+0x1de>
 80084f8:	2308      	movs	r3, #8
 80084fa:	9342      	str	r3, [sp, #264]	; 0x108
 80084fc:	2304      	movs	r3, #4
 80084fe:	e7da      	b.n	80084b6 <__ssvfiscanf_r+0x1de>
 8008500:	4629      	mov	r1, r5
 8008502:	4640      	mov	r0, r8
 8008504:	f000 fb40 	bl	8008b88 <__sccl>
 8008508:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800850a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800850e:	9341      	str	r3, [sp, #260]	; 0x104
 8008510:	4605      	mov	r5, r0
 8008512:	2301      	movs	r3, #1
 8008514:	e7cf      	b.n	80084b6 <__ssvfiscanf_r+0x1de>
 8008516:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008518:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800851c:	9341      	str	r3, [sp, #260]	; 0x104
 800851e:	2300      	movs	r3, #0
 8008520:	e7c9      	b.n	80084b6 <__ssvfiscanf_r+0x1de>
 8008522:	2302      	movs	r3, #2
 8008524:	e7c7      	b.n	80084b6 <__ssvfiscanf_r+0x1de>
 8008526:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008528:	06c3      	lsls	r3, r0, #27
 800852a:	f53f aeff 	bmi.w	800832c <__ssvfiscanf_r+0x54>
 800852e:	9b00      	ldr	r3, [sp, #0]
 8008530:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008532:	1d19      	adds	r1, r3, #4
 8008534:	9100      	str	r1, [sp, #0]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	07c0      	lsls	r0, r0, #31
 800853a:	bf4c      	ite	mi
 800853c:	801a      	strhmi	r2, [r3, #0]
 800853e:	601a      	strpl	r2, [r3, #0]
 8008540:	e6f4      	b.n	800832c <__ssvfiscanf_r+0x54>
 8008542:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008544:	4621      	mov	r1, r4
 8008546:	4630      	mov	r0, r6
 8008548:	4798      	blx	r3
 800854a:	2800      	cmp	r0, #0
 800854c:	d0b7      	beq.n	80084be <__ssvfiscanf_r+0x1e6>
 800854e:	e79d      	b.n	800848c <__ssvfiscanf_r+0x1b4>
 8008550:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8008552:	3201      	adds	r2, #1
 8008554:	9245      	str	r2, [sp, #276]	; 0x114
 8008556:	6862      	ldr	r2, [r4, #4]
 8008558:	3a01      	subs	r2, #1
 800855a:	2a00      	cmp	r2, #0
 800855c:	6062      	str	r2, [r4, #4]
 800855e:	dd02      	ble.n	8008566 <__ssvfiscanf_r+0x28e>
 8008560:	3301      	adds	r3, #1
 8008562:	6023      	str	r3, [r4, #0]
 8008564:	e7ae      	b.n	80084c4 <__ssvfiscanf_r+0x1ec>
 8008566:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8008568:	4621      	mov	r1, r4
 800856a:	4630      	mov	r0, r6
 800856c:	4798      	blx	r3
 800856e:	2800      	cmp	r0, #0
 8008570:	d0a8      	beq.n	80084c4 <__ssvfiscanf_r+0x1ec>
 8008572:	e78b      	b.n	800848c <__ssvfiscanf_r+0x1b4>
 8008574:	2b04      	cmp	r3, #4
 8008576:	dc06      	bgt.n	8008586 <__ssvfiscanf_r+0x2ae>
 8008578:	466b      	mov	r3, sp
 800857a:	4622      	mov	r2, r4
 800857c:	a941      	add	r1, sp, #260	; 0x104
 800857e:	4630      	mov	r0, r6
 8008580:	f000 fa0e 	bl	80089a0 <_scanf_i>
 8008584:	e7ac      	b.n	80084e0 <__ssvfiscanf_r+0x208>
 8008586:	4b0f      	ldr	r3, [pc, #60]	; (80085c4 <__ssvfiscanf_r+0x2ec>)
 8008588:	2b00      	cmp	r3, #0
 800858a:	f43f aecf 	beq.w	800832c <__ssvfiscanf_r+0x54>
 800858e:	466b      	mov	r3, sp
 8008590:	4622      	mov	r2, r4
 8008592:	a941      	add	r1, sp, #260	; 0x104
 8008594:	4630      	mov	r0, r6
 8008596:	f3af 8000 	nop.w
 800859a:	e7a1      	b.n	80084e0 <__ssvfiscanf_r+0x208>
 800859c:	89a3      	ldrh	r3, [r4, #12]
 800859e:	f013 0f40 	tst.w	r3, #64	; 0x40
 80085a2:	bf18      	it	ne
 80085a4:	f04f 30ff 	movne.w	r0, #4294967295
 80085a8:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 80085ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085b0:	9844      	ldr	r0, [sp, #272]	; 0x110
 80085b2:	e7f9      	b.n	80085a8 <__ssvfiscanf_r+0x2d0>
 80085b4:	08008225 	.word	0x08008225
 80085b8:	0800829f 	.word	0x0800829f
 80085bc:	08009203 	.word	0x08009203
 80085c0:	080091ba 	.word	0x080091ba
 80085c4:	00000000 	.word	0x00000000

080085c8 <_printf_common>:
 80085c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80085cc:	4616      	mov	r6, r2
 80085ce:	4699      	mov	r9, r3
 80085d0:	688a      	ldr	r2, [r1, #8]
 80085d2:	690b      	ldr	r3, [r1, #16]
 80085d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80085d8:	4293      	cmp	r3, r2
 80085da:	bfb8      	it	lt
 80085dc:	4613      	movlt	r3, r2
 80085de:	6033      	str	r3, [r6, #0]
 80085e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80085e4:	4607      	mov	r7, r0
 80085e6:	460c      	mov	r4, r1
 80085e8:	b10a      	cbz	r2, 80085ee <_printf_common+0x26>
 80085ea:	3301      	adds	r3, #1
 80085ec:	6033      	str	r3, [r6, #0]
 80085ee:	6823      	ldr	r3, [r4, #0]
 80085f0:	0699      	lsls	r1, r3, #26
 80085f2:	bf42      	ittt	mi
 80085f4:	6833      	ldrmi	r3, [r6, #0]
 80085f6:	3302      	addmi	r3, #2
 80085f8:	6033      	strmi	r3, [r6, #0]
 80085fa:	6825      	ldr	r5, [r4, #0]
 80085fc:	f015 0506 	ands.w	r5, r5, #6
 8008600:	d106      	bne.n	8008610 <_printf_common+0x48>
 8008602:	f104 0a19 	add.w	sl, r4, #25
 8008606:	68e3      	ldr	r3, [r4, #12]
 8008608:	6832      	ldr	r2, [r6, #0]
 800860a:	1a9b      	subs	r3, r3, r2
 800860c:	42ab      	cmp	r3, r5
 800860e:	dc26      	bgt.n	800865e <_printf_common+0x96>
 8008610:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008614:	1e13      	subs	r3, r2, #0
 8008616:	6822      	ldr	r2, [r4, #0]
 8008618:	bf18      	it	ne
 800861a:	2301      	movne	r3, #1
 800861c:	0692      	lsls	r2, r2, #26
 800861e:	d42b      	bmi.n	8008678 <_printf_common+0xb0>
 8008620:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008624:	4649      	mov	r1, r9
 8008626:	4638      	mov	r0, r7
 8008628:	47c0      	blx	r8
 800862a:	3001      	adds	r0, #1
 800862c:	d01e      	beq.n	800866c <_printf_common+0xa4>
 800862e:	6823      	ldr	r3, [r4, #0]
 8008630:	68e5      	ldr	r5, [r4, #12]
 8008632:	6832      	ldr	r2, [r6, #0]
 8008634:	f003 0306 	and.w	r3, r3, #6
 8008638:	2b04      	cmp	r3, #4
 800863a:	bf08      	it	eq
 800863c:	1aad      	subeq	r5, r5, r2
 800863e:	68a3      	ldr	r3, [r4, #8]
 8008640:	6922      	ldr	r2, [r4, #16]
 8008642:	bf0c      	ite	eq
 8008644:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008648:	2500      	movne	r5, #0
 800864a:	4293      	cmp	r3, r2
 800864c:	bfc4      	itt	gt
 800864e:	1a9b      	subgt	r3, r3, r2
 8008650:	18ed      	addgt	r5, r5, r3
 8008652:	2600      	movs	r6, #0
 8008654:	341a      	adds	r4, #26
 8008656:	42b5      	cmp	r5, r6
 8008658:	d11a      	bne.n	8008690 <_printf_common+0xc8>
 800865a:	2000      	movs	r0, #0
 800865c:	e008      	b.n	8008670 <_printf_common+0xa8>
 800865e:	2301      	movs	r3, #1
 8008660:	4652      	mov	r2, sl
 8008662:	4649      	mov	r1, r9
 8008664:	4638      	mov	r0, r7
 8008666:	47c0      	blx	r8
 8008668:	3001      	adds	r0, #1
 800866a:	d103      	bne.n	8008674 <_printf_common+0xac>
 800866c:	f04f 30ff 	mov.w	r0, #4294967295
 8008670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008674:	3501      	adds	r5, #1
 8008676:	e7c6      	b.n	8008606 <_printf_common+0x3e>
 8008678:	18e1      	adds	r1, r4, r3
 800867a:	1c5a      	adds	r2, r3, #1
 800867c:	2030      	movs	r0, #48	; 0x30
 800867e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008682:	4422      	add	r2, r4
 8008684:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008688:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800868c:	3302      	adds	r3, #2
 800868e:	e7c7      	b.n	8008620 <_printf_common+0x58>
 8008690:	2301      	movs	r3, #1
 8008692:	4622      	mov	r2, r4
 8008694:	4649      	mov	r1, r9
 8008696:	4638      	mov	r0, r7
 8008698:	47c0      	blx	r8
 800869a:	3001      	adds	r0, #1
 800869c:	d0e6      	beq.n	800866c <_printf_common+0xa4>
 800869e:	3601      	adds	r6, #1
 80086a0:	e7d9      	b.n	8008656 <_printf_common+0x8e>
	...

080086a4 <_printf_i>:
 80086a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086a8:	460c      	mov	r4, r1
 80086aa:	4691      	mov	r9, r2
 80086ac:	7e27      	ldrb	r7, [r4, #24]
 80086ae:	990c      	ldr	r1, [sp, #48]	; 0x30
 80086b0:	2f78      	cmp	r7, #120	; 0x78
 80086b2:	4680      	mov	r8, r0
 80086b4:	469a      	mov	sl, r3
 80086b6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086ba:	d807      	bhi.n	80086cc <_printf_i+0x28>
 80086bc:	2f62      	cmp	r7, #98	; 0x62
 80086be:	d80a      	bhi.n	80086d6 <_printf_i+0x32>
 80086c0:	2f00      	cmp	r7, #0
 80086c2:	f000 80d8 	beq.w	8008876 <_printf_i+0x1d2>
 80086c6:	2f58      	cmp	r7, #88	; 0x58
 80086c8:	f000 80a3 	beq.w	8008812 <_printf_i+0x16e>
 80086cc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80086d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80086d4:	e03a      	b.n	800874c <_printf_i+0xa8>
 80086d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80086da:	2b15      	cmp	r3, #21
 80086dc:	d8f6      	bhi.n	80086cc <_printf_i+0x28>
 80086de:	a001      	add	r0, pc, #4	; (adr r0, 80086e4 <_printf_i+0x40>)
 80086e0:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80086e4:	0800873d 	.word	0x0800873d
 80086e8:	08008751 	.word	0x08008751
 80086ec:	080086cd 	.word	0x080086cd
 80086f0:	080086cd 	.word	0x080086cd
 80086f4:	080086cd 	.word	0x080086cd
 80086f8:	080086cd 	.word	0x080086cd
 80086fc:	08008751 	.word	0x08008751
 8008700:	080086cd 	.word	0x080086cd
 8008704:	080086cd 	.word	0x080086cd
 8008708:	080086cd 	.word	0x080086cd
 800870c:	080086cd 	.word	0x080086cd
 8008710:	0800885d 	.word	0x0800885d
 8008714:	08008781 	.word	0x08008781
 8008718:	0800883f 	.word	0x0800883f
 800871c:	080086cd 	.word	0x080086cd
 8008720:	080086cd 	.word	0x080086cd
 8008724:	0800887f 	.word	0x0800887f
 8008728:	080086cd 	.word	0x080086cd
 800872c:	08008781 	.word	0x08008781
 8008730:	080086cd 	.word	0x080086cd
 8008734:	080086cd 	.word	0x080086cd
 8008738:	08008847 	.word	0x08008847
 800873c:	680b      	ldr	r3, [r1, #0]
 800873e:	1d1a      	adds	r2, r3, #4
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	600a      	str	r2, [r1, #0]
 8008744:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008748:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800874c:	2301      	movs	r3, #1
 800874e:	e0a3      	b.n	8008898 <_printf_i+0x1f4>
 8008750:	6825      	ldr	r5, [r4, #0]
 8008752:	6808      	ldr	r0, [r1, #0]
 8008754:	062e      	lsls	r6, r5, #24
 8008756:	f100 0304 	add.w	r3, r0, #4
 800875a:	d50a      	bpl.n	8008772 <_printf_i+0xce>
 800875c:	6805      	ldr	r5, [r0, #0]
 800875e:	600b      	str	r3, [r1, #0]
 8008760:	2d00      	cmp	r5, #0
 8008762:	da03      	bge.n	800876c <_printf_i+0xc8>
 8008764:	232d      	movs	r3, #45	; 0x2d
 8008766:	426d      	negs	r5, r5
 8008768:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800876c:	485e      	ldr	r0, [pc, #376]	; (80088e8 <_printf_i+0x244>)
 800876e:	230a      	movs	r3, #10
 8008770:	e019      	b.n	80087a6 <_printf_i+0x102>
 8008772:	f015 0f40 	tst.w	r5, #64	; 0x40
 8008776:	6805      	ldr	r5, [r0, #0]
 8008778:	600b      	str	r3, [r1, #0]
 800877a:	bf18      	it	ne
 800877c:	b22d      	sxthne	r5, r5
 800877e:	e7ef      	b.n	8008760 <_printf_i+0xbc>
 8008780:	680b      	ldr	r3, [r1, #0]
 8008782:	6825      	ldr	r5, [r4, #0]
 8008784:	1d18      	adds	r0, r3, #4
 8008786:	6008      	str	r0, [r1, #0]
 8008788:	0628      	lsls	r0, r5, #24
 800878a:	d501      	bpl.n	8008790 <_printf_i+0xec>
 800878c:	681d      	ldr	r5, [r3, #0]
 800878e:	e002      	b.n	8008796 <_printf_i+0xf2>
 8008790:	0669      	lsls	r1, r5, #25
 8008792:	d5fb      	bpl.n	800878c <_printf_i+0xe8>
 8008794:	881d      	ldrh	r5, [r3, #0]
 8008796:	4854      	ldr	r0, [pc, #336]	; (80088e8 <_printf_i+0x244>)
 8008798:	2f6f      	cmp	r7, #111	; 0x6f
 800879a:	bf0c      	ite	eq
 800879c:	2308      	moveq	r3, #8
 800879e:	230a      	movne	r3, #10
 80087a0:	2100      	movs	r1, #0
 80087a2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80087a6:	6866      	ldr	r6, [r4, #4]
 80087a8:	60a6      	str	r6, [r4, #8]
 80087aa:	2e00      	cmp	r6, #0
 80087ac:	bfa2      	ittt	ge
 80087ae:	6821      	ldrge	r1, [r4, #0]
 80087b0:	f021 0104 	bicge.w	r1, r1, #4
 80087b4:	6021      	strge	r1, [r4, #0]
 80087b6:	b90d      	cbnz	r5, 80087bc <_printf_i+0x118>
 80087b8:	2e00      	cmp	r6, #0
 80087ba:	d04d      	beq.n	8008858 <_printf_i+0x1b4>
 80087bc:	4616      	mov	r6, r2
 80087be:	fbb5 f1f3 	udiv	r1, r5, r3
 80087c2:	fb03 5711 	mls	r7, r3, r1, r5
 80087c6:	5dc7      	ldrb	r7, [r0, r7]
 80087c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80087cc:	462f      	mov	r7, r5
 80087ce:	42bb      	cmp	r3, r7
 80087d0:	460d      	mov	r5, r1
 80087d2:	d9f4      	bls.n	80087be <_printf_i+0x11a>
 80087d4:	2b08      	cmp	r3, #8
 80087d6:	d10b      	bne.n	80087f0 <_printf_i+0x14c>
 80087d8:	6823      	ldr	r3, [r4, #0]
 80087da:	07df      	lsls	r7, r3, #31
 80087dc:	d508      	bpl.n	80087f0 <_printf_i+0x14c>
 80087de:	6923      	ldr	r3, [r4, #16]
 80087e0:	6861      	ldr	r1, [r4, #4]
 80087e2:	4299      	cmp	r1, r3
 80087e4:	bfde      	ittt	le
 80087e6:	2330      	movle	r3, #48	; 0x30
 80087e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80087ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80087f0:	1b92      	subs	r2, r2, r6
 80087f2:	6122      	str	r2, [r4, #16]
 80087f4:	f8cd a000 	str.w	sl, [sp]
 80087f8:	464b      	mov	r3, r9
 80087fa:	aa03      	add	r2, sp, #12
 80087fc:	4621      	mov	r1, r4
 80087fe:	4640      	mov	r0, r8
 8008800:	f7ff fee2 	bl	80085c8 <_printf_common>
 8008804:	3001      	adds	r0, #1
 8008806:	d14c      	bne.n	80088a2 <_printf_i+0x1fe>
 8008808:	f04f 30ff 	mov.w	r0, #4294967295
 800880c:	b004      	add	sp, #16
 800880e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008812:	4835      	ldr	r0, [pc, #212]	; (80088e8 <_printf_i+0x244>)
 8008814:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008818:	6823      	ldr	r3, [r4, #0]
 800881a:	680e      	ldr	r6, [r1, #0]
 800881c:	061f      	lsls	r7, r3, #24
 800881e:	f856 5b04 	ldr.w	r5, [r6], #4
 8008822:	600e      	str	r6, [r1, #0]
 8008824:	d514      	bpl.n	8008850 <_printf_i+0x1ac>
 8008826:	07d9      	lsls	r1, r3, #31
 8008828:	bf44      	itt	mi
 800882a:	f043 0320 	orrmi.w	r3, r3, #32
 800882e:	6023      	strmi	r3, [r4, #0]
 8008830:	b91d      	cbnz	r5, 800883a <_printf_i+0x196>
 8008832:	6823      	ldr	r3, [r4, #0]
 8008834:	f023 0320 	bic.w	r3, r3, #32
 8008838:	6023      	str	r3, [r4, #0]
 800883a:	2310      	movs	r3, #16
 800883c:	e7b0      	b.n	80087a0 <_printf_i+0xfc>
 800883e:	6823      	ldr	r3, [r4, #0]
 8008840:	f043 0320 	orr.w	r3, r3, #32
 8008844:	6023      	str	r3, [r4, #0]
 8008846:	2378      	movs	r3, #120	; 0x78
 8008848:	4828      	ldr	r0, [pc, #160]	; (80088ec <_printf_i+0x248>)
 800884a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800884e:	e7e3      	b.n	8008818 <_printf_i+0x174>
 8008850:	065e      	lsls	r6, r3, #25
 8008852:	bf48      	it	mi
 8008854:	b2ad      	uxthmi	r5, r5
 8008856:	e7e6      	b.n	8008826 <_printf_i+0x182>
 8008858:	4616      	mov	r6, r2
 800885a:	e7bb      	b.n	80087d4 <_printf_i+0x130>
 800885c:	680b      	ldr	r3, [r1, #0]
 800885e:	6826      	ldr	r6, [r4, #0]
 8008860:	6960      	ldr	r0, [r4, #20]
 8008862:	1d1d      	adds	r5, r3, #4
 8008864:	600d      	str	r5, [r1, #0]
 8008866:	0635      	lsls	r5, r6, #24
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	d501      	bpl.n	8008870 <_printf_i+0x1cc>
 800886c:	6018      	str	r0, [r3, #0]
 800886e:	e002      	b.n	8008876 <_printf_i+0x1d2>
 8008870:	0671      	lsls	r1, r6, #25
 8008872:	d5fb      	bpl.n	800886c <_printf_i+0x1c8>
 8008874:	8018      	strh	r0, [r3, #0]
 8008876:	2300      	movs	r3, #0
 8008878:	6123      	str	r3, [r4, #16]
 800887a:	4616      	mov	r6, r2
 800887c:	e7ba      	b.n	80087f4 <_printf_i+0x150>
 800887e:	680b      	ldr	r3, [r1, #0]
 8008880:	1d1a      	adds	r2, r3, #4
 8008882:	600a      	str	r2, [r1, #0]
 8008884:	681e      	ldr	r6, [r3, #0]
 8008886:	6862      	ldr	r2, [r4, #4]
 8008888:	2100      	movs	r1, #0
 800888a:	4630      	mov	r0, r6
 800888c:	f7f7 fce0 	bl	8000250 <memchr>
 8008890:	b108      	cbz	r0, 8008896 <_printf_i+0x1f2>
 8008892:	1b80      	subs	r0, r0, r6
 8008894:	6060      	str	r0, [r4, #4]
 8008896:	6863      	ldr	r3, [r4, #4]
 8008898:	6123      	str	r3, [r4, #16]
 800889a:	2300      	movs	r3, #0
 800889c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088a0:	e7a8      	b.n	80087f4 <_printf_i+0x150>
 80088a2:	6923      	ldr	r3, [r4, #16]
 80088a4:	4632      	mov	r2, r6
 80088a6:	4649      	mov	r1, r9
 80088a8:	4640      	mov	r0, r8
 80088aa:	47d0      	blx	sl
 80088ac:	3001      	adds	r0, #1
 80088ae:	d0ab      	beq.n	8008808 <_printf_i+0x164>
 80088b0:	6823      	ldr	r3, [r4, #0]
 80088b2:	079b      	lsls	r3, r3, #30
 80088b4:	d413      	bmi.n	80088de <_printf_i+0x23a>
 80088b6:	68e0      	ldr	r0, [r4, #12]
 80088b8:	9b03      	ldr	r3, [sp, #12]
 80088ba:	4298      	cmp	r0, r3
 80088bc:	bfb8      	it	lt
 80088be:	4618      	movlt	r0, r3
 80088c0:	e7a4      	b.n	800880c <_printf_i+0x168>
 80088c2:	2301      	movs	r3, #1
 80088c4:	4632      	mov	r2, r6
 80088c6:	4649      	mov	r1, r9
 80088c8:	4640      	mov	r0, r8
 80088ca:	47d0      	blx	sl
 80088cc:	3001      	adds	r0, #1
 80088ce:	d09b      	beq.n	8008808 <_printf_i+0x164>
 80088d0:	3501      	adds	r5, #1
 80088d2:	68e3      	ldr	r3, [r4, #12]
 80088d4:	9903      	ldr	r1, [sp, #12]
 80088d6:	1a5b      	subs	r3, r3, r1
 80088d8:	42ab      	cmp	r3, r5
 80088da:	dcf2      	bgt.n	80088c2 <_printf_i+0x21e>
 80088dc:	e7eb      	b.n	80088b6 <_printf_i+0x212>
 80088de:	2500      	movs	r5, #0
 80088e0:	f104 0619 	add.w	r6, r4, #25
 80088e4:	e7f5      	b.n	80088d2 <_printf_i+0x22e>
 80088e6:	bf00      	nop
 80088e8:	080091c5 	.word	0x080091c5
 80088ec:	080091d6 	.word	0x080091d6

080088f0 <_scanf_chars>:
 80088f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80088f4:	4615      	mov	r5, r2
 80088f6:	688a      	ldr	r2, [r1, #8]
 80088f8:	4680      	mov	r8, r0
 80088fa:	460c      	mov	r4, r1
 80088fc:	b932      	cbnz	r2, 800890c <_scanf_chars+0x1c>
 80088fe:	698a      	ldr	r2, [r1, #24]
 8008900:	2a00      	cmp	r2, #0
 8008902:	bf0c      	ite	eq
 8008904:	2201      	moveq	r2, #1
 8008906:	f04f 32ff 	movne.w	r2, #4294967295
 800890a:	608a      	str	r2, [r1, #8]
 800890c:	6822      	ldr	r2, [r4, #0]
 800890e:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800899c <_scanf_chars+0xac>
 8008912:	06d1      	lsls	r1, r2, #27
 8008914:	bf5f      	itttt	pl
 8008916:	681a      	ldrpl	r2, [r3, #0]
 8008918:	1d11      	addpl	r1, r2, #4
 800891a:	6019      	strpl	r1, [r3, #0]
 800891c:	6816      	ldrpl	r6, [r2, #0]
 800891e:	2700      	movs	r7, #0
 8008920:	69a0      	ldr	r0, [r4, #24]
 8008922:	b188      	cbz	r0, 8008948 <_scanf_chars+0x58>
 8008924:	2801      	cmp	r0, #1
 8008926:	d107      	bne.n	8008938 <_scanf_chars+0x48>
 8008928:	682b      	ldr	r3, [r5, #0]
 800892a:	781a      	ldrb	r2, [r3, #0]
 800892c:	6963      	ldr	r3, [r4, #20]
 800892e:	5c9b      	ldrb	r3, [r3, r2]
 8008930:	b953      	cbnz	r3, 8008948 <_scanf_chars+0x58>
 8008932:	bb27      	cbnz	r7, 800897e <_scanf_chars+0x8e>
 8008934:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008938:	2802      	cmp	r0, #2
 800893a:	d120      	bne.n	800897e <_scanf_chars+0x8e>
 800893c:	682b      	ldr	r3, [r5, #0]
 800893e:	781b      	ldrb	r3, [r3, #0]
 8008940:	f813 3009 	ldrb.w	r3, [r3, r9]
 8008944:	071b      	lsls	r3, r3, #28
 8008946:	d41a      	bmi.n	800897e <_scanf_chars+0x8e>
 8008948:	6823      	ldr	r3, [r4, #0]
 800894a:	06da      	lsls	r2, r3, #27
 800894c:	bf5e      	ittt	pl
 800894e:	682b      	ldrpl	r3, [r5, #0]
 8008950:	781b      	ldrbpl	r3, [r3, #0]
 8008952:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008956:	682a      	ldr	r2, [r5, #0]
 8008958:	686b      	ldr	r3, [r5, #4]
 800895a:	3201      	adds	r2, #1
 800895c:	602a      	str	r2, [r5, #0]
 800895e:	68a2      	ldr	r2, [r4, #8]
 8008960:	3b01      	subs	r3, #1
 8008962:	3a01      	subs	r2, #1
 8008964:	606b      	str	r3, [r5, #4]
 8008966:	3701      	adds	r7, #1
 8008968:	60a2      	str	r2, [r4, #8]
 800896a:	b142      	cbz	r2, 800897e <_scanf_chars+0x8e>
 800896c:	2b00      	cmp	r3, #0
 800896e:	dcd7      	bgt.n	8008920 <_scanf_chars+0x30>
 8008970:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008974:	4629      	mov	r1, r5
 8008976:	4640      	mov	r0, r8
 8008978:	4798      	blx	r3
 800897a:	2800      	cmp	r0, #0
 800897c:	d0d0      	beq.n	8008920 <_scanf_chars+0x30>
 800897e:	6823      	ldr	r3, [r4, #0]
 8008980:	f013 0310 	ands.w	r3, r3, #16
 8008984:	d105      	bne.n	8008992 <_scanf_chars+0xa2>
 8008986:	68e2      	ldr	r2, [r4, #12]
 8008988:	3201      	adds	r2, #1
 800898a:	60e2      	str	r2, [r4, #12]
 800898c:	69a2      	ldr	r2, [r4, #24]
 800898e:	b102      	cbz	r2, 8008992 <_scanf_chars+0xa2>
 8008990:	7033      	strb	r3, [r6, #0]
 8008992:	6923      	ldr	r3, [r4, #16]
 8008994:	441f      	add	r7, r3
 8008996:	6127      	str	r7, [r4, #16]
 8008998:	2000      	movs	r0, #0
 800899a:	e7cb      	b.n	8008934 <_scanf_chars+0x44>
 800899c:	08009203 	.word	0x08009203

080089a0 <_scanf_i>:
 80089a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089a4:	4698      	mov	r8, r3
 80089a6:	4b74      	ldr	r3, [pc, #464]	; (8008b78 <_scanf_i+0x1d8>)
 80089a8:	460c      	mov	r4, r1
 80089aa:	4682      	mov	sl, r0
 80089ac:	4616      	mov	r6, r2
 80089ae:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80089b2:	b087      	sub	sp, #28
 80089b4:	ab03      	add	r3, sp, #12
 80089b6:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 80089ba:	4b70      	ldr	r3, [pc, #448]	; (8008b7c <_scanf_i+0x1dc>)
 80089bc:	69a1      	ldr	r1, [r4, #24]
 80089be:	4a70      	ldr	r2, [pc, #448]	; (8008b80 <_scanf_i+0x1e0>)
 80089c0:	2903      	cmp	r1, #3
 80089c2:	bf18      	it	ne
 80089c4:	461a      	movne	r2, r3
 80089c6:	68a3      	ldr	r3, [r4, #8]
 80089c8:	9201      	str	r2, [sp, #4]
 80089ca:	1e5a      	subs	r2, r3, #1
 80089cc:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80089d0:	bf88      	it	hi
 80089d2:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80089d6:	4627      	mov	r7, r4
 80089d8:	bf82      	ittt	hi
 80089da:	eb03 0905 	addhi.w	r9, r3, r5
 80089de:	f240 135d 	movwhi	r3, #349	; 0x15d
 80089e2:	60a3      	strhi	r3, [r4, #8]
 80089e4:	f857 3b1c 	ldr.w	r3, [r7], #28
 80089e8:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80089ec:	bf98      	it	ls
 80089ee:	f04f 0900 	movls.w	r9, #0
 80089f2:	6023      	str	r3, [r4, #0]
 80089f4:	463d      	mov	r5, r7
 80089f6:	f04f 0b00 	mov.w	fp, #0
 80089fa:	6831      	ldr	r1, [r6, #0]
 80089fc:	ab03      	add	r3, sp, #12
 80089fe:	7809      	ldrb	r1, [r1, #0]
 8008a00:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008a04:	2202      	movs	r2, #2
 8008a06:	f7f7 fc23 	bl	8000250 <memchr>
 8008a0a:	b328      	cbz	r0, 8008a58 <_scanf_i+0xb8>
 8008a0c:	f1bb 0f01 	cmp.w	fp, #1
 8008a10:	d159      	bne.n	8008ac6 <_scanf_i+0x126>
 8008a12:	6862      	ldr	r2, [r4, #4]
 8008a14:	b92a      	cbnz	r2, 8008a22 <_scanf_i+0x82>
 8008a16:	6822      	ldr	r2, [r4, #0]
 8008a18:	2308      	movs	r3, #8
 8008a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008a1e:	6063      	str	r3, [r4, #4]
 8008a20:	6022      	str	r2, [r4, #0]
 8008a22:	6822      	ldr	r2, [r4, #0]
 8008a24:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008a28:	6022      	str	r2, [r4, #0]
 8008a2a:	68a2      	ldr	r2, [r4, #8]
 8008a2c:	1e51      	subs	r1, r2, #1
 8008a2e:	60a1      	str	r1, [r4, #8]
 8008a30:	b192      	cbz	r2, 8008a58 <_scanf_i+0xb8>
 8008a32:	6832      	ldr	r2, [r6, #0]
 8008a34:	1c51      	adds	r1, r2, #1
 8008a36:	6031      	str	r1, [r6, #0]
 8008a38:	7812      	ldrb	r2, [r2, #0]
 8008a3a:	f805 2b01 	strb.w	r2, [r5], #1
 8008a3e:	6872      	ldr	r2, [r6, #4]
 8008a40:	3a01      	subs	r2, #1
 8008a42:	2a00      	cmp	r2, #0
 8008a44:	6072      	str	r2, [r6, #4]
 8008a46:	dc07      	bgt.n	8008a58 <_scanf_i+0xb8>
 8008a48:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8008a4c:	4631      	mov	r1, r6
 8008a4e:	4650      	mov	r0, sl
 8008a50:	4790      	blx	r2
 8008a52:	2800      	cmp	r0, #0
 8008a54:	f040 8085 	bne.w	8008b62 <_scanf_i+0x1c2>
 8008a58:	f10b 0b01 	add.w	fp, fp, #1
 8008a5c:	f1bb 0f03 	cmp.w	fp, #3
 8008a60:	d1cb      	bne.n	80089fa <_scanf_i+0x5a>
 8008a62:	6863      	ldr	r3, [r4, #4]
 8008a64:	b90b      	cbnz	r3, 8008a6a <_scanf_i+0xca>
 8008a66:	230a      	movs	r3, #10
 8008a68:	6063      	str	r3, [r4, #4]
 8008a6a:	6863      	ldr	r3, [r4, #4]
 8008a6c:	4945      	ldr	r1, [pc, #276]	; (8008b84 <_scanf_i+0x1e4>)
 8008a6e:	6960      	ldr	r0, [r4, #20]
 8008a70:	1ac9      	subs	r1, r1, r3
 8008a72:	f000 f889 	bl	8008b88 <__sccl>
 8008a76:	f04f 0b00 	mov.w	fp, #0
 8008a7a:	68a3      	ldr	r3, [r4, #8]
 8008a7c:	6822      	ldr	r2, [r4, #0]
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d03d      	beq.n	8008afe <_scanf_i+0x15e>
 8008a82:	6831      	ldr	r1, [r6, #0]
 8008a84:	6960      	ldr	r0, [r4, #20]
 8008a86:	f891 c000 	ldrb.w	ip, [r1]
 8008a8a:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008a8e:	2800      	cmp	r0, #0
 8008a90:	d035      	beq.n	8008afe <_scanf_i+0x15e>
 8008a92:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008a96:	d124      	bne.n	8008ae2 <_scanf_i+0x142>
 8008a98:	0510      	lsls	r0, r2, #20
 8008a9a:	d522      	bpl.n	8008ae2 <_scanf_i+0x142>
 8008a9c:	f10b 0b01 	add.w	fp, fp, #1
 8008aa0:	f1b9 0f00 	cmp.w	r9, #0
 8008aa4:	d003      	beq.n	8008aae <_scanf_i+0x10e>
 8008aa6:	3301      	adds	r3, #1
 8008aa8:	f109 39ff 	add.w	r9, r9, #4294967295
 8008aac:	60a3      	str	r3, [r4, #8]
 8008aae:	6873      	ldr	r3, [r6, #4]
 8008ab0:	3b01      	subs	r3, #1
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	6073      	str	r3, [r6, #4]
 8008ab6:	dd1b      	ble.n	8008af0 <_scanf_i+0x150>
 8008ab8:	6833      	ldr	r3, [r6, #0]
 8008aba:	3301      	adds	r3, #1
 8008abc:	6033      	str	r3, [r6, #0]
 8008abe:	68a3      	ldr	r3, [r4, #8]
 8008ac0:	3b01      	subs	r3, #1
 8008ac2:	60a3      	str	r3, [r4, #8]
 8008ac4:	e7d9      	b.n	8008a7a <_scanf_i+0xda>
 8008ac6:	f1bb 0f02 	cmp.w	fp, #2
 8008aca:	d1ae      	bne.n	8008a2a <_scanf_i+0x8a>
 8008acc:	6822      	ldr	r2, [r4, #0]
 8008ace:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008ad2:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008ad6:	d1bf      	bne.n	8008a58 <_scanf_i+0xb8>
 8008ad8:	2310      	movs	r3, #16
 8008ada:	6063      	str	r3, [r4, #4]
 8008adc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ae0:	e7a2      	b.n	8008a28 <_scanf_i+0x88>
 8008ae2:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008ae6:	6022      	str	r2, [r4, #0]
 8008ae8:	780b      	ldrb	r3, [r1, #0]
 8008aea:	f805 3b01 	strb.w	r3, [r5], #1
 8008aee:	e7de      	b.n	8008aae <_scanf_i+0x10e>
 8008af0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008af4:	4631      	mov	r1, r6
 8008af6:	4650      	mov	r0, sl
 8008af8:	4798      	blx	r3
 8008afa:	2800      	cmp	r0, #0
 8008afc:	d0df      	beq.n	8008abe <_scanf_i+0x11e>
 8008afe:	6823      	ldr	r3, [r4, #0]
 8008b00:	05d9      	lsls	r1, r3, #23
 8008b02:	d50d      	bpl.n	8008b20 <_scanf_i+0x180>
 8008b04:	42bd      	cmp	r5, r7
 8008b06:	d909      	bls.n	8008b1c <_scanf_i+0x17c>
 8008b08:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008b0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008b10:	4632      	mov	r2, r6
 8008b12:	4650      	mov	r0, sl
 8008b14:	4798      	blx	r3
 8008b16:	f105 39ff 	add.w	r9, r5, #4294967295
 8008b1a:	464d      	mov	r5, r9
 8008b1c:	42bd      	cmp	r5, r7
 8008b1e:	d028      	beq.n	8008b72 <_scanf_i+0x1d2>
 8008b20:	6822      	ldr	r2, [r4, #0]
 8008b22:	f012 0210 	ands.w	r2, r2, #16
 8008b26:	d113      	bne.n	8008b50 <_scanf_i+0x1b0>
 8008b28:	702a      	strb	r2, [r5, #0]
 8008b2a:	6863      	ldr	r3, [r4, #4]
 8008b2c:	9e01      	ldr	r6, [sp, #4]
 8008b2e:	4639      	mov	r1, r7
 8008b30:	4650      	mov	r0, sl
 8008b32:	47b0      	blx	r6
 8008b34:	f8d8 3000 	ldr.w	r3, [r8]
 8008b38:	6821      	ldr	r1, [r4, #0]
 8008b3a:	1d1a      	adds	r2, r3, #4
 8008b3c:	f8c8 2000 	str.w	r2, [r8]
 8008b40:	f011 0f20 	tst.w	r1, #32
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	d00f      	beq.n	8008b68 <_scanf_i+0x1c8>
 8008b48:	6018      	str	r0, [r3, #0]
 8008b4a:	68e3      	ldr	r3, [r4, #12]
 8008b4c:	3301      	adds	r3, #1
 8008b4e:	60e3      	str	r3, [r4, #12]
 8008b50:	1bed      	subs	r5, r5, r7
 8008b52:	44ab      	add	fp, r5
 8008b54:	6925      	ldr	r5, [r4, #16]
 8008b56:	445d      	add	r5, fp
 8008b58:	6125      	str	r5, [r4, #16]
 8008b5a:	2000      	movs	r0, #0
 8008b5c:	b007      	add	sp, #28
 8008b5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b62:	f04f 0b00 	mov.w	fp, #0
 8008b66:	e7ca      	b.n	8008afe <_scanf_i+0x15e>
 8008b68:	07ca      	lsls	r2, r1, #31
 8008b6a:	bf4c      	ite	mi
 8008b6c:	8018      	strhmi	r0, [r3, #0]
 8008b6e:	6018      	strpl	r0, [r3, #0]
 8008b70:	e7eb      	b.n	8008b4a <_scanf_i+0x1aa>
 8008b72:	2001      	movs	r0, #1
 8008b74:	e7f2      	b.n	8008b5c <_scanf_i+0x1bc>
 8008b76:	bf00      	nop
 8008b78:	08009190 	.word	0x08009190
 8008b7c:	08008e01 	.word	0x08008e01
 8008b80:	08008d05 	.word	0x08008d05
 8008b84:	08009200 	.word	0x08009200

08008b88 <__sccl>:
 8008b88:	b570      	push	{r4, r5, r6, lr}
 8008b8a:	780b      	ldrb	r3, [r1, #0]
 8008b8c:	4604      	mov	r4, r0
 8008b8e:	2b5e      	cmp	r3, #94	; 0x5e
 8008b90:	bf0b      	itete	eq
 8008b92:	784b      	ldrbeq	r3, [r1, #1]
 8008b94:	1c48      	addne	r0, r1, #1
 8008b96:	1c88      	addeq	r0, r1, #2
 8008b98:	2200      	movne	r2, #0
 8008b9a:	bf08      	it	eq
 8008b9c:	2201      	moveq	r2, #1
 8008b9e:	1e61      	subs	r1, r4, #1
 8008ba0:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008ba4:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008ba8:	42a9      	cmp	r1, r5
 8008baa:	d1fb      	bne.n	8008ba4 <__sccl+0x1c>
 8008bac:	b90b      	cbnz	r3, 8008bb2 <__sccl+0x2a>
 8008bae:	3801      	subs	r0, #1
 8008bb0:	bd70      	pop	{r4, r5, r6, pc}
 8008bb2:	f082 0101 	eor.w	r1, r2, #1
 8008bb6:	54e1      	strb	r1, [r4, r3]
 8008bb8:	1c42      	adds	r2, r0, #1
 8008bba:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 8008bbe:	2d2d      	cmp	r5, #45	; 0x2d
 8008bc0:	f102 36ff 	add.w	r6, r2, #4294967295
 8008bc4:	4610      	mov	r0, r2
 8008bc6:	d006      	beq.n	8008bd6 <__sccl+0x4e>
 8008bc8:	2d5d      	cmp	r5, #93	; 0x5d
 8008bca:	d0f1      	beq.n	8008bb0 <__sccl+0x28>
 8008bcc:	b90d      	cbnz	r5, 8008bd2 <__sccl+0x4a>
 8008bce:	4630      	mov	r0, r6
 8008bd0:	e7ee      	b.n	8008bb0 <__sccl+0x28>
 8008bd2:	462b      	mov	r3, r5
 8008bd4:	e7ef      	b.n	8008bb6 <__sccl+0x2e>
 8008bd6:	7816      	ldrb	r6, [r2, #0]
 8008bd8:	2e5d      	cmp	r6, #93	; 0x5d
 8008bda:	d0fa      	beq.n	8008bd2 <__sccl+0x4a>
 8008bdc:	42b3      	cmp	r3, r6
 8008bde:	dcf8      	bgt.n	8008bd2 <__sccl+0x4a>
 8008be0:	4618      	mov	r0, r3
 8008be2:	3001      	adds	r0, #1
 8008be4:	4286      	cmp	r6, r0
 8008be6:	5421      	strb	r1, [r4, r0]
 8008be8:	dcfb      	bgt.n	8008be2 <__sccl+0x5a>
 8008bea:	43d8      	mvns	r0, r3
 8008bec:	4430      	add	r0, r6
 8008bee:	1c5d      	adds	r5, r3, #1
 8008bf0:	42b3      	cmp	r3, r6
 8008bf2:	bfa8      	it	ge
 8008bf4:	2000      	movge	r0, #0
 8008bf6:	182b      	adds	r3, r5, r0
 8008bf8:	3202      	adds	r2, #2
 8008bfa:	e7de      	b.n	8008bba <__sccl+0x32>

08008bfc <_strtol_l.isra.0>:
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c02:	d001      	beq.n	8008c08 <_strtol_l.isra.0+0xc>
 8008c04:	2b24      	cmp	r3, #36	; 0x24
 8008c06:	d906      	bls.n	8008c16 <_strtol_l.isra.0+0x1a>
 8008c08:	f7ff f930 	bl	8007e6c <__errno>
 8008c0c:	2316      	movs	r3, #22
 8008c0e:	6003      	str	r3, [r0, #0]
 8008c10:	2000      	movs	r0, #0
 8008c12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c16:	4f3a      	ldr	r7, [pc, #232]	; (8008d00 <_strtol_l.isra.0+0x104>)
 8008c18:	468e      	mov	lr, r1
 8008c1a:	4676      	mov	r6, lr
 8008c1c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008c20:	5de5      	ldrb	r5, [r4, r7]
 8008c22:	f015 0508 	ands.w	r5, r5, #8
 8008c26:	d1f8      	bne.n	8008c1a <_strtol_l.isra.0+0x1e>
 8008c28:	2c2d      	cmp	r4, #45	; 0x2d
 8008c2a:	d134      	bne.n	8008c96 <_strtol_l.isra.0+0x9a>
 8008c2c:	f89e 4000 	ldrb.w	r4, [lr]
 8008c30:	f04f 0801 	mov.w	r8, #1
 8008c34:	f106 0e02 	add.w	lr, r6, #2
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d05c      	beq.n	8008cf6 <_strtol_l.isra.0+0xfa>
 8008c3c:	2b10      	cmp	r3, #16
 8008c3e:	d10c      	bne.n	8008c5a <_strtol_l.isra.0+0x5e>
 8008c40:	2c30      	cmp	r4, #48	; 0x30
 8008c42:	d10a      	bne.n	8008c5a <_strtol_l.isra.0+0x5e>
 8008c44:	f89e 4000 	ldrb.w	r4, [lr]
 8008c48:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008c4c:	2c58      	cmp	r4, #88	; 0x58
 8008c4e:	d14d      	bne.n	8008cec <_strtol_l.isra.0+0xf0>
 8008c50:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8008c54:	2310      	movs	r3, #16
 8008c56:	f10e 0e02 	add.w	lr, lr, #2
 8008c5a:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8008c5e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008c62:	2600      	movs	r6, #0
 8008c64:	fbbc f9f3 	udiv	r9, ip, r3
 8008c68:	4635      	mov	r5, r6
 8008c6a:	fb03 ca19 	mls	sl, r3, r9, ip
 8008c6e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8008c72:	2f09      	cmp	r7, #9
 8008c74:	d818      	bhi.n	8008ca8 <_strtol_l.isra.0+0xac>
 8008c76:	463c      	mov	r4, r7
 8008c78:	42a3      	cmp	r3, r4
 8008c7a:	dd24      	ble.n	8008cc6 <_strtol_l.isra.0+0xca>
 8008c7c:	2e00      	cmp	r6, #0
 8008c7e:	db1f      	blt.n	8008cc0 <_strtol_l.isra.0+0xc4>
 8008c80:	45a9      	cmp	r9, r5
 8008c82:	d31d      	bcc.n	8008cc0 <_strtol_l.isra.0+0xc4>
 8008c84:	d101      	bne.n	8008c8a <_strtol_l.isra.0+0x8e>
 8008c86:	45a2      	cmp	sl, r4
 8008c88:	db1a      	blt.n	8008cc0 <_strtol_l.isra.0+0xc4>
 8008c8a:	fb05 4503 	mla	r5, r5, r3, r4
 8008c8e:	2601      	movs	r6, #1
 8008c90:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8008c94:	e7eb      	b.n	8008c6e <_strtol_l.isra.0+0x72>
 8008c96:	2c2b      	cmp	r4, #43	; 0x2b
 8008c98:	bf08      	it	eq
 8008c9a:	f89e 4000 	ldrbeq.w	r4, [lr]
 8008c9e:	46a8      	mov	r8, r5
 8008ca0:	bf08      	it	eq
 8008ca2:	f106 0e02 	addeq.w	lr, r6, #2
 8008ca6:	e7c7      	b.n	8008c38 <_strtol_l.isra.0+0x3c>
 8008ca8:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8008cac:	2f19      	cmp	r7, #25
 8008cae:	d801      	bhi.n	8008cb4 <_strtol_l.isra.0+0xb8>
 8008cb0:	3c37      	subs	r4, #55	; 0x37
 8008cb2:	e7e1      	b.n	8008c78 <_strtol_l.isra.0+0x7c>
 8008cb4:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8008cb8:	2f19      	cmp	r7, #25
 8008cba:	d804      	bhi.n	8008cc6 <_strtol_l.isra.0+0xca>
 8008cbc:	3c57      	subs	r4, #87	; 0x57
 8008cbe:	e7db      	b.n	8008c78 <_strtol_l.isra.0+0x7c>
 8008cc0:	f04f 36ff 	mov.w	r6, #4294967295
 8008cc4:	e7e4      	b.n	8008c90 <_strtol_l.isra.0+0x94>
 8008cc6:	2e00      	cmp	r6, #0
 8008cc8:	da05      	bge.n	8008cd6 <_strtol_l.isra.0+0xda>
 8008cca:	2322      	movs	r3, #34	; 0x22
 8008ccc:	6003      	str	r3, [r0, #0]
 8008cce:	4665      	mov	r5, ip
 8008cd0:	b942      	cbnz	r2, 8008ce4 <_strtol_l.isra.0+0xe8>
 8008cd2:	4628      	mov	r0, r5
 8008cd4:	e79d      	b.n	8008c12 <_strtol_l.isra.0+0x16>
 8008cd6:	f1b8 0f00 	cmp.w	r8, #0
 8008cda:	d000      	beq.n	8008cde <_strtol_l.isra.0+0xe2>
 8008cdc:	426d      	negs	r5, r5
 8008cde:	2a00      	cmp	r2, #0
 8008ce0:	d0f7      	beq.n	8008cd2 <_strtol_l.isra.0+0xd6>
 8008ce2:	b10e      	cbz	r6, 8008ce8 <_strtol_l.isra.0+0xec>
 8008ce4:	f10e 31ff 	add.w	r1, lr, #4294967295
 8008ce8:	6011      	str	r1, [r2, #0]
 8008cea:	e7f2      	b.n	8008cd2 <_strtol_l.isra.0+0xd6>
 8008cec:	2430      	movs	r4, #48	; 0x30
 8008cee:	2b00      	cmp	r3, #0
 8008cf0:	d1b3      	bne.n	8008c5a <_strtol_l.isra.0+0x5e>
 8008cf2:	2308      	movs	r3, #8
 8008cf4:	e7b1      	b.n	8008c5a <_strtol_l.isra.0+0x5e>
 8008cf6:	2c30      	cmp	r4, #48	; 0x30
 8008cf8:	d0a4      	beq.n	8008c44 <_strtol_l.isra.0+0x48>
 8008cfa:	230a      	movs	r3, #10
 8008cfc:	e7ad      	b.n	8008c5a <_strtol_l.isra.0+0x5e>
 8008cfe:	bf00      	nop
 8008d00:	08009203 	.word	0x08009203

08008d04 <_strtol_r>:
 8008d04:	f7ff bf7a 	b.w	8008bfc <_strtol_l.isra.0>

08008d08 <_strtoul_l.isra.0>:
 8008d08:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008d0c:	4e3b      	ldr	r6, [pc, #236]	; (8008dfc <_strtoul_l.isra.0+0xf4>)
 8008d0e:	4686      	mov	lr, r0
 8008d10:	468c      	mov	ip, r1
 8008d12:	4660      	mov	r0, ip
 8008d14:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8008d18:	5da5      	ldrb	r5, [r4, r6]
 8008d1a:	f015 0508 	ands.w	r5, r5, #8
 8008d1e:	d1f8      	bne.n	8008d12 <_strtoul_l.isra.0+0xa>
 8008d20:	2c2d      	cmp	r4, #45	; 0x2d
 8008d22:	d134      	bne.n	8008d8e <_strtoul_l.isra.0+0x86>
 8008d24:	f89c 4000 	ldrb.w	r4, [ip]
 8008d28:	f04f 0801 	mov.w	r8, #1
 8008d2c:	f100 0c02 	add.w	ip, r0, #2
 8008d30:	2b00      	cmp	r3, #0
 8008d32:	d05e      	beq.n	8008df2 <_strtoul_l.isra.0+0xea>
 8008d34:	2b10      	cmp	r3, #16
 8008d36:	d10c      	bne.n	8008d52 <_strtoul_l.isra.0+0x4a>
 8008d38:	2c30      	cmp	r4, #48	; 0x30
 8008d3a:	d10a      	bne.n	8008d52 <_strtoul_l.isra.0+0x4a>
 8008d3c:	f89c 0000 	ldrb.w	r0, [ip]
 8008d40:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008d44:	2858      	cmp	r0, #88	; 0x58
 8008d46:	d14f      	bne.n	8008de8 <_strtoul_l.isra.0+0xe0>
 8008d48:	f89c 4001 	ldrb.w	r4, [ip, #1]
 8008d4c:	2310      	movs	r3, #16
 8008d4e:	f10c 0c02 	add.w	ip, ip, #2
 8008d52:	f04f 37ff 	mov.w	r7, #4294967295
 8008d56:	2500      	movs	r5, #0
 8008d58:	fbb7 f7f3 	udiv	r7, r7, r3
 8008d5c:	fb03 f907 	mul.w	r9, r3, r7
 8008d60:	ea6f 0909 	mvn.w	r9, r9
 8008d64:	4628      	mov	r0, r5
 8008d66:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 8008d6a:	2e09      	cmp	r6, #9
 8008d6c:	d818      	bhi.n	8008da0 <_strtoul_l.isra.0+0x98>
 8008d6e:	4634      	mov	r4, r6
 8008d70:	42a3      	cmp	r3, r4
 8008d72:	dd24      	ble.n	8008dbe <_strtoul_l.isra.0+0xb6>
 8008d74:	2d00      	cmp	r5, #0
 8008d76:	db1f      	blt.n	8008db8 <_strtoul_l.isra.0+0xb0>
 8008d78:	4287      	cmp	r7, r0
 8008d7a:	d31d      	bcc.n	8008db8 <_strtoul_l.isra.0+0xb0>
 8008d7c:	d101      	bne.n	8008d82 <_strtoul_l.isra.0+0x7a>
 8008d7e:	45a1      	cmp	r9, r4
 8008d80:	db1a      	blt.n	8008db8 <_strtoul_l.isra.0+0xb0>
 8008d82:	fb00 4003 	mla	r0, r0, r3, r4
 8008d86:	2501      	movs	r5, #1
 8008d88:	f81c 4b01 	ldrb.w	r4, [ip], #1
 8008d8c:	e7eb      	b.n	8008d66 <_strtoul_l.isra.0+0x5e>
 8008d8e:	2c2b      	cmp	r4, #43	; 0x2b
 8008d90:	bf08      	it	eq
 8008d92:	f89c 4000 	ldrbeq.w	r4, [ip]
 8008d96:	46a8      	mov	r8, r5
 8008d98:	bf08      	it	eq
 8008d9a:	f100 0c02 	addeq.w	ip, r0, #2
 8008d9e:	e7c7      	b.n	8008d30 <_strtoul_l.isra.0+0x28>
 8008da0:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 8008da4:	2e19      	cmp	r6, #25
 8008da6:	d801      	bhi.n	8008dac <_strtoul_l.isra.0+0xa4>
 8008da8:	3c37      	subs	r4, #55	; 0x37
 8008daa:	e7e1      	b.n	8008d70 <_strtoul_l.isra.0+0x68>
 8008dac:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 8008db0:	2e19      	cmp	r6, #25
 8008db2:	d804      	bhi.n	8008dbe <_strtoul_l.isra.0+0xb6>
 8008db4:	3c57      	subs	r4, #87	; 0x57
 8008db6:	e7db      	b.n	8008d70 <_strtoul_l.isra.0+0x68>
 8008db8:	f04f 35ff 	mov.w	r5, #4294967295
 8008dbc:	e7e4      	b.n	8008d88 <_strtoul_l.isra.0+0x80>
 8008dbe:	2d00      	cmp	r5, #0
 8008dc0:	da07      	bge.n	8008dd2 <_strtoul_l.isra.0+0xca>
 8008dc2:	2322      	movs	r3, #34	; 0x22
 8008dc4:	f8ce 3000 	str.w	r3, [lr]
 8008dc8:	f04f 30ff 	mov.w	r0, #4294967295
 8008dcc:	b942      	cbnz	r2, 8008de0 <_strtoul_l.isra.0+0xd8>
 8008dce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008dd2:	f1b8 0f00 	cmp.w	r8, #0
 8008dd6:	d000      	beq.n	8008dda <_strtoul_l.isra.0+0xd2>
 8008dd8:	4240      	negs	r0, r0
 8008dda:	2a00      	cmp	r2, #0
 8008ddc:	d0f7      	beq.n	8008dce <_strtoul_l.isra.0+0xc6>
 8008dde:	b10d      	cbz	r5, 8008de4 <_strtoul_l.isra.0+0xdc>
 8008de0:	f10c 31ff 	add.w	r1, ip, #4294967295
 8008de4:	6011      	str	r1, [r2, #0]
 8008de6:	e7f2      	b.n	8008dce <_strtoul_l.isra.0+0xc6>
 8008de8:	2430      	movs	r4, #48	; 0x30
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d1b1      	bne.n	8008d52 <_strtoul_l.isra.0+0x4a>
 8008dee:	2308      	movs	r3, #8
 8008df0:	e7af      	b.n	8008d52 <_strtoul_l.isra.0+0x4a>
 8008df2:	2c30      	cmp	r4, #48	; 0x30
 8008df4:	d0a2      	beq.n	8008d3c <_strtoul_l.isra.0+0x34>
 8008df6:	230a      	movs	r3, #10
 8008df8:	e7ab      	b.n	8008d52 <_strtoul_l.isra.0+0x4a>
 8008dfa:	bf00      	nop
 8008dfc:	08009203 	.word	0x08009203

08008e00 <_strtoul_r>:
 8008e00:	f7ff bf82 	b.w	8008d08 <_strtoul_l.isra.0>

08008e04 <__submore>:
 8008e04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e08:	460c      	mov	r4, r1
 8008e0a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008e0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008e10:	4299      	cmp	r1, r3
 8008e12:	d11d      	bne.n	8008e50 <__submore+0x4c>
 8008e14:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8008e18:	f000 f8a8 	bl	8008f6c <_malloc_r>
 8008e1c:	b918      	cbnz	r0, 8008e26 <__submore+0x22>
 8008e1e:	f04f 30ff 	mov.w	r0, #4294967295
 8008e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e2a:	63a3      	str	r3, [r4, #56]	; 0x38
 8008e2c:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008e30:	6360      	str	r0, [r4, #52]	; 0x34
 8008e32:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8008e36:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8008e3a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8008e3e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8008e42:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 8008e46:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8008e4a:	6020      	str	r0, [r4, #0]
 8008e4c:	2000      	movs	r0, #0
 8008e4e:	e7e8      	b.n	8008e22 <__submore+0x1e>
 8008e50:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8008e52:	0077      	lsls	r7, r6, #1
 8008e54:	463a      	mov	r2, r7
 8008e56:	f000 f8e3 	bl	8009020 <_realloc_r>
 8008e5a:	4605      	mov	r5, r0
 8008e5c:	2800      	cmp	r0, #0
 8008e5e:	d0de      	beq.n	8008e1e <__submore+0x1a>
 8008e60:	eb00 0806 	add.w	r8, r0, r6
 8008e64:	4601      	mov	r1, r0
 8008e66:	4632      	mov	r2, r6
 8008e68:	4640      	mov	r0, r8
 8008e6a:	f000 f807 	bl	8008e7c <memcpy>
 8008e6e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8008e72:	f8c4 8000 	str.w	r8, [r4]
 8008e76:	e7e9      	b.n	8008e4c <__submore+0x48>

08008e78 <__retarget_lock_acquire_recursive>:
 8008e78:	4770      	bx	lr

08008e7a <__retarget_lock_release_recursive>:
 8008e7a:	4770      	bx	lr

08008e7c <memcpy>:
 8008e7c:	440a      	add	r2, r1
 8008e7e:	4291      	cmp	r1, r2
 8008e80:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e84:	d100      	bne.n	8008e88 <memcpy+0xc>
 8008e86:	4770      	bx	lr
 8008e88:	b510      	push	{r4, lr}
 8008e8a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e8e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e92:	4291      	cmp	r1, r2
 8008e94:	d1f9      	bne.n	8008e8a <memcpy+0xe>
 8008e96:	bd10      	pop	{r4, pc}

08008e98 <memmove>:
 8008e98:	4288      	cmp	r0, r1
 8008e9a:	b510      	push	{r4, lr}
 8008e9c:	eb01 0402 	add.w	r4, r1, r2
 8008ea0:	d902      	bls.n	8008ea8 <memmove+0x10>
 8008ea2:	4284      	cmp	r4, r0
 8008ea4:	4623      	mov	r3, r4
 8008ea6:	d807      	bhi.n	8008eb8 <memmove+0x20>
 8008ea8:	1e43      	subs	r3, r0, #1
 8008eaa:	42a1      	cmp	r1, r4
 8008eac:	d008      	beq.n	8008ec0 <memmove+0x28>
 8008eae:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008eb2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008eb6:	e7f8      	b.n	8008eaa <memmove+0x12>
 8008eb8:	4402      	add	r2, r0
 8008eba:	4601      	mov	r1, r0
 8008ebc:	428a      	cmp	r2, r1
 8008ebe:	d100      	bne.n	8008ec2 <memmove+0x2a>
 8008ec0:	bd10      	pop	{r4, pc}
 8008ec2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008ec6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008eca:	e7f7      	b.n	8008ebc <memmove+0x24>

08008ecc <_free_r>:
 8008ecc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008ece:	2900      	cmp	r1, #0
 8008ed0:	d048      	beq.n	8008f64 <_free_r+0x98>
 8008ed2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008ed6:	9001      	str	r0, [sp, #4]
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	f1a1 0404 	sub.w	r4, r1, #4
 8008ede:	bfb8      	it	lt
 8008ee0:	18e4      	addlt	r4, r4, r3
 8008ee2:	f000 f8d3 	bl	800908c <__malloc_lock>
 8008ee6:	4a20      	ldr	r2, [pc, #128]	; (8008f68 <_free_r+0x9c>)
 8008ee8:	9801      	ldr	r0, [sp, #4]
 8008eea:	6813      	ldr	r3, [r2, #0]
 8008eec:	4615      	mov	r5, r2
 8008eee:	b933      	cbnz	r3, 8008efe <_free_r+0x32>
 8008ef0:	6063      	str	r3, [r4, #4]
 8008ef2:	6014      	str	r4, [r2, #0]
 8008ef4:	b003      	add	sp, #12
 8008ef6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008efa:	f000 b8cd 	b.w	8009098 <__malloc_unlock>
 8008efe:	42a3      	cmp	r3, r4
 8008f00:	d90b      	bls.n	8008f1a <_free_r+0x4e>
 8008f02:	6821      	ldr	r1, [r4, #0]
 8008f04:	1862      	adds	r2, r4, r1
 8008f06:	4293      	cmp	r3, r2
 8008f08:	bf04      	itt	eq
 8008f0a:	681a      	ldreq	r2, [r3, #0]
 8008f0c:	685b      	ldreq	r3, [r3, #4]
 8008f0e:	6063      	str	r3, [r4, #4]
 8008f10:	bf04      	itt	eq
 8008f12:	1852      	addeq	r2, r2, r1
 8008f14:	6022      	streq	r2, [r4, #0]
 8008f16:	602c      	str	r4, [r5, #0]
 8008f18:	e7ec      	b.n	8008ef4 <_free_r+0x28>
 8008f1a:	461a      	mov	r2, r3
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	b10b      	cbz	r3, 8008f24 <_free_r+0x58>
 8008f20:	42a3      	cmp	r3, r4
 8008f22:	d9fa      	bls.n	8008f1a <_free_r+0x4e>
 8008f24:	6811      	ldr	r1, [r2, #0]
 8008f26:	1855      	adds	r5, r2, r1
 8008f28:	42a5      	cmp	r5, r4
 8008f2a:	d10b      	bne.n	8008f44 <_free_r+0x78>
 8008f2c:	6824      	ldr	r4, [r4, #0]
 8008f2e:	4421      	add	r1, r4
 8008f30:	1854      	adds	r4, r2, r1
 8008f32:	42a3      	cmp	r3, r4
 8008f34:	6011      	str	r1, [r2, #0]
 8008f36:	d1dd      	bne.n	8008ef4 <_free_r+0x28>
 8008f38:	681c      	ldr	r4, [r3, #0]
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	6053      	str	r3, [r2, #4]
 8008f3e:	4421      	add	r1, r4
 8008f40:	6011      	str	r1, [r2, #0]
 8008f42:	e7d7      	b.n	8008ef4 <_free_r+0x28>
 8008f44:	d902      	bls.n	8008f4c <_free_r+0x80>
 8008f46:	230c      	movs	r3, #12
 8008f48:	6003      	str	r3, [r0, #0]
 8008f4a:	e7d3      	b.n	8008ef4 <_free_r+0x28>
 8008f4c:	6825      	ldr	r5, [r4, #0]
 8008f4e:	1961      	adds	r1, r4, r5
 8008f50:	428b      	cmp	r3, r1
 8008f52:	bf04      	itt	eq
 8008f54:	6819      	ldreq	r1, [r3, #0]
 8008f56:	685b      	ldreq	r3, [r3, #4]
 8008f58:	6063      	str	r3, [r4, #4]
 8008f5a:	bf04      	itt	eq
 8008f5c:	1949      	addeq	r1, r1, r5
 8008f5e:	6021      	streq	r1, [r4, #0]
 8008f60:	6054      	str	r4, [r2, #4]
 8008f62:	e7c7      	b.n	8008ef4 <_free_r+0x28>
 8008f64:	b003      	add	sp, #12
 8008f66:	bd30      	pop	{r4, r5, pc}
 8008f68:	20000138 	.word	0x20000138

08008f6c <_malloc_r>:
 8008f6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f6e:	1ccd      	adds	r5, r1, #3
 8008f70:	f025 0503 	bic.w	r5, r5, #3
 8008f74:	3508      	adds	r5, #8
 8008f76:	2d0c      	cmp	r5, #12
 8008f78:	bf38      	it	cc
 8008f7a:	250c      	movcc	r5, #12
 8008f7c:	2d00      	cmp	r5, #0
 8008f7e:	4606      	mov	r6, r0
 8008f80:	db01      	blt.n	8008f86 <_malloc_r+0x1a>
 8008f82:	42a9      	cmp	r1, r5
 8008f84:	d903      	bls.n	8008f8e <_malloc_r+0x22>
 8008f86:	230c      	movs	r3, #12
 8008f88:	6033      	str	r3, [r6, #0]
 8008f8a:	2000      	movs	r0, #0
 8008f8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f8e:	f000 f87d 	bl	800908c <__malloc_lock>
 8008f92:	4921      	ldr	r1, [pc, #132]	; (8009018 <_malloc_r+0xac>)
 8008f94:	680a      	ldr	r2, [r1, #0]
 8008f96:	4614      	mov	r4, r2
 8008f98:	b99c      	cbnz	r4, 8008fc2 <_malloc_r+0x56>
 8008f9a:	4f20      	ldr	r7, [pc, #128]	; (800901c <_malloc_r+0xb0>)
 8008f9c:	683b      	ldr	r3, [r7, #0]
 8008f9e:	b923      	cbnz	r3, 8008faa <_malloc_r+0x3e>
 8008fa0:	4621      	mov	r1, r4
 8008fa2:	4630      	mov	r0, r6
 8008fa4:	f000 f862 	bl	800906c <_sbrk_r>
 8008fa8:	6038      	str	r0, [r7, #0]
 8008faa:	4629      	mov	r1, r5
 8008fac:	4630      	mov	r0, r6
 8008fae:	f000 f85d 	bl	800906c <_sbrk_r>
 8008fb2:	1c43      	adds	r3, r0, #1
 8008fb4:	d123      	bne.n	8008ffe <_malloc_r+0x92>
 8008fb6:	230c      	movs	r3, #12
 8008fb8:	6033      	str	r3, [r6, #0]
 8008fba:	4630      	mov	r0, r6
 8008fbc:	f000 f86c 	bl	8009098 <__malloc_unlock>
 8008fc0:	e7e3      	b.n	8008f8a <_malloc_r+0x1e>
 8008fc2:	6823      	ldr	r3, [r4, #0]
 8008fc4:	1b5b      	subs	r3, r3, r5
 8008fc6:	d417      	bmi.n	8008ff8 <_malloc_r+0x8c>
 8008fc8:	2b0b      	cmp	r3, #11
 8008fca:	d903      	bls.n	8008fd4 <_malloc_r+0x68>
 8008fcc:	6023      	str	r3, [r4, #0]
 8008fce:	441c      	add	r4, r3
 8008fd0:	6025      	str	r5, [r4, #0]
 8008fd2:	e004      	b.n	8008fde <_malloc_r+0x72>
 8008fd4:	6863      	ldr	r3, [r4, #4]
 8008fd6:	42a2      	cmp	r2, r4
 8008fd8:	bf0c      	ite	eq
 8008fda:	600b      	streq	r3, [r1, #0]
 8008fdc:	6053      	strne	r3, [r2, #4]
 8008fde:	4630      	mov	r0, r6
 8008fe0:	f000 f85a 	bl	8009098 <__malloc_unlock>
 8008fe4:	f104 000b 	add.w	r0, r4, #11
 8008fe8:	1d23      	adds	r3, r4, #4
 8008fea:	f020 0007 	bic.w	r0, r0, #7
 8008fee:	1ac2      	subs	r2, r0, r3
 8008ff0:	d0cc      	beq.n	8008f8c <_malloc_r+0x20>
 8008ff2:	1a1b      	subs	r3, r3, r0
 8008ff4:	50a3      	str	r3, [r4, r2]
 8008ff6:	e7c9      	b.n	8008f8c <_malloc_r+0x20>
 8008ff8:	4622      	mov	r2, r4
 8008ffa:	6864      	ldr	r4, [r4, #4]
 8008ffc:	e7cc      	b.n	8008f98 <_malloc_r+0x2c>
 8008ffe:	1cc4      	adds	r4, r0, #3
 8009000:	f024 0403 	bic.w	r4, r4, #3
 8009004:	42a0      	cmp	r0, r4
 8009006:	d0e3      	beq.n	8008fd0 <_malloc_r+0x64>
 8009008:	1a21      	subs	r1, r4, r0
 800900a:	4630      	mov	r0, r6
 800900c:	f000 f82e 	bl	800906c <_sbrk_r>
 8009010:	3001      	adds	r0, #1
 8009012:	d1dd      	bne.n	8008fd0 <_malloc_r+0x64>
 8009014:	e7cf      	b.n	8008fb6 <_malloc_r+0x4a>
 8009016:	bf00      	nop
 8009018:	20000138 	.word	0x20000138
 800901c:	2000013c 	.word	0x2000013c

08009020 <_realloc_r>:
 8009020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009022:	4607      	mov	r7, r0
 8009024:	4614      	mov	r4, r2
 8009026:	460e      	mov	r6, r1
 8009028:	b921      	cbnz	r1, 8009034 <_realloc_r+0x14>
 800902a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800902e:	4611      	mov	r1, r2
 8009030:	f7ff bf9c 	b.w	8008f6c <_malloc_r>
 8009034:	b922      	cbnz	r2, 8009040 <_realloc_r+0x20>
 8009036:	f7ff ff49 	bl	8008ecc <_free_r>
 800903a:	4625      	mov	r5, r4
 800903c:	4628      	mov	r0, r5
 800903e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009040:	f000 f830 	bl	80090a4 <_malloc_usable_size_r>
 8009044:	42a0      	cmp	r0, r4
 8009046:	d20f      	bcs.n	8009068 <_realloc_r+0x48>
 8009048:	4621      	mov	r1, r4
 800904a:	4638      	mov	r0, r7
 800904c:	f7ff ff8e 	bl	8008f6c <_malloc_r>
 8009050:	4605      	mov	r5, r0
 8009052:	2800      	cmp	r0, #0
 8009054:	d0f2      	beq.n	800903c <_realloc_r+0x1c>
 8009056:	4631      	mov	r1, r6
 8009058:	4622      	mov	r2, r4
 800905a:	f7ff ff0f 	bl	8008e7c <memcpy>
 800905e:	4631      	mov	r1, r6
 8009060:	4638      	mov	r0, r7
 8009062:	f7ff ff33 	bl	8008ecc <_free_r>
 8009066:	e7e9      	b.n	800903c <_realloc_r+0x1c>
 8009068:	4635      	mov	r5, r6
 800906a:	e7e7      	b.n	800903c <_realloc_r+0x1c>

0800906c <_sbrk_r>:
 800906c:	b538      	push	{r3, r4, r5, lr}
 800906e:	4d06      	ldr	r5, [pc, #24]	; (8009088 <_sbrk_r+0x1c>)
 8009070:	2300      	movs	r3, #0
 8009072:	4604      	mov	r4, r0
 8009074:	4608      	mov	r0, r1
 8009076:	602b      	str	r3, [r5, #0]
 8009078:	f7f8 fb2e 	bl	80016d8 <_sbrk>
 800907c:	1c43      	adds	r3, r0, #1
 800907e:	d102      	bne.n	8009086 <_sbrk_r+0x1a>
 8009080:	682b      	ldr	r3, [r5, #0]
 8009082:	b103      	cbz	r3, 8009086 <_sbrk_r+0x1a>
 8009084:	6023      	str	r3, [r4, #0]
 8009086:	bd38      	pop	{r3, r4, r5, pc}
 8009088:	20000400 	.word	0x20000400

0800908c <__malloc_lock>:
 800908c:	4801      	ldr	r0, [pc, #4]	; (8009094 <__malloc_lock+0x8>)
 800908e:	f7ff bef3 	b.w	8008e78 <__retarget_lock_acquire_recursive>
 8009092:	bf00      	nop
 8009094:	20000408 	.word	0x20000408

08009098 <__malloc_unlock>:
 8009098:	4801      	ldr	r0, [pc, #4]	; (80090a0 <__malloc_unlock+0x8>)
 800909a:	f7ff beee 	b.w	8008e7a <__retarget_lock_release_recursive>
 800909e:	bf00      	nop
 80090a0:	20000408 	.word	0x20000408

080090a4 <_malloc_usable_size_r>:
 80090a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090a8:	1f18      	subs	r0, r3, #4
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	bfbc      	itt	lt
 80090ae:	580b      	ldrlt	r3, [r1, r0]
 80090b0:	18c0      	addlt	r0, r0, r3
 80090b2:	4770      	bx	lr

080090b4 <_init>:
 80090b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090b6:	bf00      	nop
 80090b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090ba:	bc08      	pop	{r3}
 80090bc:	469e      	mov	lr, r3
 80090be:	4770      	bx	lr

080090c0 <_fini>:
 80090c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090c2:	bf00      	nop
 80090c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090c6:	bc08      	pop	{r3}
 80090c8:	469e      	mov	lr, r3
 80090ca:	4770      	bx	lr
